#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 742)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'54,56,259,-134,49,272,50,-218,249,54,56,298,54,56,75,-132,-209,54,56',
'135,219,284,14,219,306,247,232,97,40,101,46,96,48,44,219,47,65,61,313',
'42,64,45,260,-134,62,13,61,-218,63,61,234,12,100,283,61,-132,-209,216',
'249,66,122,119,75,315,121,41,337,346,66,57,59,60,58,91,86,97,75,101',
'57,96,282,57,87,89,88,90,57,317,122,97,236,101,121,96,248,235,332,122',
'331,249,100,121,54,56,237,239,75,238,79,80,82,81,84,85,100,77,78,278',
'86,97,75,101,76,96,82,81,87,122,122,77,78,121,121,97,83,101,76,96,332',
'127,331,122,129,204,100,121,54,56,83,258,75,180,79,80,82,81,84,85,100',
'77,78,66,86,97,75,101,76,96,82,81,87,57,322,77,78,112,111,97,83,101',
'76,96,214,127,241,240,129,325,100,54,56,326,83,219,75,274,79,80,82,81',
'84,85,100,77,78,66,86,97,329,101,76,96,282,75,87,57,54,56,54,56,54,56',
'83,112,111,333,97,335,101,273,96,70,100,71,73,72,74,112,111,256,79,80',
'82,81,84,85,258,77,78,342,75,100,98,127,76,127,129,61,129,94,95,91,86',
'97,343,101,83,96,301,282,87,89,88,90,146,66,144,66,112,66,229,352,258',
'353,256,57,258,57,100,57,123,70,93,92,75,356,79,80,82,81,84,85,256,77',
'78,358,86,97,113,101,76,96,229,297,87,361,335,363,364,365,366,75,83',
'106,369,370,371,300,70,67,378,379,100,380,97,381,101,,96,,79,80,82,81',
'84,85,,77,78,,,,,,76,,,,,100,,,,75,,,83,79,80,82,81,84,85,,77,78,97',
',101,,96,76,,75,,,,,,,,,,83,,,97,,101,,96,100,,,,,,75,,79,80,82,81,84',
'85,,77,78,,,97,100,101,76,96,75,,,,79,80,82,81,,,83,77,78,97,,101,,96',
'76,,100,,,,,,,,,,83,,,,,77,78,,100,,,,76,,,,79,80,82,81,,,,77,78,,75',
',,,76,,,,,94,95,91,86,97,,101,83,96,,,87,89,88,90,,,,,,,,,,,,,,,100',
',,,93,92,,,79,80,82,81,84,85,,77,78,,75,,,,76,,,,,94,95,91,86,97,,101',
'83,96,,,87,89,88,90,,,,,,,,,,,,,,,100,,,,93,92,,,79,80,82,81,84,85,',
'77,78,,75,,,,76,250,,,,94,95,91,86,97,,101,83,96,,,87,89,88,90,,,,,',
',,,,,,,,,100,,,,93,92,,,79,80,82,81,84,85,,77,78,,75,,,,76,,,,,94,95',
'91,86,97,,101,83,96,,,87,89,88,90,,,,,,,,,,,,,,,100,,,,93,92,,,79,80',
'82,81,84,85,,77,78,,75,,,,76,,,,,94,95,91,86,97,,101,83,96,,,87,89,88',
'90,,,,,,,,,,,,,,,100,,,,93,92,,,79,80,82,81,84,85,,77,78,,75,,,,76,',
',,,94,95,91,86,97,254,101,83,96,,,87,89,88,90,,,,,,,,,,,,,,,100,,,,93',
'92,,,79,80,82,81,84,85,,77,78,,75,,,,76,,,,,94,95,91,86,97,,101,83,96',
',,87,89,88,90,,,,,,,,,,,,,,,100,,,,93,92,,,79,80,82,81,84,85,,77,78',
',75,,,,76,,,,,94,95,91,86,97,,101,83,96,,,87,89,88,90,,,,,,,,,,,,,,',
'100,,,,93,92,,,79,80,82,81,84,85,,77,78,,75,,,,76,,,,,94,95,91,86,97',
',101,83,96,,,87,89,88,90,,,,,,,,,,,,,,,100,,,,93,92,,,79,80,82,81,84',
'85,,77,78,,75,,,,76,,,,,94,95,91,86,97,,101,83,96,,,87,89,88,90,,,,',
',,,,,,,,,,100,,,,93,92,,,79,80,82,81,84,85,,77,78,,75,,,,76,,,,,94,95',
'91,86,97,,101,83,96,,,87,89,88,90,,,,,,,,,,,,,,,100,,,,93,92,,,79,80',
'82,81,84,85,,77,78,,75,,,,76,,,,,94,95,91,86,97,,101,83,96,,,87,89,88',
'90,,,,,,,,,,,,,,,100,,,,93,92,,,79,80,82,81,84,85,,77,78,,75,,,,76,',
',,,94,95,91,86,97,,101,83,96,,,87,89,88,90,,,,,,,,,,,,,,,100,,,,93,92',
',,79,80,82,81,84,85,,77,78,,75,,225,,76,,,,,94,95,91,86,97,,101,83,96',
',,87,89,88,90,,,,,,,,,,,,,,,100,,,,93,92,,,79,80,82,81,84,85,,77,78',
',75,,224,,76,,,,,94,95,91,86,97,,101,83,96,,,87,89,88,90,,,,,,,,,,,',
',,,100,,,,93,92,,,79,80,82,81,84,85,,77,78,,75,,223,,76,,,,,94,95,91',
'86,97,,101,83,96,,,87,89,88,90,,,,,,,,,,,,,,,100,,,,93,92,,,79,80,82',
'81,84,85,,77,78,,75,,222,,76,,,,,94,95,91,86,97,,101,83,96,,,87,89,88',
'90,,,,,,,,,,,,,,,100,,,,93,92,,,79,80,82,81,84,85,,77,78,,75,,,,76,',
',,,94,95,91,86,97,,101,83,96,,209,87,89,88,90,,,,,,,,,,,,,,,100,,,,93',
'92,,,79,80,82,81,84,85,,77,78,,75,,,,76,,,,,94,95,91,86,97,,101,83,96',
',,87,89,88,90,75,,,,,,,,,,,,,97,100,101,,96,93,92,75,,79,80,82,81,84',
'85,,77,78,91,86,97,75,101,76,96,100,,87,89,88,90,,,,97,83,101,,96,,77',
'78,,,,100,,76,,,92,,,79,80,82,81,84,85,100,77,78,54,56,,,49,76,50,,',
',,,77,78,,,,83,,76,,,14,,,,,,40,,46,,48,44,,47,65,61,,42,64,45,,,62',
'13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,103',
',47,65,61,,42,64,,,,62,13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57',
'59,60,,,40,,46,,48,103,,47,65,61,,42,64,,,,62,13,54,56,63,,49,12,50',
',,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,103,,47,65,61,,42,64,,,',
'62,13,54,56,63,,49,12,50,324,,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46',
',48,44,,47,65,61,,42,64,45,,,62,13,54,56,63,,49,12,50,,,,,,,66,,,,,',
'41,,,14,57,59,60,,,40,,46,,48,103,,47,65,61,,42,64,,,,62,13,54,56,63',
',49,12,50,,,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,103,,47,65,61',
',42,64,,,,62,13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59,60,,',
'40,,46,,48,103,,47,65,61,,42,64,,,,62,13,54,56,63,,49,12,50,,,,,,,66',
',,,,,41,,,14,57,59,60,,,40,,46,,48,103,,47,65,61,,42,64,,,,62,13,54',
'56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,103,,47',
'65,61,,42,64,,,,62,13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59',
'60,,,40,,46,,48,103,,47,65,61,,42,64,,,,62,13,54,56,63,,49,12,50,,,',
',,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,103,,47,65,61,,42,64,,,,62',
'13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,103',
',47,65,61,,42,64,,,,62,13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57',
'59,60,,,40,,46,,48,103,,47,65,61,,42,64,,,,62,13,54,56,63,,49,12,50',
',,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,103,,47,65,61,,42,64,,,',
'62,13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48',
'103,,47,65,61,,42,64,,,,62,13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,',
'14,57,59,60,,,40,,46,,48,103,,47,65,61,,42,64,,,,62,13,54,56,63,,49',
'12,50,,,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,103,,47,65,61,,42',
'64,,,,62,13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59,60,,,40,',
'46,,48,103,,47,65,61,,42,64,,,,62,13,54,56,63,,49,12,50,,,,,,,66,,,',
',,41,,,14,57,59,60,,,40,,46,,48,44,,47,65,61,,42,64,45,,,62,13,54,56',
'63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,103,,47,65',
'61,,42,64,,,,62,13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59,60',
',,40,,46,,48,103,,47,65,61,,42,64,,,,62,13,54,56,63,,49,12,50,,,,,,',
'66,,,,,,41,,,14,57,59,60,,,40,,46,,48,103,,47,65,61,,42,64,,,,62,13',
',,63,,,12,54,56,,,49,,50,66,,,,,,41,,,179,57,59,60,,,14,,,,,,40,,46',
',48,103,,47,65,61,,42,64,,,,62,13,54,56,63,,49,12,50,,,,,,,66,,,,,,41',
',,14,57,59,60,,,182,199,193,200,48,194,202,195,191,189,,184,197,,,,62',
'13,203,198,196,,,12,54,56,,,49,,50,66,,,,,201,183,,,,57,59,60,,,14,',
',,,,40,,46,,48,44,,47,65,61,,42,64,45,,,62,13,54,56,63,,49,12,50,,,',
',,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,103,,47,65,61,,42,64,,,,62',
'13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,103',
',47,65,61,,42,64,,,,62,13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57',
'59,60,,,40,,46,,48,103,,47,65,61,,42,64,,,,62,13,54,56,63,,49,12,50',
',,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,103,,47,65,61,,42,64,,,',
'62,13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48',
'103,,47,65,61,,42,64,,,,62,13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,',
'14,57,59,60,,,40,,46,,48,44,,47,65,61,,42,64,45,,,62,13,,,63,,,12,54',
'56,,,49,,50,66,,,,,,41,,,,57,59,60,,,14,211,,,,,40,,46,,48,103,,47,65',
'61,,42,64,,,,62,13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59,60',
',,40,,46,,48,103,,47,65,61,,42,64,,,,62,13,54,56,63,,49,12,50,,,,,,',
'66,,,,,,41,,,14,57,59,60,,,40,,46,,48,103,,47,65,61,,42,64,,,,62,13',
'54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,103,',
'47,65,61,,42,64,,,,62,13,,,63,,,12,54,56,,,49,,50,66,,,,,,41,,,,57,59',
'60,,,14,221,,,,,40,,46,,48,103,,47,65,61,,42,64,,,,62,13,54,56,63,,49',
'12,50,,,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,44,,47,65,61,,42,64',
'45,,,62,13,54,56,63,,49,12,50,338,,,,,,66,,,,,,41,,,14,57,59,60,,,40',
',46,,48,103,,47,65,61,,42,64,,,,62,13,54,56,63,,49,12,50,,,,,,,66,,',
',,,41,,,14,57,59,60,,,40,,46,,48,44,,47,65,61,,42,64,45,,,62,13,54,56',
'63,,49,12,50,349,,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,44,,47,65',
'61,,42,64,45,,,62,13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59',
'60,,,40,,46,,48,103,,47,65,61,,42,64,,,,62,13,,,63,,,12,54,56,,,49,305',
'50,66,,,,,,41,,,,57,59,60,,,14,,,,,,40,,46,,48,103,,47,65,61,,42,64',
',,,62,13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59,60,,,182,199',
'193,200,48,194,202,195,191,189,,184,197,,,,62,13,203,198,196,,,12,54',
'56,,,49,,50,66,,,,,201,183,,,,57,59,60,,,14,,,,,,40,,46,,48,103,,47',
'65,61,,42,64,,,,62,13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59',
'60,,,40,,46,,48,103,,47,65,61,,42,64,,,,62,13,54,56,63,,49,12,50,288',
',,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,44,,47,65,61,,42,64,45,,',
'62,13,54,56,63,,49,12,50,286,,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46',
',48,44,,47,65,61,,42,64,45,,,62,13,54,56,63,,49,12,50,280,,,,,,66,,',
',,,41,,,14,57,59,60,,,40,,46,,48,44,,47,65,61,,42,64,45,,,62,13,54,56',
'63,,49,12,50,351,,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,44,,47,65',
'61,,42,64,45,,,62,13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59',
'60,,,40,,46,,48,103,,47,65,61,,42,64,,,,62,13,54,56,63,,49,12,50,,,',
',,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,44,,47,65,61,,42,64,45,,,62',
'13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,103',
',47,65,61,,42,64,,,,62,13,,,63,,,12,54,56,,,49,133,50,66,,,,,,41,,,',
'57,59,60,,,14,,,,,,40,,46,,48,103,,47,65,61,,42,64,,,,62,13,54,56,63',
',49,12,50,,,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,103,,47,65,61',
',42,64,,,,62,13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59,60,,',
'40,,46,,48,103,,47,65,61,,42,64,,,,62,13,54,56,63,,49,12,50,,,,,,,66',
',,,,,41,,,14,57,59,60,,,40,,46,,48,103,,47,65,61,,42,64,,,,62,13,54',
'56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,103,,47',
'65,61,,42,64,,,,62,13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59',
'60,,,40,,46,,48,103,,47,65,61,,42,64,,,,62,13,54,56,63,,49,12,50,,,',
',,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,103,,47,65,61,,42,64,,,,62',
'13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,103',
',47,65,61,,42,64,,,,62,13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57',
'59,60,,,40,,46,,48,103,,47,65,61,,42,64,,,,62,13,54,56,63,,49,12,50',
',,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,103,,47,65,61,,42,64,,,',
'62,13,54,56,63,,49,12,50,368,,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46',
',48,44,,47,65,61,,42,64,45,,,62,13,54,56,63,,49,12,50,,,,,,,66,,,,,',
'41,,,14,57,59,60,,,40,,46,,48,103,,47,65,61,,42,64,,,,62,13,54,56,63',
',49,12,50,,,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,103,,47,65,61',
',42,64,,,,62,13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59,60,,',
'40,,46,,48,103,,47,65,61,,42,64,,,,62,13,54,56,63,,49,12,50,373,,,,',
',66,,,,,,41,,,14,57,59,60,,,40,,46,,48,44,,47,65,61,,42,64,45,,,62,13',
'54,56,63,,49,12,50,375,,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,44',
',47,65,61,,42,64,45,,,62,13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14',
'57,59,60,,,40,,46,,48,44,,47,65,61,68,42,64,45,,,62,13,54,56,63,,49',
'12,50,377,,,,,,66,,,,,,41,,,14,57,59,60,,,40,,46,,48,44,,47,65,61,,42',
'64,45,,,62,13,54,56,63,,49,12,50,,,,,,,66,,,,,,41,,,14,57,59,60,,,40',
',46,,48,103,,47,65,61,,42,64,,,,62,13,54,56,63,,49,12,50,,,,,,,66,,',
',,,41,,,14,57,59,60,,,40,,46,,48,103,,47,65,61,,42,64,,,,62,13,,,63',
',,12,,,,268,199,267,200,66,265,202,269,263,262,41,264,266,,57,59,60',
',203,198,270,268,199,267,200,,265,202,269,263,262,,264,266,,,201,271',
',203,198,270,268,199,267,200,,265,202,269,263,262,,264,266,,,201,271',
',203,198,270,,,,,,,,,,,,,,,,201,271' ]
        racc_action_table = arr = ::Array.new(5077, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,192,191,0,206,0,196,220,78,78,229,50,50,154,189,197,238,238,50,229',
'220,0,112,238,144,125,154,0,154,0,154,0,0,144,0,0,0,251,0,0,0,192,191',
'0,0,78,196,0,50,125,0,154,219,238,189,197,112,289,0,297,44,172,255,297',
'0,289,297,78,0,0,0,0,172,172,172,160,172,78,172,217,50,172,172,172,172',
'238,257,44,160,132,160,44,160,153,132,286,194,286,153,172,194,195,195',
'134,137,171,134,172,172,172,172,172,172,160,172,172,212,171,171,159',
'171,172,171,160,160,171,103,193,160,160,103,193,159,172,159,160,159',
'329,195,329,46,195,99,171,46,47,47,160,261,170,97,171,171,171,171,171',
'171,159,171,171,195,170,170,104,170,171,170,159,159,170,195,275,159',
'159,322,322,104,171,104,159,104,110,47,140,140,47,279,170,57,57,281',
'159,282,169,210,170,170,170,170,170,170,104,170,170,47,169,169,285,169',
'170,169,246,102,169,47,234,234,232,232,77,77,170,38,38,287,102,288,102',
'208,102,69,169,8,8,8,8,211,211,292,169,169,169,169,169,169,293,169,169',
'294,11,102,11,234,169,232,234,77,232,11,11,11,11,11,295,11,169,11,231',
'299,11,11,11,11,67,234,58,232,111,77,124,310,186,312,185,234,314,232',
'11,77,45,147,11,11,168,321,11,11,11,11,11,11,226,11,11,323,168,168,39',
'168,11,168,120,227,168,332,333,335,336,340,341,167,11,37,347,348,350',
'230,6,1,367,372,168,374,167,376,167,,167,,168,168,168,168,168,168,,168',
'168,,,,,,168,,,,,167,,,,166,,,168,167,167,167,167,167,167,,167,167,166',
',166,,166,167,,165,,,,,,,,,,167,,,165,,165,,165,166,,,,,,161,,166,166',
'166,166,166,166,,166,166,,,161,165,161,166,161,164,,,,165,165,165,165',
',,166,165,165,164,,164,,164,165,,161,,,,,,,,,,165,,,,,161,161,,164,',
',,161,,,,164,164,164,164,,,,164,164,,328,,,,164,,,,,328,328,328,328',
'328,,328,164,328,,,328,328,328,328,,,,,,,,,,,,,,,328,,,,328,328,,,328',
'328,328,328,328,328,,328,328,,175,,,,328,,,,,175,175,175,175,175,,175',
'328,175,,,175,175,175,175,,,,,,,,,,,,,,,175,,,,175,175,,,175,175,175',
'175,175,175,,175,175,,176,,,,175,176,,,,176,176,176,176,176,,176,175',
'176,,,176,176,176,176,,,,,,,,,,,,,,,176,,,,176,176,,,176,176,176,176',
'176,176,,176,176,,320,,,,176,,,,,320,320,320,320,320,,320,176,320,,',
'320,320,320,320,,,,,,,,,,,,,,,320,,,,320,320,,,320,320,320,320,320,320',
',320,320,,319,,,,320,,,,,319,319,319,319,319,,319,320,319,,,319,319',
'319,319,,,,,,,,,,,,,,,319,,,,319,319,,,319,319,319,319,319,319,,319',
'319,,181,,,,319,,,,,181,181,181,181,181,181,181,319,181,,,181,181,181',
'181,,,,,,,,,,,,,,,181,,,,181,181,,,181,181,181,181,181,181,,181,181',
',311,,,,181,,,,,311,311,311,311,311,,311,181,311,,,311,311,311,311,',
',,,,,,,,,,,,,311,,,,311,311,,,311,311,311,311,311,311,,311,311,,145',
',,,311,,,,,145,145,145,145,145,,145,311,145,,,145,145,145,145,,,,,,',
',,,,,,,,145,,,,145,145,,,145,145,145,145,145,145,,145,145,,308,,,,145',
',,,,308,308,308,308,308,,308,145,308,,,308,308,308,308,,,,,,,,,,,,,',
',308,,,,308,308,,,308,308,308,308,308,308,,308,308,,205,,,,308,,,,,205',
'205,205,205,205,,205,308,205,,,205,205,205,205,,,,,,,,,,,,,,,205,,,',
'205,205,,,205,205,205,205,205,205,,205,205,,304,,,,205,,,,,304,304,304',
'304,304,,304,205,304,,,304,304,304,304,,,,,,,,,,,,,,,304,,,,304,304',
',,304,304,304,304,304,304,,304,304,,138,,,,304,,,,,138,138,138,138,138',
',138,304,138,,,138,138,138,138,,,,,,,,,,,,,,,138,,,,138,138,,,138,138',
'138,138,138,138,,138,138,,131,,,,138,,,,,131,131,131,131,131,,131,138',
'131,,,131,131,131,131,,,,,,,,,,,,,,,131,,,,131,131,,,131,131,131,131',
'131,131,,131,131,,118,,118,,131,,,,,118,118,118,118,118,,118,131,118',
',,118,118,118,118,,,,,,,,,,,,,,,118,,,,118,118,,,118,118,118,118,118',
'118,,118,118,,117,,117,,118,,,,,117,117,117,117,117,,117,118,117,,,117',
'117,117,117,,,,,,,,,,,,,,,117,,,,117,117,,,117,117,117,117,117,117,',
'117,117,,116,,116,,117,,,,,116,116,116,116,116,,116,117,116,,,116,116',
'116,116,,,,,,,,,,,,,,,116,,,,116,116,,,116,116,116,116,116,116,,116',
'116,,114,,114,,116,,,,,114,114,114,114,114,,114,116,114,,,114,114,114',
'114,,,,,,,,,,,,,,,114,,,,114,114,,,114,114,114,114,114,114,,114,114',
',105,,,,114,,,,,105,105,105,105,105,,105,114,105,,105,105,105,105,105',
',,,,,,,,,,,,,,105,,,,105,105,,,105,105,105,105,105,105,,105,105,,174',
',,,105,,,,,174,174,174,174,174,,174,105,174,,,174,174,174,174,162,,',
',,,,,,,,,,162,174,162,,162,174,174,173,,174,174,174,174,174,174,,174',
'174,173,173,173,163,173,174,173,162,,173,173,173,173,,,,163,174,163',
',163,,162,162,,,,173,,162,,,173,,,173,173,173,173,173,173,163,173,173',
'74,74,,,74,173,74,,,,,,163,163,,,,173,,163,,,74,,,,,,74,,74,,74,74,',
'74,74,74,,74,74,74,,,74,74,75,75,74,,75,74,75,,,,,,,74,,,,,,74,,,75',
'74,74,74,,,75,,75,,75,75,,75,75,75,,75,75,,,,75,75,76,76,75,,76,75,76',
',,,,,,75,,,,,,75,,,76,75,75,75,,,76,,76,,76,76,,76,76,76,,76,76,,,,76',
'76,283,283,76,,283,76,283,,,,,,,76,,,,,,76,,,283,76,76,76,,,283,,283',
',283,283,,283,283,283,,283,283,,,,283,283,278,278,283,,278,283,278,278',
',,,,,283,,,,,,283,,,278,283,283,283,,,278,,278,,278,278,,278,278,278',
',278,278,278,,,278,278,79,79,278,,79,278,79,,,,,,,278,,,,,,278,,,79',
'278,278,278,,,79,,79,,79,79,,79,79,79,,79,79,,,,79,79,80,80,79,,80,79',
'80,,,,,,,79,,,,,,79,,,80,79,79,79,,,80,,80,,80,80,,80,80,80,,80,80,',
',,80,80,81,81,80,,81,80,81,,,,,,,80,,,,,,80,,,81,80,80,80,,,81,,81,',
'81,81,,81,81,81,,81,81,,,,81,81,82,82,81,,82,81,82,,,,,,,81,,,,,,81',
',,82,81,81,81,,,82,,82,,82,82,,82,82,82,,82,82,,,,82,82,83,83,82,,83',
'82,83,,,,,,,82,,,,,,82,,,83,82,82,82,,,83,,83,,83,83,,83,83,83,,83,83',
',,,83,83,84,84,83,,84,83,84,,,,,,,83,,,,,,83,,,84,83,83,83,,,84,,84',
',84,84,,84,84,84,,84,84,,,,84,84,85,85,84,,85,84,85,,,,,,,84,,,,,,84',
',,85,84,84,84,,,85,,85,,85,85,,85,85,85,,85,85,,,,85,85,86,86,85,,86',
'85,86,,,,,,,85,,,,,,85,,,86,85,85,85,,,86,,86,,86,86,,86,86,86,,86,86',
',,,86,86,87,87,86,,87,86,87,,,,,,,86,,,,,,86,,,87,86,86,86,,,87,,87',
',87,87,,87,87,87,,87,87,,,,87,87,88,88,87,,88,87,88,,,,,,,87,,,,,,87',
',,88,87,87,87,,,88,,88,,88,88,,88,88,88,,88,88,,,,88,88,89,89,88,,89',
'88,89,,,,,,,88,,,,,,88,,,89,88,88,88,,,89,,89,,89,89,,89,89,89,,89,89',
',,,89,89,90,90,89,,90,89,90,,,,,,,89,,,,,,89,,,90,89,89,89,,,90,,90',
',90,90,,90,90,90,,90,90,,,,90,90,91,91,90,,91,90,91,,,,,,,90,,,,,,90',
',,91,90,90,90,,,91,,91,,91,91,,91,91,91,,91,91,,,,91,91,92,92,91,,92',
'91,92,,,,,,,91,,,,,,91,,,92,91,91,91,,,92,,92,,92,92,,92,92,92,,92,92',
',,,92,92,73,73,92,,73,92,73,,,,,,,92,,,,,,92,,,73,92,92,92,,,73,,73',
',73,73,,73,73,73,,73,73,73,,,73,73,94,94,73,,94,73,94,,,,,,,73,,,,,',
'73,,,94,73,73,73,,,94,,94,,94,94,,94,94,94,,94,94,,,,94,94,95,95,94',
',95,94,95,,,,,,,94,,,,,,94,,,95,94,94,94,,,95,,95,,95,95,,95,95,95,',
'95,95,,,,95,95,96,96,95,,96,95,96,,,,,,,95,,,,,,95,,,96,95,95,95,,,96',
',96,,96,96,,96,96,96,,96,96,,,,96,96,,,96,,,96,274,274,,,274,,274,96',
',,,,,96,,,96,96,96,96,,,274,,,,,,274,,274,,274,274,,274,274,274,,274',
'274,,,,274,274,98,98,274,,98,274,98,,,,,,,274,,,,,,274,,,98,274,274',
'274,,,98,98,98,98,98,98,98,98,98,98,,98,98,,,,98,98,98,98,98,,,98,72',
'72,,,72,,72,98,,,,,98,98,,,,98,98,98,,,72,,,,,,72,,72,,72,72,,72,72',
'72,,72,72,72,,,72,72,100,100,72,,100,72,100,,,,,,,72,,,,,,72,,,100,72',
'72,72,,,100,,100,,100,100,,100,100,100,,100,100,,,,100,100,101,101,100',
',101,100,101,,,,,,,100,,,,,,100,,,101,100,100,100,,,101,,101,,101,101',
',101,101,101,,101,101,,,,101,101,259,259,101,,259,101,259,,,,,,,101',
',,,,,101,,,259,101,101,101,,,259,,259,,259,259,,259,259,259,,259,259',
',,,259,259,256,256,259,,256,259,256,,,,,,,259,,,,,,259,,,256,259,259',
'259,,,256,,256,,256,256,,256,256,256,,256,256,,,,256,256,250,250,256',
',250,256,250,,,,,,,256,,,,,,256,,,250,256,256,256,,,250,,250,,250,250',
',250,250,250,,250,250,,,,250,250,71,71,250,,71,250,71,,,,,,,250,,,,',
',250,,,71,250,250,250,,,71,,71,,71,71,,71,71,71,,71,71,71,,,71,71,,',
'71,,,71,106,106,,,106,,106,71,,,,,,71,,,,71,71,71,,,106,106,,,,,106',
',106,,106,106,,106,106,106,,106,106,,,,106,106,249,249,106,,249,106',
'249,,,,,,,106,,,,,,106,,,249,106,106,106,,,249,,249,,249,249,,249,249',
'249,,249,249,,,,249,249,244,244,249,,244,249,244,,,,,,,249,,,,,,249',
',,244,249,249,249,,,244,,244,,244,244,,244,244,244,,244,244,,,,244,244',
'239,239,244,,239,244,239,,,,,,,244,,,,,,244,,,239,244,244,244,,,239',
',239,,239,239,,239,239,239,,239,239,,,,239,239,,,239,,,239,113,113,',
',113,,113,239,,,,,,239,,,,239,239,239,,,113,113,,,,,113,,113,,113,113',
',113,113,113,,113,113,,,,113,113,70,70,113,,70,113,70,,,,,,,113,,,,',
',113,,,70,113,113,113,,,70,,70,,70,70,,70,70,70,,70,70,70,,,70,70,290',
'290,70,,290,70,290,290,,,,,,70,,,,,,70,,,290,70,70,70,,,290,,290,,290',
'290,,290,290,290,,290,290,,,,290,290,68,68,290,,68,290,68,,,,,,,290',
',,,,,290,,,68,290,290,290,,,68,,68,,68,68,,68,68,68,,68,68,68,,,68,68',
'300,300,68,,300,68,300,300,,,,,,68,,,,,,68,,,300,68,68,68,,,300,,300',
',300,300,,300,300,300,,300,300,300,,,300,300,119,119,300,,119,300,119',
',,,,,,300,,,,,,300,,,119,300,300,300,,,119,,119,,119,119,,119,119,119',
',119,119,,,,119,119,,,119,,,119,235,235,,,235,235,235,119,,,,,,119,',
',,119,119,119,,,235,,,,,,235,,235,,235,235,,235,235,235,,235,235,,,',
'235,235,225,225,235,,225,235,225,,,,,,,235,,,,,,235,,,225,235,235,235',
',,225,225,225,225,225,225,225,225,225,225,,225,225,,,,225,225,225,225',
'225,,,225,224,224,,,224,,224,225,,,,,225,225,,,,225,225,225,,,224,,',
',,,224,,224,,224,224,,224,224,224,,224,224,,,,224,224,60,60,224,,60',
'224,60,,,,,,,224,,,,,,224,,,60,224,224,224,,,60,,60,,60,60,,60,60,60',
',60,60,,,,60,60,223,223,60,,223,60,223,223,,,,,,60,,,,,,60,,,223,60',
'60,60,,,223,,223,,223,223,,223,223,223,,223,223,223,,,223,223,222,222',
'223,,222,223,222,222,,,,,,223,,,,,,223,,,222,223,223,223,,,222,,222',
',222,222,,222,222,222,,222,222,222,,,222,222,215,215,222,,215,222,215',
'215,,,,,,222,,,,,,222,,,215,222,222,222,,,215,,215,,215,215,,215,215',
'215,,215,215,215,,,215,215,301,301,215,,301,215,301,301,,,,,,215,,,',
',,215,,,301,215,215,215,,,301,,301,,301,301,,301,301,301,,301,301,301',
',,301,301,55,55,301,,55,301,55,,,,,,,301,,,,,,301,,,55,301,301,301,',
',55,,55,,55,55,,55,55,55,,55,55,,,,55,55,143,143,55,,143,55,143,,,,',
',,55,,,,,,55,,,143,55,55,55,,,143,,143,,143,143,,143,143,143,,143,143',
'143,,,143,143,184,184,143,,184,143,184,,,,,,,143,,,,,,143,,,184,143',
'143,143,,,184,,184,,184,184,,184,184,184,,184,184,,,,184,184,,,184,',
',184,49,49,,,49,49,49,184,,,,,,184,,,,184,184,184,,,49,,,,,,49,,49,',
'49,49,,49,49,49,,49,49,,,,49,49,183,183,49,,183,49,183,,,,,,,49,,,,',
',49,,,183,49,49,49,,,183,,183,,183,183,,183,183,183,,183,183,,,,183',
'183,182,182,183,,182,183,182,,,,,,,183,,,,,,183,,,182,183,183,183,,',
'182,,182,,182,182,,182,182,182,,182,182,,,,182,182,313,313,182,,313',
'182,313,,,,,,,182,,,,,,182,,,313,182,182,182,,,313,,313,,313,313,,313',
'313,313,,313,313,,,,313,313,43,43,313,,43,313,43,,,,,,,313,,,,,,313',
',,43,313,313,313,,,43,,43,,43,43,,43,43,43,,43,43,,,,43,43,42,42,43',
',42,43,42,,,,,,,43,,,,,,43,,,42,43,43,43,,,42,,42,,42,42,,42,42,42,',
'42,42,,,,42,42,179,179,42,,179,42,179,,,,,,,42,,,,,,42,,,179,42,42,42',
',,179,,179,,179,179,,179,179,179,,179,179,,,,179,179,41,41,179,,41,179',
'41,,,,,,,179,,,,,,179,,,41,179,179,179,,,41,,41,,41,41,,41,41,41,,41',
'41,,,,41,41,40,40,41,,40,41,40,,,,,,,41,,,,,,41,,,40,41,41,41,,,40,',
'40,,40,40,,40,40,40,,40,40,,,,40,40,331,331,40,,331,40,331,,,,,,,40',
',,,,,40,,,331,40,40,40,,,331,,331,,331,331,,331,331,331,,331,331,,,',
'331,331,343,343,331,,343,331,343,343,,,,,,331,,,,,,331,,,343,331,331',
'331,,,343,,343,,343,343,,343,343,343,,343,343,343,,,343,343,14,14,343',
',14,343,14,,,,,,,343,,,,,,343,,,14,343,343,343,,,14,,14,,14,14,,14,14',
'14,,14,14,,,,14,14,13,13,14,,13,14,13,,,,,,,14,,,,,,14,,,13,14,14,14',
',,13,,13,,13,13,,13,13,13,,13,13,,,,13,13,12,12,13,,12,13,12,,,,,,,13',
',,,,,13,,,12,13,13,13,,,12,,12,,12,12,,12,12,12,,12,12,,,,12,12,361',
'361,12,,361,12,361,361,,,,,,12,,,,,,12,,,361,12,12,12,,,361,,361,,361',
'361,,361,361,361,,361,361,361,,,361,361,363,363,361,,363,361,363,363',
',,,,,361,,,,,,361,,,363,361,361,361,,,363,,363,,363,363,,363,363,363',
',363,363,363,,,363,363,5,5,363,,5,363,5,,,,,,,363,,,,,,363,,,5,363,363',
'363,,,5,,5,,5,5,,5,5,5,5,5,5,5,,,5,5,364,364,5,,364,5,364,364,,,,,,5',
',,,,,5,,,364,5,5,5,,,364,,364,,364,364,,364,364,364,,364,364,364,,,364',
'364,93,93,364,,93,364,93,,,,,,,364,,,,,,364,,,93,364,364,364,,,93,,93',
',93,93,,93,93,93,,93,93,,,,93,93,260,260,93,,260,93,260,,,,,,,93,,,',
',,93,,,260,93,93,93,,,260,,260,,260,260,,260,260,260,,260,260,,,,260',
'260,,,260,,,260,,,,258,258,258,258,260,258,258,258,258,258,260,258,258',
',260,260,260,,258,258,258,253,253,253,253,,253,253,253,253,253,,253',
'253,,,258,258,,253,253,253,204,204,204,204,,204,204,204,204,204,,204',
'204,,,253,253,,204,204,204,,,,,,,,,,,,,,,,204,204' ]
        racc_action_check = arr = ::Array.new(5077, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   329,   nil,   nil,   nil,  4802,   316,   nil,   171,   nil,
   nil,   244,  4664,  4618,  4572,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   299,   155,   284,
  4434,  4388,  4296,  4250,    53,   247,   106,   144,   nil,  4066,
    10,   nil,   nil,   nil,   nil,  3922,   nil,   187,   252,   nil,
  3692,   nil,   nil,   nil,   nil,   nil,   nil,   274,  3404,   219,
  3312,  3024,  2748,  2460,  1586,  1632,  1678,   218,     7,  1816,
  1862,  1908,  1954,  2000,  2046,  2092,  2138,  2184,  2230,  2276,
  2322,  2368,  2414,  4894,  2506,  2552,  2598,   112,  2696,   135,
  2794,  2840,   207,    92,   158,  1427,  3076,   nil,   nil,   nil,
   171,   210,   -11,  3266,  1371,   nil,  1315,  1259,  1203,  3496,
   288,   nil,   nil,   nil,   256,    14,   nil,   nil,   nil,   nil,
   nil,  1147,    83,   nil,    95,   nil,   nil,    94,  1091,   nil,
   180,   nil,   nil,  3968,     0,   867,   nil,   279,   nil,   nil,
   nil,   nil,   nil,    87,     8,   nil,   nil,   nil,   nil,   114,
    70,   401,  1507,  1541,   419,   377,   357,   315,   288,   188,
   144,   100,    56,  1527,  1483,   531,   587,   nil,   nil,  4342,
   nil,   755,  4158,  4112,  4014,   244,   270,   nil,   nil,     4,
   nil,    -8,    -9,    93,    62,   100,    -4,     5,   nil,   nil,
   nil,   nil,   nil,   nil,  5009,   979,   -40,   nil,   207,   nil,
   183,   169,   109,   nil,   nil,  3830,   nil,    68,   nil,    38,
    -4,   nil,  3784,  3738,  3646,  3594,   262,   277,   nil,   -14,
   319,   260,   216,   nil,   214,  3548,   nil,   nil,    15,  3214,
   nil,   nil,   nil,   nil,  3168,   nil,   200,   nil,   nil,  3122,
  2978,    26,   nil,  4988,   nil,    54,  2932,    78,  4967,  2886,
  4940,   137,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  2650,   147,   nil,   nil,  1770,   178,
   nil,   123,   159,  1724,   nil,   199,    65,   216,   196,    46,
  3358,   nil,   199,   234,   240,   256,   nil,    25,   nil,   257,
  3450,  3876,   nil,   nil,  1035,   nil,   nil,   nil,   923,   nil,
   256,   811,   274,  4204,   274,   nil,   nil,   nil,   nil,   699,
   643,   286,   107,   296,   nil,   nil,   nil,   nil,   475,   107,
   nil,  4480,   307,   285,   nil,   309,   310,   nil,   nil,   nil,
   310,   311,   nil,  4526,   nil,   nil,   nil,   299,   316,   nil,
   317,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  4710,   nil,  4756,  4848,   nil,   nil,   321,   nil,   nil,
   nil,   nil,   322,   nil,   324,   nil,   326,   nil,   nil,   nil,
   nil,   nil ]

racc_action_default = [
  -220,  -221,    -1,    -2,    -3,    -4,    -5,    -8,   -10,   -11,
   -16,  -111,  -221,  -221,  -221,   -44,   -45,   -46,   -47,   -48,
   -49,   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,
   -59,   -60,   -61,   -62,   -63,   -64,   -65,   -70,   -71,   -75,
  -221,  -221,  -221,  -221,  -221,  -121,  -221,  -221,  -166,  -221,
  -221,  -176,  -177,  -178,  -179,  -221,  -181,  -221,  -191,  -194,
  -221,  -196,  -197,  -198,  -199,  -200,  -201,  -221,  -221,    -7,
  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,
  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,
  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -129,  -124,
  -220,  -220,   -28,  -221,   -35,  -221,  -221,   -72,   -77,   -78,
  -220,  -221,  -221,  -221,  -221,   -88,  -221,  -221,  -221,  -221,
  -220,  -155,  -156,  -122,  -220,  -220,  -147,  -149,  -150,  -151,
  -152,   -42,  -221,  -169,  -221,  -172,  -173,  -221,  -185,  -180,
  -221,  -188,  -189,  -221,  -221,  -195,   382,    -6,    -9,   -12,
   -13,   -14,   -15,  -221,   -18,   -19,  -164,  -165,   -20,   -21,
   -22,   -23,   -24,   -25,   -26,   -27,   -29,   -30,   -31,   -32,
   -33,   -34,   -36,   -37,   -38,   -39,  -221,   -40,  -106,  -221,
   -76,  -221,  -213,  -219,  -207,  -204,  -202,  -119,  -130,  -196,
  -133,  -200,  -221,  -210,  -208,  -216,  -198,  -199,  -206,  -211,
  -212,  -214,  -215,  -217,  -129,  -128,  -221,  -127,  -221,   -41,
  -202,   -67,  -221,   -82,   -83,  -221,   -86,  -202,  -160,  -163,
  -221,   -74,  -221,  -221,  -221,  -129,  -204,  -220,  -157,  -221,
  -221,  -221,  -221,  -153,  -221,  -221,  -167,  -170,  -221,  -221,
  -182,  -183,  -184,  -186,  -221,  -190,  -202,  -192,   -17,  -221,
  -221,  -202,  -108,  -129,  -118,  -221,  -205,  -221,  -203,  -221,
  -221,  -202,  -132,  -134,  -207,  -208,  -209,  -210,  -213,  -216,
  -218,  -219,  -125,  -126,  -203,  -221,   -69,   -79,  -221,  -221,
   -85,  -221,  -203,  -221,   -73,  -221,   -91,  -221,   -97,  -221,
  -221,  -101,  -204,  -202,  -221,  -221,  -141,  -221,  -158,  -202,
  -221,  -221,  -148,  -154,   -43,  -168,  -171,  -174,  -175,  -187,
  -221,  -110,  -221,  -203,  -202,  -114,  -120,  -115,  -131,  -135,
  -136,  -221,   -66,  -221,   -81,   -84,   -87,  -161,  -162,   -91,
   -90,  -221,  -221,   -97,   -96,  -221,  -221,  -105,  -100,  -102,
  -221,  -221,  -116,  -221,  -142,  -143,  -144,  -221,  -221,  -138,
  -221,  -146,  -193,  -107,  -109,  -117,  -123,   -68,   -80,   -89,
   -92,  -221,   -95,  -221,  -221,  -112,  -113,  -221,  -140,  -159,
  -137,  -145,  -221,   -94,  -221,   -99,  -221,  -104,  -139,   -93,
   -98,  -103 ]

racc_goto_table = [
     2,   102,   104,   105,   107,   124,   139,     4,   178,   136,
   186,   130,   137,   185,   128,   255,   217,   334,   227,   302,
   291,   303,   230,   330,   149,   150,   151,   152,   257,   114,
   116,   117,   118,    69,   226,   132,   155,   158,   131,   157,
   157,   156,   156,   336,   138,   206,   208,   251,   246,   145,
   290,   360,   275,   277,   316,   253,   294,   212,   318,   281,
   215,   153,   362,   177,   131,   154,   359,   295,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,   339,   181,   310,   205,
   205,   252,   210,   312,   344,   131,   147,   231,   148,   220,
   327,   134,   131,   321,     3,   141,   142,     1,   181,   243,
   244,   242,   143,   nil,   nil,   nil,   261,   213,   nil,   nil,
   nil,   nil,   340,   nil,   nil,   nil,   nil,   228,   nil,   nil,
   nil,   228,   233,   299,   nil,   341,   nil,   293,   nil,   nil,
   292,   347,   nil,   245,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   124,   nil,   nil,   nil,   355,   nil,   nil,   130,
   nil,   nil,   128,   nil,   nil,   314,   nil,   nil,   176,   nil,
   nil,   114,   116,   117,   nil,   nil,   nil,   276,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   309,   130,   307,   130,   128,
   137,   128,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   131,   181,   279,   nil,   nil,   nil,   nil,
   nil,   nil,   285,   287,   304,   354,   nil,   nil,   308,   nil,
   nil,   nil,   nil,   138,   296,   nil,   nil,   nil,   304,   311,
   nil,   nil,   nil,   nil,   nil,   181,   nil,   nil,   319,   320,
   nil,   nil,   nil,   nil,   nil,   nil,   345,   nil,   nil,   nil,
   nil,   nil,   nil,   304,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   328,   nil,   nil,   nil,   nil,   nil,   323,   131,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   357,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   348,   350,   176,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   114,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   367,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   372,   nil,   374,   376 ]

racc_goto_check = [
     2,    10,    10,    10,    39,    67,    81,     4,    54,    76,
    59,    32,    33,    57,    37,    58,    47,    50,    68,    73,
    52,    73,    68,    49,     8,     8,     8,     8,    38,    10,
    10,    10,    10,     6,    57,    12,    13,    13,    10,    33,
    33,    32,    32,    53,    10,    63,    63,    55,    47,    10,
    51,    48,    38,    46,    60,    61,    58,    45,    64,    38,
    44,    12,    50,    14,    10,    10,    49,    69,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    52,    10,    38,    10,
    10,    54,    12,    38,    70,    10,     6,    72,     7,    12,
    74,    75,    10,    38,     3,    77,    78,     1,    10,    82,
    83,    85,    86,   nil,   nil,   nil,    59,     4,   nil,   nil,
   nil,   nil,    58,   nil,   nil,   nil,   nil,     4,   nil,   nil,
   nil,     4,     4,    47,   nil,    38,   nil,    59,   nil,   nil,
    57,    38,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    67,   nil,   nil,   nil,    38,   nil,   nil,    32,
   nil,   nil,    37,   nil,   nil,    59,   nil,   nil,    10,   nil,
   nil,    10,    10,    10,   nil,   nil,   nil,    39,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    81,    32,    76,    32,    37,
    33,    37,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    10,    10,     2,   nil,   nil,   nil,   nil,
   nil,   nil,     2,     2,    10,    54,   nil,   nil,    10,   nil,
   nil,   nil,   nil,    10,     4,   nil,   nil,   nil,    10,    10,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,    10,    10,
   nil,   nil,   nil,   nil,   nil,   nil,    67,   nil,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,     2,    10,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,     2,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   107,     0,   104,     7,   nil,    28,    28,   -47,   nil,
   -11,   nil,   -14,   -41,   -33,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -36,   -38,   nil,   nil,   nil,   -33,  -158,   -34,
   nil,   nil,   nil,   nil,   -51,   -53,  -159,   -96,  -280,  -263,
  -271,  -174,  -204,  -246,   -88,  -132,   nil,   -85,  -170,   -88,
  -202,  -126,   nil,   -55,  -200,   nil,   nil,   -41,  -102,  -160,
  -203,   nil,   -28,  -213,  -182,    51,   -41,    48,    49,   nil,
   nil,   -49,   -31,   -30,   nil,   -29,    54 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   207,     5,     6,     7,     8,     9,
    11,    10,   289,   nil,   nil,    15,    37,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,   nil,   nil,
    38,    39,   108,   109,   110,   nil,   nil,   nil,   115,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    43,   nil,   nil,   nil,
   187,   nil,    99,   nil,   188,   192,   190,   120,   nil,   nil,
   nil,   125,   nil,   126,   218,   nil,   nil,    51,    52,    53,
    55,   nil,   nil,   nil,   140,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 82, :_reduce_1,
  1, 82, :_reduce_2,
  1, 82, :_reduce_none,
  1, 83, :_reduce_4,
  1, 86, :_reduce_5,
  3, 86, :_reduce_6,
  2, 86, :_reduce_7,
  1, 87, :_reduce_8,
  3, 87, :_reduce_9,
  1, 88, :_reduce_none,
  1, 89, :_reduce_11,
  3, 89, :_reduce_12,
  3, 89, :_reduce_13,
  3, 89, :_reduce_14,
  3, 89, :_reduce_15,
  1, 91, :_reduce_none,
  4, 91, :_reduce_17,
  3, 91, :_reduce_18,
  3, 91, :_reduce_19,
  3, 91, :_reduce_20,
  3, 91, :_reduce_21,
  3, 91, :_reduce_22,
  3, 91, :_reduce_23,
  3, 91, :_reduce_24,
  3, 91, :_reduce_25,
  3, 91, :_reduce_26,
  3, 91, :_reduce_27,
  2, 91, :_reduce_28,
  3, 91, :_reduce_29,
  3, 91, :_reduce_30,
  3, 91, :_reduce_31,
  3, 91, :_reduce_32,
  3, 91, :_reduce_33,
  3, 91, :_reduce_34,
  2, 91, :_reduce_35,
  3, 91, :_reduce_36,
  3, 91, :_reduce_37,
  3, 91, :_reduce_38,
  3, 91, :_reduce_39,
  3, 91, :_reduce_40,
  3, 91, :_reduce_41,
  1, 93, :_reduce_42,
  3, 93, :_reduce_43,
  1, 92, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 114, :_reduce_64,
  1, 114, :_reduce_65,
  5, 96, :_reduce_66,
  3, 96, :_reduce_67,
  6, 96, :_reduce_68,
  4, 96, :_reduce_69,
  1, 96, :_reduce_70,
  1, 100, :_reduce_71,
  2, 100, :_reduce_72,
  4, 121, :_reduce_73,
  3, 121, :_reduce_74,
  1, 121, :_reduce_75,
  3, 122, :_reduce_76,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  3, 123, :_reduce_79,
  3, 127, :_reduce_80,
  2, 127, :_reduce_81,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  4, 124, :_reduce_84,
  3, 124, :_reduce_85,
  2, 125, :_reduce_86,
  4, 125, :_reduce_87,
  2, 103, :_reduce_88,
  5, 129, :_reduce_89,
  4, 129, :_reduce_90,
  0, 130, :_reduce_none,
  2, 130, :_reduce_92,
  4, 130, :_reduce_93,
  3, 130, :_reduce_94,
  6, 104, :_reduce_95,
  5, 104, :_reduce_96,
  0, 131, :_reduce_none,
  4, 131, :_reduce_98,
  3, 131, :_reduce_99,
  5, 102, :_reduce_100,
  1, 132, :_reduce_101,
  2, 132, :_reduce_102,
  5, 133, :_reduce_103,
  4, 133, :_reduce_104,
  1, 134, :_reduce_105,
  1, 95, :_reduce_none,
  4, 95, :_reduce_107,
  1, 136, :_reduce_108,
  3, 136, :_reduce_109,
  3, 135, :_reduce_110,
  1, 90, :_reduce_111,
  6, 90, :_reduce_112,
  6, 90, :_reduce_113,
  5, 90, :_reduce_114,
  5, 90, :_reduce_115,
  5, 90, :_reduce_116,
  4, 141, :_reduce_117,
  1, 142, :_reduce_118,
  1, 138, :_reduce_119,
  3, 138, :_reduce_120,
  1, 137, :_reduce_121,
  2, 137, :_reduce_122,
  6, 101, :_reduce_123,
  2, 101, :_reduce_124,
  3, 143, :_reduce_125,
  3, 143, :_reduce_126,
  1, 144, :_reduce_none,
  1, 144, :_reduce_none,
  0, 140, :_reduce_129,
  1, 140, :_reduce_130,
  3, 140, :_reduce_131,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  3, 145, :_reduce_135,
  3, 145, :_reduce_136,
  6, 105, :_reduce_137,
  5, 105, :_reduce_138,
  7, 106, :_reduce_139,
  6, 106, :_reduce_140,
  1, 150, :_reduce_none,
  2, 150, :_reduce_142,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  6, 107, :_reduce_145,
  5, 107, :_reduce_146,
  1, 152, :_reduce_147,
  3, 152, :_reduce_148,
  1, 154, :_reduce_149,
  1, 154, :_reduce_150,
  1, 154, :_reduce_151,
  1, 154, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_154,
  1, 148, :_reduce_155,
  1, 148, :_reduce_156,
  1, 149, :_reduce_157,
  2, 149, :_reduce_158,
  4, 149, :_reduce_159,
  1, 128, :_reduce_160,
  3, 128, :_reduce_161,
  3, 155, :_reduce_162,
  1, 155, :_reduce_163,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 99, :_reduce_166,
  3, 109, :_reduce_167,
  4, 109, :_reduce_168,
  2, 109, :_reduce_169,
  3, 112, :_reduce_170,
  4, 112, :_reduce_171,
  2, 112, :_reduce_172,
  1, 156, :_reduce_173,
  3, 156, :_reduce_174,
  3, 157, :_reduce_175,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 158, :_reduce_179,
  2, 159, :_reduce_180,
  1, 161, :_reduce_181,
  1, 163, :_reduce_182,
  1, 164, :_reduce_183,
  2, 162, :_reduce_184,
  1, 165, :_reduce_185,
  1, 166, :_reduce_186,
  2, 166, :_reduce_187,
  2, 160, :_reduce_188,
  2, 160, :_reduce_189,
  3, 84, :_reduce_190,
  0, 167, :_reduce_191,
  2, 167, :_reduce_192,
  4, 167, :_reduce_193,
  1, 108, :_reduce_194,
  2, 108, :_reduce_195,
  1, 117, :_reduce_196,
  1, 115, :_reduce_197,
  1, 116, :_reduce_198,
  1, 111, :_reduce_199,
  1, 110, :_reduce_200,
  1, 113, :_reduce_201,
  0, 119, :_reduce_none,
  1, 119, :_reduce_203,
  0, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  0, 85, :_reduce_220 ]

racc_reduce_n = 221

racc_shift_n = 382

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :DEFINE => 32,
  :ELSIF => 33,
  :VARIABLE => 34,
  :CLASS => 35,
  :INHERITS => 36,
  :NODE => 37,
  :BOOLEAN => 38,
  :NAME => 39,
  :SEMIC => 40,
  :CASE => 41,
  :DEFAULT => 42,
  :AT => 43,
  :LCOLLECT => 44,
  :RCOLLECT => 45,
  :CLASSREF => 46,
  :NOT => 47,
  :OR => 48,
  :AND => 49,
  :UNDEF => 50,
  :PARROW => 51,
  :PLUS => 52,
  :MINUS => 53,
  :TIMES => 54,
  :DIV => 55,
  :LSHIFT => 56,
  :RSHIFT => 57,
  :UMINUS => 58,
  :MATCH => 59,
  :NOMATCH => 60,
  :REGEX => 61,
  :IN_EDGE => 62,
  :OUT_EDGE => 63,
  :IN_EDGE_SUB => 64,
  :OUT_EDGE_SUB => 65,
  :IN => 66,
  :UNLESS => 67,
  :PIPE => 68,
  :LAMBDA => 69,
  :SELBRACE => 70,
  :HEREDOC => 71,
  :RENDER_STRING => 72,
  :RENDER_EXPR => 73,
  :EPP_START => 74,
  :LOW => 75,
  :HIGH => 76,
  :CALL => 77,
  :MODULO => 78,
  :TITLE_COLON => 79,
  :CASE_COLON => 80 }

racc_nt_base = 81

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "HEREDOC",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "LOW",
  "HIGH",
  "CALL",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "match_rvalue",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_j8",
  "lambda_ruby",
  "lambda_parameter_list",
  "optional_farrow",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "epp_parameters_list" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 62)
  def _reduce_1(val, _values, result)
     result = Factory.block_or_expression(*val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 63)
  def _reduce_2(val, _values, result)
     result = Factory.block_or_expression(*val[0]) 
    result
  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 75)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 76)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 87)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 88)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 89)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_15(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_17(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_18(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_19(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_20(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_21(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_22(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_23(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_24(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_25(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_26(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_27(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_28(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_29(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_30(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_31(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_32(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_33(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_34(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_35(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_36(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_37(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 119)
  def _reduce_38(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 120)
  def _reduce_39(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 121)
  def _reduce_40(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 122)
  def _reduce_41(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 130)
  def _reduce_42(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 131)
  def _reduce_43(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

module_eval(<<'.,.,', 'egrammar.ra', 162)
  def _reduce_64(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 163)
  def _reduce_65(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 171)
  def _reduce_66(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 175)
  def _reduce_67(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 179)
  def _reduce_68(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 184)
  def _reduce_69(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_70(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 193)
  def _reduce_71(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_72(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_73(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_74(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_75(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_76(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

# reduce 77 omitted

# reduce 78 omitted

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_79(val, _values, result)
          result = Factory.LAMBDA(val[0], val[2])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 224)
  def _reduce_80(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 225)
  def _reduce_81(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 82 omitted

# reduce 83 omitted

module_eval(<<'.,.,', 'egrammar.ra', 235)
  def _reduce_84(val, _values, result)
          result = Factory.LAMBDA(val[1], val[2])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 239)
  def _reduce_85(val, _values, result)
          result = Factory.LAMBDA(val[1], nil)
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 245)
  def _reduce_86(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 246)
  def _reduce_87(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 256)
  def _reduce_88(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 263)
  def _reduce_89(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 267)
  def _reduce_90(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 91 omitted

module_eval(<<'.,.,', 'egrammar.ra', 275)
  def _reduce_92(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 279)
  def _reduce_93(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 283)
  def _reduce_94(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 292)
  def _reduce_95(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 296)
  def _reduce_96(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 97 omitted

module_eval(<<'.,.,', 'egrammar.ra', 306)
  def _reduce_98(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 310)
  def _reduce_99(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 318)
  def _reduce_100(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 324)
  def _reduce_101(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 325)
  def _reduce_102(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 330)
  def _reduce_103(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 334)
  def _reduce_104(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 338)
  def _reduce_105(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 106 omitted

module_eval(<<'.,.,', 'egrammar.ra', 349)
  def _reduce_107(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 354)
  def _reduce_108(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 355)
  def _reduce_109(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 360)
  def _reduce_110(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 376)
  def _reduce_111(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 379)
  def _reduce_112(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error "A resource default can not be virtual or exported"
      when :override
        error "A resource override can not be virtual or exported"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 394)
  def _reduce_113(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        error "Defaults are not virtualizable"
      when :defaults
        error "Defaults are not virtualizable"
      when :override
        error "Defaults are not virtualizable"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 406)
  def _reduce_114(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error "A resource default can not specify a resource name"
      when :override
        error "A resource override does not allow override of name of resource"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 419)
  def _reduce_115(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        error "All resource specifications require names"
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 434)
  def _reduce_116(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 439)
  def _reduce_117(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 441)
  def _reduce_118(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_119(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 445)
  def _reduce_120(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 450)
  def _reduce_121(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 451)
  def _reduce_122(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 463)
  def _reduce_123(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_124(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 472)
  def _reduce_125(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 473)
  def _reduce_126(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'egrammar.ra', 486)
  def _reduce_129(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 487)
  def _reduce_130(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 488)
  def _reduce_131(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'egrammar.ra', 504)
  def _reduce_135(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 508)
  def _reduce_136(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 518)
  def _reduce_137(val, _values, result)
          result = Factory.DEFINITION(classname(val[1][:value]), val[2], val[4])
      loc result, val[0], val[5]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 523)
  def _reduce_138(val, _values, result)
          result = Factory.DEFINITION(classname(val[1][:value]), val[2], nil)
      loc result, val[0], val[4]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 538)
  def _reduce_139(val, _values, result)
          @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5])
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 543)
  def _reduce_140(val, _values, result)
          @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), nil)
      loc result, val[0], val[5]
      
    result
  end
.,.,

# reduce 141 omitted

module_eval(<<'.,.,', 'egrammar.ra', 551)
  def _reduce_142(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 143 omitted

# reduce 144 omitted

module_eval(<<'.,.,', 'egrammar.ra', 568)
  def _reduce_145(val, _values, result)
          result = Factory.NODE(val[1], val[2], val[4])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 572)
  def _reduce_146(val, _values, result)
          result = Factory.NODE(val[1], val[2], nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 582)
  def _reduce_147(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_148(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 588)
  def _reduce_149(val, _values, result)
     result = Factory.fqn(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_150(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 590)
  def _reduce_151(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 152 omitted

# reduce 153 omitted

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_154(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 601)
  def _reduce_155(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 602)
  def _reduce_156(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 606)
  def _reduce_157(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 607)
  def _reduce_158(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 608)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 612)
  def _reduce_160(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 613)
  def _reduce_161(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 617)
  def _reduce_162(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 618)
  def _reduce_163(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 164 omitted

# reduce 165 omitted

module_eval(<<'.,.,', 'egrammar.ra', 631)
  def _reduce_166(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 637)
  def _reduce_167(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_168(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_169(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_170(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_171(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_172(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_173(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_174(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_175(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_179(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_180(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_181(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 661)
  def _reduce_182(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_183(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_184(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_185(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 667)
  def _reduce_186(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_187(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_188(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_189(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_190(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_191(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_192(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_193(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_194(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 684)
  def _reduce_195(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 686)
  def _reduce_196(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_197(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 688)
  def _reduce_198(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_199(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_200(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 697)
  def _reduce_201(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 202 omitted

module_eval(<<'.,.,', 'egrammar.ra', 703)
  def _reduce_203(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

module_eval(<<'.,.,', 'egrammar.ra', 726)
  def _reduce_220(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
