#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 797)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'63,66,282,292,64,57,333,59,-233,86,-134,-132,238,144,-242,238,318,282',
'63,66,277,278,64,109,15,113,374,108,73,248,43,396,50,239,52,47,239,51',
'76,72,252,45,75,48,49,293,145,73,14,112,-233,74,-134,-132,12,13,-242',
'134,130,93,92,133,77,134,88,89,307,133,44,255,384,87,71,67,262,69,70',
'68,351,261,53,54,56,55,63,66,134,58,64,57,133,59,417,94,257,260,238',
'86,398,238,259,281,264,282,306,265,282,353,15,73,230,109,73,113,43,108',
'50,239,52,47,239,51,76,72,355,45,75,48,49,134,305,73,14,133,231,74,313',
'112,12,13,238,267,266,134,63,66,77,133,64,57,134,59,44,73,133,252,71',
'67,134,69,70,239,133,291,53,54,56,55,15,258,369,58,368,360,43,275,50',
'361,52,47,362,51,76,72,79,45,75,48,49,122,291,73,14,221,369,74,368,366',
'12,13,336,370,301,216,300,217,77,298,219,302,296,295,44,297,299,372',
'71,67,335,69,70,220,215,303,53,54,56,55,63,66,197,58,64,57,289,59,415',
'86,291,218,304,82,84,83,85,289,380,381,332,313,81,109,15,113,164,108',
'161,159,43,391,50,289,52,47,289,51,76,72,393,45,75,48,49,313,291,73',
'14,112,135,74,81,348,12,13,122,123,317,93,92,314,77,122,88,89,401,372',
'44,403,404,87,71,67,405,69,70,406,407,119,53,54,56,55,63,66,409,58,64',
'57,410,59,413,94,411,238,81,86,78,418,419,420,421,,,,,,15,,,109,,113',
'43,108,50,,52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,112,12,13,,,,',
'63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,',
'50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64',
'57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51',
'76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71',
'67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,',
',,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,',
'53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74',
',,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15',
',,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64',
'57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51',
'76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71',
'67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,',
',,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,',
'53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74',
',,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15',
',,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,129,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,',
',58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,86,12,13,,,,,',
',77,,,,,109,44,113,,108,71,67,,69,70,,,,53,54,56,55,63,66,,58,64,57',
',59,311,112,,,,,,,,,,,,,,,15,,,,,,43,87,50,,52,47,,51,76,72,,45,75,48',
'49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,148,59,44,,,,71,67,,69,70',
',,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,',
',74,,,12,13,,,,,63,66,77,,64,57,150,59,44,,,,71,67,,69,70,,,,53,54,56',
'55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,86,12,13',
',,,,,,77,,,,,109,44,113,,108,71,67,,69,70,,,,53,54,56,55,63,66,,58,64',
'57,,59,153,112,,,,,,,,,,,,,,,15,,,,,,43,87,50,,52,115,,51,76,72,,45',
'75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70',
',,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,',
',74,,,12,13,,,301,216,300,217,77,298,219,302,296,295,44,297,299,,71',
'67,,69,70,220,215,303,53,54,56,55,63,66,,58,64,57,,59,320,86,,218,304',
',,,,,,,,,,109,15,113,,108,,,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73',
'14,112,,74,,,12,13,,90,91,93,92,,77,,88,89,,,44,,,87,71,67,,69,70,,',
',53,54,56,55,63,66,,58,64,57,,59,153,94,,,,86,,,,,,,,,,,15,,,109,,113',
'43,108,50,,52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,112,12,13,,,,',
'63,66,77,,64,57,,163,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43',
',50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,86,12,13,,,,,,,77,,,,,109',
'44,113,,108,71,67,,69,70,,,,53,54,56,55,63,66,,58,64,57,,59,390,112',
',,,,,,,,,,,,,,15,,,,,,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73,14,',
',74,,,12,13,,,,,63,66,77,,64,57,342,59,44,,,,71,67,,69,70,,,,53,54,56',
'55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13',
',,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,',
'43,,50,,52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66',
'77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52',
'47,,51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,',
'59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,47,,51,76',
'72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71',
'67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,47,,51,76,72,,45,75,48',
'49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,',
',,53,54,56,55,15,,,58,,,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73,14',
',,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56',
'55,15,,,58,,,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,,12',
'13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58',
',,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77',
',64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115',
',51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,',
',,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45',
'75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70',
',,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,',
',74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55',
'15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,',
',63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43',
',50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64',
'57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51',
'76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71',
'67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,',
',,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,',
'53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74',
',,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15',
',,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,',
',58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,',
',58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,301,216,300,217,77,298,219,302,296,295,44,297,299',
'196,71,67,,69,70,220,215,303,53,54,56,55,63,66,,58,64,57,,59,375,,,218',
'304,,,,,,,,,,,,15,,,,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74',
',,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15',
',,58,,,199,216,210,217,52,211,219,212,208,206,,201,214,,,,,73,14,220',
'215,213,,,12,13,,,,,,,77,,,,,218,200,,,,71,67,,69,70,,,,53,54,56,55',
'63,66,,58,64,57,,59,,,,,,,,,,,,,,,,,15,,,,,,43,,50,,52,115,,51,76,72',
',45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69',
'70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14',
',,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56',
'55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13',
',,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,',
'43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77',
',64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115',
',51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,',
',,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45',
'75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70',
',,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,',
',74,,,12,13,,,,,,,77,,,,,,44,,,,71,67,,69,70,,,,53,54,56,55,63,66,,58',
'64,57,,59,322,,,,,,,,,,,,,,,,15,,,,,,43,,50,,52,47,,51,76,72,,45,75',
'48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70',
',,,53,54,56,55,15,228,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14',
',,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56',
'55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13',
',,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,',
'43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77',
',64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,243,,58,,,43,,50,,52',
'115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59',
'44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,47,,51,76,72',
',45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,199,216,210,217,52,211,219,212,208,206,,201,214,',
',,,73,14,220,215,213,,,12,13,,,,,,,77,,,,,218,200,,,,71,67,,69,70,,',
',53,54,56,55,63,66,,58,64,57,,59,,,,,,,,,,,,,,,,,15,,,,,,43,,50,,52',
'115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59',
'44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72',
',45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69',
'70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14',
',,74,,,12,13,,,,,63,66,77,,64,57,341,59,44,,,,71,67,,69,70,,,,53,54',
'56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12',
'13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58',
',,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,,,77,,',
',,,44,,,,71,67,,69,70,,,,53,54,56,55,63,66,,58,64,57,,59,344,,,,,,,',
',,,,,,,,15,,,,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12',
'13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58',
',,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77',
',64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,47',
',51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,,,77,,,,,,44,,,,71,67',
',69,70,,,86,53,54,56,55,,,,58,105,106,107,102,97,109,,113,,108,,,98',
'100,99,101,,,,,,,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,,88,89',
',86,,110,,87,263,,,,105,106,107,102,97,109,,113,,108,,,98,100,99,101',
',94,,,,,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,263,',
',87,105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,,,,94,,,,,,,',
',,112,,,,104,103,,,90,91,93,92,95,96,,88,89,86,,247,,,87,,,,105,106',
'107,102,97,109,,113,,108,,,98,100,99,101,,,94,,,,,,,,,,,,,112,,,,104',
'103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109,,113',
',108,,,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95',
'96,,88,89,86,,246,,,87,,,,105,106,107,102,97,109,,113,,108,,,98,100',
'99,101,,,94,,,,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,,88,89,86',
',245,,,87,,,,105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,94,',
',,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,,88,89,86,,244,,,87,,',
',105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,94,,,,,,,,,,,,,112',
',,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109',
',113,,108,,226,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91',
'93,92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109,,113,,108,,,98,100',
'99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89',
',,,,,87,105,106,107,102,97,109,,113,,108,277,278,98,100,99,101,,,,,',
'94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105',
'106,107,102,97,109,,113,,108,,,98,100,99,101,,,,,,94,,,,,,,,,,112,,',
',104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109',
',113,,108,,,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93',
'92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109,,113,,108,,,98,100',
'99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89',
',,,,,87,105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,,,,94,,,',
',,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105,106,107',
'102,97,109,,113,,108,,,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103',
',,90,91,93,92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109,,113,,108',
',,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96',
'86,88,89,,,,,,87,105,106,107,102,97,109,287,113,,108,,,98,100,99,101',
',,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,,88,89,86,,110,',
',87,,,,105,106,107,102,97,109,,113,86,108,,,98,100,99,101,,,94,,,,109',
',113,,108,,,,,112,,,,104,103,,,90,91,93,92,95,96,,88,89,112,,,86,,87',
',,90,91,93,92,,,,88,89,109,,113,86,108,87,,,,,94,,,,,,,109,,113,,108',
',,,,112,94,,,,,,,90,91,93,92,95,96,,88,89,112,,,,,87,,86,90,91,93,92',
'95,96,,88,89,,,,97,109,87,113,86,108,,94,98,,,,,,,,,97,109,,113,,108',
',94,98,,112,,,,,,,,90,91,93,92,95,96,,88,89,112,,,,,87,,86,90,91,93',
'92,95,96,,88,89,,,,97,109,87,113,86,108,,94,98,,,,,,,,,97,109,,113,',
'108,,94,98,,112,,,,,,,,90,91,93,92,95,96,,88,89,112,,,,,87,,86,90,91',
'93,92,95,96,,88,89,,,102,97,109,87,113,,108,,94,98,100,99,101,,,,,,',
',,,,,,94,,,112,,,,,86,,,90,91,93,92,95,96,,88,89,102,97,109,,113,87',
'108,,86,98,100,99,101,,,,,105,106,107,102,97,109,,113,,108,94,112,98',
'100,99,101,103,,,90,91,93,92,95,96,,88,89,,,,112,,87,,104,103,,,90,91',
'93,92,95,96,,88,89,86,,,,,87,,94,,105,106,107,102,97,109,,113,,108,',
',98,100,99,101,,,94,,,,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86',
'88,89,,,283,,,87,105,106,107,102,97,109,,113,,108,,,98,100,99,101,,',
',,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105',
'106,107,102,97,109,,113,,108,,,98,100,99,101,63,66,63,66,64,94,64,63',
'66,63,66,64,,64,,112,,,,104,103,,,90,91,93,92,95,96,,88,89,,,,,86,87',
',144,,144,141,,141,,144,86,144,141,109,141,113,,108,,,,,94,,109,77,113',
'77,108,,,,77,86,77,145,67,145,67,112,,,145,67,145,67,,109,,113,112,108',
',,88,89,,,,,,87,,,,88,89,,,,,,87,112,,,,,,,,,,,,,,,88,89,,,,,,87' ]
        racc_action_table = arr = ::Array.new(7002, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,242,209,0,0,252,0,214,175,208,206,240,258,213,252,242,323,159,159',
'348,348,159,175,0,175,323,175,252,129,0,359,0,240,0,0,252,0,0,0,131',
'0,0,0,0,209,258,0,0,175,214,0,208,206,0,0,213,129,47,175,175,129,0,332',
'175,175,227,332,0,137,332,175,0,0,149,0,0,0,284,149,0,0,0,0,404,404',
'47,0,404,404,47,404,404,175,137,147,313,116,365,122,147,171,152,365',
'225,152,171,288,404,313,121,116,122,116,404,116,404,313,404,404,122',
'404,404,404,290,404,404,404,404,50,223,404,404,50,122,404,274,116,404',
'404,161,157,157,210,5,5,404,210,5,5,115,5,404,161,115,136,404,404,211',
'404,404,161,211,294,404,404,404,404,5,139,366,404,366,308,5,161,5,310',
'5,5,312,5,5,5,5,5,5,5,5,228,203,5,5,111,320,5,320,319,5,5,254,321,286',
'286,286,286,5,286,286,286,286,286,5,286,286,322,5,5,253,5,5,286,286',
'286,5,5,5,5,403,403,109,5,403,403,326,403,403,176,327,286,286,8,8,8',
'8,328,329,330,250,334,80,176,403,176,78,176,68,67,403,347,403,249,403',
'403,202,403,403,403,350,403,403,403,403,232,352,403,403,176,48,403,165',
'280,403,403,360,42,241,176,176,238,403,41,176,176,369,370,403,372,373',
'176,403,403,377,403,403,378,379,40,403,403,403,403,401,401,385,403,401',
'401,386,401,401,176,389,239,6,114,1,408,412,414,416,,,,,,401,,,114,',
'114,401,114,401,,401,401,,401,401,401,,401,401,401,401,,,401,401,,,401',
',114,401,401,,,,,196,196,401,,196,196,,196,401,,,,401,401,,401,401,',
',,401,401,401,401,196,,,401,,,196,,196,,196,196,,196,196,196,,196,196',
',,,,196,196,,,196,,,196,196,,,,,12,12,196,,12,12,,12,196,,,,196,196',
',196,196,,,,196,196,196,196,12,,,196,,,12,,12,,12,12,,12,12,12,,12,12',
',,,,12,12,,,12,,,12,12,,,,,13,13,12,,13,13,,13,12,,,,12,12,,12,12,,',
',12,12,12,12,13,,,12,,,13,,13,,13,13,,13,13,13,,13,13,,,,,13,13,,,13',
',,13,13,,,,,14,14,13,,14,14,,14,13,,,,13,13,,13,13,,,,13,13,13,13,14',
',,13,,,14,,14,,14,14,,14,14,14,,14,14,,,,,14,14,,,14,,,14,14,,,,,15',
'15,14,,15,15,,15,14,,,,14,14,,14,14,,,,14,14,14,14,15,,,14,,,15,,15',
',15,15,,15,15,15,,15,15,,,,,15,15,,,15,,,15,15,,,,,381,381,15,,381,381',
',381,15,,,,15,15,,15,15,,,,15,15,15,15,381,,,15,,,381,,381,,381,381',
',381,381,381,,381,381,381,381,,,381,381,,,381,,,381,381,,,,,368,368',
'381,,368,368,,368,381,,,,381,381,,381,381,,,,381,381,381,381,368,,,381',
',,368,,368,,368,368,,368,368,368,,368,368,,,,,368,368,,,368,,,368,368',
',,,,199,199,368,,199,199,,199,368,,,,368,368,,368,368,,,,368,368,368',
'368,199,,,368,,,199,,199,,199,199,,199,199,199,,199,199,,,,,199,199',
',,199,,,199,199,,,,,43,43,199,,43,43,,43,199,,,,199,199,,199,199,,,',
'199,199,199,199,43,,,199,,,43,,43,,43,43,,43,43,43,,43,43,,,,,43,43',
',,43,,,43,43,,,,,44,44,43,,44,44,,44,43,,,,43,43,,43,43,,,,43,43,43',
'43,44,,,43,,,44,,44,,44,44,,44,44,44,,44,44,,,,,44,44,,,44,,,44,44,',
',,,45,45,44,,45,45,,45,44,,,,44,44,,44,44,,,,44,44,44,44,45,,,44,,,45',
',45,,45,45,,45,45,45,,45,45,,,,,45,45,,,45,,,45,45,,,,,46,46,45,,46',
'46,,46,45,,,,45,45,,45,45,,,,45,45,45,45,46,,,45,,,46,,46,,46,46,,46',
'46,46,,46,46,,,,,46,46,,,46,,,46,46,,,,,200,200,46,,200,200,,200,46',
',,,46,46,,46,46,,,,46,46,46,46,200,,,46,,,200,,200,,200,200,,200,200',
'200,,200,200,,,,,200,200,,,200,,,200,200,,,,,201,201,200,,201,201,,201',
'200,,,,200,200,,200,200,,,,200,200,200,200,201,,,200,,,201,,201,,201',
'201,,201,201,201,,201,201,,,,,201,201,,,201,,,201,201,,,,,351,351,201',
',351,351,,351,201,,,,201,201,,201,201,,,,201,201,201,201,351,,,201,',
',351,,351,,351,351,,351,351,351,,351,351,,,,,351,351,,,351,,174,351',
'351,,,,,,,351,,,,,174,351,174,,174,351,351,,351,351,,,,351,351,351,351',
'230,230,,351,230,230,,230,230,174,,,,,,,,,,,,,,,230,,,,,,230,174,230',
',230,230,,230,230,230,,230,230,230,230,,,230,230,,,230,,,230,230,,,',
',57,57,230,,57,57,57,57,230,,,,230,230,,230,230,,,,230,230,230,230,57',
',,230,,,57,,57,,57,57,,57,57,57,,57,57,,,,,57,57,,,57,,,57,57,,,,,58',
'58,57,,58,58,58,58,57,,,,57,57,,57,57,,,,57,57,57,57,58,,,57,,,58,,58',
',58,58,,58,58,58,,58,58,,,,,58,58,,,58,,173,58,58,,,,,,,58,,,,,173,58',
'173,,173,58,58,,58,58,,,,58,58,58,58,59,59,,58,59,59,,59,59,173,,,,',
',,,,,,,,,,59,,,,,,59,173,59,,59,59,,59,59,59,,59,59,,,,,59,59,,,59,',
',59,59,,,,,65,65,59,,65,65,,65,59,,,,59,59,,59,59,,,,59,59,59,59,65',
',,59,,,65,,65,,65,65,,65,65,65,,65,65,,,,,65,65,,,65,,,65,65,,,221,221',
'221,221,65,221,221,221,221,221,65,221,221,,65,65,,65,65,221,221,221',
'65,65,65,65,244,244,,65,244,244,,244,244,180,,221,221,,,,,,,,,,,180',
'244,180,,180,,,244,,244,,244,244,,244,244,244,,244,244,244,244,,,244',
'244,180,,244,,,244,244,,180,180,180,180,,244,,180,180,,,244,,,180,244',
'244,,244,244,,,,244,244,244,244,163,163,,244,163,163,,163,163,180,,',
',172,,,,,,,,,,,163,,,172,,172,163,172,163,,163,163,,163,163,163,,163',
'163,163,163,,,163,163,,,163,,172,163,163,,,,,70,70,163,,70,70,,70,163',
',,,163,163,,163,163,,,,163,163,163,163,70,,,163,,,70,,70,,70,70,,70',
'70,70,,70,70,,,,,70,70,,,70,,117,70,70,,,,,,,70,,,,,117,70,117,,117',
'70,70,,70,70,,,,70,70,70,70,336,336,,70,336,336,,336,336,117,,,,,,,',
',,,,,,,336,,,,,,336,,336,,336,336,,336,336,336,,336,336,336,336,,,336',
'336,,,336,,,336,336,,,,,261,261,336,,261,261,261,261,336,,,,336,336',
',336,336,,,,336,336,336,336,261,,,336,,,261,,261,,261,261,,261,261,261',
',261,261,,,,,261,261,,,261,,,261,261,,,,,335,335,261,,335,335,,335,261',
',,,261,261,,261,261,,,,261,261,261,261,335,,,261,,,335,,335,,335,335',
',335,335,335,,335,335,335,335,,,335,335,,,335,,,335,335,,,,,81,81,335',
',81,81,,81,335,,,,335,335,,335,335,,,,335,335,335,335,81,,,335,,,81',
',81,,81,81,,81,81,81,,81,81,81,81,,,81,81,,,81,,,81,81,,,,,82,82,81',
',82,82,,82,81,,,,81,81,,81,81,,,,81,81,81,81,82,,,81,,,82,,82,,82,82',
',82,82,82,,82,82,82,82,,,82,82,,,82,,,82,82,,,,,83,83,82,,83,83,,83',
'82,,,,82,82,,82,82,,,,82,82,82,82,83,,,82,,,83,,83,,83,83,,83,83,83',
',83,83,83,83,,,83,83,,,83,,,83,83,,,,,84,84,83,,84,84,,84,83,,,,83,83',
',83,83,,,,83,83,83,83,84,,,83,,,84,,84,,84,84,,84,84,84,,84,84,84,84',
',,84,84,,,84,,,84,84,,,,,85,85,84,,85,85,,85,84,,,,84,84,,84,84,,,,84',
'84,84,84,85,,,84,,,85,,85,,85,85,,85,85,85,,85,85,85,85,,,85,85,,,85',
',,85,85,,,,,86,86,85,,86,86,,86,85,,,,85,85,,85,85,,,,85,85,85,85,86',
',,85,,,86,,86,,86,86,,86,86,86,,86,86,,,,,86,86,,,86,,,86,86,,,,,87',
'87,86,,87,87,,87,86,,,,86,86,,86,86,,,,86,86,86,86,87,,,86,,,87,,87',
',87,87,,87,87,87,,87,87,,,,,87,87,,,87,,,87,87,,,,,88,88,87,,88,88,',
'88,87,,,,87,87,,87,87,,,,87,87,87,87,88,,,87,,,88,,88,,88,88,,88,88',
'88,,88,88,,,,,88,88,,,88,,,88,88,,,,,89,89,88,,89,89,,89,88,,,,88,88',
',88,88,,,,88,88,88,88,89,,,88,,,89,,89,,89,89,,89,89,89,,89,89,,,,,89',
'89,,,89,,,89,89,,,,,90,90,89,,90,90,,90,89,,,,89,89,,89,89,,,,89,89',
'89,89,90,,,89,,,90,,90,,90,90,,90,90,90,,90,90,,,,,90,90,,,90,,,90,90',
',,,,91,91,90,,91,91,,91,90,,,,90,90,,90,90,,,,90,90,90,90,91,,,90,,',
'91,,91,,91,91,,91,91,91,,91,91,,,,,91,91,,,91,,,91,91,,,,,92,92,91,',
'92,92,,92,91,,,,91,91,,91,91,,,,91,91,91,91,92,,,91,,,92,,92,,92,92',
',92,92,92,,92,92,,,,,92,92,,,92,,,92,92,,,,,93,93,92,,93,93,,93,92,',
',,92,92,,92,92,,,,92,92,92,92,93,,,92,,,93,,93,,93,93,,93,93,93,,93',
'93,,,,,93,93,,,93,,,93,93,,,,,94,94,93,,94,94,,94,93,,,,93,93,,93,93',
',,,93,93,93,93,94,,,93,,,94,,94,,94,94,,94,94,94,,94,94,,,,,94,94,,',
'94,,,94,94,,,,,95,95,94,,95,95,,95,94,,,,94,94,,94,94,,,,94,94,94,94',
'95,,,94,,,95,,95,,95,95,,95,95,95,,95,95,,,,,95,95,,,95,,,95,95,,,,',
'96,96,95,,96,96,,96,95,,,,95,95,,95,95,,,,95,95,95,95,96,,,95,,,96,',
'96,,96,96,,96,96,96,,96,96,,,,,96,96,,,96,,,96,96,,,,,97,97,96,,97,97',
',97,96,,,,96,96,,96,96,,,,96,96,96,96,97,,,96,,,97,,97,,97,97,,97,97',
'97,,97,97,,,,,97,97,,,97,,,97,97,,,,,98,98,97,,98,98,,98,97,,,,97,97',
',97,97,,,,97,97,97,97,98,,,97,,,98,,98,,98,98,,98,98,98,,98,98,,,,,98',
'98,,,98,,,98,98,,,,,99,99,98,,99,99,,99,98,,,,98,98,,98,98,,,,98,98',
'98,98,99,,,98,,,99,,99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99,,,99,99',
',,,,100,100,99,,100,100,,100,99,,,,99,99,,99,99,,,,99,99,99,99,100,',
',99,,,100,,100,,100,100,,100,100,100,,100,100,,,,,100,100,,,100,,,100',
'100,,,,,101,101,100,,101,101,,101,100,,,,100,100,,100,100,,,,100,100',
'100,100,101,,,100,,,101,,101,,101,101,,101,101,101,,101,101,,,,,101',
'101,,,101,,,101,101,,,,,102,102,101,,102,102,,102,101,,,,101,101,,101',
'101,,,,101,101,101,101,102,,,101,,,102,,102,,102,102,,102,102,102,,102',
'102,,,,,102,102,,,102,,,102,102,,,,,103,103,102,,103,103,,103,102,,',
',102,102,,102,102,,,,102,102,102,102,103,,,102,,,103,,103,,103,103,',
'103,103,103,,103,103,,,,,103,103,,,103,,,103,103,,,,,104,104,103,,104',
'104,,104,103,,,,103,103,,103,103,,,,103,103,103,103,104,,,103,,,104',
',104,,104,104,,104,104,104,,104,104,,,,,104,104,,,104,,,104,104,,,,',
'105,105,104,,105,105,,105,104,,,,104,104,,104,104,,,,104,104,104,104',
'105,,,104,,,105,,105,,105,105,,105,105,105,,105,105,,,,,105,105,,,105',
',,105,105,,,,,106,106,105,,106,106,,106,105,,,,105,105,,105,105,,,,105',
'105,105,105,106,,,105,,,106,,106,,106,106,,106,106,106,,106,106,,,,',
'106,106,,,106,,,106,106,,,,,107,107,106,,107,107,,107,106,,,,106,106',
',106,106,,,,106,106,106,106,107,,,106,,,107,,107,,107,107,,107,107,107',
',107,107,,,,,107,107,,,107,,,107,107,,,,,108,108,107,,108,108,,108,107',
',,,107,107,,107,107,,,,107,107,107,107,108,,,107,,,108,,108,,108,108',
',108,108,108,,108,108,,,,,108,108,,,108,,,108,108,,,291,291,291,291',
'108,291,291,291,291,291,108,291,291,108,108,108,,108,108,291,291,291',
'108,108,108,108,324,324,,108,324,324,,324,324,,,291,291,,,,,,,,,,,,324',
',,,,,324,,324,,324,324,,324,324,324,,324,324,,,,,324,324,,,324,,,324',
'324,,,,,110,110,324,,110,110,,110,324,,,,324,324,,324,324,,,,324,324',
'324,324,110,,,324,,,110,110,110,110,110,110,110,110,110,110,,110,110',
',,,,110,110,110,110,110,,,110,110,,,,,,,110,,,,,110,110,,,,110,110,',
'110,110,,,,110,110,110,110,317,317,,110,317,317,,317,,,,,,,,,,,,,,,',
',317,,,,,,317,,317,,317,317,,317,317,317,,317,317,,,,,317,317,,,317',
',,317,317,,,,,112,112,317,,112,112,,112,317,,,,317,317,,317,317,,,,317',
'317,317,317,112,,,317,,,112,,112,,112,112,,112,112,112,,112,112,,,,',
'112,112,,,112,,,112,112,,,,,113,113,112,,113,113,,113,112,,,,112,112',
',112,112,,,,112,112,112,112,113,,,112,,,113,,113,,113,113,,113,113,113',
',113,113,,,,,113,113,,,113,,,113,113,,,,,314,314,113,,314,314,,314,113',
',,,113,113,,113,113,,,,113,113,113,113,314,,,113,,,314,,314,,314,314',
',314,314,314,,314,314,,,,,314,314,,,314,,,314,314,,,,,307,307,314,,307',
'307,,307,314,,,,314,314,,314,314,,,,314,314,314,314,307,,,314,,,307',
',307,,307,307,,307,307,307,,307,307,,,,,307,307,,,307,,,307,307,,,,',
'293,293,307,,293,293,,293,307,,,,307,307,,307,307,,,,307,307,307,307',
'293,,,307,,,293,,293,,293,293,,293,293,293,,293,293,,,,,293,293,,,293',
',,293,293,,,,,292,292,293,,292,292,,292,293,,,,293,293,,293,293,,,,293',
'293,293,293,292,,,293,,,292,,292,,292,292,,292,292,292,,292,292,,,,',
'292,292,,,292,,,292,292,,,,,,,292,,,,,,292,,,,292,292,,292,292,,,,292',
'292,292,292,245,245,,292,245,245,,245,245,,,,,,,,,,,,,,,,245,,,,,,245',
',245,,245,245,,245,245,245,,245,245,245,245,,,245,245,,,245,,,245,245',
',,,,119,119,245,,119,119,,119,245,,,,245,245,,245,245,,,,245,245,245',
'245,119,119,,245,,,119,,119,,119,119,,119,119,119,,119,119,,,,,119,119',
',,119,,,119,119,,,,,289,289,119,,289,289,,289,119,,,,119,119,,119,119',
',,,119,119,119,119,289,,,119,,,289,,289,,289,289,,289,289,289,,289,289',
',,,,289,289,,,289,,,289,289,,,,,283,283,289,,283,283,,283,289,,,,289',
'289,,289,289,,,,289,289,289,289,283,,,289,,,283,,283,,283,283,,283,283',
'283,,283,283,,,,,283,283,,,283,,,283,283,,,,,123,123,283,,123,123,,123',
'283,,,,283,283,,283,283,,,,283,283,283,283,123,123,,283,,,123,,123,',
'123,123,,123,123,123,,123,123,,,,,123,123,,,123,,,123,123,,,,,160,160',
'123,,160,160,,160,123,,,,123,123,,123,123,,,,123,123,123,123,160,,,123',
',,160,,160,,160,160,,160,160,160,,160,160,160,160,,,160,160,,,160,,',
'160,160,,,,,246,246,160,,246,246,,246,160,,,,160,160,,160,160,,,,160',
'160,160,160,246,,,160,,,246,,246,,246,246,,246,246,246,,246,246,,,,',
'246,246,,,246,,,246,246,,,,,247,247,246,,247,247,,247,246,,,,246,246',
',246,246,,,,246,246,246,246,247,,,246,,,247,247,247,247,247,247,247',
'247,247,247,,247,247,,,,,247,247,247,247,247,,,247,247,,,,,,,247,,,',
',247,247,,,,247,247,,247,247,,,,247,247,247,247,248,248,,247,248,248',
',248,,,,,,,,,,,,,,,,,248,,,,,,248,,248,,248,248,,248,248,248,,248,248',
',,,,248,248,,,248,,,248,248,,,,,282,282,248,,282,282,,282,248,,,,248',
'248,,248,248,,,,248,248,248,248,282,,,248,,,282,,282,,282,282,,282,282',
'282,,282,282,,,,,282,282,,,282,,,282,282,,,,,130,130,282,,130,130,,130',
'282,,,,282,282,,282,282,,,,282,282,282,282,130,,,282,,,130,,130,,130',
'130,,130,130,130,,130,130,,,,,130,130,,,130,,,130,130,,,,,259,259,130',
',259,259,259,259,130,,,,130,130,,130,130,,,,130,130,130,130,259,,,130',
',,259,,259,,259,259,,259,259,259,,259,259,,,,,259,259,,,259,,,259,259',
',,,,270,270,259,,270,270,,270,259,,,,259,259,,259,259,,,,259,259,259',
'259,270,,,259,,,270,,270,,270,270,,270,270,270,,270,270,,,,,270,270',
',,270,,,270,270,,,,,,,270,,,,,,270,,,,270,270,,270,270,,,,270,270,270',
'270,265,265,,270,265,265,,265,265,,,,,,,,,,,,,,,,265,,,,,,265,,265,',
'265,265,,265,265,265,,265,265,,,,,265,265,,,265,,,265,265,,,,,263,263',
'265,,263,263,,263,265,,,,265,265,,265,265,,,,265,265,265,265,263,,,265',
',,263,,263,,263,263,,263,263,263,,263,263,,,,,263,263,,,263,,,263,263',
',,,,79,79,263,,79,79,,79,263,,,,263,263,,263,263,,,,263,263,263,263',
'79,,,263,,,79,,79,,79,79,,79,79,79,,79,79,79,79,,,79,79,,,79,,,79,79',
',,,,,,79,,,,,,79,,,,79,79,,79,79,,,146,79,79,79,79,,,,79,146,146,146',
'146,146,146,,146,,146,,,146,146,146,146,,,,,,,,,,,,,,,,146,,,,146,146',
',,146,146,146,146,146,146,,146,146,,279,,279,,146,279,,,,279,279,279',
'279,279,279,,279,,279,,,279,279,279,279,,146,,,,,,,,,,,,,,279,,,,279',
'279,,,279,279,279,279,279,279,151,279,279,,,151,,,279,151,151,151,151',
'151,151,,151,,151,,,151,151,151,151,,,,,,279,,,,,,,,,,151,,,,151,151',
',,151,151,151,151,151,151,,151,151,128,,128,,,151,,,,128,128,128,128',
'128,128,,128,,128,,,128,128,128,128,,,151,,,,,,,,,,,,,128,,,,128,128',
',,128,128,128,128,128,128,155,128,128,,,,,,128,155,155,155,155,155,155',
',155,,155,,,155,155,155,155,,,,,,128,,,,,,,,,,155,,,,155,155,,,155,155',
'155,155,155,155,,155,155,127,,127,,,155,,,,127,127,127,127,127,127,',
'127,,127,,,127,127,127,127,,,155,,,,,,,,,,,,,127,,,,127,127,,,127,127',
'127,127,127,127,,127,127,126,,126,,,127,,,,126,126,126,126,126,126,',
'126,,126,,,126,126,126,126,,,127,,,,,,,,,,,,,126,,,,126,126,,,126,126',
'126,126,126,126,,126,126,124,,124,,,126,,,,124,124,124,124,124,124,',
'124,,124,,,124,124,124,124,,,126,,,,,,,,,,,,,124,,,,124,124,,,124,124',
'124,124,124,124,118,124,124,,,,,,124,118,118,118,118,118,118,,118,,118',
',118,118,118,118,118,,,,,,124,,,,,,,,,,118,,,,118,118,,,118,118,118',
'118,118,118,162,118,118,,,,,,118,162,162,162,162,162,162,,162,,162,',
',162,162,162,162,,,,,,118,,,,,,,,,,162,,,,162,162,,,162,162,162,162',
'162,162,340,162,162,,,,,,162,340,340,340,340,340,340,,340,,340,162,162',
'340,340,340,340,,,,,,162,,,,,,,,,,340,,,,340,340,,,340,340,340,340,340',
'340,343,340,340,,,,,,340,343,343,343,343,343,343,,343,,343,,,343,343',
'343,343,,,,,,340,,,,,,,,,,343,,,,343,343,,,343,343,343,343,343,343,349',
'343,343,,,,,,343,349,349,349,349,349,349,,349,,349,,,349,349,349,349',
',,,,,343,,,,,,,,,,349,,,,349,349,,,349,349,349,349,349,349,222,349,349',
',,,,,349,222,222,222,222,222,222,,222,,222,,,222,222,222,222,,,,,,349',
',,,,,,,,,222,,,,222,222,,,222,222,222,222,222,222,357,222,222,,,,,,222',
'357,357,357,357,357,357,,357,,357,,,357,357,357,357,,,,,,222,,,,,,,',
',,357,,,,357,357,,,357,357,357,357,357,357,358,357,357,,,,,,357,358',
'358,358,358,358,358,,358,,358,,,358,358,358,358,,,,,,357,,,,,,,,,,358',
',,,358,358,,,358,358,358,358,358,358,364,358,358,,,,,,358,364,364,364',
'364,364,364,,364,,364,,,364,364,364,364,,,,,,358,,,,,,,,,,364,,,,364',
'364,,,364,364,364,364,364,364,198,364,364,,,,,,364,198,198,198,198,198',
'198,198,198,,198,,,198,198,198,198,,,,,,364,,,,,,,,,,198,,,,198,198',
',,198,198,198,198,198,198,,198,198,11,,11,,,198,,,,11,11,11,11,11,11',
',11,181,11,,,11,11,11,11,,,198,,,,181,,181,,181,,,,,11,,,,11,11,,,11',
'11,11,11,11,11,,11,11,181,,,182,,11,,,181,181,181,181,,,,181,181,182',
',182,183,182,181,,,,,11,,,,,,,183,,183,,183,,,,,182,181,,,,,,,182,182',
'182,182,182,182,,182,182,183,,,,,182,,184,183,183,183,183,183,183,,183',
'183,,,,184,184,183,184,185,184,,182,184,,,,,,,,,185,185,,185,,185,,183',
'185,,184,,,,,,,,184,184,184,184,184,184,,184,184,185,,,,,184,,186,185',
'185,185,185,185,185,,185,185,,,,186,186,185,186,187,186,,184,186,,,',
',,,,,187,187,,187,,187,,185,187,,186,,,,,,,,186,186,186,186,186,186',
',186,186,187,,,,,186,,188,187,187,187,187,187,187,,187,187,,,188,188',
'188,187,188,,188,,186,188,188,188,188,,,,,,,,,,,,,187,,,188,,,,,189',
',,188,188,188,188,188,188,,188,188,189,189,189,,189,188,189,,190,189',
'189,189,189,,,,,190,190,190,190,190,190,,190,,190,188,189,190,190,190',
'190,189,,,189,189,189,189,189,189,,189,189,,,,190,,189,,190,190,,,190',
'190,190,190,190,190,,190,190,191,,,,,190,,189,,191,191,191,191,191,191',
',191,,191,,,191,191,191,191,,,190,,,,,,,,,,,,,191,,,,191,191,,,191,191',
'191,191,191,191,193,191,191,,,193,,,191,193,193,193,193,193,193,,193',
',193,,,193,193,193,193,,,,,,191,,,,,,,,,,193,,,,193,193,,,193,193,193',
'193,193,193,192,193,193,,,,,,193,192,192,192,192,192,192,,192,,192,',
',192,192,192,192,255,255,257,257,255,193,257,51,51,212,212,51,,212,',
'192,,,,192,192,,,192,192,192,192,192,192,,192,192,,,,,177,192,,255,',
'257,255,,257,,51,178,212,51,177,212,177,,177,,,,,192,,178,255,178,257',
'178,,,,51,179,212,255,255,257,257,177,,,51,51,212,212,,179,,179,178',
'179,,,177,177,,,,,,177,,,,178,178,,,,,,178,179,,,,,,,,,,,,,,,179,179',
',,,,,179' ]
        racc_action_check = arr = ::Array.new(7002, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   326,   nil,   nil,   nil,   142,   311,   nil,   176,   nil,
   nil,  6355,   430,   490,   550,   610,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   281,   220,   259,   850,   910,   970,  1030,    49,   233,   nil,
    92,  6874,   nil,   nil,   nil,   nil,   nil,  1354,  1414,  1498,
   nil,   nil,   nil,   nil,   nil,  1558,   nil,   181,   185,   nil,
  1786,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   254,  5290,
   237,  2050,  2110,  2170,  2230,  2290,  2350,  2410,  2470,  2530,
  2590,  2650,  2710,  2770,  2830,  2890,  2950,  3010,  3070,  3130,
  3190,  3250,  3310,  3370,  3430,  3490,  3550,  3610,  3670,   189,
  3814,   184,  3958,  4018,   318,   113,    90,  1834,  5812,  4402,
   nil,   101,    63,  4582,  5758,   nil,  5701,  5644,  5533,    20,
  4966,    14,   nil,   nil,   nil,   nil,   129,    56,   nil,   148,
   nil,   nil,   nil,   nil,   nil,   nil,  5364,    87,   nil,    66,
   nil,  5476,    92,   nil,   nil,  5587,   nil,   137,   nil,    16,
  4642,   104,  5866,  1726,   nil,   267,   nil,   nil,   nil,   nil,
   nil,    93,  1734,  1462,  1258,     2,   230,  6898,  6909,  6932,
  1646,  6372,  6415,  6432,  6479,  6496,  6543,  6560,  6607,  6652,
  6672,  6729,  6837,  6783,   nil,   nil,   370,   nil,  6298,   790,
  1090,  1150,   222,   177,   nil,   nil,    -1,   nil,    -2,    -9,
   106,   121,  6876,     2,    -4,   nil,   nil,   nil,   nil,   nil,
   nil,  1586,  6082,    82,   nil,    80,   nil,    53,   118,   nil,
  1294,   nil,   260,   nil,   nil,   nil,   nil,   nil,   273,   287,
   -24,   279,   -11,   nil,  1642,  4342,  4702,  4762,  4846,   219,
   210,   nil,   -21,   209,   191,  6867,   nil,  6869,   -28,  5026,
   nil,  1930,   nil,  5230,   nil,  5170,   nil,   nil,   nil,   nil,
  5086,   nil,   nil,   nil,   123,   nil,   nil,   nil,   nil,  5422,
   271,   nil,  4906,  4522,    65,   nil,   170,   nil,    97,  4462,
   114,  3698,  4258,  4198,   150,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  4138,   146,   nil,
   167,   nil,   109,    60,  4078,   nil,   nil,  3898,   nil,   187,
   161,   191,   182,     4,  3754,   nil,   192,   225,   203,   236,
   238,   nil,    26,   nil,   236,  1990,  1870,   nil,   nil,   nil,
  5920,   nil,   nil,  5974,   nil,   nil,   nil,   188,   -60,  6028,
   258,  1210,   261,   nil,   nil,   nil,   nil,  6136,  6190,    21,
   213,   nil,   nil,   nil,  6244,    90,   137,   nil,   730,   285,
   262,   nil,   288,   289,   nil,   nil,   nil,   292,   295,   296,
   nil,   670,   nil,   nil,   nil,   287,   308,   nil,   nil,   312,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   310,   nil,   226,    82,   nil,   nil,   nil,   317,   nil,
   nil,   nil,   318,   nil,   319,   nil,   320,   nil,   nil,   nil,
   nil,   nil ]

racc_action_default = [
  -244,  -245,    -1,    -2,    -3,    -4,    -5,    -8,   -10,   -11,
   -16,  -109,  -245,  -245,  -245,  -245,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,
   -60,   -61,   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,
   -74,   -75,   -79,  -245,  -245,  -245,  -245,  -245,  -120,  -122,
  -245,  -245,  -177,  -178,  -179,  -180,  -181,  -245,  -245,  -245,
  -194,  -195,  -196,  -197,  -198,  -245,  -200,  -245,  -211,  -214,
  -245,  -219,  -220,  -221,  -222,  -223,  -224,  -225,  -245,  -245,
    -7,  -245,  -245,  -245,  -245,  -245,  -245,  -245,  -245,  -245,
  -245,  -245,  -245,  -245,  -245,  -245,  -245,  -245,  -245,  -245,
  -245,  -245,  -245,  -245,  -245,  -245,  -245,  -245,  -245,  -245,
  -129,  -124,  -244,  -244,   -28,  -245,   -29,   -36,  -245,  -245,
   -76,  -245,  -245,  -245,  -245,   -86,  -245,  -245,  -245,  -245,
  -245,  -244,  -139,  -160,  -161,  -121,  -244,  -244,  -148,  -150,
  -151,  -152,  -153,  -154,  -156,  -157,   -44,  -245,  -184,  -245,
  -187,  -245,  -245,  -190,  -191,  -204,  -199,  -245,  -207,  -245,
  -245,  -245,  -245,  -245,   422,    -6,    -9,   -12,   -13,   -14,
   -15,  -245,   -18,   -19,   -20,   -21,   -22,   -23,   -24,   -25,
   -26,   -27,   -30,   -31,   -32,   -33,   -34,   -35,   -37,   -38,
   -39,   -40,   -41,  -245,   -42,  -104,  -245,   -80,  -245,  -237,
  -243,  -231,  -228,  -226,  -118,  -130,  -220,  -133,  -224,  -245,
  -234,  -232,  -240,  -222,  -223,  -230,  -235,  -236,  -238,  -239,
  -241,  -129,  -128,  -245,  -127,  -245,   -43,  -226,   -71,   -81,
  -245,   -84,  -226,  -165,  -167,  -168,  -169,  -170,  -172,  -245,
  -245,  -175,  -245,   -78,  -245,  -245,  -245,  -129,  -245,  -228,
  -244,  -162,  -245,  -245,  -245,  -245,  -158,  -245,  -245,  -245,
  -182,  -245,  -185,  -245,  -188,  -245,  -201,  -202,  -203,  -205,
  -245,  -208,  -209,  -210,  -226,  -212,  -215,  -217,  -218,  -109,
  -245,   -17,  -245,  -245,  -226,  -106,  -129,  -117,  -245,  -229,
  -245,  -227,  -245,  -245,  -226,  -132,  -134,  -231,  -232,  -233,
  -234,  -237,  -240,  -242,  -243,  -125,  -126,  -227,  -245,   -73,
  -245,   -83,  -245,  -227,  -245,  -173,  -174,  -245,   -77,  -245,
   -89,  -245,   -95,  -245,  -245,   -99,  -228,  -226,  -228,  -245,
  -245,  -142,  -245,  -163,  -226,  -244,  -245,  -149,  -159,  -155,
   -45,  -183,  -186,  -193,  -189,  -192,  -206,  -245,  -245,  -108,
  -245,  -227,  -226,  -112,  -119,  -113,  -131,  -135,  -136,  -245,
   -70,   -82,   -85,  -166,  -171,  -245,   -89,   -88,  -245,  -245,
   -95,   -94,  -245,  -245,  -103,   -98,  -100,  -245,  -245,  -245,
  -115,  -244,  -143,  -144,  -145,  -245,  -245,  -140,  -141,  -245,
  -147,  -213,  -216,  -105,  -107,  -116,  -123,   -72,  -176,   -87,
   -90,  -245,   -93,  -245,  -245,  -110,  -111,  -114,  -245,  -164,
  -137,  -146,  -245,   -92,  -245,   -97,  -245,  -102,  -138,   -91,
   -96,  -101 ]

racc_goto_table = [
     2,   136,     4,   120,   114,   116,   117,   118,   142,   140,
   147,   149,   156,   195,   241,   276,   232,   288,   371,   203,
   202,   367,   386,   250,   337,   325,   338,   330,   253,   223,
   225,   166,    80,   354,   286,   124,   126,   127,   128,   171,
   249,   167,   168,   169,   170,   284,   356,   229,   373,   146,
   146,   151,   324,   241,   194,   274,   382,   155,   254,   400,
   339,   363,   162,   316,   329,   315,   402,   399,   408,   345,
   271,   272,   227,     3,   269,   270,   242,   268,   146,   172,
   173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
   183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
   193,   285,   198,   376,   222,   222,   165,   158,   160,     1,
   nil,   146,   nil,   nil,   nil,   146,   nil,   nil,   290,   nil,
   nil,   nil,   198,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   294,   nil,   nil,   251,   nil,   nil,   nil,   nil,   251,   256,
   nil,   377,   308,   379,   241,   nil,   334,   312,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   279,   327,   326,   328,   nil,
   273,   136,   nil,   280,   nil,   nil,   nil,   nil,   nil,   142,
   140,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   193,   347,
   309,   124,   126,   127,   nil,   352,   nil,   nil,   nil,   350,
   nil,   392,   nil,   nil,   nil,   241,   nil,   nil,   nil,   359,
   nil,   nil,   142,   140,   142,   140,   nil,   346,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   310,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   146,   198,
   198,   nil,   378,   nil,   319,   321,   nil,   nil,   nil,   385,
   nil,   340,   331,   340,   nil,   343,   394,   151,   nil,   nil,
   nil,   nil,   155,   nil,   nil,   nil,   nil,   395,   nil,   nil,
   365,   nil,   nil,   nil,   340,   349,   nil,   nil,   nil,   nil,
   nil,   198,   nil,   383,   357,   358,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   340,
   nil,   nil,   nil,   nil,   nil,   nil,   364,   nil,   nil,   146,
   nil,   nil,   nil,   nil,   nil,   nil,   146,   nil,   nil,   nil,
   nil,   nil,   397,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   389,   388,   nil,   nil,
   nil,   nil,   nil,   193,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   124,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   388,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   412,   nil,   414,   416 ]

racc_goto_check = [
     2,    65,     4,    40,    10,    10,    10,    10,    32,    38,
    12,    12,    88,    52,    35,    95,    45,    56,    48,    57,
    55,    47,    67,    66,    73,    50,    73,    69,    66,    61,
    61,     7,     6,    58,    59,    10,    10,    10,    10,    12,
    55,     8,     8,     8,     8,    53,    62,    44,    51,    10,
    10,    10,    49,    35,    13,    45,    70,    10,    72,    46,
    75,    76,    10,    77,    56,    79,    48,    47,    67,    83,
    84,    85,    12,     3,    89,    90,    12,    92,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    52,    10,    50,    10,    10,     6,    93,    94,     1,
   nil,    10,   nil,   nil,   nil,    10,   nil,   nil,    39,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    57,   nil,   nil,     4,   nil,   nil,   nil,   nil,     4,     4,
   nil,    56,    39,    56,    35,   nil,    45,    39,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    10,    57,    55,    55,   nil,
     2,    65,   nil,     2,   nil,   nil,   nil,   nil,   nil,    32,
    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,    39,
    40,    10,    10,    10,   nil,    57,   nil,   nil,   nil,    39,
   nil,    95,   nil,   nil,   nil,    35,   nil,   nil,   nil,    39,
   nil,   nil,    32,    38,    32,    38,   nil,    88,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,    10,
    10,   nil,    39,   nil,     2,     2,   nil,   nil,   nil,    39,
   nil,    10,     4,    10,   nil,    10,    52,    10,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,    39,   nil,   nil,
    12,   nil,   nil,   nil,    10,    10,   nil,   nil,   nil,   nil,
   nil,    10,   nil,    65,    10,    10,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,
   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,     4,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     4,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   109,     0,    73,     2,   nil,    27,   -50,   -41,   nil,
    -8,   nil,   -47,   -54,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -43,   nil,   nil,  -108,   nil,   nil,   -42,   -85,
   -38,   nil,   nil,   nil,   -74,  -106,  -309,  -299,  -304,  -194,
  -221,  -275,   -95,  -151,   nil,   -90,  -185,   -91,  -256,  -164,
   nil,   -83,  -245,   nil,   nil,   -49,  -108,  -313,   nil,  -223,
  -276,   nil,   -79,  -231,   nil,  -198,  -252,  -177,   nil,  -174,
   nil,   nil,   nil,  -196,   -89,   -88,   nil,   nil,   -53,   -83,
   -82,   nil,   -80,    40,    40,  -147 ]

racc_goto_default = [
   nil,   nil,   387,   nil,   224,     5,     6,     7,     8,     9,
    11,    10,   323,   nil,    16,    40,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,   nil,
   nil,    41,    42,   121,   nil,   nil,   125,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,   204,   nil,
   111,   nil,   205,   209,   207,   132,   nil,   nil,   131,   nil,
   nil,   137,   nil,   138,   139,   143,   233,   234,   235,   236,
   237,   240,   152,   154,    60,    61,    62,    65,   nil,   nil,
   nil,   157,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 95, :_reduce_1,
  1, 95, :_reduce_2,
  1, 95, :_reduce_none,
  1, 96, :_reduce_4,
  1, 99, :_reduce_5,
  3, 99, :_reduce_6,
  2, 99, :_reduce_7,
  1, 100, :_reduce_8,
  3, 100, :_reduce_9,
  1, 101, :_reduce_none,
  1, 102, :_reduce_11,
  3, 102, :_reduce_12,
  3, 102, :_reduce_13,
  3, 102, :_reduce_14,
  3, 102, :_reduce_15,
  1, 104, :_reduce_none,
  4, 104, :_reduce_17,
  3, 104, :_reduce_18,
  3, 104, :_reduce_19,
  3, 104, :_reduce_20,
  3, 104, :_reduce_21,
  3, 104, :_reduce_22,
  3, 104, :_reduce_23,
  3, 104, :_reduce_24,
  3, 104, :_reduce_25,
  3, 104, :_reduce_26,
  3, 104, :_reduce_27,
  2, 104, :_reduce_28,
  2, 104, :_reduce_29,
  3, 104, :_reduce_30,
  3, 104, :_reduce_31,
  3, 104, :_reduce_32,
  3, 104, :_reduce_33,
  3, 104, :_reduce_34,
  3, 104, :_reduce_35,
  2, 104, :_reduce_36,
  3, 104, :_reduce_37,
  3, 104, :_reduce_38,
  3, 104, :_reduce_39,
  3, 104, :_reduce_40,
  3, 104, :_reduce_41,
  3, 104, :_reduce_42,
  3, 104, :_reduce_43,
  1, 106, :_reduce_44,
  3, 106, :_reduce_45,
  1, 105, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 127, :_reduce_68,
  1, 127, :_reduce_69,
  5, 108, :_reduce_70,
  3, 108, :_reduce_71,
  6, 108, :_reduce_72,
  4, 108, :_reduce_73,
  1, 108, :_reduce_74,
  1, 112, :_reduce_75,
  2, 112, :_reduce_76,
  4, 135, :_reduce_77,
  3, 135, :_reduce_78,
  1, 135, :_reduce_79,
  3, 136, :_reduce_80,
  2, 134, :_reduce_81,
  3, 138, :_reduce_82,
  2, 138, :_reduce_83,
  2, 137, :_reduce_84,
  4, 137, :_reduce_85,
  2, 115, :_reduce_86,
  5, 140, :_reduce_87,
  4, 140, :_reduce_88,
  0, 141, :_reduce_none,
  2, 141, :_reduce_90,
  4, 141, :_reduce_91,
  3, 141, :_reduce_92,
  6, 116, :_reduce_93,
  5, 116, :_reduce_94,
  0, 142, :_reduce_none,
  4, 142, :_reduce_96,
  3, 142, :_reduce_97,
  5, 114, :_reduce_98,
  1, 143, :_reduce_99,
  2, 143, :_reduce_100,
  5, 144, :_reduce_101,
  4, 144, :_reduce_102,
  1, 145, :_reduce_103,
  1, 107, :_reduce_none,
  4, 107, :_reduce_105,
  1, 147, :_reduce_106,
  3, 147, :_reduce_107,
  3, 146, :_reduce_108,
  1, 103, :_reduce_109,
  6, 103, :_reduce_110,
  6, 103, :_reduce_111,
  5, 103, :_reduce_112,
  5, 103, :_reduce_113,
  6, 103, :_reduce_114,
  5, 103, :_reduce_115,
  4, 152, :_reduce_116,
  1, 153, :_reduce_117,
  1, 149, :_reduce_118,
  3, 149, :_reduce_119,
  1, 148, :_reduce_120,
  2, 148, :_reduce_121,
  1, 148, :_reduce_122,
  6, 113, :_reduce_123,
  2, 113, :_reduce_124,
  3, 154, :_reduce_125,
  3, 154, :_reduce_126,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  0, 151, :_reduce_129,
  1, 151, :_reduce_130,
  3, 151, :_reduce_131,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  3, 156, :_reduce_135,
  3, 156, :_reduce_136,
  6, 117, :_reduce_137,
  7, 118, :_reduce_138,
  1, 162, :_reduce_139,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 163, :_reduce_none,
  2, 163, :_reduce_143,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  6, 119, :_reduce_146,
  5, 119, :_reduce_147,
  1, 165, :_reduce_148,
  3, 165, :_reduce_149,
  1, 167, :_reduce_150,
  1, 167, :_reduce_151,
  1, 167, :_reduce_152,
  1, 167, :_reduce_none,
  1, 168, :_reduce_154,
  3, 168, :_reduce_155,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 166, :_reduce_none,
  2, 166, :_reduce_159,
  1, 159, :_reduce_160,
  1, 159, :_reduce_161,
  1, 160, :_reduce_162,
  2, 160, :_reduce_163,
  4, 160, :_reduce_164,
  1, 139, :_reduce_165,
  3, 139, :_reduce_166,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  3, 173, :_reduce_171,
  1, 173, :_reduce_172,
  2, 174, :_reduce_173,
  2, 172, :_reduce_174,
  1, 175, :_reduce_175,
  4, 175, :_reduce_176,
  1, 111, :_reduce_177,
  1, 121, :_reduce_178,
  1, 121, :_reduce_179,
  1, 121, :_reduce_180,
  1, 121, :_reduce_181,
  3, 122, :_reduce_182,
  4, 122, :_reduce_183,
  2, 122, :_reduce_184,
  3, 122, :_reduce_185,
  4, 122, :_reduce_186,
  2, 122, :_reduce_187,
  3, 125, :_reduce_188,
  4, 125, :_reduce_189,
  2, 125, :_reduce_190,
  1, 176, :_reduce_191,
  3, 176, :_reduce_192,
  3, 177, :_reduce_193,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 178, :_reduce_197,
  1, 178, :_reduce_198,
  2, 179, :_reduce_199,
  1, 181, :_reduce_200,
  1, 183, :_reduce_201,
  1, 184, :_reduce_202,
  2, 182, :_reduce_203,
  1, 185, :_reduce_204,
  1, 186, :_reduce_205,
  2, 186, :_reduce_206,
  2, 180, :_reduce_207,
  2, 187, :_reduce_208,
  2, 187, :_reduce_209,
  3, 97, :_reduce_210,
  0, 188, :_reduce_211,
  2, 188, :_reduce_212,
  4, 188, :_reduce_213,
  1, 120, :_reduce_214,
  3, 120, :_reduce_215,
  5, 120, :_reduce_216,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 128, :_reduce_219,
  1, 131, :_reduce_220,
  1, 129, :_reduce_221,
  1, 130, :_reduce_222,
  1, 124, :_reduce_223,
  1, 123, :_reduce_224,
  1, 126, :_reduce_225,
  0, 133, :_reduce_none,
  1, 133, :_reduce_227,
  0, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  0, 98, :_reduce_244 ]

racc_reduce_n = 245

racc_shift_n = 422

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :LOW => 86,
  :HIGH => 87,
  :CALL => 88,
  :LISTSTART => 89,
  :SPLAT => 90,
  :MODULO => 91,
  :TITLE_COLON => 92,
  :CASE_COLON => 93 }

racc_nt_base = 94

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "LOW",
  "HIGH",
  "CALL",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "reserved_word",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "number",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 86)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 87)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_15(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_17(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_18(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_19(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_20(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_21(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_22(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_23(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_24(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_25(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_26(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_27(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_28(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_29(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_30(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_31(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 119)
  def _reduce_32(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 120)
  def _reduce_33(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 121)
  def _reduce_34(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 122)
  def _reduce_35(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 123)
  def _reduce_36(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 124)
  def _reduce_37(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_38(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_39(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_40(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 128)
  def _reduce_41(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 129)
  def _reduce_42(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 130)
  def _reduce_43(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 138)
  def _reduce_44(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 139)
  def _reduce_45(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

module_eval(<<'.,.,', 'egrammar.ra', 172)
  def _reduce_68(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 173)
  def _reduce_69(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_70(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 185)
  def _reduce_71(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_72(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_73(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_74(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_75(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_76(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_77(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_78(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_79(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_80(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 226)
  def _reduce_81(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 231)
  def _reduce_82(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 232)
  def _reduce_83(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 236)
  def _reduce_84(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 237)
  def _reduce_85(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 247)
  def _reduce_86(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 254)
  def _reduce_87(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 258)
  def _reduce_88(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'egrammar.ra', 266)
  def _reduce_90(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 270)
  def _reduce_91(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 274)
  def _reduce_92(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 283)
  def _reduce_93(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_94(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'egrammar.ra', 297)
  def _reduce_96(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 301)
  def _reduce_97(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_98(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 315)
  def _reduce_99(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 316)
  def _reduce_100(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 321)
  def _reduce_101(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 325)
  def _reduce_102(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 329)
  def _reduce_103(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 104 omitted

module_eval(<<'.,.,', 'egrammar.ra', 340)
  def _reduce_105(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_106(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 346)
  def _reduce_107(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 351)
  def _reduce_108(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 363)
  def _reduce_109(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 366)
  def _reduce_110(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error val[1], "A resource default can not be virtual or exported"
      when :override
        error val[1], "A resource override can not be virtual or exported"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 381)
  def _reduce_111(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class, :defaults, :override
        error val[1], "Defaults are not virtualizable"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 389)
  def _reduce_112(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error val[1], "A resource default can not specify a resource name"
      when :override
        error val[1], "A resource override does not allow override of name of resource"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 402)
  def _reduce_113(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 423)
  def _reduce_114(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        result.form = val[0]
        loc result, val[1], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 428)
  def _reduce_115(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_116(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 435)
  def _reduce_117(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_118(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 439)
  def _reduce_119(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_120(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 445)
  def _reduce_121(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 446)
  def _reduce_122(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 458)
  def _reduce_123(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 462)
  def _reduce_124(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_125(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 468)
  def _reduce_126(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'egrammar.ra', 481)
  def _reduce_129(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 482)
  def _reduce_130(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 483)
  def _reduce_131(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'egrammar.ra', 499)
  def _reduce_135(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 503)
  def _reduce_136(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 513)
  def _reduce_137(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 527)
  def _reduce_138(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 537)
  def _reduce_139(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'egrammar.ra', 546)
  def _reduce_143(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'egrammar.ra', 563)
  def _reduce_146(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 567)
  def _reduce_147(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], nil))
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_148(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 578)
  def _reduce_149(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_150(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 584)
  def _reduce_151(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 585)
  def _reduce_152(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 153 omitted

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_154(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 590)
  def _reduce_155(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'egrammar.ra', 599)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_160(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_161(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_162(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_163(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_164(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_165(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_166(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_171(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_172(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_173(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_174(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_175(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_176(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_177(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_178(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_179(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_180(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_181(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_182(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_183(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_184(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_185(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_186(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_187(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 685)
  def _reduce_188(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 686)
  def _reduce_189(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_190(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_191(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_192(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_193(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

module_eval(<<'.,.,', 'egrammar.ra', 702)
  def _reduce_197(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 703)
  def _reduce_198(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 705)
  def _reduce_199(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_200(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 707)
  def _reduce_201(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 708)
  def _reduce_202(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 709)
  def _reduce_203(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 710)
  def _reduce_204(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 713)
  def _reduce_205(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 714)
  def _reduce_206(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 717)
  def _reduce_207(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 720)
  def _reduce_208(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 721)
  def _reduce_209(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 724)
  def _reduce_210(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 727)
  def _reduce_211(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 728)
  def _reduce_212(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 729)
  def _reduce_213(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 732)
  def _reduce_214(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 733)
  def _reduce_215(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 734)
  def _reduce_216(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 217 omitted

# reduce 218 omitted

module_eval(<<'.,.,', 'egrammar.ra', 740)
  def _reduce_219(val, _values, result)
     result = Factory.NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 741)
  def _reduce_220(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 742)
  def _reduce_221(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 743)
  def _reduce_222(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 744)
  def _reduce_223(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 749)
  def _reduce_224(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 752)
  def _reduce_225(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 226 omitted

module_eval(<<'.,.,', 'egrammar.ra', 758)
  def _reduce_227(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

module_eval(<<'.,.,', 'egrammar.ra', 781)
  def _reduce_244(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
