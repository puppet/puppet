#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 724)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'52,54,248,-130,47,224,48,114,238,-210,238,320,237,319,-201,-132,287',
'238,325,52,54,273,13,211,108,211,130,117,38,226,44,116,46,42,117,45',
'60,56,116,40,59,43,249,-130,57,12,52,54,58,-210,47,11,48,364,-201,-132',
'56,208,228,61,117,107,106,227,116,39,52,54,13,55,320,117,319,295,38',
'116,44,303,46,42,117,45,60,56,116,40,59,43,55,221,57,12,52,54,58,117',
'47,11,48,116,305,229,334,56,230,61,66,68,67,69,262,39,52,54,13,55,107',
'106,107,106,38,261,44,107,46,42,247,45,60,56,63,40,59,43,206,55,57,12',
'52,54,58,310,47,11,48,362,233,232,247,313,314,61,211,301,317,221,321',
'39,323,231,13,55,65,245,247,330,38,331,44,272,46,42,271,45,60,56,196',
'40,59,43,172,65,57,12,52,54,58,138,47,11,48,360,290,340,289,247,70,61',
'118,267,52,54,343,39,52,54,13,55,286,92,345,96,38,91,44,263,46,42,245',
'45,60,56,245,40,59,43,348,323,57,12,350,351,58,70,95,11,352,122,52,54',
'124,122,353,61,124,70,92,93,96,39,91,101,356,55,89,90,86,81,92,61,96',
'357,91,61,358,82,84,83,85,55,271,95,65,55,62,56,365,366,367,368,52,54',
',95,47,,48,88,87,,,74,75,77,76,79,80,61,72,73,,,13,,,71,,55,38,,44,',
'46,98,78,45,60,56,,40,59,,,,57,12,52,54,58,70,47,11,48,,,,,,,61,,,92',
',96,39,91,,13,55,,,,,38,,44,,46,98,,45,60,56,,40,59,95,,,57,12,52,54',
'58,70,47,11,48,,,,72,73,,61,,,92,71,96,39,91,,13,55,,,,,38,,44,,46,98',
',45,60,56,,40,59,95,,,57,12,52,54,58,,47,11,48,355,,,72,73,,61,,,,71',
',39,,,13,55,,,,,38,,44,,46,42,,45,60,56,,40,59,43,,,57,12,52,54,58,',
'47,11,48,,,,,,70,61,,,52,54,,39,52,54,13,55,,92,,96,38,91,44,,46,98',
',45,60,56,,40,59,,,,57,12,,,58,,95,11,,56,52,54,,122,,61,124,70,,,,39',
',,,55,89,90,86,81,92,61,96,,91,61,,82,84,83,85,55,,,,55,,122,,,124,',
'52,54,,95,47,,48,88,87,,,74,75,77,76,79,80,61,72,73,,,13,,,71,,55,38',
',44,,46,98,78,45,60,56,,40,59,,,,57,12,52,54,58,70,47,11,48,,,,,,,61',
',,92,,96,39,91,,13,55,,,,,38,,44,,46,98,,45,60,56,,40,59,95,,,57,12',
'52,54,58,,47,11,48,,,,72,73,,61,,,,71,,39,,,13,55,,,,,38,,44,,46,98',
',45,60,56,,40,59,,,,57,12,52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13,55',
',,,,38,,44,,46,98,,45,60,56,,40,59,,,,57,12,,,58,,,11,,,,,,,,61,,70',
',,,39,,,,55,89,90,86,81,92,,96,,91,,,82,84,83,85,,,,,,,,,,,,,,,95,,',
',88,87,,,74,75,77,76,79,80,,72,73,70,,,,,71,,,,89,90,86,81,92,78,96',
',91,,,82,84,83,85,,,,,,,,,,,,52,54,,95,47,,48,88,87,,,74,75,77,76,79',
'80,,72,73,,,13,,,71,,,38,,44,,46,98,78,45,60,56,,40,59,,,,57,12,,,58',
'52,54,11,,47,128,48,,,,61,,,,,,39,,,,55,,13,,,,,,38,,44,,46,98,,45,60',
'56,,40,59,,,,57,12,52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13,55,,,,,38',
',44,,46,98,,45,60,56,,40,59,,,,57,12,,,58,,,11,,,,,,,,61,,70,,,,39,',
',,55,89,90,86,81,92,,96,,91,,,82,84,83,85,,,,,,,,,,,,52,54,,95,47,,48',
'88,87,,,74,75,77,76,79,80,,72,73,,,13,,,71,,,38,,44,,46,42,78,45,60',
'56,,40,59,43,,,57,12,,,58,,,11,,,,,,,,61,,70,,,,39,,,,55,89,90,86,81',
'92,,96,,91,,,82,84,83,85,,,,,,,,,,,,52,54,,95,47,,48,88,87,,,74,75,77',
'76,79,80,,72,73,,,13,,,71,,,38,,44,,46,42,78,45,60,56,,40,59,43,,,57',
'12,52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13,55,,,,,38,,44,,46,42,,45',
'60,56,,40,59,43,,,57,12,52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13,55',
',,,,38,,44,,46,42,,45,60,56,,40,59,43,,,57,12,52,54,58,,47,11,48,,,',
',,,61,,,,,,39,,,13,55,,,,,38,,44,,46,42,,45,60,56,,40,59,43,,,57,12',
'52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13,55,,,,,38,,44,,46,42,,45,60',
'56,,40,59,43,,,57,12,52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13,55,,,',
',38,,44,,46,98,,45,60,56,,40,59,,,,57,12,52,54,58,,47,11,48,,,,,,,61',
',,,,,39,,,13,55,,,,,38,,44,,46,98,,45,60,56,,40,59,,,,57,12,52,54,58',
',47,11,48,,,,,,,61,,,,,,39,,,13,55,,,,,38,,44,,46,98,,45,60,56,,40,59',
',,,57,12,52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13,55,,,,,38,,44,,46',
'98,,45,60,56,,40,59,,,,57,12,52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13',
'55,,,,,38,,44,,46,98,,45,60,56,,40,59,,,,57,12,52,54,58,,47,11,48,,',
',,,,61,,,,,,39,,,13,55,,,,,38,,44,,46,98,,45,60,56,,40,59,,,,57,12,52',
'54,58,,47,11,48,,,,,,,61,,,,,,39,,,13,55,,,,,38,,44,,46,98,,45,60,56',
',40,59,,,,57,12,52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13,55,,,,,38,',
'44,,46,98,,45,60,56,,40,59,,,,57,12,52,54,58,,47,11,48,,,,,,,61,,,,',
',39,,,13,55,,,,,38,,44,,46,98,,45,60,56,,40,59,,,,57,12,52,54,58,,47',
'11,48,,,,,,,61,,,,,,39,,,13,55,,,,,38,,44,,46,98,,45,60,56,,40,59,,',
',57,12,52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13,55,,,,,38,,44,,46,98',
',45,60,56,,40,59,,,,57,12,52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13,55',
',,,,38,,44,,46,98,,45,60,56,,40,59,,,,57,12,52,54,58,,47,11,48,,,,,',
',61,,,,,,39,,,13,55,,,,,38,,44,,46,98,,45,60,56,,40,59,,,,57,12,52,54',
'58,,47,11,48,,,,,,,61,,,,,,39,,,13,55,,,,,38,,44,,46,98,,45,60,56,,40',
'59,,,,57,12,52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13,55,,,,,38,,44,',
'46,98,,45,60,56,,40,59,,,,57,12,52,54,58,,47,11,48,,,,,,,61,,,,,,39',
',,13,55,,,,,38,,44,,46,98,,45,60,56,,40,59,,,,57,12,52,54,58,,47,11',
'48,,,,,,,61,,,,,,39,,,13,55,,,,,38,,44,,46,98,,45,60,56,,40,59,,,,57',
'12,52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13,55,,,,,38,,44,,46,98,,45',
'60,56,,40,59,,,,57,12,52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13,55,,',
',,38,,44,,46,98,,45,60,56,,40,59,,,,57,12,52,54,58,,47,11,48,,,,,,,61',
',,,,,39,,,13,55,,,,,38,,44,,46,98,,45,60,56,,40,59,,,,57,12,,,58,52',
'54,11,,47,,48,339,,,61,,,,,,39,,,171,55,,13,,,,,,38,,44,,46,42,,45,60',
'56,,40,59,43,,,57,12,52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13,55,,,',
',174,191,185,192,46,186,194,187,183,181,,176,189,,,,57,12,195,190,188',
'52,54,11,,47,,48,337,,,61,,,,,193,175,,,,55,,13,,,,,,38,,44,,46,42,',
'45,60,56,,40,59,43,,,57,12,52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13',
'55,,,,,38,,44,,46,98,,45,60,56,,40,59,,,,57,12,52,54,58,,47,11,48,,',
',,,,61,,,,,,39,,,13,55,,,,,38,,44,,46,98,,45,60,56,,40,59,,,,57,12,52',
'54,58,,47,11,48,326,,,,,,61,,,,,,39,,,13,55,,,,,38,,44,,46,98,,45,60',
'56,,40,59,,,,57,12,52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13,55,,,,,38',
',44,,46,98,,45,60,56,,40,59,,,,57,12,52,54,58,,47,11,48,312,,,,,,61',
',,,,,39,,,13,55,,,,,38,,44,,46,42,,45,60,56,,40,59,43,,,57,12,,,58,',
',11,,,,,,,,61,,70,,,,39,,,,55,89,90,86,81,92,,96,,91,,201,82,84,83,85',
',,,,,,,,,,,52,54,,95,47,,48,88,87,,,74,75,77,76,79,80,,72,73,,,13,203',
',71,,,38,,44,,46,98,78,45,60,56,,40,59,,,,57,12,52,54,58,,47,11,48,',
',,,,,61,,,,,,39,,,13,55,,,,,38,,44,,46,98,,45,60,56,,40,59,,,,57,12',
'52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13,55,,,,,38,,44,,46,98,,45,60',
'56,,40,59,,,,57,12,52,54,58,,47,11,48,,,,,,,61,70,,,,,39,,,13,55,,,',
'92,38,96,44,91,46,98,,45,60,56,,40,59,,,,57,12,,,58,52,54,11,95,47,',
'48,,,,61,,,77,76,,39,,72,73,55,,13,213,,71,,,38,,44,,46,98,78,45,60',
'56,,40,59,,,,57,12,,,58,,,11,,,,,,,,61,,70,,214,,39,,,,55,89,90,86,81',
'92,,96,,91,,,82,84,83,85,,,,,,,,,,,,,,,95,,,,88,87,,,74,75,77,76,79',
'80,,72,73,70,,215,,,71,,,,89,90,86,81,92,78,96,,91,,,82,84,83,85,,,',
',,,,,,,,,,,95,,,,88,87,,,74,75,77,76,79,80,,72,73,70,,216,,,71,,,,89',
'90,86,81,92,78,96,,91,,,82,84,83,85,,,,,,,,,,,,,,,95,,,,88,87,,,74,75',
'77,76,79,80,,72,73,70,,217,,,71,,,,89,90,86,81,92,78,96,,91,,,82,84',
'83,85,,,,,,,,,,,,52,54,,95,47,,48,88,87,,,74,75,77,76,79,80,,72,73,',
',13,,,71,,,38,,44,,46,98,78,45,60,56,,40,59,,,,57,12,52,54,58,,47,11',
'48,,,,,,,61,,,,,,39,,,13,55,,,,,38,,44,,46,98,,45,60,56,,40,59,,,,57',
'12,52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13,55,,,,,38,,44,,46,98,,45',
'60,56,,40,59,,,,57,12,52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13,55,,',
',,38,,44,,46,98,,45,60,56,,40,59,,,,57,12,,,58,,,11,,,,,,,,61,,70,,',
',39,,,,55,89,90,86,81,92,,96,,91,,,82,84,83,85,,,,,,,,,,,,52,54,,95',
'47,,48,88,87,,,74,75,77,76,79,80,,72,73,,,13,,,71,,,38,,44,,46,98,78',
'45,60,56,,40,59,,,,57,12,52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13,55',
',,,,38,,44,,46,98,,45,60,56,,40,59,,,,57,12,,,58,,,11,,,,,,,,61,,70',
',,,39,,,,55,89,90,86,81,92,,96,,91,,,82,84,83,85,,,,,,,,,,,,52,54,,95',
'47,294,48,88,87,,,74,75,77,76,79,80,,72,73,,,13,,,71,,,38,,44,,46,98',
'78,45,60,56,,40,59,,,,57,12,52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13',
'55,,,,,174,191,185,192,46,186,194,187,183,181,,176,189,70,,,57,12,195',
'190,188,,,11,,,92,,96,,91,61,,,,,193,175,,,,55,,,,,,,52,54,,95,47,,48',
',,,,,,77,76,,,,72,73,,,13,,,71,,,38,,44,,46,98,78,45,60,56,,40,59,,',
',57,12,52,54,58,,47,11,48,277,,,,,,61,,,,,,39,,,13,55,,,,,38,,44,,46',
'42,,45,60,56,,40,59,43,,,57,12,52,54,58,,47,11,48,275,,,,,,61,70,,,',
',39,,,13,55,,,,92,38,96,44,91,46,42,,45,60,56,,40,59,43,,,57,12,,,58',
',,11,95,,,,,,70,61,74,75,77,76,,39,,72,73,55,,92,,96,71,91,,,,,,,70',
'78,,,,,,,,,,,,92,95,96,,91,,,,,74,75,77,76,70,,,72,73,,,,,,71,,95,92',
',96,,91,,78,74,75,77,76,79,80,,72,73,,,,,,71,,,,95,,,,,78,70,,74,75',
'77,76,79,80,,72,73,,81,92,,96,71,91,,,82,,,,70,78,,,,,,,,,,,81,92,95',
'96,,91,,,82,,74,75,77,76,79,80,,72,73,,,,,,71,,95,,,,,,70,78,74,75,77',
'76,79,80,,72,73,,81,92,,96,71,91,,,82,,,,70,78,,,,,,,,,,,81,92,95,96',
',91,,,82,,74,75,77,76,79,80,,72,73,,,,,,71,,95,,,,,,70,78,74,75,77,76',
'79,80,,72,73,86,81,92,,96,71,91,,,82,84,83,85,,78,,,,,,,,,,,,,95,,,',
',,70,,74,75,77,76,79,80,,72,73,86,81,92,,96,71,91,,,82,84,83,85,,78',
',,,,,,,,,,,,95,,,,,87,,,74,75,77,76,79,80,,72,73,70,,,,,71,,,,89,90',
'86,81,92,78,96,,91,,,82,84,83,85,,,,,,,,,,,,,,,95,,,,88,87,,,74,75,77',
'76,79,80,,72,73,70,,,,,71,,,,89,90,86,81,92,78,96,,91,,,82,84,83,85',
',,,,,,,,,,,,,,95,,,,88,87,,,74,75,77,76,79,80,,72,73,,,,,,71,70,,,,',
'239,,,78,89,90,86,81,92,,96,,91,,,82,84,83,85,,,,,,,,,,,,52,54,,95,47',
',48,88,87,,,74,75,77,76,79,80,,72,73,,,13,,,71,,,38,,44,,46,98,78,45',
'60,56,,40,59,,,,57,12,,,58,,,11,,,,,,,,61,,70,,,,39,,,,55,89,90,86,81',
'92,243,96,,91,,,82,84,83,85,,,,,,,,,,,,52,54,,95,47,,48,88,87,,,74,75',
'77,76,79,80,,72,73,,,13,,,71,,,38,,44,,46,98,78,45,60,56,,40,59,,,,57',
'12,52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13,55,,,,,38,,44,,46,98,,45',
'60,56,,40,59,,,,57,12,52,54,58,,47,11,48,,,,,,,61,,,,,,39,,,13,55,,',
',,38,,44,,46,98,,45,60,56,,40,59,,,,57,12,52,54,58,,47,11,48,269,,,',
',,61,,,,,,39,,,13,55,,,,,38,,44,,46,42,,45,60,56,,40,59,43,,,57,12,',
',58,,,11,,,,,,,,61,,70,,,,39,,,,55,89,90,86,81,92,,96,,91,,,82,84,83',
'85,,,,,,,,,,,,,,,95,,,,88,87,,,74,75,77,76,79,80,,72,73,70,,,,,71,,',
',89,90,86,81,92,78,96,,91,,,82,84,83,85,,,,,,,,,,,,,,,95,,,,88,87,,',
'74,75,77,76,79,80,,72,73,,257,191,256,192,71,254,194,258,252,251,,253',
'255,78,,,,,195,190,259,257,191,256,192,,254,194,258,252,251,,253,255',
',,193,260,,195,190,259,257,191,256,192,,254,194,258,252,251,,253,255',
',,193,260,,195,190,259,,,,,,,,,,,,,,,,193,260' ]
        racc_action_table = arr = ::Array.new(4772, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,184,181,0,120,0,42,212,188,278,275,145,275,189,183,221,145,278,48',
'48,212,0,107,37,221,48,98,0,120,0,98,0,0,42,0,0,0,42,0,0,0,184,181,0',
'0,351,351,0,188,351,0,351,351,189,183,48,107,127,0,185,36,36,127,185',
'0,230,230,351,0,317,44,317,230,351,44,351,244,351,351,186,351,351,351',
'186,351,351,351,48,115,351,351,4,4,351,286,4,351,4,286,246,129,286,230',
'129,351,7,7,7,7,200,351,55,55,4,351,203,203,310,310,4,198,4,106,4,4',
'250,4,4,4,4,4,4,4,105,230,4,4,350,350,4,264,350,4,350,350,135,135,178',
'268,270,4,271,240,274,119,276,4,277,132,350,4,139,281,282,283,350,284',
'350,211,350,350,288,350,350,350,94,350,350,350,92,64,350,350,348,348',
'350,62,348,350,348,348,223,300,222,302,99,350,43,204,45,45,309,350,187',
'187,348,350,219,99,311,99,348,99,348,202,348,348,218,348,348,348,177',
'348,348,348,320,321,348,348,323,324,348,146,99,348,328,45,72,72,45,187',
'329,348,187,10,146,10,146,348,146,35,335,348,10,10,10,10,10,45,10,336',
'10,187,338,10,10,10,10,45,209,146,5,187,1,72,354,359,361,363,11,11,',
'10,11,,11,10,10,,,10,10,10,10,10,10,72,10,10,,,11,,,10,,72,11,,11,,11',
'11,10,11,11,11,,11,11,,,,11,11,12,12,11,155,12,11,12,,,,,,,11,,,155',
',155,11,155,,12,11,,,,,12,,12,,12,12,,12,12,12,,12,12,155,,,12,12,13',
'13,12,154,13,12,13,,,,155,155,,12,,,154,155,154,12,154,,13,12,,,,,13',
',13,,13,13,,13,13,13,,13,13,154,,,13,13,331,331,13,,331,13,331,331,',
',154,154,,13,,,,154,,13,,,331,13,,,,,331,,331,,331,331,,331,331,331',
',331,331,331,,,331,331,319,319,331,,319,331,319,,,,,,97,331,,,73,73',
',331,226,226,319,331,,97,,97,319,97,319,,319,319,,319,319,319,,319,319',
',,,319,319,,,319,,97,319,,73,224,224,,226,,319,226,316,,,,319,,,,319',
'316,316,316,316,316,73,316,,316,226,,316,316,316,316,73,,,,226,,224',
',,224,,38,38,,316,38,,38,316,316,,,316,316,316,316,316,316,224,316,316',
',,38,,,316,,224,38,,38,,38,38,316,38,38,38,,38,38,,,,38,38,39,39,38',
'153,39,38,39,,,,,,,38,,,153,,153,38,153,,39,38,,,,,39,,39,,39,39,,39',
'39,39,,39,39,153,,,39,39,40,40,39,,40,39,40,,,,153,153,,39,,,,153,,39',
',,40,39,,,,,40,,40,,40,40,,40,40,40,,40,40,,,,40,40,41,41,40,,41,40',
'41,,,,,,,40,,,,,,40,,,41,40,,,,,41,,41,,41,41,,41,41,41,,41,41,,,,41',
'41,,,41,,,41,,,,,,,,41,,308,,,,41,,,,41,308,308,308,308,308,,308,,308',
',,308,308,308,308,,,,,,,,,,,,,,,308,,,,308,308,,,308,308,308,308,308',
'308,,308,308,307,,,,,308,,,,307,307,307,307,307,308,307,,307,,,307,307',
'307,307,,,,,,,,,,,,301,301,,307,301,,301,307,307,,,307,307,307,307,307',
'307,,307,307,,,301,,,307,,,301,,301,,301,301,307,301,301,301,,301,301',
',,,301,301,,,301,47,47,301,,47,47,47,,,,301,,,,,,301,,,,301,,47,,,,',
',47,,47,,47,47,,47,47,47,,47,47,,,,47,47,53,53,47,,53,47,53,,,,,,,47',
',,,,,47,,,53,47,,,,,53,,53,,53,53,,53,53,53,,53,53,,,,53,53,,,53,,,53',
',,,,,,,53,,297,,,,53,,,,53,297,297,297,297,297,,297,,297,,,297,297,297',
'297,,,,,,,,,,,,63,63,,297,63,,63,297,297,,,297,297,297,297,297,297,',
'297,297,,,63,,,297,,,63,,63,,63,63,297,63,63,63,,63,63,63,,,63,63,,',
'63,,,63,,,,,,,,63,,293,,,,63,,,,63,293,293,293,293,293,,293,,293,,,293',
'293,293,293,,,,,,,,,,,,65,65,,293,65,,65,293,293,,,293,293,293,293,293',
'293,,293,293,,,65,,,293,,,65,,65,,65,65,293,65,65,65,,65,65,65,,,65',
'65,66,66,65,,66,65,66,,,,,,,65,,,,,,65,,,66,65,,,,,66,,66,,66,66,,66',
'66,66,,66,66,66,,,66,66,67,67,66,,67,66,67,,,,,,,66,,,,,,66,,,67,66',
',,,,67,,67,,67,67,,67,67,67,,67,67,67,,,67,67,68,68,67,,68,67,68,,,',
',,,67,,,,,,67,,,68,67,,,,,68,,68,,68,68,,68,68,68,,68,68,68,,,68,68',
'69,69,68,,69,68,69,,,,,,,68,,,,,,68,,,69,68,,,,,69,,69,,69,69,,69,69',
'69,,69,69,69,,,69,69,70,70,69,,70,69,70,,,,,,,69,,,,,,69,,,70,69,,,',
',70,,70,,70,70,,70,70,70,,70,70,,,,70,70,71,71,70,,71,70,71,,,,,,,70',
',,,,,70,,,71,70,,,,,71,,71,,71,71,,71,71,71,,71,71,,,,71,71,74,74,71',
',74,71,74,,,,,,,71,,,,,,71,,,74,71,,,,,74,,74,,74,74,,74,74,74,,74,74',
',,,74,74,75,75,74,,75,74,75,,,,,,,74,,,,,,74,,,75,74,,,,,75,,75,,75',
'75,,75,75,75,,75,75,,,,75,75,76,76,75,,76,75,76,,,,,,,75,,,,,,75,,,76',
'75,,,,,76,,76,,76,76,,76,76,76,,76,76,,,,76,76,77,77,76,,77,76,77,,',
',,,,76,,,,,,76,,,77,76,,,,,77,,77,,77,77,,77,77,77,,77,77,,,,77,77,78',
'78,77,,78,77,78,,,,,,,77,,,,,,77,,,78,77,,,,,78,,78,,78,78,,78,78,78',
',78,78,,,,78,78,79,79,78,,79,78,79,,,,,,,78,,,,,,78,,,79,78,,,,,79,',
'79,,79,79,,79,79,79,,79,79,,,,79,79,80,80,79,,80,79,80,,,,,,,79,,,,',
',79,,,80,79,,,,,80,,80,,80,80,,80,80,80,,80,80,,,,80,80,81,81,80,,81',
'80,81,,,,,,,80,,,,,,80,,,81,80,,,,,81,,81,,81,81,,81,81,81,,81,81,,',
',81,81,82,82,81,,82,81,82,,,,,,,81,,,,,,81,,,82,81,,,,,82,,82,,82,82',
',82,82,82,,82,82,,,,82,82,83,83,82,,83,82,83,,,,,,,82,,,,,,82,,,83,82',
',,,,83,,83,,83,83,,83,83,83,,83,83,,,,83,83,84,84,83,,84,83,84,,,,,',
',83,,,,,,83,,,84,83,,,,,84,,84,,84,84,,84,84,84,,84,84,,,,84,84,85,85',
'84,,85,84,85,,,,,,,84,,,,,,84,,,85,84,,,,,85,,85,,85,85,,85,85,85,,85',
'85,,,,85,85,86,86,85,,86,85,86,,,,,,,85,,,,,,85,,,86,85,,,,,86,,86,',
'86,86,,86,86,86,,86,86,,,,86,86,87,87,86,,87,86,87,,,,,,,86,,,,,,86',
',,87,86,,,,,87,,87,,87,87,,87,87,87,,87,87,,,,87,87,88,88,87,,88,87',
'88,,,,,,,87,,,,,,87,,,88,87,,,,,88,,88,,88,88,,88,88,88,,88,88,,,,88',
'88,89,89,88,,89,88,89,,,,,,,88,,,,,,88,,,89,88,,,,,89,,89,,89,89,,89',
'89,89,,89,89,,,,89,89,90,90,89,,90,89,90,,,,,,,89,,,,,,89,,,90,89,,',
',,90,,90,,90,90,,90,90,90,,90,90,,,,90,90,91,91,90,,91,90,91,,,,,,,90',
',,,,,90,,,91,90,,,,,91,,91,,91,91,,91,91,91,,91,91,,,,91,91,,,91,290',
'290,91,,290,,290,290,,,91,,,,,,91,,,91,91,,290,,,,,,290,,290,,290,290',
',290,290,290,,290,290,290,,,290,290,93,93,290,,93,290,93,,,,,,,290,',
',,,,290,,,93,290,,,,,93,93,93,93,93,93,93,93,93,93,,93,93,,,,93,93,93',
'93,93,289,289,93,,289,,289,289,,,93,,,,,93,93,,,,93,,289,,,,,,289,,289',
',289,289,,289,289,289,,289,289,289,,,289,289,95,95,289,,95,289,95,,',
',,,,289,,,,,,289,,,95,289,,,,,95,,95,,95,95,,95,95,95,,95,95,,,,95,95',
'96,96,95,,96,95,96,,,,,,,95,,,,,,95,,,96,95,,,,,96,,96,,96,96,,96,96',
'96,,96,96,,,,96,96,279,279,96,,279,96,279,279,,,,,,96,,,,,,96,,,279',
'96,,,,,279,,279,,279,279,,279,279,279,,279,279,,,,279,279,272,272,279',
',272,279,272,,,,,,,279,,,,,,279,,,272,279,,,,,272,,272,,272,272,,272',
'272,272,,272,272,,,,272,272,267,267,272,,267,272,267,267,,,,,,272,,',
',,,272,,,267,272,,,,,267,,267,,267,267,,267,267,267,,267,267,267,,,267',
'267,,,267,,,267,,,,,,,,267,,100,,,,267,,,,267,100,100,100,100,100,,100',
',100,,100,100,100,100,100,,,,,,,,,,,,101,101,,100,101,,101,100,100,',
',100,100,100,100,100,100,,100,100,,,101,101,,100,,,101,,101,,101,101',
'100,101,101,101,,101,101,,,,101,101,263,263,101,,263,101,263,,,,,,,101',
',,,,,101,,,263,101,,,,,263,,263,,263,263,,263,263,263,,263,263,,,,263',
'263,249,249,263,,249,263,249,,,,,,,263,,,,,,263,,,249,263,,,,,249,,249',
',249,249,,249,249,249,,249,249,,,,249,249,248,248,249,,248,249,248,',
',,,,,249,151,,,,,249,,,248,249,,,,151,248,151,248,151,248,248,,248,248',
'248,,248,248,,,,248,248,,,248,108,108,248,151,108,,108,,,,248,,,151',
'151,,248,,151,151,248,,108,108,,151,,,108,,108,,108,108,151,108,108',
'108,,108,108,,,,108,108,,,108,,,108,,,,,,,,108,,109,,109,,108,,,,108',
'109,109,109,109,109,,109,,109,,,109,109,109,109,,,,,,,,,,,,,,,109,,',
',109,109,,,109,109,109,109,109,109,,109,109,111,,111,,,109,,,,111,111',
'111,111,111,109,111,,111,,,111,111,111,111,,,,,,,,,,,,,,,111,,,,111',
'111,,,111,111,111,111,111,111,,111,111,112,,112,,,111,,,,112,112,112',
'112,112,111,112,,112,,,112,112,112,112,,,,,,,,,,,,,,,112,,,,112,112',
',,112,112,112,112,112,112,,112,112,113,,113,,,112,,,,113,113,113,113',
'113,112,113,,113,,,113,113,113,113,,,,,,,,,,,,114,114,,113,114,,114',
'113,113,,,113,113,113,113,113,113,,113,113,,,114,,,113,,,114,,114,,114',
'114,113,114,114,114,,114,114,,,,114,114,245,245,114,,245,114,245,,,',
',,,114,,,,,,114,,,245,114,,,,,245,,245,,245,245,,245,245,245,,245,245',
',,,245,245,239,239,245,,239,245,239,,,,,,,245,,,,,,245,,,239,245,,,',
',239,,239,,239,239,,239,239,239,,239,239,,,,239,239,238,238,239,,238',
'239,238,,,,,,,239,,,,,,239,,,238,239,,,,,238,,238,,238,238,,238,238',
'238,,238,238,,,,238,238,,,238,,,238,,,,,,,,238,,126,,,,238,,,,238,126',
'126,126,126,126,,126,,126,,,126,126,126,126,,,,,,,,,,,,236,236,,126',
'236,,236,126,126,,,126,126,126,126,126,126,,126,126,,,236,,,126,,,236',
',236,,236,236,126,236,236,236,,236,236,,,,236,236,231,231,236,,231,236',
'231,,,,,,,236,,,,,,236,,,231,236,,,,,231,,231,,231,231,,231,231,231',
',231,231,,,,231,231,,,231,,,231,,,,,,,,231,,133,,,,231,,,,231,133,133',
'133,133,133,,133,,133,,,133,133,133,133,,,,,,,,,,,,227,227,,133,227',
'227,227,133,133,,,133,133,133,133,133,133,,133,133,,,227,,,133,,,227',
',227,,227,227,133,227,227,227,,227,227,,,,227,227,217,217,227,,217,227',
'217,,,,,,,227,,,,,,227,,,217,227,,,,,217,217,217,217,217,217,217,217',
'217,217,,217,217,152,,,217,217,217,217,217,,,217,,,152,,152,,152,217',
',,,,217,217,,,,217,,,,,,,216,216,,152,216,,216,,,,,,,152,152,,,,152',
'152,,,216,,,152,,,216,,216,,216,216,152,216,216,216,,216,216,,,,216',
'216,215,215,216,,215,216,215,215,,,,,,216,,,,,,216,,,215,216,,,,,215',
',215,,215,215,,215,215,215,,215,215,215,,,215,215,214,214,215,,214,215',
'214,214,,,,,,215,156,,,,,215,,,214,215,,,,156,214,156,214,156,214,214',
',214,214,214,,214,214,214,,,214,214,,,214,,,214,156,,,,,,157,214,156',
'156,156,156,,214,,156,156,214,,157,,157,156,157,,,,,,,158,156,,,,,,',
',,,,,158,157,158,,158,,,,,157,157,157,157,159,,,157,157,,,,,,157,,158',
'159,,159,,159,,157,158,158,158,158,158,158,,158,158,,,,,,158,,,,159',
',,,,158,160,,159,159,159,159,159,159,,159,159,,160,160,,160,159,160',
',,160,,,,161,159,,,,,,,,,,,161,161,160,161,,161,,,161,,160,160,160,160',
'160,160,,160,160,,,,,,160,,161,,,,,,162,160,161,161,161,161,161,161',
',161,161,,162,162,,162,161,162,,,162,,,,163,161,,,,,,,,,,,163,163,162',
'163,,163,,,163,,162,162,162,162,162,162,,162,162,,,,,,162,,163,,,,,',
'164,162,163,163,163,163,163,163,,163,163,164,164,164,,164,163,164,,',
'164,164,164,164,,163,,,,,,,,,,,,,164,,,,,,165,,164,164,164,164,164,164',
',164,164,165,165,165,,165,164,165,,,165,165,165,165,,164,,,,,,,,,,,',
',165,,,,,165,,,165,165,165,165,165,165,,165,165,166,,,,,165,,,,166,166',
'166,166,166,165,166,,166,,,166,166,166,166,,,,,,,,,,,,,,,166,,,,166',
'166,,,166,166,166,166,166,166,,166,166,167,,,,,166,,,,167,167,167,167',
'167,166,167,,167,,,167,167,167,167,,,,,,,,,,,,,,,167,,,,167,167,,,167',
'167,167,167,167,167,,167,167,,,,,,167,168,,,,,168,,,167,168,168,168',
'168,168,,168,,168,,,168,168,168,168,,,,,,,,,,,,171,171,,168,171,,171',
'168,168,,,168,168,168,168,168,168,,168,168,,,171,,,168,,,171,,171,,171',
'171,168,171,171,171,,171,171,,,,171,171,,,171,,,171,,,,,,,,171,,173',
',,,171,,,,171,173,173,173,173,173,173,173,,173,,,173,173,173,173,,,',
',,,,,,,,174,174,,173,174,,174,173,173,,,173,173,173,173,173,173,,173',
'173,,,174,,,173,,,174,,174,,174,174,173,174,174,174,,174,174,,,,174',
'174,175,175,174,,175,174,175,,,,,,,174,,,,,,174,,,175,174,,,,,175,,175',
',175,175,,175,175,175,,175,175,,,,175,175,176,176,175,,176,175,176,',
',,,,,175,,,,,,175,,,176,175,,,,,176,,176,,176,176,,176,176,176,,176',
'176,,,,176,176,207,207,176,,207,176,207,207,,,,,,176,,,,,,176,,,207',
'176,,,,,207,,207,,207,207,,207,207,207,,207,207,207,,,207,207,,,207',
',,207,,,,,,,,207,,197,,,,207,,,,207,197,197,197,197,197,,197,,197,,',
'197,197,197,197,,,,,,,,,,,,,,,197,,,,197,197,,,197,197,197,197,197,197',
',197,197,299,,,,,197,,,,299,299,299,299,299,197,299,,299,,,299,299,299',
'299,,,,,,,,,,,,,,,299,,,,299,299,,,299,299,299,299,299,299,,299,299',
',242,242,242,242,299,242,242,242,242,242,,242,242,299,,,,,242,242,242',
'247,247,247,247,,247,247,247,247,247,,247,247,,,242,242,,247,247,247',
'196,196,196,196,,196,196,196,196,196,,196,196,,,247,247,,196,196,196',
',,,,,,,,,,,,,,,196,196' ]
        racc_action_check = arr = ::Array.new(4772, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   274,   nil,   nil,    90,   260,   nil,    44,   nil,   nil,
   239,   278,   324,   370,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   227,    -7,     0,   558,   604,
   650,   696,    -1,   155,    36,   198,   nil,   896,    17,   nil,
   nil,   nil,   nil,   942,   nil,   110,   nil,   nil,   nil,   nil,
   nil,   nil,   187,  1038,   169,  1134,  1180,  1226,  1272,  1318,
  1364,  1410,   236,   478,  1456,  1502,  1548,  1594,  1640,  1686,
  1732,  1778,  1824,  1870,  1916,  1962,  2008,  2054,  2100,  2146,
  2192,  2238,   141,  2333,   168,  2428,  2474,   470,    -8,   190,
  2669,  2708,   nil,   nil,   nil,   123,    55,   -11,  2895,  2952,
   nil,  3007,  3062,  3117,  3156,    65,   nil,   nil,   nil,   131,
    -7,   nil,   nil,   nil,   nil,   nil,  3351,    51,   nil,    92,
   nil,   nil,   148,  3493,   nil,   142,   nil,   nil,   nil,   150,
   nil,   nil,   nil,   nil,   nil,     5,   227,   nil,   nil,   nil,
   nil,  2856,  3615,   603,   369,   323,  3756,  3800,  3824,  3850,
  3894,  3918,  3962,  3986,  4030,  4074,  4129,  4184,  4245,   nil,
   nil,  4284,   nil,  4341,  4380,  4426,  4472,   182,   136,   nil,
   nil,    -8,   nil,     4,    -9,    25,    45,   202,    -2,     3,
   nil,   nil,   nil,   nil,   nil,   nil,  4704,  4575,    76,   nil,
    88,   nil,   203,    48,   191,   nil,   nil,  4518,   nil,   258,
   nil,   154,    -4,   nil,  3746,  3700,  3654,  3578,   178,   172,
   nil,    -9,   186,   184,   516,   nil,   482,  3532,   nil,   nil,
    64,  3436,   nil,   nil,   nil,   nil,  3390,   nil,  3294,  3248,
   141,   nil,  4662,   nil,    68,  3202,    91,  4683,  2846,  2800,
   114,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  2754,   116,   nil,   nil,  2612,   140,   nil,
    82,   118,  2566,   nil,   145,   -20,   147,   127,    -2,  2520,
   nil,   123,   152,   156,   159,   nil,    60,   nil,   160,  2382,
  2287,   nil,   nil,  1095,   nil,   nil,   nil,   999,   nil,  4630,
   184,   847,   183,   nil,   nil,   nil,   nil,   808,   753,   193,
    50,   201,   nil,   nil,   nil,   nil,   519,    39,   nil,   462,
   218,   196,   nil,   222,   223,   nil,   nil,   nil,   227,   233,
   nil,   416,   nil,   nil,   nil,   227,   252,   nil,   255,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   182,   nil,
   136,    44,   nil,   nil,   267,   nil,   nil,   nil,   nil,   268,
   nil,   269,   nil,   270,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -212,  -213,    -1,    -2,    -3,    -4,    -7,    -9,   -10,   -15,
  -109,  -213,  -213,  -213,   -43,   -44,   -45,   -46,   -47,   -48,
   -49,   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,
   -59,   -60,   -61,   -62,   -63,   -68,   -69,   -73,  -213,  -213,
  -213,  -213,  -213,  -119,  -213,  -213,  -164,  -213,  -213,  -174,
  -175,  -176,  -177,  -213,  -179,  -213,  -188,  -189,  -190,  -191,
  -192,  -193,  -213,  -213,    -6,  -213,  -213,  -213,  -213,  -213,
  -213,  -213,  -213,  -213,  -213,  -213,  -213,  -213,  -213,  -213,
  -213,  -213,  -213,  -213,  -213,  -213,  -213,  -213,  -213,  -213,
  -213,  -213,  -213,  -127,  -122,  -212,  -212,   -27,  -213,   -34,
  -213,  -213,   -70,   -75,   -76,  -212,  -213,  -213,  -213,  -213,
   -86,  -213,  -213,  -213,  -213,  -212,  -153,  -154,  -120,  -212,
  -212,  -145,  -147,  -148,  -149,  -150,   -41,  -213,  -167,  -213,
  -170,  -171,  -213,  -183,  -178,  -213,  -186,  -187,   369,    -5,
    -8,   -11,   -12,   -13,   -14,  -213,   -17,   -18,  -162,  -163,
   -19,   -20,   -21,   -22,   -23,   -24,   -25,   -26,   -28,   -29,
   -30,   -31,   -32,   -33,   -35,   -36,   -37,   -38,  -213,   -39,
  -104,  -213,   -74,  -213,  -205,  -211,  -199,  -196,  -194,  -117,
  -128,  -188,  -131,  -192,  -213,  -202,  -200,  -208,  -190,  -191,
  -198,  -203,  -204,  -206,  -207,  -209,  -127,  -126,  -213,  -125,
  -213,   -40,  -194,   -65,  -213,   -80,   -81,  -213,   -84,  -194,
  -158,  -161,  -213,   -72,  -213,  -213,  -213,  -127,  -196,  -212,
  -155,  -213,  -213,  -213,  -213,  -151,  -213,  -213,  -165,  -168,
  -213,  -213,  -180,  -181,  -182,  -184,  -213,   -16,  -213,  -213,
  -194,  -106,  -127,  -116,  -213,  -197,  -213,  -195,  -213,  -213,
  -194,  -130,  -132,  -199,  -200,  -201,  -202,  -205,  -208,  -210,
  -211,  -123,  -124,  -195,  -213,   -67,   -77,  -213,  -213,   -83,
  -213,  -195,  -213,   -71,  -213,   -89,  -213,   -95,  -213,  -213,
   -99,  -196,  -194,  -213,  -213,  -139,  -213,  -156,  -194,  -213,
  -213,  -146,  -152,   -42,  -166,  -169,  -172,  -173,  -185,  -108,
  -213,  -195,  -194,  -112,  -118,  -113,  -129,  -133,  -134,  -213,
   -64,  -213,   -79,   -82,   -85,  -159,  -160,   -89,   -88,  -213,
  -213,   -95,   -94,  -213,  -213,  -103,   -98,  -100,  -213,  -213,
  -114,  -213,  -140,  -141,  -142,  -213,  -213,  -136,  -213,  -144,
  -105,  -107,  -115,  -121,   -66,   -78,   -87,   -90,  -213,   -93,
  -213,  -213,  -110,  -111,  -213,  -138,  -157,  -135,  -143,  -213,
   -92,  -213,   -97,  -213,  -102,  -137,   -91,   -96,  -101 ]

racc_goto_table = [
     2,   119,   102,    97,    99,   100,     3,   134,   123,   131,
   170,   132,   178,   125,   322,   209,   177,   324,   244,   219,
   240,   280,   318,   222,   246,   141,   142,   143,   144,   279,
   109,   111,   112,   113,   347,   149,   149,   218,   127,   126,
   148,   148,    64,   304,   291,   133,   292,   242,   264,   198,
   200,   147,   150,   266,   306,   270,   204,   207,   349,   283,
   284,   145,   126,   146,   346,   332,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   327,   173,   300,   197,   197,   223,
   241,   169,   202,   126,   315,   129,   309,   140,   136,   212,
   126,   139,   137,     1,   235,   236,   173,   234,   nil,   nil,
   nil,   205,   nil,   nil,   nil,   250,   nil,   nil,   nil,   nil,
   nil,   220,   328,   nil,   nil,   220,   225,   nil,   329,   288,
   nil,   nil,   nil,   nil,   335,   nil,   282,   nil,   nil,   nil,
   281,   nil,   119,   nil,   nil,   nil,   nil,   nil,   342,   nil,
   123,   nil,   nil,   nil,   nil,   125,   nil,   nil,   nil,   nil,
   nil,   302,   nil,   168,   nil,   nil,   109,   111,   112,   265,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   123,   nil,   123,
   298,   296,   125,   132,   125,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   268,   126,   173,
   nil,   nil,   nil,   nil,   274,   276,   nil,   nil,   nil,   293,
   341,   nil,   nil,   297,   nil,   285,   nil,   nil,   133,   nil,
   293,   299,   nil,   nil,   nil,   nil,   nil,   173,   nil,   nil,
   307,   308,   nil,   333,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   293,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   316,   nil,   nil,   311,   nil,   nil,
   nil,   126,   nil,   nil,   nil,   nil,   344,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   336,
   338,   nil,   nil,   168,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   109,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   354,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   359,   nil,
   361,   363 ]

racc_goto_check = [
     2,    65,    37,     9,     9,     9,     3,    79,    35,    74,
    52,    31,    57,    30,    48,    45,    55,    51,    56,    66,
    53,    50,    47,    66,    36,     7,     7,     7,     7,    49,
     9,     9,     9,     9,    46,    31,    31,    55,    11,     9,
    30,    30,     5,    58,    71,     9,    71,    59,    36,    61,
    61,    12,    12,    44,    62,    36,    43,    42,    48,    56,
    67,    11,     9,     9,    47,    68,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,    50,     9,    36,     9,     9,    70,
    52,    13,    11,     9,    72,    73,    36,     6,    75,    11,
     9,     5,    76,     1,    80,    81,     9,    83,   nil,   nil,
   nil,     3,   nil,   nil,   nil,    57,   nil,   nil,   nil,   nil,
   nil,     3,    56,   nil,   nil,     3,     3,   nil,    36,    45,
   nil,   nil,   nil,   nil,    36,   nil,    57,   nil,   nil,   nil,
    55,   nil,    65,   nil,   nil,   nil,   nil,   nil,    36,   nil,
    35,   nil,   nil,   nil,   nil,    30,   nil,   nil,   nil,   nil,
   nil,    57,   nil,     9,   nil,   nil,     9,     9,     9,    37,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    35,   nil,    35,
    79,    74,    30,    31,    30,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,     9,     9,
   nil,   nil,   nil,   nil,     2,     2,   nil,   nil,   nil,     9,
    52,   nil,   nil,     9,   nil,     3,   nil,   nil,     9,   nil,
     9,     9,   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,
     9,     9,   nil,    65,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     9,   nil,   nil,     2,   nil,   nil,
   nil,     9,   nil,   nil,   nil,   nil,    37,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
     2,   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
     2,     2 ]

racc_goto_pointer = [
   nil,   103,     0,     6,   nil,    38,    32,   -41,   nil,    -8,
   nil,    -9,   -21,     0,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -32,   -37,   nil,   nil,   nil,   -37,  -154,   -34,   nil,   nil,
   nil,   nil,   -49,   -49,  -151,   -92,  -285,  -253,  -263,  -187,
  -195,  -261,   -81,  -151,   nil,   -77,  -159,   -81,  -202,  -126,
   nil,   -46,  -193,   nil,   nil,   -43,   -96,  -159,  -221,   nil,
   -31,  -180,  -177,    47,   -39,    43,    47,   nil,   nil,   -46,
   -31,   -30,   nil,   -28 ]

racc_goto_default = [
   nil,   nil,   nil,   199,     4,     5,     6,     7,     8,    10,
     9,   278,   nil,   nil,    14,    35,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,   nil,   nil,    36,    37,
   103,   104,   105,   nil,   nil,   nil,   110,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    41,   nil,   nil,   nil,   179,   nil,
    94,   nil,   180,   184,   182,   115,   nil,   nil,   nil,   120,
   nil,   121,   210,   nil,   nil,    49,    50,    51,    53,   nil,
   nil,   nil,   135,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 79, :_reduce_1,
  1, 79, :_reduce_none,
  1, 80, :_reduce_3,
  1, 82, :_reduce_4,
  3, 82, :_reduce_5,
  2, 82, :_reduce_6,
  1, 83, :_reduce_7,
  3, 83, :_reduce_8,
  1, 84, :_reduce_none,
  1, 85, :_reduce_10,
  3, 85, :_reduce_11,
  3, 85, :_reduce_12,
  3, 85, :_reduce_13,
  3, 85, :_reduce_14,
  1, 87, :_reduce_none,
  4, 87, :_reduce_16,
  3, 87, :_reduce_17,
  3, 87, :_reduce_18,
  3, 87, :_reduce_19,
  3, 87, :_reduce_20,
  3, 87, :_reduce_21,
  3, 87, :_reduce_22,
  3, 87, :_reduce_23,
  3, 87, :_reduce_24,
  3, 87, :_reduce_25,
  3, 87, :_reduce_26,
  2, 87, :_reduce_27,
  3, 87, :_reduce_28,
  3, 87, :_reduce_29,
  3, 87, :_reduce_30,
  3, 87, :_reduce_31,
  3, 87, :_reduce_32,
  3, 87, :_reduce_33,
  2, 87, :_reduce_34,
  3, 87, :_reduce_35,
  3, 87, :_reduce_36,
  3, 87, :_reduce_37,
  3, 87, :_reduce_38,
  3, 87, :_reduce_39,
  3, 87, :_reduce_40,
  1, 89, :_reduce_41,
  3, 89, :_reduce_42,
  1, 88, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 109, :_reduce_62,
  1, 109, :_reduce_63,
  5, 92, :_reduce_64,
  3, 92, :_reduce_65,
  6, 92, :_reduce_66,
  4, 92, :_reduce_67,
  1, 92, :_reduce_68,
  1, 96, :_reduce_69,
  2, 96, :_reduce_70,
  4, 116, :_reduce_71,
  3, 116, :_reduce_72,
  1, 116, :_reduce_73,
  3, 117, :_reduce_74,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  3, 118, :_reduce_77,
  3, 122, :_reduce_78,
  2, 122, :_reduce_79,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  4, 119, :_reduce_82,
  3, 119, :_reduce_83,
  2, 120, :_reduce_84,
  4, 120, :_reduce_85,
  2, 99, :_reduce_86,
  5, 124, :_reduce_87,
  4, 124, :_reduce_88,
  0, 125, :_reduce_none,
  2, 125, :_reduce_90,
  4, 125, :_reduce_91,
  3, 125, :_reduce_92,
  6, 100, :_reduce_93,
  5, 100, :_reduce_94,
  0, 126, :_reduce_none,
  4, 126, :_reduce_96,
  3, 126, :_reduce_97,
  5, 98, :_reduce_98,
  1, 127, :_reduce_99,
  2, 127, :_reduce_100,
  5, 128, :_reduce_101,
  4, 128, :_reduce_102,
  1, 129, :_reduce_103,
  1, 91, :_reduce_none,
  4, 91, :_reduce_105,
  1, 131, :_reduce_106,
  3, 131, :_reduce_107,
  3, 130, :_reduce_108,
  1, 86, :_reduce_109,
  6, 86, :_reduce_110,
  6, 86, :_reduce_111,
  5, 86, :_reduce_112,
  5, 86, :_reduce_113,
  5, 86, :_reduce_114,
  4, 136, :_reduce_115,
  1, 137, :_reduce_116,
  1, 133, :_reduce_117,
  3, 133, :_reduce_118,
  1, 132, :_reduce_119,
  2, 132, :_reduce_120,
  6, 97, :_reduce_121,
  2, 97, :_reduce_122,
  3, 138, :_reduce_123,
  3, 138, :_reduce_124,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  0, 135, :_reduce_127,
  1, 135, :_reduce_128,
  3, 135, :_reduce_129,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  3, 140, :_reduce_133,
  3, 140, :_reduce_134,
  6, 101, :_reduce_135,
  5, 101, :_reduce_136,
  7, 102, :_reduce_137,
  6, 102, :_reduce_138,
  1, 145, :_reduce_none,
  2, 145, :_reduce_140,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  6, 103, :_reduce_143,
  5, 103, :_reduce_144,
  1, 147, :_reduce_145,
  3, 147, :_reduce_146,
  1, 149, :_reduce_147,
  1, 149, :_reduce_148,
  1, 149, :_reduce_149,
  1, 149, :_reduce_none,
  1, 148, :_reduce_none,
  2, 148, :_reduce_152,
  1, 143, :_reduce_153,
  1, 143, :_reduce_154,
  1, 144, :_reduce_155,
  2, 144, :_reduce_156,
  4, 144, :_reduce_157,
  1, 123, :_reduce_158,
  3, 123, :_reduce_159,
  3, 150, :_reduce_160,
  1, 150, :_reduce_161,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 95, :_reduce_164,
  3, 104, :_reduce_165,
  4, 104, :_reduce_166,
  2, 104, :_reduce_167,
  3, 107, :_reduce_168,
  4, 107, :_reduce_169,
  2, 107, :_reduce_170,
  1, 151, :_reduce_171,
  3, 151, :_reduce_172,
  3, 152, :_reduce_173,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 153, :_reduce_177,
  2, 154, :_reduce_178,
  1, 156, :_reduce_179,
  1, 158, :_reduce_180,
  1, 159, :_reduce_181,
  2, 157, :_reduce_182,
  1, 160, :_reduce_183,
  1, 161, :_reduce_184,
  2, 161, :_reduce_185,
  2, 155, :_reduce_186,
  2, 155, :_reduce_187,
  1, 112, :_reduce_188,
  1, 110, :_reduce_189,
  1, 111, :_reduce_190,
  1, 106, :_reduce_191,
  1, 105, :_reduce_192,
  1, 108, :_reduce_193,
  0, 114, :_reduce_none,
  1, 114, :_reduce_195,
  0, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  0, 81, :_reduce_212 ]

racc_reduce_n = 213

racc_shift_n = 369

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :DEFINE => 32,
  :ELSIF => 33,
  :VARIABLE => 34,
  :CLASS => 35,
  :INHERITS => 36,
  :NODE => 37,
  :BOOLEAN => 38,
  :NAME => 39,
  :SEMIC => 40,
  :CASE => 41,
  :DEFAULT => 42,
  :AT => 43,
  :LCOLLECT => 44,
  :RCOLLECT => 45,
  :CLASSREF => 46,
  :NOT => 47,
  :OR => 48,
  :AND => 49,
  :UNDEF => 50,
  :PARROW => 51,
  :PLUS => 52,
  :MINUS => 53,
  :TIMES => 54,
  :DIV => 55,
  :LSHIFT => 56,
  :RSHIFT => 57,
  :UMINUS => 58,
  :MATCH => 59,
  :NOMATCH => 60,
  :REGEX => 61,
  :IN_EDGE => 62,
  :OUT_EDGE => 63,
  :IN_EDGE_SUB => 64,
  :OUT_EDGE_SUB => 65,
  :IN => 66,
  :UNLESS => 67,
  :PIPE => 68,
  :LAMBDA => 69,
  :SELBRACE => 70,
  :HEREDOC => 71,
  :LOW => 72,
  :HIGH => 73,
  :CALL => 74,
  :MODULO => 75,
  :TITLE_COLON => 76,
  :CASE_COLON => 77 }

racc_nt_base = 78

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "HEREDOC",
  "LOW",
  "HIGH",
  "CALL",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "match_rvalue",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_j8",
  "lambda_ruby",
  "lambda_parameter_list",
  "optional_farrow",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 58)
  def _reduce_1(val, _values, result)
     result = Factory.block_or_expression(*val[0]) 
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'egrammar.ra', 63)
  def _reduce_3(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_4(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_5(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 71)
  def _reduce_6(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 75)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 76)
  def _reduce_8(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_11(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 84)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 85)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 86)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_16(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_17(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_18(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_19(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_20(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_21(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_22(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_23(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_24(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_25(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_26(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_27(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_28(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_29(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_30(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_31(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_32(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_33(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_34(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_35(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_36(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_37(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_38(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_39(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_40(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_41(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_42(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

module_eval(<<'.,.,', 'egrammar.ra', 156)
  def _reduce_62(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 157)
  def _reduce_63(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 165)
  def _reduce_64(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 169)
  def _reduce_65(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 173)
  def _reduce_66(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 178)
  def _reduce_67(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 182)
  def _reduce_68(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_69(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_70(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 191)
  def _reduce_71(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 192)
  def _reduce_72(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 193)
  def _reduce_73(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_74(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

# reduce 75 omitted

# reduce 76 omitted

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_77(val, _values, result)
          result = Factory.LAMBDA(val[0], val[2])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_78(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_79(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 80 omitted

# reduce 81 omitted

module_eval(<<'.,.,', 'egrammar.ra', 229)
  def _reduce_82(val, _values, result)
          result = Factory.LAMBDA(val[1], val[2])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 233)
  def _reduce_83(val, _values, result)
          result = Factory.LAMBDA(val[1], nil)
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 239)
  def _reduce_84(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 240)
  def _reduce_85(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 250)
  def _reduce_86(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 257)
  def _reduce_87(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 261)
  def _reduce_88(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'egrammar.ra', 269)
  def _reduce_90(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 273)
  def _reduce_91(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 277)
  def _reduce_92(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 286)
  def _reduce_93(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 290)
  def _reduce_94(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'egrammar.ra', 300)
  def _reduce_96(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 304)
  def _reduce_97(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 312)
  def _reduce_98(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 318)
  def _reduce_99(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 319)
  def _reduce_100(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 324)
  def _reduce_101(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 328)
  def _reduce_102(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 332)
  def _reduce_103(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 104 omitted

module_eval(<<'.,.,', 'egrammar.ra', 343)
  def _reduce_105(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 348)
  def _reduce_106(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 349)
  def _reduce_107(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 354)
  def _reduce_108(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 370)
  def _reduce_109(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 373)
  def _reduce_110(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error "A resource default can not be virtual or exported"
      when :override
        error "A resource override can not be virtual or exported"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 388)
  def _reduce_111(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        error "Defaults are not virtualizable"
      when :defaults
        error "Defaults are not virtualizable"
      when :override
        error "Defaults are not virtualizable"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 400)
  def _reduce_112(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error "A resource default can not specify a resource name"
      when :override
        error "A resource override does not allow override of name of resource"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 413)
  def _reduce_113(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        error "All resource specifications require names"
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 428)
  def _reduce_114(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_115(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 435)
  def _reduce_116(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_117(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 439)
  def _reduce_118(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_119(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 445)
  def _reduce_120(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 457)
  def _reduce_121(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 461)
  def _reduce_122(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 466)
  def _reduce_123(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_124(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 125 omitted

# reduce 126 omitted

module_eval(<<'.,.,', 'egrammar.ra', 480)
  def _reduce_127(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 481)
  def _reduce_128(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 482)
  def _reduce_129(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

module_eval(<<'.,.,', 'egrammar.ra', 498)
  def _reduce_133(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 502)
  def _reduce_134(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 512)
  def _reduce_135(val, _values, result)
          result = Factory.DEFINITION(classname(val[1][:value]), val[2], val[4])
      loc result, val[0], val[5]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 517)
  def _reduce_136(val, _values, result)
          result = Factory.DEFINITION(classname(val[1][:value]), val[2], nil)
      loc result, val[0], val[4]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 532)
  def _reduce_137(val, _values, result)
          @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5])
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 537)
  def _reduce_138(val, _values, result)
          @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), nil)
      loc result, val[0], val[5]
      
    result
  end
.,.,

# reduce 139 omitted

module_eval(<<'.,.,', 'egrammar.ra', 545)
  def _reduce_140(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'egrammar.ra', 562)
  def _reduce_143(val, _values, result)
          result = Factory.NODE(val[1], val[2], val[4])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 566)
  def _reduce_144(val, _values, result)
          result = Factory.NODE(val[1], val[2], nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 576)
  def _reduce_145(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_146(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 582)
  def _reduce_147(val, _values, result)
     result = Factory.fqn(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_148(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 584)
  def _reduce_149(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 150 omitted

# reduce 151 omitted

module_eval(<<'.,.,', 'egrammar.ra', 590)
  def _reduce_152(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 595)
  def _reduce_153(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_154(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 600)
  def _reduce_155(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 601)
  def _reduce_156(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 602)
  def _reduce_157(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 606)
  def _reduce_158(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 607)
  def _reduce_159(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 611)
  def _reduce_160(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 612)
  def _reduce_161(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 162 omitted

# reduce 163 omitted

module_eval(<<'.,.,', 'egrammar.ra', 625)
  def _reduce_164(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 631)
  def _reduce_165(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 632)
  def _reduce_166(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 633)
  def _reduce_167(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 636)
  def _reduce_168(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 637)
  def _reduce_169(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_170(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 641)
  def _reduce_171(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_172(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_173(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_177(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_178(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_179(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_180(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_181(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_182(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_183(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 661)
  def _reduce_184(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_185(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_186(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_187(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_188(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_189(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_190(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_191(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_192(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_193(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 194 omitted

module_eval(<<'.,.,', 'egrammar.ra', 685)
  def _reduce_195(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

module_eval(<<'.,.,', 'egrammar.ra', 708)
  def _reduce_212(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
