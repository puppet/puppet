#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 801)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'63,66,388,-247,64,57,259,59,-246,86,-132,-244,242,144,-245,-242,-233',
'286,377,296,376,-134,286,109,15,113,382,108,281,282,43,261,50,243,52',
'47,326,51,76,72,225,45,75,48,49,-247,145,73,14,112,-246,74,-132,-244',
'12,13,-245,-242,-233,93,92,297,77,-134,88,89,252,268,44,197,269,87,71',
'67,130,69,70,68,271,270,53,54,56,55,63,66,359,58,64,57,264,59,425,94',
'134,263,242,86,133,242,134,377,134,376,133,285,133,392,15,73,286,109',
'73,113,43,108,50,243,52,47,243,51,76,72,406,45,75,48,49,286,321,73,14',
'341,235,74,266,112,12,13,242,265,242,134,63,66,77,133,64,57,134,59,44',
'73,133,73,71,67,134,69,70,243,133,243,53,54,56,55,15,63,66,58,361,64',
'43,279,50,81,52,47,363,51,76,72,79,45,75,48,49,134,344,73,14,133,164',
'74,161,295,12,13,82,84,83,85,159,368,77,369,370,343,340,293,44,374,234',
'378,71,67,380,69,70,325,135,293,53,54,56,55,63,66,295,58,64,57,293,59',
'423,86,356,389,242,321,322,123,321,122,399,315,314,401,122,109,15,113',
'295,108,313,295,43,404,50,122,52,47,293,51,76,72,256,45,75,48,49,256',
'119,73,14,112,409,74,380,411,12,13,412,413,414,93,92,415,77,81,88,89',
'417,418,44,419,262,87,71,67,81,69,70,78,426,427,53,54,56,55,63,66,428',
'58,64,57,429,59,421,94,,,,86,,,,,,,,,,,15,,,109,,113,43,108,50,,52,47',
',51,76,72,,45,75,48,49,,,73,14,,,74,,112,12,13,,,,,63,66,77,,64,57,',
'59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,47,,51,76',
'72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71',
'67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,',
',,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,',
'53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74',
',,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15',
',,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,86,12,13,,,,,,,77,,,,,109,44,113,,108,71,67,,69,70,,,,53',
'54,56,55,63,66,,58,64,57,,59,398,112,,,,,,,,,,,,,,,15,,,,,,43,87,50',
',52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64',
'57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51',
'76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71',
'67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,',
',,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,',
'53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74',
',,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15',
',,58,,,43,,50,,52,129,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,86,12,13,,,,,,,77,,,,,109',
'44,113,,108,71,67,,69,70,,,,53,54,56,55,63,66,,58,64,57,,59,383,112',
',,,,,,,,,,,,,,15,,,,,,43,87,50,,52,115,,51,76,72,,45,75,,,,,73,14,,',
'74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55',
'15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,',
',63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43',
',50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64',
'57,148,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115',
',51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,150,59,44',
',,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45',
'75,,,,,73,14,,,74,,86,12,13,,,,,,,77,,,,,109,44,113,,108,71,67,,69,70',
',,,53,54,56,55,63,66,,58,64,57,,59,153,112,,,,86,,,,,,,,,,,15,,,109',
',113,43,108,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,112,12,13,,',
',,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43',
',50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64',
'57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51',
'76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71',
'67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,',
',,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,163,44,,,,71,67,,69,70,,',
',53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74',
',,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15',
',,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64',
'57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51',
'76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71',
'67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,47,,51,76,72,,45,75,48',
'49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,',
',,53,54,56,55,15,,,58,,,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73,14',
',,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56',
'55,15,,,58,,,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,,12',
'13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58',
',,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66',
'77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52',
'47,,51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,',
'59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,',
',58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,',
',58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,',
',58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,',
',58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,196,71,67,,69,70,,,,53,54,56,55,15',
',,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,199,220',
'210,221,52,211,223,212,208,206,,201,218,,,,,73,14,224,219,217,,,12,13',
',,,,,,77,,,,,222,200,,,,71,67,,69,70,,,,213,214,216,215,63,66,,58,64',
'57,,59,,,,,,,,,,,,,,,,,15,,,,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73',
'14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54',
'56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12',
'13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58',
',,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77',
',64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115',
',51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,,,77,,,,,,44,,,,71,67,,69',
'70,,,,53,54,56,55,63,66,,58,64,57,,59,352,,,,,,,,,,,,,,,,15,,,,,,43',
',50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64',
'57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51',
'76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,350,59,44,,',
',71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45',
'75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,349,59,44,,,,71,67,,69',
'70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14',
',,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56',
'55,15,232,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12',
'13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58',
',,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77',
',64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,199,220,210,221',
'52,211,223,212,208,206,,201,218,,,,,73,14,224,219,217,,,12,13,,,,,,',
'77,,,,,222,200,,,,71,67,,69,70,,,,213,214,216,215,63,66,,58,64,57,,59',
',,,,,,,,,,,,,,,,15,247,,,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14',
',,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56',
'55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13',
',,,,,,77,,,,,,44,,,,71,67,,69,70,,,,53,54,56,55,63,66,,58,64,57,,59',
'330,86,,,,,,,,,,,,,,109,15,113,,108,,,43,,50,,52,47,,51,76,72,,45,75',
'48,49,,,73,14,112,,74,,,12,13,,90,91,93,92,,77,,88,89,,,44,,,87,71,67',
',69,70,,,,53,54,56,55,63,66,,58,64,57,,59,328,94,,,,,,,,,,,,,,,15,,',
',,,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,,,77',
',,,,,44,,,,71,67,,69,70,,,,53,54,56,55,63,66,,58,64,57,,59,319,,,,,',
',,,,,,,,,,15,,,,,,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73,14,,,74',
',,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15',
',,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,,,,,77,,,,,,44,,,,71,67,,69,70,,,,53,54,56,55,63,66,,58,64,57',
',59,153,,,,,,,,,,,,,,,,15,,,,,,43,,50,,52,47,,51,76,72,,45,75,48,49',
',,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73,14,63,66',
'74,,64,12,13,,,,,,,77,,,,,,44,,,,71,67,,69,70,,,,53,54,56,55,86,,110',
'58,144,267,,141,,105,106,107,102,97,109,,113,,108,,,98,100,99,101,,',
'77,,,,,,,,,,145,67,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,,',
',87,105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,,,,94,,,,,,,',
',,112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,267,,,87,105,106,107',
'102,97,109,,113,,108,,,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103',
',,90,91,93,92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109,,113,,108',
',230,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95',
'96,86,88,89,,,,,,87,105,106,107,102,97,109,,113,,108,,,98,100,99,101',
',,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87',
'105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,,,,94,,,,,,,,,,112',
',,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109',
',113,,108,,,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93',
'92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109,,113,,108,,,98,100',
'99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89',
',,,,,87,105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,,,,94,,,',
',,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105,106,107',
'102,97,109,,113,,108,,,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103',
',,90,91,93,92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109,,113,,108',
'281,282,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92',
'95,96,,88,89,86,,110,,,87,,,,105,106,107,102,97,109,,113,,108,,,98,100',
'99,101,,,94,,,,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,,88,89,86',
',248,,,87,,,,105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,94,',
',,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,,88,89,86,,249,,,87,,',
',105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,94,,,,,,,,,,,,,112',
',,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109',
',113,,108,,,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93',
'92,95,96,,88,89,86,,251,,,87,,,,105,106,107,102,97,109,,113,,108,,,98',
'100,99,101,,,94,,,,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88',
'89,,,,,,87,105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,,,,94',
',,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105,106',
'107,102,97,109,291,113,,108,,,98,100,99,101,,,,,,94,,,,,,,,,,112,,,',
'104,103,,,90,91,93,92,95,96,,88,89,86,,250,,,87,,,,105,106,107,102,97',
'109,,113,86,108,,,98,100,99,101,,,94,,,,109,,113,,108,,,,,112,,,,104',
'103,,,90,91,93,92,95,96,,88,89,112,,,86,,87,,,90,91,93,92,,,,88,89,109',
',113,86,108,87,,,,,94,,,,,,,109,,113,,108,,,,,112,94,,,,,,,90,91,93',
'92,95,96,,88,89,112,,,,,87,,86,90,91,93,92,95,96,,88,89,,,,97,109,87',
'113,86,108,,94,98,,,,,,,,,97,109,,113,,108,,94,98,,112,,,,,,,,90,91',
'93,92,95,96,,88,89,112,,,,,87,,,90,91,93,92,95,96,,88,89,,,86,,,87,',
'287,,,94,105,106,107,102,97,109,,113,86,108,,,98,100,99,101,94,,,,,97',
'109,,113,,108,,,98,,112,,,,104,103,,,90,91,93,92,95,96,,88,89,112,,',
',,87,,86,90,91,93,92,95,96,,88,89,,,102,97,109,87,113,,108,,94,98,100',
'99,101,,,,,,,,,,,,,94,,,112,,,,,86,,,90,91,93,92,95,96,,88,89,102,97',
'109,,113,87,108,,86,98,100,99,101,,,,,105,106,107,102,97,109,,113,,108',
'94,112,98,100,99,101,103,,,90,91,93,92,95,96,,88,89,,,,112,,87,,104',
'103,,,90,91,93,92,95,96,,88,89,86,,,,,87,,94,,105,106,107,102,97,109',
',113,,108,,,98,100,99,101,,,94,,,,,,,,,,,,,112,,,,104,103,,,90,91,93',
'92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109,,113,,108,,86,98,100',
'99,101,63,66,,,64,94,,,97,109,,113,,108,,112,98,,,104,103,,,90,91,93',
'92,95,96,,88,89,63,66,,112,64,87,,144,,,141,90,91,93,92,95,96,,88,89',
'86,,63,66,,87,64,94,,,77,,,,109,,113,86,108,144,145,67,141,,,,,94,,86',
',109,,113,,108,,,,,112,144,77,109,141,113,,108,,,,,145,67,,88,89,112',
',,,,87,,77,,,,,112,,,88,89,145,67,,,,87,,,,,88,89,,305,220,304,221,87',
'302,223,306,300,299,,301,303,,,,,,,224,219,307,305,220,304,221,,302',
'223,306,300,299,,301,303,,,222,308,,,224,219,307,,,,,,,311,312,310,309',
',,,,,222,308,,,,,,,,,,,,311,312,310,309,305,220,304,221,,302,223,306',
'300,299,,301,303,,,,,,,224,219,307,,,,,,,,,,,,,,,,222,308,,,,,,,,,,',
',311,312,310,309' ]
        racc_action_table = arr = ::Array.new(7097, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,337,214,0,0,137,0,213,175,206,215,244,262,216,217,218,331,374,209',
'374,208,246,175,0,175,331,175,356,356,0,137,0,244,0,0,246,0,0,0,111',
'0,0,0,0,214,262,0,0,175,213,0,206,215,0,0,216,217,218,175,175,209,0',
'208,175,175,129,152,0,109,152,175,0,0,47,0,0,0,157,157,0,0,0,0,412,412',
'288,0,412,412,147,412,412,175,129,147,321,172,129,122,340,328,47,328',
'340,171,47,340,412,321,171,172,122,172,412,172,412,321,412,412,122,412',
'412,412,373,412,412,412,412,373,278,412,412,256,122,412,149,172,412',
'412,161,149,256,115,5,5,412,115,5,5,210,5,412,161,210,256,412,412,50',
'412,412,161,50,256,412,412,412,412,5,159,159,412,292,159,5,161,5,80',
'5,5,294,5,5,5,5,5,5,5,5,211,258,5,5,211,78,5,68,298,5,5,8,8,8,8,67,316',
'5,318,320,257,254,253,5,327,121,329,5,5,330,5,5,245,48,334,5,5,5,5,411',
'411,335,5,411,411,336,411,411,176,284,338,243,342,242,42,236,232,355',
'231,229,358,41,176,411,176,360,176,227,203,411,367,411,368,411,411,202',
'411,411,411,131,411,411,411,411,136,40,411,411,176,377,411,378,380,411',
'411,381,385,386,176,176,387,411,165,176,176,393,394,411,397,139,176',
'411,411,6,411,411,1,416,420,411,411,411,411,409,409,422,411,409,409',
'424,409,409,176,,,,116,,,,,,,,,,,409,,,116,,116,409,116,409,,409,409',
',409,409,409,,409,409,409,409,,,409,409,,,409,,116,409,409,,,,,389,389',
'409,,389,389,,389,409,,,,409,409,,409,409,,,,409,409,409,409,389,,,409',
',,389,,389,,389,389,,389,389,389,,389,389,389,389,,,389,389,,,389,,',
'389,389,,,,,12,12,389,,12,12,,12,389,,,,389,389,,389,389,,,,389,389',
'389,389,12,,,389,,,12,,12,,12,12,,12,12,12,,12,12,,,,,12,12,,,12,,,12',
'12,,,,,13,13,12,,13,13,,13,12,,,,12,12,,12,12,,,,12,12,12,12,13,,,12',
',,13,,13,,13,13,,13,13,13,,13,13,,,,,13,13,,,13,,,13,13,,,,,14,14,13',
',14,14,,14,13,,,,13,13,,13,13,,,,13,13,13,13,14,,,13,,,14,,14,,14,14',
',14,14,14,,14,14,,,,,14,14,,,14,,,14,14,,,,,15,15,14,,15,15,,15,14,',
',,14,14,,14,14,,,,14,14,14,14,15,,,14,,,15,,15,,15,15,,15,15,15,,15',
'15,,,,,15,15,,,15,,,15,15,,,,,376,376,15,,376,376,,376,15,,,,15,15,',
'15,15,,,,15,15,15,15,376,,,15,,,376,,376,,376,376,,376,376,376,,376',
'376,,,,,376,376,,,376,,,376,376,,,,,359,359,376,,359,359,,359,376,,',
',376,376,,376,376,,,,376,376,376,376,359,,,376,,,359,,359,,359,359,',
'359,359,359,,359,359,,,,,359,359,,,359,,174,359,359,,,,,,,359,,,,,174',
'359,174,,174,359,359,,359,359,,,,359,359,359,359,344,344,,359,344,344',
',344,344,174,,,,,,,,,,,,,,,344,,,,,,344,174,344,,344,344,,344,344,344',
',344,344,344,344,,,344,344,,,344,,,344,344,,,,,43,43,344,,43,43,,43',
'344,,,,344,344,,344,344,,,,344,344,344,344,43,,,344,,,43,,43,,43,43',
',43,43,43,,43,43,,,,,43,43,,,43,,,43,43,,,,,44,44,43,,44,44,,44,43,',
',,43,43,,43,43,,,,43,43,43,43,44,,,43,,,44,,44,,44,44,,44,44,44,,44',
'44,,,,,44,44,,,44,,,44,44,,,,,45,45,44,,45,45,,45,44,,,,44,44,,44,44',
',,,44,44,44,44,45,,,44,,,45,,45,,45,45,,45,45,45,,45,45,,,,,45,45,,',
'45,,,45,45,,,,,46,46,45,,46,46,,46,45,,,,45,45,,45,45,,,,45,45,45,45',
'46,,,45,,,46,,46,,46,46,,46,46,46,,46,46,,,,,46,46,,,46,,,46,46,,,,',
'343,343,46,,343,343,,343,46,,,,46,46,,46,46,,,,46,46,46,46,343,,,46',
',,343,,343,,343,343,,343,343,343,,343,343,343,343,,,343,343,,,343,,173',
'343,343,,,,,,,343,,,,,173,343,173,,173,343,343,,343,343,,,,343,343,343',
'343,332,332,,343,332,332,,332,332,173,,,,,,,,,,,,,,,332,,,,,,332,173',
'332,,332,332,,332,332,332,,332,332,,,,,332,332,,,332,,,332,332,,,,,325',
'325,332,,325,325,,325,332,,,,332,332,,332,332,,,,332,332,332,332,325',
',,332,,,325,,325,,325,325,,325,325,325,,325,325,,,,,325,325,,,325,,',
'325,325,,,,,322,322,325,,322,322,,322,325,,,,325,325,,325,325,,,,325',
'325,325,325,322,,,325,,,322,,322,,322,322,,322,322,322,,322,322,,,,',
'322,322,,,322,,,322,322,,,,,57,57,322,,57,57,57,57,322,,,,322,322,,322',
'322,,,,322,322,322,322,57,,,322,,,57,,57,,57,57,,57,57,57,,57,57,,,',
',57,57,,,57,,,57,57,,,,,58,58,57,,58,58,58,58,57,,,,57,57,,57,57,,,',
'57,57,57,57,58,,,57,,,58,,58,,58,58,,58,58,58,,58,58,,,,,58,58,,,58',
',114,58,58,,,,,,,58,,,,,114,58,114,,114,58,58,,58,58,,,,58,58,58,58',
'59,59,,58,59,59,,59,59,114,,,,117,,,,,,,,,,,59,,,117,,117,59,117,59',
',59,59,,59,59,59,,59,59,,,,,59,59,,,59,,117,59,59,,,,,65,65,59,,65,65',
',65,59,,,,59,59,,59,59,,,,59,59,59,59,65,,,59,,,65,,65,,65,65,,65,65',
'65,,65,65,,,,,65,65,,,65,,,65,65,,,,,315,315,65,,315,315,,315,65,,,',
'65,65,,65,65,,,,65,65,65,65,315,,,65,,,315,,315,,315,315,,315,315,315',
',315,315,,,,,315,315,,,315,,,315,315,,,,,297,297,315,,297,297,,297,315',
',,,315,315,,315,315,,,,315,315,315,315,297,,,315,,,297,,297,,297,297',
',297,297,297,,297,297,,,,,297,297,,,297,,,297,297,,,,,70,70,297,,70',
'70,,70,297,,,,297,297,,297,297,,,,297,297,297,297,70,,,297,,,70,,70',
',70,70,,70,70,70,,70,70,,,,,70,70,,,70,,,70,70,,,,,296,296,70,,296,296',
',296,70,,,,70,70,,70,70,,,,70,70,70,70,296,,,70,,,296,,296,,296,296',
',296,296,296,,296,296,,,,,296,296,,,296,,,296,296,,,,,160,160,296,,160',
'160,,160,296,,,,296,296,,296,296,,,,296,296,296,296,160,,,296,,,160',
',160,,160,160,,160,160,160,,160,160,160,160,,,160,160,,,160,,,160,160',
',,,,293,293,160,,293,293,,293,160,,,,160,160,,160,160,,,,160,160,160',
'160,293,,,160,,,293,,293,,293,293,,293,293,293,,293,293,,,,,293,293',
',,293,,,293,293,,,,,81,81,293,,81,81,,81,293,,,,293,293,,293,293,,,',
'293,293,293,293,81,,,293,,,81,,81,,81,81,,81,81,81,,81,81,81,81,,,81',
'81,,,81,,,81,81,,,,,82,82,81,,82,82,,82,81,,,,81,81,,81,81,,,,81,81',
'81,81,82,,,81,,,82,,82,,82,82,,82,82,82,,82,82,82,82,,,82,82,,,82,,',
'82,82,,,,,83,83,82,,83,83,,83,82,,,,82,82,,82,82,,,,82,82,82,82,83,',
',82,,,83,,83,,83,83,,83,83,83,,83,83,83,83,,,83,83,,,83,,,83,83,,,,',
'84,84,83,,84,84,,84,83,,,,83,83,,83,83,,,,83,83,83,83,84,,,83,,,84,',
'84,,84,84,,84,84,84,,84,84,84,84,,,84,84,,,84,,,84,84,,,,,85,85,84,',
'85,85,,85,84,,,,84,84,,84,84,,,,84,84,84,84,85,,,84,,,85,,85,,85,85',
',85,85,85,,85,85,85,85,,,85,85,,,85,,,85,85,,,,,86,86,85,,86,86,,86',
'85,,,,85,85,,85,85,,,,85,85,85,85,86,,,85,,,86,,86,,86,86,,86,86,86',
',86,86,,,,,86,86,,,86,,,86,86,,,,,87,87,86,,87,87,,87,86,,,,86,86,,86',
'86,,,,86,86,86,86,87,,,86,,,87,,87,,87,87,,87,87,87,,87,87,,,,,87,87',
',,87,,,87,87,,,,,88,88,87,,88,88,,88,87,,,,87,87,,87,87,,,,87,87,87',
'87,88,,,87,,,88,,88,,88,88,,88,88,88,,88,88,,,,,88,88,,,88,,,88,88,',
',,,89,89,88,,89,89,,89,88,,,,88,88,,88,88,,,,88,88,88,88,89,,,88,,,89',
',89,,89,89,,89,89,89,,89,89,,,,,89,89,,,89,,,89,89,,,,,90,90,89,,90',
'90,,90,89,,,,89,89,,89,89,,,,89,89,89,89,90,,,89,,,90,,90,,90,90,,90',
'90,90,,90,90,,,,,90,90,,,90,,,90,90,,,,,91,91,90,,91,91,,91,90,,,,90',
'90,,90,90,,,,90,90,90,90,91,,,90,,,91,,91,,91,91,,91,91,91,,91,91,,',
',,91,91,,,91,,,91,91,,,,,92,92,91,,92,92,,92,91,,,,91,91,,91,91,,,,91',
'91,91,91,92,,,91,,,92,,92,,92,92,,92,92,92,,92,92,,,,,92,92,,,92,,,92',
'92,,,,,93,93,92,,93,93,,93,92,,,,92,92,,92,92,,,,92,92,92,92,93,,,92',
',,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93,,,93,,,93,93,,,,,94,94,93',
',94,94,,94,93,,,,93,93,,93,93,,,,93,93,93,93,94,,,93,,,94,,94,,94,94',
',94,94,94,,94,94,,,,,94,94,,,94,,,94,94,,,,,95,95,94,,95,95,,95,94,',
',,94,94,,94,94,,,,94,94,94,94,95,,,94,,,95,,95,,95,95,,95,95,95,,95',
'95,,,,,95,95,,,95,,,95,95,,,,,96,96,95,,96,96,,96,95,,,,95,95,,95,95',
',,,95,95,95,95,96,,,95,,,96,,96,,96,96,,96,96,96,,96,96,,,,,96,96,,',
'96,,,96,96,,,,,97,97,96,,97,97,,97,96,,,,96,96,,96,96,,,,96,96,96,96',
'97,,,96,,,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97,,,97,,,97,97,,,,',
'98,98,97,,98,98,,98,97,,,,97,97,,97,97,,,,97,97,97,97,98,,,97,,,98,',
'98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,98,,,,,99,99,98,,99,99',
',99,98,,,,98,98,,98,98,,,,98,98,98,98,99,,,98,,,99,,99,,99,99,,99,99',
'99,,99,99,,,,,99,99,,,99,,,99,99,,,,,100,100,99,,100,100,,100,99,,,',
'99,99,,99,99,,,,99,99,99,99,100,,,99,,,100,,100,,100,100,,100,100,100',
',100,100,,,,,100,100,,,100,,,100,100,,,,,101,101,100,,101,101,,101,100',
',,,100,100,,100,100,,,,100,100,100,100,101,,,100,,,101,,101,,101,101',
',101,101,101,,101,101,,,,,101,101,,,101,,,101,101,,,,,102,102,101,,102',
'102,,102,101,,,,101,101,,101,101,,,,101,101,101,101,102,,,101,,,102',
',102,,102,102,,102,102,102,,102,102,,,,,102,102,,,102,,,102,102,,,,',
'103,103,102,,103,103,,103,102,,,,102,102,,102,102,,,,102,102,102,102',
'103,,,102,,,103,,103,,103,103,,103,103,103,,103,103,,,,,103,103,,,103',
',,103,103,,,,,104,104,103,,104,104,,104,103,,,,103,103,,103,103,,,,103',
'103,103,103,104,,,103,,,104,,104,,104,104,,104,104,104,,104,104,,,,',
'104,104,,,104,,,104,104,,,,,105,105,104,,105,105,,105,104,,,,104,104',
',104,104,,,,104,104,104,104,105,,,104,,,105,,105,,105,105,,105,105,105',
',105,105,,,,,105,105,,,105,,,105,105,,,,,106,106,105,,106,106,,106,105',
',,,105,105,,105,105,,,,105,105,105,105,106,,,105,,,106,,106,,106,106',
',106,106,106,,106,106,,,,,106,106,,,106,,,106,106,,,,,107,107,106,,107',
'107,,107,106,,,,106,106,,106,106,,,,106,106,106,106,107,,,106,,,107',
',107,,107,107,,107,107,107,,107,107,,,,,107,107,,,107,,,107,107,,,,',
'108,108,107,,108,108,,108,107,,,,107,107,,107,107,,,,107,107,107,107',
'108,,,107,,,108,,108,,108,108,,108,108,108,,108,108,,,,,108,108,,,108',
',,108,108,,,,,287,287,108,,287,287,,287,108,,,108,108,108,,108,108,',
',,108,108,108,108,287,,,108,,,287,,287,,287,287,,287,287,287,,287,287',
',,,,287,287,,,287,,,287,287,,,,,110,110,287,,110,110,,110,287,,,,287',
'287,,287,287,,,,287,287,287,287,110,,,287,,,110,110,110,110,110,110',
'110,110,110,110,,110,110,,,,,110,110,110,110,110,,,110,110,,,,,,,110',
',,,,110,110,,,,110,110,,110,110,,,,110,110,110,110,286,286,,110,286',
'286,,286,,,,,,,,,,,,,,,,,286,,,,,,286,,286,,286,286,,286,286,286,,286',
'286,,,,,286,286,,,286,,,286,286,,,,,112,112,286,,112,112,,112,286,,',
',286,286,,286,286,,,,286,286,286,286,112,,,286,,,112,,112,,112,112,',
'112,112,112,,112,112,,,,,112,112,,,112,,,112,112,,,,,113,113,112,,113',
'113,,113,112,,,,112,112,,112,112,,,,112,112,112,112,113,,,112,,,113',
',113,,113,113,,113,113,113,,113,113,,,,,113,113,,,113,,,113,113,,,,',
'274,274,113,,274,274,,274,113,,,,113,113,,113,113,,,,113,113,113,113',
'274,,,113,,,274,,274,,274,274,,274,274,274,,274,274,,,,,274,274,,,274',
',,274,274,,,,,,,274,,,,,,274,,,,274,274,,274,274,,,,274,274,274,274',
'269,269,,274,269,269,,269,269,,,,,,,,,,,,,,,,269,,,,,,269,,269,,269',
'269,,269,269,269,,269,269,,,,,269,269,,,269,,,269,269,,,,,267,267,269',
',267,267,,267,269,,,,269,269,,269,269,,,,269,269,269,269,267,,,269,',
',267,,267,,267,267,,267,267,267,,267,267,,,,,267,267,,,267,,,267,267',
',,,,265,265,267,,265,265,265,265,267,,,,267,267,,267,267,,,,267,267',
'267,267,265,,,267,,,265,,265,,265,265,,265,265,265,,265,265,,,,,265',
'265,,,265,,,265,265,,,,,263,263,265,,263,263,263,263,265,,,,265,265',
',265,265,,,,265,265,265,265,263,,,265,,,263,,263,,263,263,,263,263,263',
',263,263,,,,,263,263,,,263,,,263,263,,,,,119,119,263,,119,119,,119,263',
',,,263,263,,263,263,,,,263,263,263,263,119,119,,263,,,119,,119,,119',
'119,,119,119,119,,119,119,,,,,119,119,,,119,,,119,119,,,,,252,252,119',
',252,252,,252,119,,,,119,119,,119,119,,,,119,119,119,119,252,,,119,',
',252,,252,,252,252,,252,252,252,,252,252,,,,,252,252,,,252,,,252,252',
',,,,251,251,252,,251,251,,251,252,,,,252,252,,252,252,,,,252,252,252',
'252,251,,,252,,,251,251,251,251,251,251,251,251,251,251,,251,251,,,',
',251,251,251,251,251,,,251,251,,,,,,,251,,,,,251,251,,,,251,251,,251',
'251,,,,251,251,251,251,123,123,,251,123,123,,123,,,,,,,,,,,,,,,,,123',
'123,,,,,123,,123,,123,123,,123,123,123,,123,123,,,,,123,123,,,123,,',
'123,123,,,,,250,250,123,,250,250,,250,123,,,,123,123,,123,123,,,,123',
'123,123,123,250,,,123,,,250,,250,,250,250,,250,250,250,,250,250,,,,',
'250,250,,,250,,,250,250,,,,,,,250,,,,,,250,,,,250,250,,250,250,,,,250',
'250,250,250,249,249,,250,249,249,,249,249,180,,,,,,,,,,,,,,180,249,180',
',180,,,249,,249,,249,249,,249,249,249,,249,249,249,249,,,249,249,180',
',249,,,249,249,,180,180,180,180,,249,,180,180,,,249,,,180,249,249,,249',
'249,,,,249,249,249,249,248,248,,249,248,248,,248,248,180,,,,,,,,,,,',
',,,248,,,,,,248,,248,,248,248,,248,248,248,,248,248,248,248,,,248,248',
',,248,,,248,248,,,,,,,248,,,,,,248,,,,248,248,,248,248,,,,248,248,248',
'248,234,234,,248,234,234,,234,234,,,,,,,,,,,,,,,,234,,,,,,234,,234,',
'234,234,,234,234,234,,234,234,234,234,,,234,234,,,234,,,234,234,,,,',
'201,201,234,,201,201,,201,234,,,,234,234,,234,234,,,,234,234,234,234',
'201,,,234,,,201,,201,,201,201,,201,201,201,,201,201,,,,,201,201,,,201',
',,201,201,,,,,130,130,201,,130,130,,130,201,,,,201,201,,201,201,,,,201',
'201,201,201,130,,,201,,,130,,130,,130,130,,130,130,130,,130,130,,,,',
'130,130,,,130,,,130,130,,,,,200,200,130,,200,200,,200,130,,,,130,130',
',130,130,,,,130,130,130,130,200,,,130,,,200,,200,,200,200,,200,200,200',
',200,200,,,,,200,200,,,200,,,200,200,,,,,199,199,200,,199,199,,199,200',
',,,200,200,,200,200,,,,200,200,200,200,199,,,200,,,199,,199,,199,199',
',199,199,199,,199,199,,,,,199,199,,,199,,,199,199,,,,,196,196,199,,196',
'196,,196,199,,,,199,199,,199,199,,,,199,199,199,199,196,,,199,,,196',
',196,,196,196,,196,196,196,,196,196,,,,,196,196,,,196,,,196,196,,,,',
',,196,,,,,,196,,,,196,196,,196,196,,,,196,196,196,196,163,163,,196,163',
'163,,163,163,,,,,,,,,,,,,,,,163,,,,,,163,,163,,163,163,,163,163,163',
',163,163,163,163,,,163,163,,,163,,,163,163,,,,,79,79,163,,79,79,,79',
'163,,,,163,163,,163,163,,,,163,163,163,163,79,,,163,,,79,,79,,79,79',
',79,79,79,,79,79,79,79,,,79,79,261,261,79,,261,79,79,,,,,,,79,,,,,,79',
',,,79,79,,79,79,,,,79,79,79,79,283,,283,79,261,283,,261,,283,283,283',
'283,283,283,,283,,283,,,283,283,283,283,,,261,,,,,,,,,,261,261,,283',
',,,283,283,,,283,283,283,283,283,283,365,283,283,,,,,,283,365,365,365',
'365,365,365,,365,,365,,,365,365,365,365,,,,,,283,,,,,,,,,,365,,,,365',
'365,,,365,365,365,365,365,365,151,365,365,,,151,,,365,151,151,151,151',
'151,151,,151,,151,,,151,151,151,151,,,,,,365,,,,,,,,,,151,,,,151,151',
',,151,151,151,151,151,151,118,151,151,,,,,,151,118,118,118,118,118,118',
',118,,118,,118,118,118,118,118,,,,,,151,,,,,,,,,,118,,,,118,118,,,118',
'118,118,118,118,118,155,118,118,,,,,,118,155,155,155,155,155,155,,155',
',155,,,155,155,155,155,,,,,,118,,,,,,,,,,155,,,,155,155,,,155,155,155',
'155,155,155,357,155,155,,,,,,155,357,357,357,357,357,357,,357,,357,',
',357,357,357,357,,,,,,155,,,,,,,,,,357,,,,357,357,,,357,357,357,357',
'357,357,226,357,357,,,,,,357,226,226,226,226,226,226,,226,,226,,,226',
'226,226,226,,,,,,357,,,,,,,,,,226,,,,226,226,,,226,226,226,226,226,226',
'146,226,226,,,,,,226,146,146,146,146,146,146,,146,,146,,,146,146,146',
'146,,,,,,226,,,,,,,,,,146,,,,146,146,,,146,146,146,146,146,146,366,146',
'146,,,,,,146,366,366,366,366,366,366,,366,,366,,,366,366,366,366,,,',
',,146,,,,,,,,,,366,,,,366,366,,,366,366,366,366,366,366,162,366,366',
',,,,,366,162,162,162,162,162,162,,162,,162,,,162,162,162,162,,,,,,366',
',,,,,,,,,162,,,,162,162,,,162,162,162,162,162,162,372,162,162,,,,,,162',
'372,372,372,372,372,372,,372,,372,162,162,372,372,372,372,,,,,,162,',
',,,,,,,,372,,,,372,372,,,372,372,372,372,372,372,,372,372,11,,11,,,372',
',,,11,11,11,11,11,11,,11,,11,,,11,11,11,11,,,372,,,,,,,,,,,,,11,,,,11',
'11,,,11,11,11,11,11,11,,11,11,124,,124,,,11,,,,124,124,124,124,124,124',
',124,,124,,,124,124,124,124,,,11,,,,,,,,,,,,,124,,,,124,124,,,124,124',
'124,124,124,124,,124,124,126,,126,,,124,,,,126,126,126,126,126,126,',
'126,,126,,,126,126,126,126,,,124,,,,,,,,,,,,,126,,,,126,126,,,126,126',
'126,126,126,126,351,126,126,,,,,,126,351,351,351,351,351,351,,351,,351',
',,351,351,351,351,,,,,,126,,,,,,,,,,351,,,,351,351,,,351,351,351,351',
'351,351,,351,351,128,,128,,,351,,,,128,128,128,128,128,128,,128,,128',
',,128,128,128,128,,,351,,,,,,,,,,,,,128,,,,128,128,,,128,128,128,128',
'128,128,348,128,128,,,,,,128,348,348,348,348,348,348,,348,,348,,,348',
'348,348,348,,,,,,128,,,,,,,,,,348,,,,348,348,,,348,348,348,348,348,348',
'198,348,348,,,,,,348,198,198,198,198,198,198,198,198,,198,,,198,198',
'198,198,,,,,,348,,,,,,,,,,198,,,,198,198,,,198,198,198,198,198,198,',
'198,198,127,,127,,,198,,,,127,127,127,127,127,127,,127,181,127,,,127',
'127,127,127,,,198,,,,181,,181,,181,,,,,127,,,,127,127,,,127,127,127',
'127,127,127,,127,127,181,,,182,,127,,,181,181,181,181,,,,181,181,182',
',182,183,182,181,,,,,127,,,,,,,183,,183,,183,,,,,182,181,,,,,,,182,182',
'182,182,182,182,,182,182,183,,,,,182,,184,183,183,183,183,183,183,,183',
'183,,,,184,184,183,184,185,184,,182,184,,,,,,,,,185,185,,185,,185,,183',
'185,,184,,,,,,,,184,184,184,184,184,184,,184,184,185,,,,,184,,,185,185',
'185,185,185,185,,185,185,,,193,,,185,,193,,,184,193,193,193,193,193',
'193,,193,187,193,,,193,193,193,193,185,,,,,187,187,,187,,187,,,187,',
'193,,,,193,193,,,193,193,193,193,193,193,,193,193,187,,,,,193,,188,187',
'187,187,187,187,187,,187,187,,,188,188,188,187,188,,188,,193,188,188',
'188,188,,,,,,,,,,,,,187,,,188,,,,,189,,,188,188,188,188,188,188,,188',
'188,189,189,189,,189,188,189,,190,189,189,189,189,,,,,190,190,190,190',
'190,190,,190,,190,188,189,190,190,190,190,189,,,189,189,189,189,189',
'189,,189,189,,,,190,,189,,190,190,,,190,190,190,190,190,190,,190,190',
'191,,,,,190,,189,,191,191,191,191,191,191,,191,,191,,,191,191,191,191',
',,190,,,,,,,,,,,,,191,,,,191,191,,,191,191,191,191,191,191,192,191,191',
',,,,,191,192,192,192,192,192,192,,192,,192,,186,192,192,192,192,212',
'212,,,212,191,,,186,186,,186,,186,,192,186,,,192,192,,,192,192,192,192',
'192,192,,192,192,259,259,,186,259,192,,212,,,212,186,186,186,186,186',
'186,,186,186,179,,51,51,,186,51,192,,,212,,,,179,,179,177,179,259,212',
'212,259,,,,,186,,178,,177,,177,,177,,,,,179,51,259,178,51,178,,178,',
',,,259,259,,179,179,177,,,,,179,,51,,,,,178,,,177,177,51,51,,,,177,',
',,,178,178,,225,225,225,225,178,225,225,225,225,225,,225,225,,,,,,,225',
'225,225,295,295,295,295,,295,295,295,295,295,,295,295,,,225,225,,,295',
'295,295,,,,,,,225,225,225,225,,,,,,295,295,,,,,,,,,,,,295,295,295,295',
'290,290,290,290,,290,290,290,290,290,,290,290,,,,,,,290,290,290,,,,',
',,,,,,,,,,,290,290,,,,,,,,,,,,290,290,290,290' ]
        racc_action_check = arr = ::Array.new(7097, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   305,   nil,   nil,   nil,   142,   289,   nil,   135,   nil,
   nil,  5966,   430,   490,   550,   610,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   248,   179,   217,   874,   934,   994,  1054,    65,   177,   nil,
   121,  6880,   nil,   nil,   nil,   nil,   nil,  1378,  1438,  1522,
   nil,   nil,   nil,   nil,   nil,  1582,   nil,   128,   125,   nil,
  1762,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   194,  5290,
   164,  2002,  2062,  2122,  2182,  2242,  2302,  2362,  2422,  2482,
  2542,  2602,  2662,  2722,  2782,  2842,  2902,  2962,  3022,  3082,
  3142,  3202,  3262,  3322,  3382,  3442,  3502,  3562,  3622,    28,
  3742,    31,  3886,  3946,  1486,   106,   318,  1530,  5531,  4330,
   nil,   205,    63,  4534,  6023,   nil,  6080,  6356,  6191,    57,
  4966,   242,   nil,   nil,   nil,   nil,   247,    -7,   nil,   277,
   nil,   nil,   nil,   nil,   nil,   nil,  5747,    82,   nil,   128,
   nil,  5477,    57,   nil,   nil,  5585,   nil,    74,   nil,   167,
  1882,   104,  5855,  5230,   nil,   278,   nil,   nil,   nil,   nil,
   nil,    97,    90,  1162,   778,     2,   230,  6890,  6902,  6873,
  4682,  6373,  6416,  6433,  6480,  6497,  6816,  6573,  6620,  6665,
  6685,  6742,  6796,  6556,   nil,   nil,  5146,   nil,  6299,  5086,
  5026,  4906,   222,   244,   nil,   nil,    -2,   nil,     9,     7,
   113,   152,  6826,    -4,    -9,    -1,     2,     3,     4,   nil,
   nil,   nil,   nil,   nil,   nil,  6935,  5693,   208,   nil,   224,
   nil,   234,   174,   nil,  4846,   nil,   231,   nil,   nil,   nil,
   nil,   nil,   226,   204,   -24,   214,     9,   nil,  4762,  4678,
  4594,  4450,  4390,   169,   172,   nil,   106,   200,   181,  6858,
   nil,  5339,   -28,  4270,   nil,  4210,   nil,  4150,   nil,  4090,
   nil,   nil,   nil,   nil,  4006,   nil,   nil,   nil,   117,   nil,
   nil,   nil,   nil,  5369,   228,   nil,  3826,  3682,    73,   nil,
  7011,   nil,   162,  1942,   170,  6957,  1822,  1702,   184,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  1642,   178,   nil,   197,   nil,
   137,    60,  1318,   nil,   nil,  1258,   nil,   203,    68,   205,
   185,     4,  1198,   nil,   181,   217,   192,    -8,   230,   nil,
    63,   nil,   228,  1114,   814,   nil,   nil,   nil,  6245,   nil,
   nil,  6134,   nil,   nil,   nil,   175,   -52,  5639,   239,   730,
   241,   nil,   nil,   nil,   nil,  5423,  5801,   249,   190,   nil,
   nil,   nil,  5909,   116,   -15,   nil,   670,   269,   247,   nil,
   272,   275,   nil,   nil,   nil,   275,   276,   279,   nil,   370,
   nil,   nil,   nil,   267,   285,   nil,   nil,   287,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   310,
   nil,   226,    82,   nil,   nil,   nil,   296,   nil,   nil,   nil,
   297,   nil,   304,   nil,   308,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -248,  -249,    -1,    -2,    -3,    -4,    -5,    -8,   -10,   -11,
   -16,  -109,  -249,  -249,  -249,  -249,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,
   -60,   -61,   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,
   -74,   -75,   -79,  -249,  -249,  -249,  -249,  -249,  -120,  -122,
  -249,  -249,  -177,  -178,  -179,  -180,  -181,  -249,  -249,  -249,
  -194,  -195,  -196,  -197,  -198,  -249,  -200,  -249,  -211,  -214,
  -249,  -219,  -220,  -221,  -222,  -223,  -224,  -225,  -249,  -249,
    -7,  -249,  -249,  -249,  -249,  -249,  -249,  -249,  -249,  -249,
  -249,  -249,  -249,  -249,  -249,  -249,  -249,  -249,  -249,  -249,
  -249,  -249,  -249,  -249,  -249,  -249,  -249,  -249,  -249,  -249,
  -129,  -124,  -248,  -248,   -28,  -249,   -29,   -36,  -249,  -249,
   -76,  -249,  -249,  -249,  -249,   -86,  -249,  -249,  -249,  -249,
  -249,  -248,  -139,  -160,  -161,  -121,  -248,  -248,  -148,  -150,
  -151,  -152,  -153,  -154,  -156,  -157,   -44,  -249,  -184,  -249,
  -187,  -249,  -249,  -190,  -191,  -204,  -199,  -249,  -207,  -249,
  -249,  -249,  -249,  -249,   430,    -6,    -9,   -12,   -13,   -14,
   -15,  -249,   -18,   -19,   -20,   -21,   -22,   -23,   -24,   -25,
   -26,   -27,   -30,   -31,   -32,   -33,   -34,   -35,   -37,   -38,
   -39,   -40,   -41,  -249,   -42,  -104,  -249,   -80,  -249,  -237,
  -243,  -231,  -228,  -226,  -118,  -130,  -220,  -133,  -224,  -249,
  -234,  -232,  -240,  -178,  -179,  -180,  -181,  -222,  -223,  -230,
  -235,  -236,  -238,  -239,  -241,  -129,  -128,  -249,  -127,  -249,
   -43,  -226,   -71,   -81,  -249,   -84,  -226,  -165,  -167,  -168,
  -169,  -170,  -172,  -249,  -249,  -175,  -249,   -78,  -249,  -249,
  -249,  -129,  -249,  -228,  -248,  -162,  -249,  -249,  -249,  -249,
  -158,  -249,  -249,  -249,  -182,  -249,  -185,  -249,  -188,  -249,
  -201,  -202,  -203,  -205,  -249,  -208,  -209,  -210,  -226,  -212,
  -215,  -217,  -218,  -109,  -249,   -17,  -249,  -249,  -226,  -106,
  -129,  -117,  -249,  -229,  -249,  -227,  -249,  -249,  -226,  -132,
  -134,  -231,  -232,  -233,  -234,  -237,  -240,  -242,  -243,  -244,
  -245,  -246,  -247,  -125,  -126,  -227,  -249,   -73,  -249,   -83,
  -249,  -227,  -249,  -173,  -174,  -249,   -77,  -249,   -89,  -249,
   -95,  -249,  -249,   -99,  -228,  -226,  -228,  -249,  -249,  -142,
  -249,  -163,  -226,  -248,  -249,  -149,  -159,  -155,   -45,  -183,
  -186,  -193,  -189,  -192,  -206,  -249,  -249,  -108,  -249,  -227,
  -226,  -112,  -119,  -113,  -131,  -135,  -136,  -249,   -70,   -82,
   -85,  -166,  -171,  -249,   -89,   -88,  -249,  -249,   -95,   -94,
  -249,  -249,  -103,   -98,  -100,  -249,  -249,  -249,  -115,  -248,
  -143,  -144,  -145,  -249,  -249,  -140,  -141,  -249,  -147,  -213,
  -216,  -105,  -107,  -116,  -123,   -72,  -176,   -87,   -90,  -249,
   -93,  -249,  -249,  -110,  -111,  -114,  -249,  -164,  -137,  -146,
  -249,   -92,  -249,   -97,  -249,  -102,  -138,   -91,   -96,  -101 ]

racc_goto_table = [
     2,   136,     4,   120,   114,   116,   117,   118,   142,   140,
   280,   156,   202,   195,   245,   203,   236,   292,   375,   379,
   254,   227,   229,   394,   333,   257,   167,   168,   169,   170,
   338,   166,   253,   294,   362,   124,   126,   127,   128,    80,
   290,   147,   149,   345,   288,   346,   364,   233,   381,   146,
   146,   151,   332,   245,   194,   278,   390,   155,   258,   408,
   347,   316,   162,   371,   407,   324,   320,   410,   337,   416,
   171,   323,   353,   275,   276,     3,   273,   274,   146,   172,
   173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
   183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
   193,   289,   198,   231,   226,   226,   384,   246,   355,   272,
   158,   146,   160,   165,     1,   146,   nil,   nil,   358,   nil,
   nil,   nil,   198,   nil,   nil,   nil,   nil,   nil,   367,   nil,
   298,   nil,   nil,   255,   nil,   nil,   nil,   nil,   255,   260,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   245,   385,
   342,   387,   nil,   334,   336,   283,   335,   nil,   nil,   nil,
   277,   136,   nil,   284,   nil,   386,   nil,   nil,   nil,   142,
   140,   nil,   393,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   193,   nil,
   403,   124,   126,   127,   317,   360,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   400,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   245,   nil,   nil,   142,   140,   142,   140,
   354,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   318,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   146,   198,   198,   nil,   nil,   nil,   327,   329,
   nil,   nil,   nil,   nil,   nil,   348,   339,   348,   nil,   351,
   nil,   151,   nil,   nil,   402,   nil,   155,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   348,   357,
   nil,   nil,   nil,   nil,   nil,   198,   nil,   nil,   365,   366,
   nil,   391,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   348,   nil,   373,
   nil,   nil,   nil,   nil,   372,   nil,   nil,   146,   nil,   nil,
   nil,   nil,   nil,   nil,   146,   nil,   nil,   nil,   nil,   nil,
   405,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   397,   396,   nil,   nil,   nil,   nil,
   nil,   193,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   124,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   396,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   420,
   nil,   422,   424 ]

racc_goto_check = [
     2,    65,     4,    40,    10,    10,    10,    10,    32,    38,
    95,    88,    55,    52,    35,    57,    45,    56,    47,    48,
    66,    61,    61,    67,    50,    66,     8,     8,     8,     8,
    69,     7,    55,    39,    58,    10,    10,    10,    10,     6,
    59,    12,    12,    73,    53,    73,    62,    44,    51,    10,
    10,    10,    49,    35,    13,    45,    70,    10,    72,    46,
    75,    39,    10,    76,    47,    77,    39,    48,    56,    67,
    12,    79,    83,    84,    85,     3,    89,    90,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    52,    10,    12,    10,    10,    50,    12,    39,    92,
    93,    10,    94,     6,     1,    10,   nil,   nil,    39,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,    39,   nil,
    57,   nil,   nil,     4,   nil,   nil,   nil,   nil,     4,     4,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    35,    56,
    45,    56,   nil,    55,    55,    10,    57,   nil,   nil,   nil,
     2,    65,   nil,     2,   nil,    39,   nil,   nil,   nil,    32,
    38,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,
    39,    10,    10,    10,    40,    57,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    95,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    35,   nil,   nil,    32,    38,    32,    38,
    88,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,    10,    10,   nil,   nil,   nil,     2,     2,
   nil,   nil,   nil,   nil,   nil,    10,     4,    10,   nil,    10,
   nil,    10,   nil,   nil,    52,   nil,    10,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,    10,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,    10,    10,
   nil,    65,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,    12,
   nil,   nil,   nil,   nil,    10,   nil,   nil,    10,   nil,   nil,
   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,
    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,     4,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   114,     0,    75,     2,   nil,    34,   -50,   -56,   nil,
    -8,   nil,   -16,   -54,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -43,   nil,   nil,  -108,   nil,   nil,   -42,  -170,
   -38,   nil,   nil,   nil,   -74,  -106,  -317,  -310,  -311,  -198,
  -226,  -283,   -95,  -152,   nil,   -98,  -185,   -95,  -259,  -158,
   nil,   -91,  -249,   nil,   nil,   -49,  -111,  -320,   nil,  -224,
  -284,   nil,   -79,  -216,   nil,  -202,  -258,  -179,   nil,  -172,
   nil,   nil,   nil,  -197,   -86,   -85,   nil,   nil,   -54,   -81,
   -80,   nil,   -48,    43,    44,  -152 ]

racc_goto_default = [
   nil,   nil,   395,   nil,   228,     5,     6,     7,     8,     9,
    11,    10,   331,   nil,    16,    40,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,   nil,
   nil,    41,    42,   121,   nil,   nil,   125,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,   204,   nil,
   111,   nil,   205,   209,   207,   132,   nil,   nil,   131,   nil,
   nil,   137,   nil,   138,   139,   143,   237,   238,   239,   240,
   241,   244,   152,   154,    60,    61,    62,    65,   nil,   nil,
   nil,   157,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 95, :_reduce_1,
  1, 95, :_reduce_2,
  1, 95, :_reduce_none,
  1, 96, :_reduce_4,
  1, 99, :_reduce_5,
  3, 99, :_reduce_6,
  2, 99, :_reduce_7,
  1, 100, :_reduce_8,
  3, 100, :_reduce_9,
  1, 101, :_reduce_none,
  1, 102, :_reduce_11,
  3, 102, :_reduce_12,
  3, 102, :_reduce_13,
  3, 102, :_reduce_14,
  3, 102, :_reduce_15,
  1, 104, :_reduce_none,
  4, 104, :_reduce_17,
  3, 104, :_reduce_18,
  3, 104, :_reduce_19,
  3, 104, :_reduce_20,
  3, 104, :_reduce_21,
  3, 104, :_reduce_22,
  3, 104, :_reduce_23,
  3, 104, :_reduce_24,
  3, 104, :_reduce_25,
  3, 104, :_reduce_26,
  3, 104, :_reduce_27,
  2, 104, :_reduce_28,
  2, 104, :_reduce_29,
  3, 104, :_reduce_30,
  3, 104, :_reduce_31,
  3, 104, :_reduce_32,
  3, 104, :_reduce_33,
  3, 104, :_reduce_34,
  3, 104, :_reduce_35,
  2, 104, :_reduce_36,
  3, 104, :_reduce_37,
  3, 104, :_reduce_38,
  3, 104, :_reduce_39,
  3, 104, :_reduce_40,
  3, 104, :_reduce_41,
  3, 104, :_reduce_42,
  3, 104, :_reduce_43,
  1, 106, :_reduce_44,
  3, 106, :_reduce_45,
  1, 105, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 127, :_reduce_68,
  1, 127, :_reduce_69,
  5, 108, :_reduce_70,
  3, 108, :_reduce_71,
  6, 108, :_reduce_72,
  4, 108, :_reduce_73,
  1, 108, :_reduce_74,
  1, 112, :_reduce_75,
  2, 112, :_reduce_76,
  4, 135, :_reduce_77,
  3, 135, :_reduce_78,
  1, 135, :_reduce_79,
  3, 136, :_reduce_80,
  2, 134, :_reduce_81,
  3, 138, :_reduce_82,
  2, 138, :_reduce_83,
  2, 137, :_reduce_84,
  4, 137, :_reduce_85,
  2, 115, :_reduce_86,
  5, 140, :_reduce_87,
  4, 140, :_reduce_88,
  0, 141, :_reduce_none,
  2, 141, :_reduce_90,
  4, 141, :_reduce_91,
  3, 141, :_reduce_92,
  6, 116, :_reduce_93,
  5, 116, :_reduce_94,
  0, 142, :_reduce_none,
  4, 142, :_reduce_96,
  3, 142, :_reduce_97,
  5, 114, :_reduce_98,
  1, 143, :_reduce_99,
  2, 143, :_reduce_100,
  5, 144, :_reduce_101,
  4, 144, :_reduce_102,
  1, 145, :_reduce_103,
  1, 107, :_reduce_none,
  4, 107, :_reduce_105,
  1, 147, :_reduce_106,
  3, 147, :_reduce_107,
  3, 146, :_reduce_108,
  1, 103, :_reduce_109,
  6, 103, :_reduce_110,
  6, 103, :_reduce_111,
  5, 103, :_reduce_112,
  5, 103, :_reduce_113,
  6, 103, :_reduce_114,
  5, 103, :_reduce_115,
  4, 152, :_reduce_116,
  1, 153, :_reduce_117,
  1, 149, :_reduce_118,
  3, 149, :_reduce_119,
  1, 148, :_reduce_120,
  2, 148, :_reduce_121,
  1, 148, :_reduce_122,
  6, 113, :_reduce_123,
  2, 113, :_reduce_124,
  3, 154, :_reduce_125,
  3, 154, :_reduce_126,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  0, 151, :_reduce_129,
  1, 151, :_reduce_130,
  3, 151, :_reduce_131,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  3, 156, :_reduce_135,
  3, 156, :_reduce_136,
  6, 117, :_reduce_137,
  7, 118, :_reduce_138,
  1, 162, :_reduce_139,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 163, :_reduce_none,
  2, 163, :_reduce_143,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  6, 119, :_reduce_146,
  5, 119, :_reduce_147,
  1, 165, :_reduce_148,
  3, 165, :_reduce_149,
  1, 167, :_reduce_150,
  1, 167, :_reduce_151,
  1, 167, :_reduce_152,
  1, 167, :_reduce_none,
  1, 168, :_reduce_154,
  3, 168, :_reduce_155,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 166, :_reduce_none,
  2, 166, :_reduce_159,
  1, 159, :_reduce_160,
  1, 159, :_reduce_161,
  1, 160, :_reduce_162,
  2, 160, :_reduce_163,
  4, 160, :_reduce_164,
  1, 139, :_reduce_165,
  3, 139, :_reduce_166,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  3, 173, :_reduce_171,
  1, 173, :_reduce_172,
  2, 174, :_reduce_173,
  2, 172, :_reduce_174,
  1, 175, :_reduce_175,
  4, 175, :_reduce_176,
  1, 111, :_reduce_177,
  1, 121, :_reduce_178,
  1, 121, :_reduce_179,
  1, 121, :_reduce_180,
  1, 121, :_reduce_181,
  3, 122, :_reduce_182,
  4, 122, :_reduce_183,
  2, 122, :_reduce_184,
  3, 122, :_reduce_185,
  4, 122, :_reduce_186,
  2, 122, :_reduce_187,
  3, 125, :_reduce_188,
  4, 125, :_reduce_189,
  2, 125, :_reduce_190,
  1, 176, :_reduce_191,
  3, 176, :_reduce_192,
  3, 177, :_reduce_193,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 178, :_reduce_197,
  1, 178, :_reduce_198,
  2, 179, :_reduce_199,
  1, 181, :_reduce_200,
  1, 183, :_reduce_201,
  1, 184, :_reduce_202,
  2, 182, :_reduce_203,
  1, 185, :_reduce_204,
  1, 186, :_reduce_205,
  2, 186, :_reduce_206,
  2, 180, :_reduce_207,
  2, 187, :_reduce_208,
  2, 187, :_reduce_209,
  3, 97, :_reduce_210,
  0, 188, :_reduce_211,
  2, 188, :_reduce_212,
  4, 188, :_reduce_213,
  1, 120, :_reduce_214,
  3, 120, :_reduce_215,
  5, 120, :_reduce_216,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 128, :_reduce_219,
  1, 131, :_reduce_220,
  1, 129, :_reduce_221,
  1, 130, :_reduce_222,
  1, 124, :_reduce_223,
  1, 123, :_reduce_224,
  1, 126, :_reduce_225,
  0, 133, :_reduce_none,
  1, 133, :_reduce_227,
  0, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  0, 98, :_reduce_248 ]

racc_reduce_n = 249

racc_shift_n = 430

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :LOW => 86,
  :HIGH => 87,
  :CALL => 88,
  :LISTSTART => 89,
  :SPLAT => 90,
  :MODULO => 91,
  :TITLE_COLON => 92,
  :CASE_COLON => 93 }

racc_nt_base = 94

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "LOW",
  "HIGH",
  "CALL",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "reserved_word",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "number",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 86)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 87)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_15(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_17(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_18(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_19(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_20(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_21(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_22(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_23(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_24(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_25(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_26(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_27(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_28(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_29(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_30(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_31(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 119)
  def _reduce_32(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 120)
  def _reduce_33(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 121)
  def _reduce_34(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 122)
  def _reduce_35(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 123)
  def _reduce_36(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 124)
  def _reduce_37(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_38(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_39(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_40(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 128)
  def _reduce_41(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 129)
  def _reduce_42(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 130)
  def _reduce_43(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 138)
  def _reduce_44(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 139)
  def _reduce_45(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

module_eval(<<'.,.,', 'egrammar.ra', 172)
  def _reduce_68(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 173)
  def _reduce_69(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_70(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 185)
  def _reduce_71(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_72(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_73(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_74(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_75(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_76(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_77(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_78(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_79(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_80(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 226)
  def _reduce_81(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 231)
  def _reduce_82(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 232)
  def _reduce_83(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 236)
  def _reduce_84(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 237)
  def _reduce_85(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 247)
  def _reduce_86(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 254)
  def _reduce_87(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 258)
  def _reduce_88(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'egrammar.ra', 266)
  def _reduce_90(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 270)
  def _reduce_91(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 274)
  def _reduce_92(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 283)
  def _reduce_93(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_94(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'egrammar.ra', 297)
  def _reduce_96(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 301)
  def _reduce_97(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_98(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 315)
  def _reduce_99(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 316)
  def _reduce_100(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 321)
  def _reduce_101(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 325)
  def _reduce_102(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 329)
  def _reduce_103(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 104 omitted

module_eval(<<'.,.,', 'egrammar.ra', 340)
  def _reduce_105(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_106(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 346)
  def _reduce_107(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 351)
  def _reduce_108(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 363)
  def _reduce_109(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 366)
  def _reduce_110(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error val[1], "A resource default can not be virtual or exported"
      when :override
        error val[1], "A resource override can not be virtual or exported"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 381)
  def _reduce_111(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class, :defaults, :override
        error val[1], "Defaults are not virtualizable"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 389)
  def _reduce_112(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error val[1], "A resource default can not specify a resource name"
      when :override
        error val[1], "A resource override does not allow override of name of resource"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 402)
  def _reduce_113(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 423)
  def _reduce_114(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        result.form = val[0]
        loc result, val[1], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 428)
  def _reduce_115(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_116(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 435)
  def _reduce_117(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_118(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 439)
  def _reduce_119(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_120(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 445)
  def _reduce_121(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 446)
  def _reduce_122(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 458)
  def _reduce_123(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 462)
  def _reduce_124(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_125(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 468)
  def _reduce_126(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'egrammar.ra', 481)
  def _reduce_129(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 482)
  def _reduce_130(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 483)
  def _reduce_131(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'egrammar.ra', 499)
  def _reduce_135(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 503)
  def _reduce_136(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 513)
  def _reduce_137(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 527)
  def _reduce_138(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 537)
  def _reduce_139(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'egrammar.ra', 546)
  def _reduce_143(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'egrammar.ra', 563)
  def _reduce_146(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 567)
  def _reduce_147(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], nil))
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_148(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 578)
  def _reduce_149(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_150(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 584)
  def _reduce_151(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 585)
  def _reduce_152(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 153 omitted

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_154(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 590)
  def _reduce_155(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'egrammar.ra', 599)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_160(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_161(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_162(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_163(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_164(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_165(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_166(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_171(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_172(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_173(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_174(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_175(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_176(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_177(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_178(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_179(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_180(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_181(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_182(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_183(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_184(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_185(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_186(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_187(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 685)
  def _reduce_188(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 686)
  def _reduce_189(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_190(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_191(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_192(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_193(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

module_eval(<<'.,.,', 'egrammar.ra', 702)
  def _reduce_197(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 703)
  def _reduce_198(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 705)
  def _reduce_199(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_200(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 707)
  def _reduce_201(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 708)
  def _reduce_202(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 709)
  def _reduce_203(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 710)
  def _reduce_204(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 713)
  def _reduce_205(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 714)
  def _reduce_206(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 717)
  def _reduce_207(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 720)
  def _reduce_208(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 721)
  def _reduce_209(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 724)
  def _reduce_210(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 727)
  def _reduce_211(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 728)
  def _reduce_212(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 729)
  def _reduce_213(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 732)
  def _reduce_214(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 733)
  def _reduce_215(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 734)
  def _reduce_216(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 217 omitted

# reduce 218 omitted

module_eval(<<'.,.,', 'egrammar.ra', 740)
  def _reduce_219(val, _values, result)
     result = Factory.NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 741)
  def _reduce_220(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 742)
  def _reduce_221(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 743)
  def _reduce_222(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 744)
  def _reduce_223(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 749)
  def _reduce_224(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 752)
  def _reduce_225(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 226 omitted

module_eval(<<'.,.,', 'egrammar.ra', 758)
  def _reduce_227(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

module_eval(<<'.,.,', 'egrammar.ra', 785)
  def _reduce_248(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
