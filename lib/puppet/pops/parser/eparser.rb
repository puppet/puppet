#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 939)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'67,79,304,-148,65,73,304,74,89,90,91,73,116,74,-290,307,426,179,74,-281',
'418,352,-293,305,21,20,118,305,121,-295,131,54,117,57,128,69,12,342',
'63,46,49,292,56,47,10,11,-148,287,66,19,180,416,48,120,307,17,18,-290',
'92,94,93,95,-281,84,353,-293,130,270,295,55,127,293,-295,45,80,97,82',
'83,129,-190,-190,64,51,70,71,58,415,116,62,60,61,67,79,72,427,65,73',
'116,74,72,154,118,154,121,471,403,470,117,131,271,414,118,128,121,429',
'21,20,117,-280,154,404,413,54,157,57,157,69,12,120,63,46,49,475,56,47',
'10,11,116,120,66,19,476,157,48,130,304,17,18,127,330,97,118,331,121',
'84,131,129,117,459,128,55,-280,131,458,45,80,128,82,83,471,399,470,64',
'51,70,71,58,-235,120,62,60,61,67,79,72,116,65,73,434,74,400,130,526',
'98,99,127,436,458,130,118,97,121,127,129,131,117,21,20,128,399,129,124',
'307,54,396,57,394,69,136,116,63,46,49,390,56,47,120,443,181,79,66,19',
'182,118,48,121,444,17,18,117,130,98,99,131,127,84,131,128,97,388,128',
'55,129,131,350,45,80,128,82,83,120,333,332,64,51,70,71,58,133,134,62',
'60,61,67,79,72,116,65,73,130,74,351,130,127,-190,-190,127,133,134,130',
'118,129,121,127,129,131,117,21,20,128,447,129,-191,-191,54,383,57,379',
'69,136,116,63,46,49,450,56,47,120,-192,-192,377,66,19,399,118,48,121',
'399,17,18,117,130,98,99,131,127,84,376,128,97,-194,-194,55,129,131,160',
'45,80,128,82,83,120,283,282,64,51,70,71,58,283,282,62,60,61,67,79,72',
'358,65,73,130,74,283,282,127,131,460,453,461,128,130,131,129,171,127',
'128,131,464,21,20,128,465,129,283,282,54,350,57,96,69,12,96,63,46,49',
'468,56,47,10,11,96,130,66,19,472,127,48,130,304,17,18,127,130,129,283',
'282,127,84,131,129,474,307,128,55,129,344,345,45,80,305,82,83,96,88',
'328,64,51,70,71,58,-236,116,62,60,61,67,79,72,328,65,73,304,74,322,130',
'118,321,121,127,485,486,117,295,488,307,291,129,490,379,21,20,350,305',
'290,171,160,54,287,57,494,69,12,120,63,46,49,297,56,47,10,11,-235,496',
'66,19,384,350,48,286,499,17,18,386,500,304,350,285,96,84,503,96,304',
'272,88,55,205,507,307,45,80,474,82,83,509,307,305,64,51,70,71,58,202',
'305,62,60,61,67,79,72,511,65,73,512,74,513,350,515,516,200,184,358,521',
'522,523,524,525,171,170,161,160,21,20,96,534,88,537,538,54,539,57,85',
'69,12,541,63,46,49,86,56,47,10,11,542,543,66,19,544,421,48,,,17,18,',
',,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72',
',65,73,,74,,,,,,,,,,,,,,,,,21,20,145,,,,,54,,57,,69,12,,63,46,49,,56',
'47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,149',
'146,70,71,147,153,152,148,60,61,67,79,72,,65,73,,74,530,,,,,,,,,,,,',
',,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17',
'18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67',
'79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49',
',56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64',
'51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,',
',,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,',
',,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,',
'74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66',
'19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,',
',62,60,61,67,79,72,,65,73,,74,536,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,',
'69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,',
',,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,528',
',,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66',
'19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,',
',62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69',
'12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45',
'80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,',
',,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48',
',,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61',
'67,79,72,,65,73,186,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63',
'46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82',
'83,,,,149,146,70,71,147,153,152,148,60,61,67,79,72,,65,73,191,74,,,',
',,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19',
',,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,149,146,70,71,147,153',
'152,148,60,61,67,79,72,,65,73,,74,193,,,,,,,,,,,,,,,,21,20,,,,,,54,',
'57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,',
'55,,,,45,80,,82,83,,,,149,146,70,71,147,153,152,148,60,61,67,79,72,',
'65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47',
'10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51',
'70,71,58,,,62,60,61,67,79,72,,65,73,,74,518,,,,,,,,,,,,,,,,21,20,,,',
',,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84',
',,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73',
',74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66',
'19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,',
',62,60,61,67,79,72,,65,73,,204,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69',
'136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80',
',82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,',
',,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18',
',,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79',
'72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56',
'47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64',
'51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,',
',,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84',
',,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73',
',74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11',
',,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71',
'58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57',
',69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55',
',,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,',
',,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19',
',,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62',
'60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,',
'63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80',
',82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,',
',,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17',
'18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67',
'79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49',
',56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,',
',,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20',
',,,,,222,237,228,238,69,230,240,232,46,220,,224,218,,,,,66,19,241,236',
'219,,,17,217,,,,,,,84,,,,,239,223,,,,45,80,,82,83,,,,233,221,234,235',
'229,243,242,231,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,',
',54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,',
',,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74',
',,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19',
',,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62',
'60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136',
',63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82',
'83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,',
'21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,',
',,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72',
',65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47',
',,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70',
'71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,',
'57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55',
',,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,',
',,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,',
'48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60',
'61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63',
'46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83',
',,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21',
'20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,',
',84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65',
'73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,',
',,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71',
'58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57',
',69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,',
'45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,',
',,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48',
',,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61',
'67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46',
'49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,',
',64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20',
',,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84',
',,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73',
',74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66',
'19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,',
',62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69',
'136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80',
',82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,',
',,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18',
',,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79',
'72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56',
'47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51',
'70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54',
',57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55',
',,265,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74',
',,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66',
'19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,149,146,70,71,147',
'153,152,148,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54',
',57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55',
',,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,',
',,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,',
'48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60',
'61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63',
'46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82',
'83,,,,149,146,70,71,147,153,152,148,60,61,67,79,72,,65,73,,74,,,,,,',
',,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,',
'48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60',
'61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63',
'46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83',
',,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21',
'20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,',
',,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72',
',65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47',
'10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,149,146',
'70,71,147,153,152,148,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20',
',,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,',
',84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65',
'73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,',
',,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71',
'58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57',
',69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55',
',,,45,80,,82,83,,,,149,146,70,71,147,153,152,148,60,61,67,79,72,,65',
'73,,74,,,,,,,,,,,,,,,,,21,20,309,,,,,54,,57,,69,12,,63,46,49,,56,47',
'10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,149,146',
'70,71,147,153,152,148,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20',
',,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,',
',84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65',
'73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,',
',,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71',
'58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57',
',69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55',
',,,45,80,,82,83,,,,149,146,70,71,147,153,152,148,60,61,67,79,72,,65',
'73,,74,319,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47',
'10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51',
'70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54',
',57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,',
',55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74',
',,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19',
',,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62',
'60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,',
'63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80',
',82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,',
',,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17',
'18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67',
'79,72,,65,73,,74,477,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46',
'49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,',
',64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20',
',,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,',
',84,,,,,,55,,,,45,80,,82,83,81,,,64,51,70,71,58,,,62,60,61,67,79,72',
',65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47',
'10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51',
'70,71,58,,,62,60,61,67,79,72,,65,73,,74,193,,,,,,,,,,,,,,,,21,20,,,',
',,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84',
',,,,,55,,,,45,80,,82,83,,,,149,146,70,71,147,153,152,148,60,61,67,79',
'72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56',
'47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,149',
'146,70,71,147,153,152,148,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,',
'21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,',
',,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72',
',65,73,,74,,,351,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56',
'47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51',
'70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54',
',57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55',
',,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,',
',,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,',
'48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60',
'61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63',
'46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83',
',,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,463,,,,,,,,,,,,,,,',
'21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18',
',,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79',
'72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56',
'47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51',
'70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54',
',57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55',
',,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,',
',,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19',
',,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,149,146,70,71,147,153',
'152,148,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57',
',69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55',
',,,45,80,,82,83,,,,149,146,70,71,147,153,152,148,60,61,67,79,72,,65',
'73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,',
',,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71',
'58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57',
',69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55',
',,,45,80,,82,83,,,,149,146,70,71,147,153,152,148,60,61,67,79,72,,65',
'73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10',
'11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,149,146',
'70,71,147,153,152,148,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20',
',,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,',
',84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65',
'73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,',
',,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71',
'58,,,62,60,61,67,79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57',
',69,136,,63,46,49,,56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,',
'45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,,,,,,',
',,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49,,56,47,,,,,66,19,,,48',
',,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61',
'67,79,72,,65,73,,74,406,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63',
'46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82',
'83,,,,64,51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,408,,,,,,,,,,,,',
',,,21,20,,,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17',
'18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64,51,70,71,58,,,62,60,61,67',
'79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,136,,63,46,49',
',56,47,,,,,66,19,,,48,,,17,18,,,,,,,84,,,,,,55,,,,45,80,,82,83,,,,64',
'51,70,71,58,,,62,60,61,67,79,72,,65,73,,74,430,,,,,,,,,,,,,,,,21,20',
',,,,,54,,57,,69,12,,63,46,49,,56,47,10,11,,,66,19,,,48,,,17,18,,,,,',
',84,,,,,,55,,,,45,80,,82,83,,,,149,146,70,71,147,153,152,148,60,61,67',
'79,72,,65,73,,74,,,,,,,,,,,,,,,,,21,20,,,,,,54,,57,,69,12,,63,46,49',
',56,47,10,11,,,66,19,,,48,,,17,18,181,79,,,182,,84,,,,,,55,,,,45,80',
',82,83,,,,149,146,70,71,147,153,152,148,60,61,116,,72,,,,179,,,176,',
',112,107,118,,121,,115,,117,,108,110,109,111,,,,84,181,79,,,182,,,,',
'180,80,120,,,,114,113,,,100,101,103,102,105,106,,98,99,,,,,,97,116,',
',,181,79,179,,182,176,344,345,112,107,118,380,121,,115,,117,,108,110',
'109,111,104,,,84,,,,,,,,,,180,80,120,,,179,114,113,176,116,100,101,103',
'102,105,106,,98,99,,,112,107,118,97,121,,115,84,117,,108,110,109,111',
',,,180,80,,,,,,,,,,,120,104,,,114,113,,,100,101,103,102,105,106,,98',
'99,116,,312,,,97,,,,,,,112,107,118,,121,116,115,,117,,108,110,109,111',
',,,,,118,104,121,,,,117,181,79,,120,182,,,114,113,,,100,101,103,102',
'105,106,,98,99,120,,,,,97,,,100,101,103,102,105,106,,98,99,116,,,179',
',97,176,,,,,,112,107,118,104,121,,115,,117,,108,110,109,111,84,,,,,',
'104,,,,180,80,,,,120,,,,114,113,,116,100,101,103,102,105,106,,98,99',
',,112,107,118,97,121,116,115,,117,,108,110,109,111,,,,,,118,,121,,,',
'117,,,,120,104,,,114,113,,,100,101,103,102,105,106,,98,99,120,,,,,97',
',,,,103,102,,116,,98,99,,,,,,97,,,112,107,118,,121,116,115,104,117,',
'108,110,109,111,,,,,107,118,,121,,,104,117,,108,,120,,,,114,113,,,100',
'101,103,102,105,106,,98,99,120,,,116,,97,,,100,101,103,102,105,106,',
'98,99,118,,121,116,,97,117,,,,,,,,,104,107,118,,121,,,,117,,108,,120',
',,,116,104,,,100,101,103,102,,,,98,99,120,118,,121,,97,,117,100,101',
'103,102,105,106,,98,99,,,,,,97,,,,,,120,,,,104,,,,,,103,102,116,,,98',
'99,,,,,104,97,,112,107,118,,121,,115,,117,,108,110,109,111,,,,,,,,,',
',,104,,,,120,,,,114,113,,116,100,101,103,102,105,106,,98,99,,,,107,118',
'97,121,,,,117,,108,,,,,,,,,,,,,,,,,,,120,104,,,,116,,,100,101,103,102',
'105,106,,98,99,112,107,118,,121,97,115,,117,,108,110,109,111,,,,,,,',
',,,,,,,,120,,,104,114,113,,116,100,101,103,102,105,106,,98,99,,,,107',
'118,97,121,,,,117,,108,,,,,,,,,,,,,,,,,,,120,104,,,,116,,,100,101,103',
'102,105,106,,98,99,112,107,118,,121,97,115,,117,,108,110,109,111,,,',
',,,,,,,,,,,,120,,,104,,116,,,100,101,103,102,105,106,,98,99,112,107',
'118,,121,97,115,,117,,108,110,109,111,,,,,,,,,,,,,,,,120,,,104,,113',
',,100,101,103,102,105,106,116,98,99,,,354,,,97,,,,112,107,118,,121,',
'115,,117,,108,110,109,111,,,,,,,,,,104,,,,,,120,,,,114,113,,,100,101',
'103,102,105,106,,98,99,116,-66,,,,97,-66,,,,,,112,107,118,,121,,115',
',117,,108,110,109,111,,,,,,,104,,,,,,,,,120,,,,114,113,,116,100,101',
'103,102,105,106,,98,99,,,112,107,118,97,121,,115,,117,,108,110,109,111',
',,,,,,,,,,,,,,,120,104,,,114,113,,116,100,101,103,102,105,106,,98,99',
',,112,107,118,97,121,,115,,117,,108,110,109,111,,,,,,,,,,,,,,,,120,104',
',,114,113,,,100,101,103,102,105,106,116,98,99,,,,,,97,,,,112,107,118',
'348,121,116,115,,117,,108,110,109,111,,,,,,118,,121,,104,,117,,,,120',
',,,114,113,,,100,101,103,102,105,106,,98,99,120,,,116,,97,,,100,101',
'103,102,,,,98,99,118,,121,,,97,117,,,,,,,,,104,,,,,,,,,,,,120,,,,,104',
',,100,101,103,102,105,106,,98,99,116,,310,,,97,,,,,,,112,107,118,,121',
',115,,117,,108,110,109,111,,,,,,,104,,,,,,,,,120,,,,114,113,,,100,101',
'103,102,105,106,,98,99,116,,311,,,97,,,,,,,112,107,118,,121,,115,,117',
',108,110,109,111,,,,,,,104,,,,,,,,,120,,,,114,113,,116,100,101,103,102',
'105,106,,98,99,,,112,107,118,97,121,,115,,117,,108,110,109,111,,,,,',
',,,,,,,,,,120,104,,,114,113,,,100,101,103,102,105,106,,98,99,,366,237',
'365,238,97,363,240,367,,360,,362,364,,,,,,,241,236,368,,,,361,,,,,,104',
',,,,,239,369,,,,,,,,,,,,372,370,373,371,374,243,242,375,366,237,365',
'238,,363,240,367,,360,,362,364,,,,,,,241,236,368,,,,361,,,,,,,,,,,,239',
'369,,,,,,,,,,,,372,370,373,371,374,243,242,375,366,237,365,238,,363',
'240,367,,360,,362,364,,,,,,,241,236,368,,,,361,,,,,,,,,,,,239,369,,',
',,,,,,,,,372,370,373,371,374,243,242,375,366,237,365,238,,363,240,367',
',360,,362,364,,,,,,,241,236,368,,,,361,,,,,,,,,,,,239,369,,,,,,,,,,',
',372,370,373,371,374,243,242,375,366,237,365,238,,363,240,367,,360,',
'362,364,,,,,,,241,236,368,,,,361,,,,,,,,,,,,239,369,,,,,,,,,,,,372,370',
'373,371,374,243,242,375,366,237,365,238,,363,240,367,,360,,362,364,',
',,,,,241,236,368,,,,361,,,,,,,,,,,,239,369,,,,,,,,,,,,372,370,373,371',
'374,243,242,375' ]
        racc_action_table = arr = ::Array.new(10662, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'88,88,202,220,88,88,306,88,7,7,7,184,245,184,219,202,324,322,324,218',
'318,227,235,202,88,88,245,306,245,234,57,88,245,88,57,88,88,202,88,88',
'88,157,88,88,88,88,220,317,88,88,322,316,88,245,184,88,88,219,7,7,7',
'7,218,88,227,235,57,118,323,88,57,157,234,88,88,245,88,88,57,220,220',
'88,88,88,88,88,315,246,88,88,88,336,336,88,327,336,336,137,336,184,221',
'246,146,246,468,308,468,246,230,118,314,137,230,137,329,336,336,137',
'230,51,308,313,336,221,336,146,336,336,246,336,336,336,410,336,336,336',
'336,249,137,336,336,410,51,336,230,305,336,336,230,192,246,249,192,249',
'336,147,230,249,392,147,336,230,149,392,336,336,149,336,336,406,341',
'406,336,336,336,336,336,346,249,336,336,336,18,18,336,251,18,18,347',
'18,304,147,504,249,249,147,349,504,149,251,249,251,149,147,12,251,18',
'18,12,298,149,12,295,18,294,18,293,18,18,244,18,18,18,288,18,18,251',
'355,200,200,18,18,200,244,18,244,357,18,18,244,12,251,251,168,12,18',
'58,168,251,284,58,18,12,60,359,18,18,60,18,18,244,197,197,18,18,18,18',
'18,16,16,18,18,18,19,19,18,250,19,19,168,19,361,58,168,49,49,58,59,59',
'60,250,168,250,60,58,64,250,19,19,64,378,60,65,65,19,280,19,277,19,19',
'138,19,19,19,381,19,19,250,66,66,276,19,19,385,138,19,138,387,19,19',
'138,64,250,250,383,64,19,274,383,250,67,67,19,64,228,390,19,19,228,19',
'19,138,125,125,19,19,19,19,19,166,166,19,19,19,20,20,19,267,20,20,383',
'20,167,167,383,229,393,383,394,229,228,233,383,231,228,233,132,397,20',
'20,132,398,228,169,169,20,216,20,214,20,20,213,20,20,20,405,20,20,20',
'20,212,229,20,20,407,229,20,233,399,20,20,233,132,229,183,183,132,20',
'136,233,408,399,136,20,132,434,434,20,20,399,20,20,211,206,190,20,20',
'20,20,20,188,135,20,20,20,21,21,20,185,21,21,160,21,174,136,135,172',
'135,136,417,419,135,159,424,160,155,136,433,540,21,21,435,160,150,148',
'145,21,144,21,442,21,21,135,21,21,21,160,21,21,21,21,141,446,21,21,282',
'449,21,140,454,21,21,283,455,282,456,139,123,21,462,122,283,119,87,21',
'85,471,282,21,21,472,21,21,474,283,282,21,21,21,21,21,81,283,21,21,21',
'4,4,21,476,4,4,479,4,482,483,484,485,80,68,489,492,493,498,501,502,62',
'61,53,52,4,4,8,514,5,517,519,4,520,4,1,4,4,527,4,4,4,4,4,4,4,4,529,531',
'4,4,535,320,4,,,4,4,,,,,,,4,,,,,,4,,,,4,4,,4,4,,,,4,4,4,4,4,,,4,4,4',
'50,50,4,,50,50,,50,,,,,,,,,,,,,,,,,50,50,50,,,,,50,,50,,50,50,,50,50',
'50,,50,50,50,50,,,50,50,,,50,,,50,50,,,,,,,50,,,,,,50,,,,50,50,,50,50',
',,,50,50,50,50,50,50,50,50,50,50,509,509,50,,509,509,,509,509,,,,,,',
',,,,,,,,,509,509,,,,,,509,,509,,509,509,,509,509,509,,509,509,509,509',
',,509,509,,,509,,,509,509,,,,,,,509,,,,,,509,,,,509,509,,509,509,,,',
'509,509,509,509,509,,,509,509,509,54,54,509,,54,54,,54,,,,,,,,,,,,,',
',,,54,54,,,,,,54,,54,,54,54,,54,54,54,,54,54,,,,,54,54,,,54,,,54,54',
',,,,,,54,,,,,,54,,,,54,54,,54,54,,,,54,54,54,54,54,,,54,54,54,55,55',
'54,,55,55,,55,,,,,,,,,,,,,,,,,55,55,,,,,,55,,55,,55,55,,55,55,55,,55',
'55,,,,,55,55,,,55,,,55,55,,,,,,,55,,,,,,55,,,,55,55,,55,55,,,,55,55',
'55,55,55,,,55,55,55,56,56,55,,56,56,,56,,,,,,,,,,,,,,,,,56,56,,,,,,56',
',56,,56,56,,56,56,56,,56,56,,,,,56,56,,,56,,,56,56,,,,,,,56,,,,,,56',
',,,56,56,,56,56,,,,56,56,56,56,56,,,56,56,56,516,516,56,,516,516,,516',
'516,,,,,,,,,,,,,,,,516,516,,,,,,516,,516,,516,516,,516,516,516,,516',
'516,516,516,,,516,516,,,516,,,516,516,,,,,,,516,,,,,,516,,,,516,516',
',516,516,,,,516,516,516,516,516,,,516,516,516,507,507,516,,507,507,',
'507,507,,,,,,,,,,,,,,,,507,507,,,,,,507,,507,,507,507,,507,507,507,',
'507,507,507,507,,,507,507,,,507,,,507,507,,,,,,,507,,,,,,507,,,,507',
'507,,507,507,,,,507,507,507,507,507,,,507,507,507,511,511,507,,511,511',
',511,,,,,,,,,,,,,,,,,511,511,,,,,,511,,511,,511,511,,511,511,511,,511',
'511,511,511,,,511,511,,,511,,,511,511,,,,,,,511,,,,,,511,,,,511,511',
',511,511,,,,511,511,511,511,511,,,511,511,511,488,488,511,,488,488,',
'488,,,,,,,,,,,,,,,,,488,488,,,,,,488,,488,,488,488,,488,488,488,,488',
'488,488,488,,,488,488,,,488,,,488,488,,,,,,,488,,,,,,488,,,,488,488',
',488,488,,,,488,488,488,488,488,,,488,488,488,72,72,488,,72,72,72,72',
',,,,,,,,,,,,,,,,72,72,,,,,,72,,72,,72,72,,72,72,72,,72,72,72,72,,,72',
'72,,,72,,,72,72,,,,,,,72,,,,,,72,,,,72,72,,72,72,,,,72,72,72,72,72,72',
'72,72,72,72,73,73,72,,73,73,73,73,,,,,,,,,,,,,,,,,73,73,,,,,,73,,73',
',73,73,,73,73,73,,73,73,73,73,,,73,73,,,73,,,73,73,,,,,,,73,,,,,,73',
',,,73,73,,73,73,,,,73,73,73,73,73,73,73,73,73,73,74,74,73,,74,74,,74',
'74,,,,,,,,,,,,,,,,74,74,,,,,,74,,74,,74,74,,74,74,74,,74,74,74,74,,',
'74,74,,,74,,,74,74,,,,,,,74,,,,,,74,,,,74,74,,74,74,,,,74,74,74,74,74',
'74,74,74,74,74,78,78,74,,78,78,,78,,,,,,,,,,,,,,,,,78,78,,,,,,78,,78',
',78,78,,78,78,78,,78,78,78,78,,,78,78,,,78,,,78,78,,,,,,,78,,,,,,78',
',,,78,78,,78,78,,,,78,78,78,78,78,,,78,78,78,486,486,78,,486,486,,486',
'486,,,,,,,,,,,,,,,,486,486,,,,,,486,,486,,486,486,,486,486,486,,486',
'486,486,486,,,486,486,,,486,,,486,486,,,,,,,486,,,,,,486,,,,486,486',
',486,486,,,,486,486,486,486,486,,,486,486,486,475,475,486,,475,475,',
'475,,,,,,,,,,,,,,,,,475,475,,,,,,475,,475,,475,475,,475,475,475,,475',
'475,,,,,475,475,,,475,,,475,475,,,,,,,475,,,,,,475,,,,475,475,,475,475',
',,,475,475,475,475,475,,,475,475,475,83,83,475,,83,83,,83,,,,,,,,,,',
',,,,,,83,83,,,,,,83,,83,,83,83,,83,83,83,,83,83,,,,,83,83,,,83,,,83',
'83,,,,,,,83,,,,,,83,,,,83,83,,83,83,,,,83,83,83,83,83,,,83,83,83,470',
'470,83,,470,470,,470,,,,,,,,,,,,,,,,,470,470,,,,,,470,,470,,470,470',
',470,470,470,,470,470,,,,,470,470,,,470,,,470,470,,,,,,,470,,,,,,470',
',,,470,470,,470,470,,,,470,470,470,470,470,,,470,470,470,86,86,470,',
'86,86,,86,,,,,,,,,,,,,,,,,86,86,,,,,,86,,86,,86,86,,86,86,86,,86,86',
'86,86,,,86,86,,,86,,,86,86,,,,,,,86,,,,,,86,,,,86,86,,86,86,,,,86,86',
'86,86,86,,,86,86,86,89,89,86,,89,89,,89,,,,,,,,,,,,,,,,,89,89,,,,,,89',
',89,,89,89,,89,89,89,,89,89,89,89,,,89,89,,,89,,,89,89,,,,,,,89,,,,',
',89,,,,89,89,,89,89,,,,89,89,89,89,89,,,89,89,89,90,90,89,,90,90,,90',
',,,,,,,,,,,,,,,,90,90,,,,,,90,,90,,90,90,,90,90,90,,90,90,90,90,,,90',
'90,,,90,,,90,90,,,,,,,90,,,,,,90,,,,90,90,,90,90,,,,90,90,90,90,90,',
',90,90,90,91,91,90,,91,91,,91,,,,,,,,,,,,,,,,,91,91,,,,,,91,,91,,91',
'91,,91,91,91,,91,91,91,91,,,91,91,,,91,,,91,91,,,,,,,91,,,,,,91,,,,91',
'91,,91,91,,,,91,91,91,91,91,,,91,91,91,92,92,91,,92,92,,92,,,,,,,,,',
',,,,,,,92,92,,,,,,92,,92,,92,92,,92,92,92,,92,92,92,92,,,92,92,,,92',
',,92,92,,,,,,,92,,,,,,92,,,,92,92,,92,92,,,,92,92,92,92,92,,,92,92,92',
'93,93,92,,93,93,,93,,,,,,,,,,,,,,,,,93,93,,,,,,93,,93,,93,93,,93,93',
'93,,93,93,93,93,,,93,93,,,93,,,93,93,,,,,,,93,,,,,,93,,,,93,93,,93,93',
',,,93,93,93,93,93,,,93,93,93,94,94,93,,94,94,,94,,,,,,,,,,,,,,,,,94',
'94,,,,,,94,,94,,94,94,,94,94,94,,94,94,94,94,,,94,94,,,94,,,94,94,,',
',,,,94,,,,,,94,,,,94,94,,94,94,,,,94,94,94,94,94,,,94,94,94,95,95,94',
',95,95,,95,,,,,,,,,,,,,,,,,95,95,,,,,,95,,95,,95,95,,95,95,95,,95,95',
'95,95,,,95,95,,,95,,,95,95,,,,,,,95,,,,,,95,,,,95,95,,95,95,,,,95,95',
'95,95,95,,,95,95,95,96,96,95,,96,96,,96,,,,,,,,,,,,,,,,,96,96,,,,,,96',
'96,96,96,96,96,96,96,96,96,,96,96,,,,,96,96,96,96,96,,,96,96,,,,,,,96',
',,,,96,96,,,,96,96,,96,96,,,,96,96,96,96,96,96,96,96,96,96,97,97,96',
',97,97,,97,,,,,,,,,,,,,,,,,97,97,,,,,,97,,97,,97,97,,97,97,97,,97,97',
',,,,97,97,,,97,,,97,97,,,,,,,97,,,,,,97,,,,97,97,,97,97,,,,97,97,97',
'97,97,,,97,97,97,98,98,97,,98,98,,98,,,,,,,,,,,,,,,,,98,98,,,,,,98,',
'98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,98,,,,,,,98,,,,,,98,',
',,98,98,,98,98,,,,98,98,98,98,98,,,98,98,98,99,99,98,,99,99,,99,,,,',
',,,,,,,,,,,,99,99,,,,,,99,,99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99',
',,99,99,,,,,,,99,,,,,,99,,,,99,99,,99,99,,,,99,99,99,99,99,,,99,99,99',
'100,100,99,,100,100,,100,,,,,,,,,,,,,,,,,100,100,,,,,,100,,100,,100',
'100,,100,100,100,,100,100,,,,,100,100,,,100,,,100,100,,,,,,,100,,,,',
',100,,,,100,100,,100,100,,,,100,100,100,100,100,,,100,100,100,101,101',
'100,,101,101,,101,,,,,,,,,,,,,,,,,101,101,,,,,,101,,101,,101,101,,101',
'101,101,,101,101,,,,,101,101,,,101,,,101,101,,,,,,,101,,,,,,101,,,,101',
'101,,101,101,,,,101,101,101,101,101,,,101,101,101,102,102,101,,102,102',
',102,,,,,,,,,,,,,,,,,102,102,,,,,,102,,102,,102,102,,102,102,102,,102',
'102,,,,,102,102,,,102,,,102,102,,,,,,,102,,,,,,102,,,,102,102,,102,102',
',,,102,102,102,102,102,,,102,102,102,103,103,102,,103,103,,103,,,,,',
',,,,,,,,,,,103,103,,,,,,103,,103,,103,103,,103,103,103,,103,103,,,,',
'103,103,,,103,,,103,103,,,,,,,103,,,,,,103,,,,103,103,,103,103,,,,103',
'103,103,103,103,,,103,103,103,104,104,103,,104,104,,104,,,,,,,,,,,,',
',,,,104,104,,,,,,104,,104,,104,104,,104,104,104,,104,104,,,,,104,104',
',,104,,,104,104,,,,,,,104,,,,,,104,,,,104,104,,104,104,,,,104,104,104',
'104,104,,,104,104,104,105,105,104,,105,105,,105,,,,,,,,,,,,,,,,,105',
'105,,,,,,105,,105,,105,105,,105,105,105,,105,105,,,,,105,105,,,105,',
',105,105,,,,,,,105,,,,,,105,,,,105,105,,105,105,,,,105,105,105,105,105',
',,105,105,105,106,106,105,,106,106,,106,,,,,,,,,,,,,,,,,106,106,,,,',
',106,,106,,106,106,,106,106,106,,106,106,,,,,106,106,,,106,,,106,106',
',,,,,,106,,,,,,106,,,,106,106,,106,106,,,,106,106,106,106,106,,,106',
'106,106,107,107,106,,107,107,,107,,,,,,,,,,,,,,,,,107,107,,,,,,107,',
'107,,107,107,,107,107,107,,107,107,,,,,107,107,,,107,,,107,107,,,,,',
',107,,,,,,107,,,,107,107,,107,107,,,,107,107,107,107,107,,,107,107,107',
'108,108,107,,108,108,,108,,,,,,,,,,,,,,,,,108,108,,,,,,108,,108,,108',
'108,,108,108,108,,108,108,,,,,108,108,,,108,,,108,108,,,,,,,108,,,,',
',108,,,,108,108,,108,108,,,,108,108,108,108,108,,,108,108,108,109,109',
'108,,109,109,,109,,,,,,,,,,,,,,,,,109,109,,,,,,109,,109,,109,109,,109',
'109,109,,109,109,,,,,109,109,,,109,,,109,109,,,,,,,109,,,,,,109,,,,109',
'109,,109,109,,,,109,109,109,109,109,,,109,109,109,110,110,109,,110,110',
',110,,,,,,,,,,,,,,,,,110,110,,,,,,110,,110,,110,110,,110,110,110,,110',
'110,,,,,110,110,,,110,,,110,110,,,,,,,110,,,,,,110,,,,110,110,,110,110',
',,,110,110,110,110,110,,,110,110,110,111,111,110,,111,111,,111,,,,,',
',,,,,,,,,,,111,111,,,,,,111,,111,,111,111,,111,111,111,,111,111,,,,',
'111,111,,,111,,,111,111,,,,,,,111,,,,,,111,,,,111,111,,111,111,,,,111',
'111,111,111,111,,,111,111,111,112,112,111,,112,112,,112,,,,,,,,,,,,',
',,,,112,112,,,,,,112,,112,,112,112,,112,112,112,,112,112,,,,,112,112',
',,112,,,112,112,,,,,,,112,,,,,,112,,,,112,112,,112,112,,,,112,112,112',
'112,112,,,112,112,112,113,113,112,,113,113,,113,,,,,,,,,,,,,,,,,113',
'113,,,,,,113,,113,,113,113,,113,113,113,,113,113,,,,,113,113,,,113,',
',113,113,,,,,,,113,,,,,,113,,,,113,113,,113,113,,,,113,113,113,113,113',
',,113,113,113,114,114,113,,114,114,,114,,,,,,,,,,,,,,,,,114,114,,,,',
',114,,114,,114,114,,114,114,114,,114,114,,,,,114,114,,,114,,,114,114',
',,,,,,114,,,,,,114,,,,114,114,,114,114,,,,114,114,114,114,114,,,114',
'114,114,115,115,114,,115,115,,115,,,,,,,,,,,,,,,,,115,115,,,,,,115,',
'115,,115,115,,115,115,115,,115,115,,,,,115,115,,,115,,,115,115,,,,,',
',115,,,,,,115,,,115,115,115,,115,115,,,,115,115,115,115,115,,,115,115',
'115,116,116,115,,116,116,,116,,,,,,,,,,,,,,,,,116,116,,,,,,116,,116',
',116,116,,116,116,116,,116,116,116,116,,,116,116,,,116,,,116,116,,,',
',,,116,,,,,,116,,,,116,116,,116,116,,,,116,116,116,116,116,116,116,116',
'116,116,120,120,116,,120,120,,120,,,,,,,,,,,,,,,,,120,120,,,,,,120,',
'120,,120,120,,120,120,120,,120,120,,,,,120,120,,,120,,,120,120,,,,,',
',120,,,,,,120,,,,120,120,,120,120,,,,120,120,120,120,120,,,120,120,120',
'121,121,120,,121,121,,121,,,,,,,,,,,,,,,,,121,121,,,,,,121,,121,,121',
'121,,121,121,121,,121,121,,,,,121,121,,,121,,,121,121,,,,,,,121,,,,',
',121,,,,121,121,,121,121,,,,121,121,121,121,121,,,121,121,121,464,464',
'121,,464,464,,464,,,,,,,,,,,,,,,,,464,464,,,,,,464,,464,,464,464,,464',
'464,464,,464,464,464,464,,,464,464,,,464,,,464,464,,,,,,,464,,,,,,464',
',,,464,464,,464,464,,,,464,464,464,464,464,464,464,464,464,464,461,461',
'464,,461,461,,461,,,,,,,,,,,,,,,,,461,461,,,,,,461,,461,,461,461,,461',
'461,461,,461,461,461,461,,,461,461,,,461,,,461,461,,,,,,,461,,,,,,461',
',,,461,461,,461,461,,,,461,461,461,461,461,,,461,461,461,124,124,461',
',124,124,,124,,,,,,,,,,,,,,,,,124,124,,,,,,124,,124,,124,124,,124,124',
'124,,124,124,,,,,124,124,,,124,,,124,124,,,,,,,124,,,,,,124,,,,124,124',
',124,124,,,,124,124,124,124,124,,,124,124,124,10,10,124,,10,10,,10,',
',,,,,,,,,,,,,,,10,10,,,,,,10,,10,,10,10,,10,10,10,,10,10,10,10,,,10',
'10,,,10,,,10,10,,,,,,,10,,,,,,10,,,,10,10,,10,10,,,,10,10,10,10,10,',
',10,10,10,458,458,10,,458,458,,458,,,,,,,,,,,,,,,,,458,458,,,,,,458',
',458,,458,458,,458,458,458,,458,458,458,458,,,458,458,,,458,,,458,458',
',,,,,,458,,,,,,458,,,,458,458,,458,458,,,,458,458,458,458,458,458,458',
'458,458,458,450,450,458,,450,450,,450,,,,,,,,,,,,,,,,,450,450,,,,,,450',
',450,,450,450,,450,450,450,,450,450,450,450,,,450,450,,,450,,,450,450',
',,,,,,450,,,,,,450,,,,450,450,,450,450,,,,450,450,450,450,450,,,450',
'450,450,443,443,450,,443,443,,443,,,,,,,,,,,,,,,,,443,443,,,,,,443,',
'443,,443,443,,443,443,443,,443,443,,,,,443,443,,,443,,,443,443,,,,,',
',443,,,,,,443,,,,443,443,,443,443,,,,443,443,443,443,443,,,443,443,443',
'426,426,443,,426,426,,426,,,,,,,,,,,,,,,,,426,426,,,,,,426,,426,,426',
'426,,426,426,426,,426,426,426,426,,,426,426,,,426,,,426,426,,,,,,,426',
',,,,,426,,,,426,426,,426,426,,,,426,426,426,426,426,426,426,426,426',
'426,161,161,426,,161,161,,161,,,,,,,,,,,,,,,,,161,161,161,,,,,161,,161',
',161,161,,161,161,161,,161,161,161,161,,,161,161,,,161,,,161,161,,,',
',,,161,,,,,,161,,,,161,161,,161,161,,,,161,161,161,161,161,161,161,161',
'161,161,11,11,161,,11,11,,11,,,,,,,,,,,,,,,,,11,11,,,,,,11,,11,,11,11',
',11,11,11,,11,11,11,11,,,11,11,,,11,,,11,11,,,,,,,11,,,,,,11,,,,11,11',
',11,11,,,,11,11,11,11,11,,,11,11,11,522,522,11,,522,522,,522,,,,,,,',
',,,,,,,,,522,522,,,,,,522,,522,,522,522,,522,522,522,,522,522,,,,,522',
'522,,,522,,,522,522,,,,,,,522,,,,,,522,,,,522,522,,522,522,,,,522,522',
'522,522,522,,,522,522,522,170,170,522,,170,170,,170,,,,,,,,,,,,,,,,',
'170,170,,,,,,170,,170,,170,170,,170,170,170,,170,170,170,170,,,170,170',
',,170,,,170,170,,,,,,,170,,,,,,170,,,,170,170,,170,170,,,,170,170,170',
'170,170,170,170,170,170,170,171,171,170,,171,171,,171,171,,,,,,,,,,',
',,,,,171,171,,,,,,171,,171,,171,171,,171,171,171,,171,171,171,171,,',
'171,171,,,171,,,171,171,,,,,,,171,,,,,,171,,,,171,171,,171,171,,,,171',
'171,171,171,171,,,171,171,171,416,416,171,,416,416,,416,,,,,,,,,,,,',
',,,,416,416,,,,,,416,,416,,416,416,,416,416,416,,416,416,416,416,,,416',
'416,,,416,,,416,416,,,,,,,416,,,,,,416,,,,416,416,,416,416,,,,416,416',
'416,416,416,,,416,416,416,17,17,416,,17,17,,17,,,,,,,,,,,,,,,,,17,17',
',,,,,17,,17,,17,17,,17,17,17,,17,17,,,,,17,17,,,17,,,17,17,,,,,,,17',
',,,,,17,,,,17,17,,17,17,,,,17,17,17,17,17,,,17,17,17,414,414,17,,414',
'414,,414,,,,,,,,,,,,,,,,,414,414,,,,,,414,,414,,414,414,,414,414,414',
',414,414,414,414,,,414,414,,,414,,,414,414,,,,,,,414,,,,,,414,,,,414',
'414,,414,414,,,,414,414,414,414,414,,,414,414,414,413,413,414,,413,413',
',413,,,,,,,,,,,,,,,,,413,413,,,,,,413,,413,,413,413,,413,413,413,,413',
'413,413,413,,,413,413,,,413,,,413,413,,,,,,,413,,,,,,413,,,,413,413',
',413,413,,,,413,413,413,413,413,,,413,413,413,411,411,413,,411,411,',
'411,411,,,,,,,,,,,,,,,,411,411,,,,,,411,,411,,411,411,,411,411,411,',
'411,411,,,,,411,411,,,411,,,411,411,,,,,,,411,,,,,,411,,,,411,411,,411',
'411,,,,411,411,411,411,411,,,411,411,411,0,0,411,,0,0,,0,,,,,,,,,,,',
',,,,,0,0,,,,,,0,,0,,0,0,,0,0,0,,0,0,0,0,,,0,0,,,0,,,0,0,,,,,,,0,,,,',
',0,,,,0,0,,0,0,0,,,0,0,0,0,0,,,0,0,0,201,201,0,,201,201,,201,,,,,,,',
',,,,,,,,,201,201,,,,,,201,,201,,201,201,,201,201,201,,201,201,201,201',
',,201,201,,,201,,,201,201,,,,,,,201,,,,,,201,,,,201,201,,201,201,,,',
'201,201,201,201,201,,,201,201,201,204,204,201,,204,204,,204,204,,,,',
',,,,,,,,,,,204,204,,,,,,204,,204,,204,204,,204,204,204,,204,204,204',
'204,,,204,204,,,204,,,204,204,,,,,,,204,,,,,,204,,,,204,204,,204,204',
',,,204,204,204,204,204,204,204,204,204,204,403,403,204,,403,403,,403',
',,,,,,,,,,,,,,,,403,403,,,,,,403,,403,,403,403,,403,403,403,,403,403',
'403,403,,,403,403,,,403,,,403,403,,,,,,,403,,,,,,403,,,,403,403,,403',
'403,,,,403,403,403,403,403,403,403,403,403,403,400,400,403,,400,400',
',400,,,,,,,,,,,,,,,,,400,400,,,,,,400,,400,,400,400,,400,400,400,,400',
'400,,,,,400,400,,,400,,,400,400,,,,,,,400,,,,,,400,,,,400,400,,400,400',
',,,400,400,400,400,400,,,400,400,400,217,217,400,,217,217,,217,,,217',
',,,,,,,,,,,,,217,217,,,,,,217,,217,,217,217,,217,217,217,,217,217,,',
',,217,217,,,217,,,217,217,,,,,,,217,,,,,,217,,,,217,217,,217,217,,,',
'217,217,217,217,217,,,217,217,217,222,222,217,,222,222,,222,,,,,,,,',
',,,,,,,,222,222,,,,,,222,,222,,222,222,,222,222,222,,222,222,,,,,222',
'222,,,222,,,222,222,,,,,,,222,,,,,,222,,,,222,222,,222,222,,,,222,222',
'222,222,222,,,222,222,222,223,223,222,,223,223,,223,,,,,,,,,,,,,,,,',
'223,223,,,,,,223,,223,,223,223,,223,223,223,,223,223,,,,,223,223,,,223',
',,223,223,,,,,,,223,,,,,,223,,,,223,223,,223,223,,,,223,223,223,223',
'223,,,223,223,223,224,224,223,,224,224,,224,,,,,,,,,,,,,,,,,224,224',
',,,,,224,,224,,224,224,,224,224,224,,224,224,,,,,224,224,,,224,,,224',
'224,,,,,,,224,,,,,,224,,,,224,224,,224,224,,,,224,224,224,224,224,,',
'224,224,224,396,396,224,,396,396,,396,396,,,,,,,,,,,,,,,,396,396,,,',
',,396,,396,,396,396,,396,396,396,,396,396,396,396,,,396,396,,,396,,',
'396,396,,,,,,,396,,,,,,396,,,,396,396,,396,396,,,,396,396,396,396,396',
',,396,396,396,265,265,396,,265,265,,265,,,,,,,,,,,,,,,,,265,265,,,,',
',265,,265,,265,265,,265,265,265,,265,265,,,,,265,265,,,265,,,265,265',
',,,,,,265,,,,,,265,,,,265,265,,265,265,,,,265,265,265,265,265,,,265',
'265,265,379,379,265,,379,379,,379,,,,,,,,,,,,,,,,,379,379,,,,,,379,',
'379,,379,379,,379,379,379,,379,379,,,,,379,379,,,379,,,379,379,,,,,',
',379,,,,,,379,,,,379,379,,379,379,,,,379,379,379,379,379,,,379,379,379',
'358,358,379,,358,358,,358,,,,,,,,,,,,,,,,,358,358,,,,,,358,,358,,358',
'358,,358,358,358,,358,358,358,358,,,358,358,,,358,,,358,358,,,,,,,358',
',,,,,358,,,,358,358,,358,358,,,,358,358,358,358,358,358,358,358,358',
'358,287,287,358,,287,287,,287,,,,,,,,,,,,,,,,,287,287,,,,,,287,,287',
',287,287,,287,287,287,,287,287,287,287,,,287,287,,,287,,,287,287,,,',
',,,287,,,,,,287,,,,287,287,,287,287,,,,287,287,287,287,287,287,287,287',
'287,287,354,354,287,,354,354,,354,,,,,,,,,,,,,,,,,354,354,,,,,,354,',
'354,,354,354,,354,354,354,,354,354,,,,,354,354,,,354,,,354,354,,,,,',
',354,,,,,,354,,,,354,354,,354,354,,,,354,354,354,354,354,,,354,354,354',
'290,290,354,,290,290,,290,,,,,,,,,,,,,,,,,290,290,,,,,,290,,290,,290',
'290,,290,290,290,,290,290,290,290,,,290,290,,,290,,,290,290,,,,,,,290',
',,,,,290,,,,290,290,,290,290,,,,290,290,290,290,290,290,290,290,290',
'290,291,291,290,,291,291,,291,,,,,,,,,,,,,,,,,291,291,,,,,,291,,291',
',291,291,,291,291,291,,291,291,291,291,,,291,291,,,291,,,291,291,,,',
',,,291,,,,,,291,,,,291,291,,291,291,,,,291,291,291,291,291,291,291,291',
'291,291,292,292,291,,292,292,,292,,,,,,,,,,,,,,,,,292,292,,,,,,292,',
'292,,292,292,,292,292,292,,292,292,292,292,,,292,292,,,292,,,292,292',
',,,,,,292,,,,,,292,,,,292,292,,292,292,,,,292,292,292,292,292,,,292',
'292,292,353,353,292,,353,353,,353,,,,,,,,,,,,,,,,,353,353,,,,,,353,',
'353,,353,353,,353,353,353,,353,353,,,,,353,353,,,353,,,353,353,,,,,',
',353,,,,,,353,,,,353,353,,353,353,,,,353,353,353,353,353,,,353,353,353',
'352,352,353,,352,352,,352,,,,,,,,,,,,,,,,,352,352,,,,,,352,,352,,352',
'352,,352,352,352,,352,352,,,,,352,352,,,352,,,352,352,,,,,,,352,,,,',
',352,,,,352,352,,352,352,,,,352,352,352,352,352,,,352,352,352,351,351',
'352,,351,351,,351,,,,,,,,,,,,,,,,,351,351,,,,,,351,,351,,351,351,,351',
'351,351,,351,351,,,,,351,351,,,351,,,351,351,,,,,,,351,,,,,,351,,,,351',
'351,,351,351,,,,351,351,351,351,351,,,351,351,351,310,310,351,,310,310',
',310,310,,,,,,,,,,,,,,,,310,310,,,,,,310,,310,,310,310,,310,310,310',
',310,310,310,310,,,310,310,,,310,,,310,310,,,,,,,310,,,,,,310,,,,310',
'310,,310,310,,,,310,310,310,310,310,,,310,310,310,311,311,310,,311,311',
',311,311,,,,,,,,,,,,,,,,311,311,,,,,,311,,311,,311,311,,311,311,311',
',311,311,311,311,,,311,311,,,311,,,311,311,,,,,,,311,,,,,,311,,,,311',
'311,,311,311,,,,311,311,311,311,311,,,311,311,311,312,312,311,,312,312',
',312,,,,,,,,,,,,,,,,,312,312,,,,,,312,,312,,312,312,,312,312,312,,312',
'312,,,,,312,312,,,312,,,312,312,,,,,,,312,,,,,,312,,,,312,312,,312,312',
',,,312,312,312,312,312,,,312,312,312,331,331,312,,331,331,,331,331,',
',,,,,,,,,,,,,,331,331,,,,,,331,,331,,331,331,,331,331,331,,331,331,331',
'331,,,331,331,,,331,,,331,331,,,,,,,331,,,,,,331,,,,331,331,,331,331',
',,,331,331,331,331,331,331,331,331,331,331,328,328,331,,328,328,,328',
',,,,,,,,,,,,,,,,328,328,,,,,,328,,328,,328,328,,328,328,328,,328,328',
'328,328,,,328,328,,,328,,,328,328,63,63,,,63,,328,,,,,,328,,,,328,328',
',328,328,,,,328,328,328,328,328,328,328,328,328,328,203,,328,,,,63,',
',63,,,203,203,203,,203,,203,,203,,203,203,203,203,,,,63,421,421,,,421',
',,,,63,63,203,,,,203,203,,,203,203,203,203,203,203,,203,203,,,,,,203',
'278,,,,232,232,421,,232,421,203,203,278,278,278,278,278,,278,,278,,278',
'278,278,278,203,,,421,,,,,,,,,,421,421,278,,,232,278,278,232,409,278',
'278,278,278,278,278,,278,278,,,409,409,409,278,409,,409,232,409,,409',
'409,409,409,,,,232,232,,,,,,,,,,,409,278,,,409,409,,,409,409,409,409',
'409,409,,409,409,165,,165,,,409,,,,,,,165,165,165,,165,255,165,,165',
',165,165,165,165,,,,,,255,409,255,,,,255,321,321,,165,321,,,165,165',
',,165,165,165,165,165,165,,165,165,255,,,,,165,,,255,255,255,255,255',
'255,,255,255,439,,,321,,255,321,,,,,,439,439,439,165,439,,439,,439,',
'439,439,439,439,321,,,,,,255,,,,321,321,,,,439,,,,439,439,,440,439,439',
'439,439,439,439,,439,439,,,440,440,440,439,440,248,440,,440,,440,440',
'440,440,,,,,,248,,248,,,,248,,,,440,439,,,440,440,,,440,440,440,440',
'440,440,,440,440,248,,,,,440,,,,,248,248,,438,,248,248,,,,,,248,,,438',
'438,438,,438,256,438,440,438,,438,438,438,438,,,,,256,256,,256,,,248',
'256,,256,,438,,,,438,438,,,438,438,438,438,438,438,,438,438,256,,,253',
',438,,,256,256,256,256,256,256,,256,256,253,,253,257,,256,253,,,,,,',
',,438,257,257,,257,,,,257,,257,,253,,,,247,256,,,253,253,253,253,,,',
'253,253,257,247,,247,,253,,247,257,257,257,257,257,257,,257,257,,,,',
',257,,,,,,247,,,,253,,,,,,247,247,441,,,247,247,,,,,257,247,,441,441',
'441,,441,,441,,441,,441,441,441,441,,,,,,,,,,,,247,,,,441,,,,441,441',
',258,441,441,441,441,441,441,,441,441,,,,258,258,441,258,,,,258,,258',
',,,,,,,,,,,,,,,,,,258,441,,,,9,,,258,258,258,258,258,258,,258,258,9',
'9,9,,9,258,9,,9,,9,9,9,9,,,,,,,,,,,,,,,,9,,,258,9,9,,259,9,9,9,9,9,9',
',9,9,,,,259,259,9,259,,,,259,,259,,,,,,,,,,,,,,,,,,,259,9,,,,260,,,259',
'259,259,259,259,259,,259,259,260,260,260,,260,259,260,,260,,260,260',
'260,260,,,,,,,,,,,,,,,,260,,,259,,261,,,260,260,260,260,260,260,,260',
'260,261,261,261,,261,260,261,,261,,261,261,261,261,,,,,,,,,,,,,,,,261',
',,260,,261,,,261,261,261,261,261,261,262,261,261,,,262,,,261,,,,262',
'262,262,,262,,262,,262,,262,262,262,262,,,,,,,,,,261,,,,,,262,,,,262',
'262,,,262,262,262,262,262,262,,262,262,266,266,,,,262,266,,,,,,266,266',
'266,,266,,266,,266,,266,266,266,266,,,,,,,262,,,,,,,,,266,,,,266,266',
',467,266,266,266,266,266,266,,266,266,,,467,467,467,266,467,,467,,467',
',467,467,467,467,,,,,,,,,,,,,,,,467,266,,,467,467,,273,467,467,467,467',
'467,467,,467,467,,,273,273,273,467,273,,273,,273,,273,273,273,273,,',
',,,,,,,,,,,,,273,467,,,273,273,,,273,273,273,273,273,273,215,273,273',
',,,,,273,,,,215,215,215,215,215,252,215,,215,,215,215,215,215,,,,,,252',
',252,,273,,252,,,,215,,,,215,215,,,215,215,215,215,215,215,,215,215',
'252,,,254,,215,,,252,252,252,252,,,,252,252,254,,254,,,252,254,,,,,',
',,,215,,,,,,,,,,,,254,,,,,252,,,254,254,254,254,254,254,,254,254,162',
',162,,,254,,,,,,,162,162,162,,162,,162,,162,,162,162,162,162,,,,,,,254',
',,,,,,,,162,,,,162,162,,,162,162,162,162,162,162,,162,162,164,,164,',
',162,,,,,,,164,164,164,,164,,164,,164,,164,164,164,164,,,,,,,162,,,',
',,,,,164,,,,164,164,,510,164,164,164,164,164,164,,164,164,,,510,510',
'510,164,510,,510,,510,,510,510,510,510,,,,,,,,,,,,,,,,510,164,,,510',
'510,,,510,510,510,510,510,510,,510,510,,350,350,350,350,510,350,350',
'350,,350,,350,350,,,,,,,350,350,350,,,,350,,,,,,510,,,,,,350,350,,,',
',,,,,,,,350,350,350,350,350,350,350,350,272,272,272,272,,272,272,272',
',272,,272,272,,,,,,,272,272,272,,,,272,,,,,,,,,,,,272,272,,,,,,,,,,',
',272,272,272,272,272,272,272,272,388,388,388,388,,388,388,388,,388,',
'388,388,,,,,,,388,388,388,,,,388,,,,,,,,,,,,388,388,,,,,,,,,,,,388,388',
'388,388,388,388,388,388,415,415,415,415,,415,415,415,,415,,415,415,',
',,,,,415,415,415,,,,415,,,,,,,,,,,,415,415,,,,,,,,,,,,415,415,415,415',
'415,415,415,415,348,348,348,348,,348,348,348,,348,,348,348,,,,,,,348',
'348,348,,,,348,,,,,,,,,,,,348,348,,,,,,,,,,,,348,348,348,348,348,348',
'348,348,380,380,380,380,,380,380,380,,380,,380,380,,,,,,,380,380,380',
',,,380,,,,,,,,,,,,380,380,,,,,,,,,,,,380,380,380,380,380,380,380,380' ]
        racc_action_check = arr = ::Array.new(10662, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  6641,   580,   nil,   nil,   544,   561,   nil,    -8,   563,  9619,
  5276,  5822,   202,   nil,   nil,   nil,   180,  6277,   180,   271,
   362,   453,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   196,
   635,    92,   497,   541,   817,   908,   999,    28,   244,   199,
   251,   540,   557,  8973,   293,   214,   230,   252,   543,   nil,
   nil,   nil,  1454,  1545,  1636,   nil,   nil,   nil,  1727,   nil,
   481,   469,   nil,  2000,   nil,   525,  2182,   510,    -2,  2273,
  2364,  2455,  2546,  2637,  2728,  2819,  2910,  3001,  3092,  3183,
  3274,  3365,  3456,  3547,  3638,  3729,  3820,  3911,  4002,  4093,
  4184,  4275,  4366,  4457,  4548,  4639,  4730,   nil,    25,   513,
  4821,  4912,   511,   508,  5185,   326,   nil,   nil,   nil,   nil,
   nil,   nil,   384,   nil,   nil,   444,   426,    90,   303,   488,
   480,   489,   nil,   nil,   474,   413,    75,   153,   475,   160,
   471,   nil,   nil,   nil,   nil,   468,   nil,    32,   nil,   411,
   424,  5731, 10142,   nil, 10200,  9172,   333,   346,   241,   367,
  6004,  6095,   453,   nil,   442,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   398,     4,   445,   nil,   nil,   438,   nil,
   431,   nil,   139,   nil,   nil,   nil,   nil,   257,   nil,   nil,
   226,  6732,   -35,  9002,  6823,   nil,   430,   nil,   nil,   nil,
   nil,   433,   401,   392,   389, 10023,   383,  7096,     7,     2,
    -9,    73,  7187,  7278,  7369,   nil,   nil,     9,   342,   373,
   106,   374,  9075,   379,    17,    10,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   212,     5,    80,  9472,  9312,   130,
   269,   178, 10040,  9427, 10084,  9189,  9383,  9444,  9573,  9667,
  9713,  9759,  9814,   nil,   nil,  7551,  9872,   354,   nil,   nil,
   nil,   nil, 10339,  9968,   288,   nil,   296,   264,  9066,   nil,
   266,   nil,   477,   484,   240,   nil,   nil,  7824,   195,   nil,
  8006,  8097,  8188,   166,   205,   162,   nil,   nil,   196,   nil,
   nil,   nil,   nil,   nil,   174,   108,   -31,   nil,    92,   nil,
  8552,  8643,  8734,   112,   101,    77,    42,    34,    10,   nil,
   558,  9215,   -25,     7,     9,   nil,   nil,    86,  8916,   106,
   nil,  8825,   nil,   nil,   nil,   nil,    89,   nil,   nil,   nil,
   nil,   157,   nil,   nil,   nil,   nil,   165,   178, 10513,   186,
 10281,  8461,  8370,  8279,  7915,   214,   nil,   228,  7733,   241,
   nil,   269,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   290,  7642,
 10571,   305,   nil,   332,   nil,   310,   nil,   314, 10397,   nil,
   273,   nil,   150,   366,   369,   nil,  7460,   380,   319,   381,
  7005,   nil,   nil,  6914,   nil,   395,   135,   404,   396,  9114,
   119,  6550,   nil,  6459,  6368, 10455,  6186,   441,   nil,   461,
   nil,  9037,   nil,   nil,   464,   nil,  5640,   nil,   nil,   nil,
   nil,   nil,   nil,   405,   354,   468,   nil,   nil,  9366,  9247,
  9295,  9525,   479,  5549,   nil,   nil,   492,   nil,   nil,   493,
  5458,   nil,   nil,   nil,   481,   485,   502,   nil,  5367,   nil,
   nil,  5094,   509,   nil,  5003,   nil,   nil,  9920,    70,   nil,
  2091,   517,   496,   nil,   524,  1909,   540,   nil,   nil,   542,
   nil,   nil,   544,   542,   546,   548,  1818,   nil,  1363,   547,
   nil,   nil,   551,   519,   nil,   nil,   nil,   nil,   553,   nil,
   nil,   554,   555,   nil,   184,   nil,   nil,  1181,   nil,   726,
 10248,  1272,   nil,   nil,   563,   nil,  1090,   565,   nil,   566,
   570,   nil,  5913,   nil,   nil,   nil,   nil,   573,   nil,   582,
   nil,   583,   nil,   nil,   nil,   586,   nil,   nil,   nil,   nil,
   435,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -301,    -1,    -2,    -4,    -5,    -8,   -10,   -18,   -23,
  -301,  -301,  -193,   -35,   -36,   -37,   -38,  -301,  -301,  -301,
  -301,  -301,   -70,   -71,   -72,   -73,   -74,   -75,   -76,   -77,
   -78,   -79,   -80,   -81,   -82,   -83,   -84,   -85,   -86,   -87,
   -88,   -89,   -90,   -91,   -92,   -93,   -94,   -95,   -96,   -97,
  -301,  -301,  -104,  -108,  -301,  -301,  -301,  -301,  -301,  -301,
  -301,  -301,  -301,  -301,  -301,  -249,  -272,  -248,  -301,  -220,
  -221,  -222,  -301,  -301,  -301,  -245,  -246,  -247,  -301,  -251,
  -301,  -264,  -267,  -301,  -273,  -301,  -301,    -7,  -301,  -301,
  -301,  -301,  -301,  -301,  -301,  -301,  -145,  -301,  -301,  -301,
  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,
  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -102,  -301,  -140,
  -300,  -300,   -24,   -25,  -301,  -300,  -163,  -190,  -191,  -192,
  -193,  -194,  -301,  -157,  -158,   -49,  -193,   -50,   -57,  -301,
  -301,   -14,   -15,   -16,  -274,   -99,  -239,  -241,  -244,  -240,
  -301,  -236,  -242,  -243,  -103,  -210,  -217,  -272,  -105,  -300,
  -301,  -301,  -301,  -116,  -301,  -301,  -300,  -300,  -301,  -300,
  -301,  -301,  -274,  -174,  -176,  -177,  -178,  -179,  -180,  -182,
  -183,  -248,  -249,  -300,  -301,  -274,  -224,  -233,  -234,  -237,
  -274,  -226,  -301,  -229,  -230,  -235,  -250,  -301,  -255,  -258,
  -301,  -262,  -301,  -301,  -301,   546,    -6,    -9,   -11,   -12,
   -13,   -19,   -20,   -21,   -22,  -301,  -274,  -301,   -95,   -96,
   -97,  -292,  -285,  -291,  -279,  -146,  -149,  -301,  -282,  -296,
  -193,  -299,  -288,  -294,  -221,  -222,  -278,  -283,  -284,  -286,
  -287,  -289,  -297,  -298,   -39,   -40,   -41,   -42,   -43,   -44,
   -45,   -46,   -47,   -48,   -51,   -52,   -53,   -54,   -55,   -56,
   -58,   -59,  -301,   -60,  -134,  -301,   -23,  -274,   -64,   -67,
  -109,  -110,  -145,  -144,  -301,  -143,  -301,  -276,  -301,   -30,
  -300,  -195,  -301,  -301,  -301,   -61,   -62,  -275,  -301,  -101,
  -301,  -301,  -262,  -301,  -301,  -301,  -189,  -114,  -274,  -200,
  -202,  -203,  -204,  -205,  -207,  -301,  -301,  -272,  -301,  -107,
  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -274,  -301,  -171,
  -300,  -275,  -301,  -300,  -214,  -215,  -216,  -301,  -275,  -301,
  -227,  -301,  -252,  -253,  -254,  -256,  -301,  -259,  -260,  -261,
  -263,  -274,  -265,  -268,  -270,  -271,    -8,  -301,  -145,  -301,
  -275,  -301,  -301,  -301,  -301,  -274,  -136,  -301,  -275,  -274,
  -148,  -301,  -279,  -280,  -281,  -282,  -285,  -288,  -290,  -291,
  -292,  -293,  -294,  -295,  -296,  -299,  -141,  -142,  -301,  -277,
  -145,  -301,  -166,  -301,  -196,  -274,  -197,  -274,  -145,   -17,
   -98,  -232,  -301,  -301,  -301,  -111,  -301,  -187,  -301,  -275,
  -301,  -208,  -209,  -301,  -106,  -301,  -119,  -301,  -125,   -68,
  -301,  -301,  -129,  -300,  -300,  -145,  -300,  -301,  -170,  -301,
  -184,  -301,  -175,  -181,  -301,  -212,  -301,  -223,  -238,  -225,
  -228,  -231,  -257,  -301,  -301,  -274,   -28,  -147,  -152,  -150,
  -151,  -138,  -301,  -275,   -63,   -65,  -301,   -27,   -31,  -274,
  -300,  -167,  -168,  -169,  -301,  -301,  -274,  -100,  -301,  -211,
  -218,  -262,  -301,  -113,  -301,  -115,  -201,  -206,  -119,  -118,
  -301,  -301,  -125,  -124,  -301,  -301,  -301,  -128,  -130,  -301,
  -164,  -165,  -301,  -274,  -301,  -301,  -301,  -185,  -300,  -274,
  -266,  -269,  -301,   -32,  -135,  -137,  -139,   -29,  -301,  -198,
  -199,  -301,  -301,  -112,  -301,  -117,  -120,  -301,  -123,  -301,
   -69,  -300,  -153,  -154,  -301,  -159,  -301,  -301,  -173,  -301,
  -301,   -26,   -33,  -162,  -156,  -219,  -188,  -301,  -122,  -301,
  -127,  -301,  -132,  -133,  -155,  -301,  -161,  -172,  -186,  -213,
  -276,  -121,  -126,  -131,  -160,   -34 ]

racc_goto_table = [
     2,   126,   277,   177,   267,   135,   137,   138,   175,   264,
   139,   140,   158,   275,   275,   155,   156,   194,   343,   378,
   187,   187,   325,   339,   294,    87,   196,   298,   445,   188,
   188,   422,   144,   412,   122,   123,   185,   190,   216,   132,
   141,   337,   162,   164,   165,     3,   166,   167,   492,   126,
   448,   473,   296,   183,   274,   276,   263,   326,   469,   269,
   395,   506,   141,   141,   195,   411,   531,   355,   198,   341,
   437,   203,   169,   381,   451,   419,   423,   466,   207,   208,
   209,   210,   168,   402,   215,   244,   245,   246,   247,   248,
   249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
   259,   260,   261,   262,   266,   289,   195,   206,   273,   273,
   155,   156,   278,   401,   393,   508,   211,   212,   213,   214,
   505,   284,   391,   280,   155,   126,   428,     1,   445,   338,
   335,   487,   478,   336,   334,   199,   167,   201,   183,   nil,
   nil,   nil,   nil,   308,   nil,   nil,   nil,   194,   324,   385,
   387,   141,   317,   479,   482,   nil,   484,   315,   nil,   356,
   141,   nil,   425,   nil,   313,   314,   155,   316,   nil,   nil,
   nil,   318,   177,   382,   nil,   nil,   nil,   175,   nil,   392,
   288,   323,   nil,   nil,   nil,   155,   156,   nil,   424,   nil,
   498,   nil,   nil,   nil,   346,   nil,   nil,   nil,   nil,   nil,
   nil,   340,   nil,   nil,   347,   137,   nil,   nil,   320,   nil,
   162,   164,   165,   420,   359,   nil,   296,   166,   167,   126,
   nil,   327,   183,   nil,   nil,   nil,   329,   nil,   519,   nil,
   nil,   nil,   nil,   nil,   269,   389,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   155,   155,   nil,   491,
   nil,   nil,   349,   262,   nil,   nil,   nil,   nil,   nil,   397,
   nil,   177,   nil,   nil,   nil,   nil,   175,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   431,   nil,   187,   141,   nil,   266,
   195,   195,   545,   502,   432,   188,   nil,   nil,   nil,   nil,
   435,   nil,   340,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   409,   269,   nil,   357,   nil,   nil,   481,   481,   nil,   481,
   405,   407,   nil,   nil,   489,   nil,   nil,   nil,   141,   nil,
   nil,   195,   449,   nil,   nil,   nil,   198,   nil,   nil,   nil,
   456,   nil,   nil,   nil,   398,   nil,   nil,   495,   nil,   438,
   439,   440,   441,   481,   nil,   nil,   266,   nil,   195,   nil,
   457,   389,   504,   417,   nil,   nil,   nil,   483,   nil,   nil,
   nil,   177,   nil,   155,   nil,   nil,   175,   278,   nil,   269,
   nil,   nil,   452,   nil,   nil,   nil,   nil,   433,   nil,   nil,
   nil,   481,   nil,   nil,   nil,   nil,   nil,   nil,   467,   nil,
   nil,   442,   nil,   141,   nil,   446,   462,   nil,   nil,   409,
   540,   269,   nil,   nil,   532,   nil,   nil,   269,   nil,   nil,
   nil,   nil,   nil,   nil,   266,   nil,   195,   nil,   nil,   nil,
   nil,   454,   nil,   455,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   262,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   266,   nil,   195,   nil,
   nil,   nil,   266,   nil,   195,   nil,   nil,   nil,   162,   nil,
   nil,   340,   nil,   510,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   493,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   497,   517,   nil,   nil,   nil,
   nil,   nil,   501,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   527,   nil,   529,
   278,   533,   nil,   nil,   nil,   nil,   535,   nil,   nil,   514,
   nil,   nil,   nil,   nil,   nil,   520 ]

racc_goto_check = [
     2,    72,    15,    47,    24,    12,    12,    12,    48,    65,
     6,     6,    51,    64,    64,    49,    89,     9,   108,    16,
     8,     8,    46,    91,    55,     5,   101,    57,    25,    96,
    96,    81,    10,    62,    11,    11,    92,    92,    13,    75,
     6,    97,    12,    12,    12,     3,    72,    72,    14,    72,
    18,    60,    64,    72,    68,    68,    23,    45,    59,     9,
    56,    58,     6,     6,     6,    61,    63,    66,     6,    57,
    69,    12,    76,    77,    78,    80,    83,    84,     6,     6,
     6,     6,    75,    85,    12,    12,    12,    12,    12,    12,
    12,    12,    12,    12,    12,    12,    12,    12,    12,    12,
    12,    12,    12,    12,    12,    51,     6,     5,    12,    12,
    49,    89,    12,    87,    91,    60,    11,    11,    11,    11,
    59,    72,    94,    73,    49,    72,    95,     1,    25,    98,
   102,    81,    62,   103,   105,   106,    72,   107,    72,   nil,
   nil,   nil,   nil,    10,   nil,   nil,   nil,     9,    49,    57,
    57,     6,    10,    74,    74,   nil,    74,    72,   nil,    65,
     6,   nil,    46,   nil,    73,    73,    49,    73,   nil,   nil,
   nil,     2,    47,    64,   nil,   nil,   nil,    48,   nil,    24,
    17,    73,   nil,   nil,   nil,    49,    89,   nil,    55,   nil,
    74,   nil,   nil,   nil,     6,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,   nil,     2,    12,   nil,   nil,    17,   nil,
    12,    12,    12,    64,    13,   nil,    64,    72,    72,    72,
   nil,    17,    72,   nil,   nil,   nil,    17,   nil,    74,   nil,
   nil,   nil,   nil,   nil,     9,     8,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    49,    49,   nil,   108,
   nil,   nil,    17,    12,   nil,   nil,   nil,   nil,   nil,    49,
   nil,    47,   nil,   nil,   nil,   nil,    48,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     9,   nil,     8,     6,   nil,    12,
     6,     6,    16,    91,   101,    96,   nil,   nil,   nil,   nil,
    13,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    12,     9,   nil,    17,   nil,   nil,    64,    64,   nil,    64,
     2,     2,   nil,   nil,    24,   nil,   nil,   nil,     6,   nil,
   nil,     6,    13,   nil,   nil,   nil,     6,   nil,   nil,   nil,
    13,   nil,   nil,   nil,    17,   nil,   nil,    65,   nil,    12,
    12,    12,    12,    64,   nil,   nil,    12,   nil,     6,   nil,
    51,     8,    24,    17,   nil,   nil,   nil,    13,   nil,   nil,
   nil,    47,   nil,    49,   nil,   nil,    48,    12,   nil,     9,
   nil,   nil,    72,   nil,   nil,   nil,   nil,    17,   nil,   nil,
   nil,    64,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,
   nil,    17,   nil,     6,   nil,    17,     2,   nil,   nil,    12,
    15,     9,   nil,   nil,    64,   nil,   nil,     9,   nil,   nil,
   nil,   nil,   nil,   nil,    12,   nil,     6,   nil,   nil,   nil,
   nil,    17,   nil,    17,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,     6,   nil,
   nil,   nil,    12,   nil,     6,   nil,   nil,   nil,    12,   nil,
   nil,     2,   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    17,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    17,     2,   nil,   nil,   nil,
   nil,   nil,    17,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,     2,
    12,     2,   nil,   nil,   nil,   nil,     2,   nil,   nil,    17,
   nil,   nil,   nil,   nil,   nil,    17 ]

racc_goto_pointer = [
   nil,   127,     0,    45,   nil,    21,   -10,   nil,   -52,   -57,
   -18,    24,   -12,   -58,  -387,  -122,  -258,    36,  -329,   nil,
   nil,   nil,   nil,   -59,  -112,  -330,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  -127,  -162,   -60,   -55,   -36,
   nil,   -40,   nil,   nil,   nil,  -135,  -234,  -133,  -409,  -348,
  -357,  -247,  -279,  -445,  -107,  -106,  -198,   nil,   -66,  -280,
   nil,   nil,   -11,    -2,  -260,    23,    12,  -207,  -309,   nil,
  -245,  -290,   nil,  -246,  -322,  -223,   nil,  -192,   nil,   -35,
   nil,  -178,   -36,   nil,  -168,  -202,   -43,  -159,   -71,   nil,
   nil,   -52,   -67,   -64,   nil,   -63,    55,    56,  -185 ]

racc_goto_default = [
   nil,   nil,   480,   nil,     4,     5,     6,     7,   143,   142,
   nil,     8,     9,   nil,   nil,   nil,   nil,   nil,   279,    13,
    14,    15,    16,   nil,   nil,   268,   410,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    50,   nil,    52,    53,   159,   nil,   nil,   nil,   163,   nil,
   nil,   nil,   nil,   nil,   281,   nil,   nil,   119,   nil,   225,
   227,   226,    59,   nil,   nil,   nil,   125,   nil,   nil,   172,
   nil,   173,   174,   178,   299,   300,   301,   302,   303,   306,
    68,   nil,   nil,   192,   150,   189,   151,    75,    76,    77,
    78,   nil,   nil,   nil,   197,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 99, :_reduce_1,
  1, 99, :_reduce_2,
  0, 99, :_reduce_3,
  1, 100, :_reduce_4,
  1, 102, :_reduce_5,
  3, 102, :_reduce_6,
  2, 102, :_reduce_7,
  1, 103, :_reduce_8,
  3, 103, :_reduce_9,
  1, 104, :_reduce_none,
  3, 104, :_reduce_11,
  3, 104, :_reduce_12,
  3, 104, :_reduce_13,
  1, 106, :_reduce_none,
  1, 106, :_reduce_15,
  1, 108, :_reduce_16,
  3, 108, :_reduce_17,
  1, 105, :_reduce_none,
  3, 105, :_reduce_19,
  3, 105, :_reduce_20,
  3, 105, :_reduce_21,
  3, 105, :_reduce_22,
  1, 109, :_reduce_none,
  2, 109, :_reduce_24,
  2, 109, :_reduce_25,
  7, 109, :_reduce_26,
  5, 109, :_reduce_27,
  5, 109, :_reduce_28,
  4, 116, :_reduce_29,
  1, 113, :_reduce_30,
  3, 113, :_reduce_31,
  1, 112, :_reduce_32,
  2, 112, :_reduce_33,
  4, 112, :_reduce_34,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  3, 110, :_reduce_39,
  3, 110, :_reduce_40,
  3, 110, :_reduce_41,
  3, 110, :_reduce_42,
  3, 110, :_reduce_43,
  3, 110, :_reduce_44,
  3, 110, :_reduce_45,
  3, 110, :_reduce_46,
  3, 110, :_reduce_47,
  3, 110, :_reduce_48,
  2, 110, :_reduce_49,
  2, 110, :_reduce_50,
  3, 110, :_reduce_51,
  3, 110, :_reduce_52,
  3, 110, :_reduce_53,
  3, 110, :_reduce_54,
  3, 110, :_reduce_55,
  3, 110, :_reduce_56,
  2, 110, :_reduce_57,
  3, 110, :_reduce_58,
  3, 110, :_reduce_59,
  3, 110, :_reduce_60,
  3, 110, :_reduce_61,
  3, 110, :_reduce_62,
  5, 120, :_reduce_63,
  1, 122, :_reduce_64,
  3, 122, :_reduce_65,
  1, 123, :_reduce_none,
  1, 123, :_reduce_67,
  1, 124, :_reduce_68,
  3, 124, :_reduce_69,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_93,
  1, 117, :_reduce_94,
  1, 117, :_reduce_95,
  1, 117, :_reduce_96,
  1, 117, :_reduce_97,
  4, 119, :_reduce_98,
  2, 119, :_reduce_99,
  5, 119, :_reduce_100,
  3, 119, :_reduce_101,
  2, 148, :_reduce_102,
  2, 148, :_reduce_103,
  1, 126, :_reduce_104,
  2, 126, :_reduce_105,
  4, 150, :_reduce_106,
  3, 150, :_reduce_107,
  1, 150, :_reduce_108,
  3, 151, :_reduce_109,
  3, 151, :_reduce_110,
  3, 149, :_reduce_111,
  3, 154, :_reduce_112,
  2, 154, :_reduce_113,
  2, 152, :_reduce_114,
  4, 152, :_reduce_115,
  2, 129, :_reduce_116,
  5, 156, :_reduce_117,
  4, 156, :_reduce_118,
  0, 157, :_reduce_none,
  2, 157, :_reduce_120,
  4, 157, :_reduce_121,
  3, 157, :_reduce_122,
  6, 130, :_reduce_123,
  5, 130, :_reduce_124,
  0, 158, :_reduce_none,
  4, 158, :_reduce_126,
  3, 158, :_reduce_127,
  5, 128, :_reduce_128,
  1, 159, :_reduce_129,
  2, 159, :_reduce_130,
  5, 160, :_reduce_131,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 121, :_reduce_none,
  4, 121, :_reduce_135,
  1, 164, :_reduce_136,
  3, 164, :_reduce_137,
  3, 163, :_reduce_138,
  6, 127, :_reduce_139,
  2, 127, :_reduce_140,
  3, 165, :_reduce_141,
  3, 165, :_reduce_142,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  0, 111, :_reduce_145,
  1, 111, :_reduce_146,
  3, 111, :_reduce_147,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  3, 167, :_reduce_150,
  3, 167, :_reduce_151,
  3, 167, :_reduce_152,
  6, 131, :_reduce_153,
  6, 132, :_reduce_154,
  7, 118, :_reduce_155,
  7, 118, :_reduce_156,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  6, 134, :_reduce_159,
  8, 135, :_reduce_160,
  7, 135, :_reduce_161,
  7, 133, :_reduce_162,
  1, 174, :_reduce_163,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  1, 175, :_reduce_none,
  2, 175, :_reduce_167,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  4, 137, :_reduce_170,
  3, 137, :_reduce_171,
  7, 136, :_reduce_172,
  6, 136, :_reduce_173,
  1, 177, :_reduce_174,
  3, 177, :_reduce_175,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_178,
  1, 179, :_reduce_none,
  1, 180, :_reduce_180,
  3, 180, :_reduce_181,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 178, :_reduce_none,
  2, 178, :_reduce_185,
  7, 139, :_reduce_186,
  2, 153, :_reduce_187,
  5, 153, :_reduce_188,
  1, 153, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_193,
  1, 170, :_reduce_194,
  1, 171, :_reduce_195,
  2, 171, :_reduce_196,
  2, 171, :_reduce_197,
  4, 171, :_reduce_198,
  4, 171, :_reduce_199,
  1, 155, :_reduce_200,
  3, 155, :_reduce_201,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  3, 185, :_reduce_206,
  1, 185, :_reduce_207,
  2, 186, :_reduce_208,
  2, 184, :_reduce_209,
  1, 187, :_reduce_210,
  4, 187, :_reduce_211,
  4, 140, :_reduce_212,
  7, 140, :_reduce_213,
  3, 140, :_reduce_214,
  3, 140, :_reduce_215,
  3, 140, :_reduce_216,
  2, 188, :_reduce_217,
  5, 141, :_reduce_218,
  7, 141, :_reduce_219,
  1, 125, :_reduce_220,
  1, 142, :_reduce_221,
  1, 142, :_reduce_222,
  4, 143, :_reduce_223,
  2, 143, :_reduce_224,
  4, 143, :_reduce_225,
  2, 143, :_reduce_226,
  3, 144, :_reduce_227,
  4, 144, :_reduce_228,
  2, 144, :_reduce_229,
  1, 191, :_reduce_230,
  3, 191, :_reduce_231,
  3, 107, :_reduce_232,
  1, 193, :_reduce_none,
  1, 193, :_reduce_234,
  1, 192, :_reduce_none,
  1, 192, :_reduce_236,
  1, 190, :_reduce_237,
  3, 190, :_reduce_238,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  1, 195, :_reduce_248,
  1, 195, :_reduce_249,
  2, 196, :_reduce_250,
  1, 198, :_reduce_251,
  1, 200, :_reduce_252,
  1, 201, :_reduce_253,
  2, 199, :_reduce_254,
  1, 202, :_reduce_255,
  1, 203, :_reduce_256,
  2, 203, :_reduce_257,
  2, 197, :_reduce_258,
  2, 204, :_reduce_259,
  2, 204, :_reduce_260,
  3, 101, :_reduce_261,
  0, 189, :_reduce_none,
  1, 189, :_reduce_none,
  0, 205, :_reduce_264,
  2, 205, :_reduce_265,
  4, 205, :_reduce_266,
  1, 138, :_reduce_267,
  3, 138, :_reduce_268,
  5, 138, :_reduce_269,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 147, :_reduce_272,
  1, 145, :_reduce_273,
  0, 115, :_reduce_none,
  1, 115, :_reduce_275,
  0, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  0, 162, :_reduce_300 ]

racc_reduce_n = 301

racc_shift_n = 546

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :WSLPAREN => 26,
  :LPAREN => 27,
  :RPAREN => 28,
  :ISEQUAL => 29,
  :GREATEREQUAL => 30,
  :GREATERTHAN => 31,
  :LESSTHAN => 32,
  :IF => 33,
  :ELSE => 34,
  :DEFINE => 35,
  :ELSIF => 36,
  :VARIABLE => 37,
  :CLASS => 38,
  :INHERITS => 39,
  :NODE => 40,
  :BOOLEAN => 41,
  :NAME => 42,
  :SEMIC => 43,
  :CASE => 44,
  :DEFAULT => 45,
  :AT => 46,
  :ATAT => 47,
  :LCOLLECT => 48,
  :RCOLLECT => 49,
  :CLASSREF => 50,
  :NOT => 51,
  :OR => 52,
  :AND => 53,
  :UNDEF => 54,
  :PARROW => 55,
  :PLUS => 56,
  :MINUS => 57,
  :TIMES => 58,
  :DIV => 59,
  :LSHIFT => 60,
  :RSHIFT => 61,
  :UMINUS => 62,
  :MATCH => 63,
  :NOMATCH => 64,
  :REGEX => 65,
  :IN_EDGE => 66,
  :OUT_EDGE => 67,
  :IN_EDGE_SUB => 68,
  :OUT_EDGE_SUB => 69,
  :IN => 70,
  :UNLESS => 71,
  :PIPE => 72,
  :LAMBDA => 73,
  :SELBRACE => 74,
  :NUMBER => 75,
  :HEREDOC => 76,
  :SUBLOCATE => 77,
  :RENDER_STRING => 78,
  :RENDER_EXPR => 79,
  :EPP_START => 80,
  :EPP_END => 81,
  :EPP_END_TRIM => 82,
  :FUNCTION => 83,
  :TYPE => 84,
  :PRIVATE => 85,
  :ATTR => 86,
  :APPLICATION => 87,
  :PRODUCES => 88,
  :CONSUMES => 89,
  :SITE => 90,
  :PLAN => 91,
  :APPLY => 92,
  :LOW => 93,
  :HIGH => 94,
  :LISTSTART => 95,
  :SPLAT => 96,
  :MODULO => 97 }

racc_nt_base = 98

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "WSLPAREN",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "TYPE",
  "PRIVATE",
  "ATTR",
  "APPLICATION",
  "PRODUCES",
  "CONSUMES",
  "SITE",
  "PLAN",
  "APPLY",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "argument",
  "hashpair",
  "arguments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "capability_mapping",
  "call_function_expression",
  "bracketed_expression",
  "selector_entries",
  "access_args",
  "access_arg",
  "expressions",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "hostclass_expression",
  "plan_expression",
  "apply_expression",
  "node_definition_expression",
  "site_definition_expression",
  "epp_render_expression",
  "function_definition",
  "type_alias",
  "type_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "call_function_start",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "opt_return_type",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "capability_kw",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "type_alias_lhs",
  "optional_statements",
  "collection_entries",
  "hashpairs",
  "hash_entry",
  "collection_entry",
  "collection_entry_keyword",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_2(val, _values, result)
     result = create_program(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_3(val, _values, result)
     result = create_empty_program 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_15(val, _values, result)
     result = Factory.HASH_UNFOLDED([val[0]]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_16(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_17(val, _values, result)
     result = Factory.ARGUMENTS(val[0], val[2]) 
    result
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_21(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_22(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'egrammar.ra', 124)
  def _reduce_24(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, 'virtual')
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 135)
  def _reduce_25(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, 'exported')
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 146)
  def _reduce_26(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 153)
  def _reduce_27(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 162)
  def _reduce_28(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2], val[1], val[4])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 184)
  def _reduce_29(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_30(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_31(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_32(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 195)
  def _reduce_33(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_34(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_39(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_40(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_41(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_42(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_43(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_44(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_45(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_46(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_47(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_48(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_49(val, _values, result)
     result = val[1].minus            ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_50(val, _values, result)
     result = val[1].unfold           ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_51(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_52(val, _values, result)
     result = val[0].eq  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_53(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_54(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 221)
  def _reduce_55(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 222)
  def _reduce_56(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 223)
  def _reduce_57(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 224)
  def _reduce_58(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 225)
  def _reduce_59(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 226)
  def _reduce_60(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 227)
  def _reduce_61(val, _values, result)
     result = val[1].paren            ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 228)
  def _reduce_62(val, _values, result)
     result = val[1].paren          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 231)
  def _reduce_63(val, _values, result)
     result = val[0].access(val[2]); loc result, val[0], val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 234)
  def _reduce_64(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 235)
  def _reduce_65(val, _values, result)
     result = Factory.ARGUMENTS(val[0], val[2]) 
    result
  end
.,.,

# reduce 66 omitted

module_eval(<<'.,.,', 'egrammar.ra', 239)
  def _reduce_67(val, _values, result)
     result = Factory.HASH_UNFOLDED([val[0]]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 248)
  def _reduce_68(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 249)
  def _reduce_69(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

module_eval(<<'.,.,', 'egrammar.ra', 275)
  def _reduce_93(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 276)
  def _reduce_94(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 277)
  def _reduce_95(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 278)
  def _reduce_96(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 279)
  def _reduce_97(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 288)
  def _reduce_98(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 292)
  def _reduce_99(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 296)
  def _reduce_100(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[4]
      result.lambda = val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 301)
  def _reduce_101(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 307)
  def _reduce_102(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 308)
  def _reduce_103(val, _values, result)
     result = Factory.QNAME(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 313)
  def _reduce_104(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 314)
  def _reduce_105(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 317)
  def _reduce_106(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 318)
  def _reduce_107(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 319)
  def _reduce_108(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 323)
  def _reduce_109(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 327)
  def _reduce_110(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 335)
  def _reduce_111(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[2][:value], val[1])
      loc result, val[0][:start], val[2][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 340)
  def _reduce_112(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 341)
  def _reduce_113(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_114(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 346)
  def _reduce_115(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 354)
  def _reduce_116(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 361)
  def _reduce_117(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(val[2], val[1], val[3]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 365)
  def _reduce_118(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 119 omitted

module_eval(<<'.,.,', 'egrammar.ra', 373)
  def _reduce_120(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 377)
  def _reduce_121(val, _values, result)
            result = Factory.block_or_expression(val[2], val[1], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 380)
  def _reduce_122(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 387)
  def _reduce_123(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(val[3], val[2], val[4]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 391)
  def _reduce_124(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 125 omitted

module_eval(<<'.,.,', 'egrammar.ra', 401)
  def _reduce_126(val, _values, result)
            result = Factory.block_or_expression(val[2], val[1], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 404)
  def _reduce_127(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 411)
  def _reduce_128(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 417)
  def _reduce_129(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 418)
  def _reduce_130(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 423)
  def _reduce_131(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'egrammar.ra', 439)
  def _reduce_135(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_136(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 445)
  def _reduce_137(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 450)
  def _reduce_138(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 460)
  def _reduce_139(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 464)
  def _reduce_140(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 469)
  def _reduce_141(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 470)
  def _reduce_142(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 143 omitted

# reduce 144 omitted

module_eval(<<'.,.,', 'egrammar.ra', 479)
  def _reduce_145(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 480)
  def _reduce_146(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 481)
  def _reduce_147(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 148 omitted

# reduce 149 omitted

module_eval(<<'.,.,', 'egrammar.ra', 496)
  def _reduce_150(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], '=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 500)
  def _reduce_151(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], '+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 504)
  def _reduce_152(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 513)
  def _reduce_153(val, _values, result)
          definition = Factory.DEFINITION(classname(val[1][:value]), val[2], val[4])
      loc(definition, val[0], val[5])
      result = add_definition(definition)
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 525)
  def _reduce_154(val, _values, result)
        definition = Factory.APPLICATION(classname(val[1][:value]), val[2], val[4])
    loc(definition, val[0], val[5])
    result = add_definition(definition)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 532)
  def _reduce_155(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        Factory.QREF(classname(val[0][:value])),
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 539)
  def _reduce_156(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        val[0],
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'egrammar.ra', 553)
  def _reduce_159(val, _values, result)
          # Remove this plan's name from the namestack as all nested plans have been parsed
      namepop
      definition = Factory.PLAN(classname(val[1][:value]), val[2], val[4])
      loc(definition, val[0], val[5])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 562)
  def _reduce_160(val, _values, result)
          result = Factory.APPLY(val[2], Factory.APPLY_BLOCK(val[6]))
      loc result, val[0], val[7]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 566)
  def _reduce_161(val, _values, result)
          result = Factory.APPLY(val[2], Factory.APPLY_BLOCK([]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 576)
  def _reduce_162(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      definition = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 587)
  def _reduce_163(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_167(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 168 omitted

# reduce 169 omitted

module_eval(<<'.,.,', 'egrammar.ra', 613)
  def _reduce_170(val, _values, result)
        definition = Factory.SITE(val[2])
    loc(definition, val[0], val[3])
    result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 618)
  def _reduce_171(val, _values, result)
        definition = Factory.SITE(nil)
    loc(definition, val[0], val[2])
    result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 629)
  def _reduce_172(val, _values, result)
          definition = Factory.NODE(val[1], val[3], val[5])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 634)
  def _reduce_173(val, _values, result)
          definition = Factory.NODE(val[1], val[3], nil)
      loc(definition, val[0], val[5])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_174(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_175(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 176 omitted

# reduce 177 omitted

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_178(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 179 omitted

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_180(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_181(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

module_eval(<<'.,.,', 'egrammar.ra', 667)
  def _reduce_185(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 673)
  def _reduce_186(val, _values, result)
          definition = Factory.FUNCTION(val[1][:value], val[2], val[5], val[3])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_187(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_188(val, _values, result)
     result = val[1].access(val[3]) ; loc result, val[1], val[4] 
    result
  end
.,.,

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_193(val, _values, result)
     error val[0], "'class' keyword not allowed at this location" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_194(val, _values, result)
     error val[0], "A quoted string is not valid as a name here" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_195(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 696)
  def _reduce_196(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 697)
  def _reduce_197(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 698)
  def _reduce_198(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_199(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 703)
  def _reduce_200(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 704)
  def _reduce_201(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

module_eval(<<'.,.,', 'egrammar.ra', 716)
  def _reduce_206(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 717)
  def _reduce_207(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 720)
  def _reduce_208(val, _values, result)
     result = val[1]; val[1].captures_rest 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 723)
  def _reduce_209(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 726)
  def _reduce_210(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 727)
  def _reduce_211(val, _values, result)
     result = val[0].access(val[2]) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 732)
  def _reduce_212(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], Factory.KEY_ENTRY(val[2], val[3]))
      loc(definition, val[0], val[3])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 737)
  def _reduce_213(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2].access(val[4]))
      loc(definition, val[0], val[5])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 742)
  def _reduce_214(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2])
      loc(definition, val[0], val[2])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 747)
  def _reduce_215(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2])
      loc(definition, val[0], val[2])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 752)
  def _reduce_216(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2])
      loc(definition, val[0], val[4])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 758)
  def _reduce_217(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 764)
  def _reduce_218(val, _values, result)
            definition = Factory.TYPE_DEFINITION(val[1][:value], nil, val[3])
        loc(definition, val[0], val[4])
        result = add_definition(definition)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 769)
  def _reduce_219(val, _values, result)
            definition = Factory.TYPE_DEFINITION(val[1][:value], val[3][:value], val[5])
        loc(definition, val[0], val[6])
        result = add_definition(definition)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 778)
  def _reduce_220(val, _values, result)
         fqn = Factory.fqn(val[0][:value])
     loc(fqn, val[0])
     fqn['offset'] += 1
     fqn['length'] -= 1
     result = fqn.var
     loc(result, val[0])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 789)
  def _reduce_221(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 790)
  def _reduce_222(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 796)
  def _reduce_223(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 797)
  def _reduce_224(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 798)
  def _reduce_225(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 799)
  def _reduce_226(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 802)
  def _reduce_227(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 803)
  def _reduce_228(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 804)
  def _reduce_229(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 807)
  def _reduce_230(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 808)
  def _reduce_231(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 811)
  def _reduce_232(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 233 omitted

module_eval(<<'.,.,', 'egrammar.ra', 815)
  def _reduce_234(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

# reduce 235 omitted

module_eval(<<'.,.,', 'egrammar.ra', 820)
  def _reduce_236(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 823)
  def _reduce_237(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 824)
  def _reduce_238(val, _values, result)
     result = Factory.ARGUMENTS(val[0], val[2]) 
    result
  end
.,.,

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

module_eval(<<'.,.,', 'egrammar.ra', 841)
  def _reduce_248(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 842)
  def _reduce_249(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 844)
  def _reduce_250(val, _values, result)
     result = Factory.STRING(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 845)
  def _reduce_251(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 846)
  def _reduce_252(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 847)
  def _reduce_253(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 848)
  def _reduce_254(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 849)
  def _reduce_255(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 852)
  def _reduce_256(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 853)
  def _reduce_257(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 856)
  def _reduce_258(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 859)
  def _reduce_259(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 860)
  def _reduce_260(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 863)
  def _reduce_261(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 262 omitted

# reduce 263 omitted

module_eval(<<'.,.,', 'egrammar.ra', 870)
  def _reduce_264(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 871)
  def _reduce_265(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 872)
  def _reduce_266(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 875)
  def _reduce_267(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 876)
  def _reduce_268(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 877)
  def _reduce_269(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(val[2], val[1], val[3])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 270 omitted

# reduce 271 omitted

module_eval(<<'.,.,', 'egrammar.ra', 883)
  def _reduce_272(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 886)
  def _reduce_273(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 274 omitted

module_eval(<<'.,.,', 'egrammar.ra', 892)
  def _reduce_275(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

# reduce 295 omitted

# reduce 296 omitted

# reduce 297 omitted

# reduce 298 omitted

# reduce 299 omitted

module_eval(<<'.,.,', 'egrammar.ra', 923)
  def _reduce_300(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
    end   # module Parser
  end   # module Pops
end   # module Puppet
