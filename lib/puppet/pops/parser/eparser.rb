#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 878)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'63,74,385,-140,61,68,80,69,84,85,86,278,111,290,126,256,311,386,123',
'312,83,119,-263,-272,21,20,113,334,116,-277,110,52,112,55,291,64,12',
'91,59,44,47,279,54,45,10,11,-140,145,62,19,125,146,46,115,122,17,18',
'257,87,89,88,90,124,79,126,-263,-272,-275,123,53,335,154,-277,43,75',
'92,77,78,76,-179,-179,60,49,65,66,56,366,437,58,63,74,67,436,61,68,290',
'69,436,128,129,125,111,496,162,122,290,453,436,293,449,-275,448,124',
'21,20,113,291,116,293,110,52,112,55,139,64,12,291,59,44,47,81,54,45',
'10,11,111,163,62,19,188,283,46,115,190,17,18,142,193,449,113,448,116',
'79,110,83,112,258,126,53,368,91,123,43,75,92,77,78,-262,290,91,60,49',
'65,66,56,271,115,58,63,74,67,293,61,68,272,69,273,290,145,291,276,93',
'94,125,290,126,139,122,92,123,293,277,21,20,281,124,305,293,291,52,-262',
'55,306,64,12,291,59,44,47,142,54,45,10,11,111,139,62,19,154,324,46,125',
'309,17,18,122,-179,-179,113,309,116,79,110,124,112,313,126,53,142,126',
'123,43,75,123,77,78,128,129,83,60,49,65,66,56,91,115,58,63,74,67,91',
'61,68,91,69,164,74,-180,-180,165,93,94,125,91,126,125,122,92,123,122',
'332,21,20,154,124,-181,-181,124,52,340,55,358,64,12,359,59,44,47,361',
'54,45,10,11,111,365,62,19,-183,-183,46,125,370,17,18,122,269,268,113',
'372,116,79,110,124,112,376,126,53,378,126,123,43,75,123,77,78,269,268',
'293,60,49,65,66,56,381,115,58,63,74,67,382,61,68,290,69,98,97,269,268',
'394,93,94,125,395,126,125,122,92,123,122,396,21,20,397,124,269,268,124',
'52,400,55,281,64,131,404,59,44,47,406,54,45,381,99,111,-217,62,19,315',
'314,46,125,412,17,18,122,326,327,113,414,116,79,110,124,112,421,126',
'53,422,126,123,43,75,123,77,78,332,333,425,60,49,65,66,56,428,115,58',
'63,74,67,381,61,68,381,69,98,97,145,438,439,93,94,125,442,126,125,122',
'92,123,122,443,21,20,446,124,450,452,124,52,461,55,463,64,131,464,59',
'44,47,332,54,45,468,99,470,332,62,19,473,474,46,125,332,17,18,122,477',
'481,164,74,126,79,165,124,123,452,483,53,484,485,486,43,75,332,77,78',
'491,492,493,60,49,65,66,56,494,495,58,63,74,67,504,61,68,505,69,506',
'125,508,162,111,122,159,509,431,510,361,,,124,,,21,20,113,,116,,110',
'52,112,55,79,64,131,,59,44,47,,54,45,163,75,111,,62,19,,,46,115,,17',
'18,,,,113,,116,79,110,,112,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,115',
'58,63,74,67,,61,68,,69,,,,,111,93,94,,,,,,92,,,,21,20,113,,116,,110',
'52,112,55,,64,12,,59,44,47,,54,45,10,11,111,,62,19,,,46,115,,17,18,',
',,113,,116,79,110,,112,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,115,58',
'63,74,67,,61,68,,69,,,,,111,,,,,,,,,,,,21,20,113,,116,,110,52,112,55',
',64,12,,59,44,47,,54,45,10,11,,,62,19,,,46,115,,17,18,,,,,,,79,,,,,',
'53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,',
',,,,,,,,,,21,20,138,,,,,52,,55,,64,12,,59,44,47,,54,45,10,11,,,62,19',
',,46,,,17,18,,,,164,74,,79,165,,,,,53,,,,43,75,,77,78,,,,60,49,65,66',
'56,,,58,63,74,67,,61,68,,69,,,,162,,,159,,,,,,,,,,21,20,,,,,,52,,55',
'79,64,131,,59,44,47,,54,45,163,75,,,62,19,,,46,,,17,18,,,,164,74,,79',
'165,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69',
',,,162,,,159,,,,,,,,,,21,20,,,,,,52,,55,79,64,131,,59,44,47,,54,45,163',
'75,,,62,19,,,46,,,17,18,,,,164,74,,79,165,,,,,53,,,,43,75,,77,78,,,',
'60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,162,,,159,,,,,,,,,,21,20',
',,,,,52,,55,79,64,131,,59,44,47,,54,45,163,75,,,62,19,,,46,,,17,18,',
',,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61',
'68,172,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,12,,59,44,47,,54,45',
'10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,170,167',
'65,66,168,177,176,169,63,74,67,,61,68,179,69,,,,,,,,,,,,,,,,,21,20,',
',,,,52,,55,,64,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,',
'79,,,,,,53,,,,43,75,,77,78,,,,170,167,65,66,168,177,176,169,63,74,67',
',61,68,,69,181,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,12,,59,44,47,,54',
'45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,170',
'167,65,66,168,177,176,169,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20',
',,,,,52,,55,,64,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,',
',79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,',
'192,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,131,,59,44,47,,54,45,,,,,62',
'19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,',
',58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,12,,59',
'44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77',
'78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20',
',,,,,52,,55,,64,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,',
',79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,',
'69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,12,,59,44,47,,54,45,10,11,',
',62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66',
'56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,12',
',59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75',
',77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,64,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,',
',,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68',
',69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,12,,59,44,47,,54,45,10,11',
',,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66',
'56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,12',
',59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75',
',77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,64,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,',
',,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68',
',69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,12,,59,44,47,,54,45,10,11',
',,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66',
'56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,210,225,216,226',
'64,218,228,220,44,208,,212,206,,,,,62,19,229,224,207,,,17,205,,,,,,',
'79,,,,,227,211,,,,43,75,,77,78,,,,221,209,222,223,217,231,230,219,63',
'74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,131,,59,44,47',
',54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60',
'49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,',
'55,,64,131,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53',
',,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,',
',,,,,,,21,20,,,,,,52,,55,,64,131,,59,44,47,,54,45,,,,,62,19,,,46,,,17',
'18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67',
',61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,131,,59,44,47,,54,45',
',,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65',
'66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64',
'131,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75',
',77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,64,131,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,',
',79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,',
'69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,131,,59,44,47,,54,45,,,,,62',
'19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,',
',58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,131,,59',
'44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78',
',,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,',
',,52,,55,,64,131,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,',
',,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,',
',,,,,,,,,,,,,21,20,,,,,,52,,55,,64,131,,59,44,47,,54,45,,,,,62,19,,',
'46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63',
'74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,131,,59,44,47',
',54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60',
'49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,',
'55,,64,131,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53',
',,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,',
',,,,,,,21,20,,,,,,52,,55,,64,131,,59,44,47,,54,45,,,,,62,19,,,46,,,17',
'18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67',
',61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,131,,59,44,47,,54,45',
',,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65',
'66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64',
'131,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75',
',77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,64,131,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,',
',79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,',
'69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,131,,59,44,47,,54,45,,,,,62',
'19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,',
',58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,131,,59',
'44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78',
',,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,',
',,52,,55,,64,131,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,',
',,,53,,,253,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69',
',,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,131,,59,44,47,,54,45,,,,,62,19',
',,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58',
'63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,131,,59,44',
'47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,',
',60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,',
'52,,55,,64,131,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,',
',53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,',
',,,,,,,,,,,21,20,,,,,,52,,55,,64,131,,59,44,47,,54,45,,,,,62,19,,,46',
',,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74',
'67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,295,,,,,52,,55,,64,12,,59,44,47',
',54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,',
',,60,49,65,66,56,,,58,63,74,67,,61,68,,69,303,,,,,,,,,,,,,,,,21,20,',
',,,,52,,55,,64,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,',
'79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69',
',,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,12,,59,44,47,,54,45,10,11,,,62',
'19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,',
',58,63,74,67,,61,68,,69,181,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,12',
',59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75',
',77,78,,,,170,167,65,66,168,177,176,169,63,74,67,,61,68,,69,,,333,,',
',,,,,,,,,,,21,20,,,,,,52,,55,,64,131,,59,44,47,,54,45,,,,,62,19,,,46',
',,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74',
'67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,131,,59,44,47,,54',
'45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49',
'65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',64,131,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,',
'43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,',
',,,,21,20,,,,,,52,,55,,64,131,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18',
',,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61',
'68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,131,,59,44,47,,54,45,,',
',,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66',
'56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,12',
',59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75',
',77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,64,131,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,',
',79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,',
'69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,131,,59,44,47,,54,45,,,,,62',
'19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,',
',58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,12,,59',
'44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77',
'78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,388,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,64,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,',
',,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68',
',69,390,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,12,,59,44,47,,54,45,10',
'11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65',
'66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64',
'131,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75',
',77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,64,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,',
',,,,79,,,,,,53,,,,43,75,,77,78,,,,170,167,65,66,168,177,176,169,63,74',
'67,,61,68,,69,407,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,12,,59,44,47',
',54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,',
',,170,167,65,66,168,177,176,169,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,',
'21,20,,,,,,52,,55,,64,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18',
',,,,,,79,,,,,,53,,,,43,75,,77,78,,,,170,167,65,66,168,177,176,169,63',
'74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,12,,59,44,47',
',54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,',
',,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,',
',52,,55,,64,131,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,',
',,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,',
',,,,,,,,,,,,21,20,,,,,,52,,55,,64,131,,59,44,47,,54,45,,,,,62,19,,,46',
',,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74',
'67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,131,,59,44,47,,54',
'45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49',
'65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',64,131,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,',
'43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,',
',,,,21,20,,,,,,52,,55,,64,131,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18',
',,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61',
'68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,131,,59,44,47,,54,45,,',
',,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66',
'56,,,58,63,74,67,,61,68,,69,441,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64',
'12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43',
'75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,',
',21,20,,,,,,52,,55,,64,131,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,',
',,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61',
'68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,12,,59,44,47,,54,45,10',
'11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65',
'66,56,,,58,63,74,67,,61,68,,69,454,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',64,131,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,',
'43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,',
',,,,21,20,,,,,,52,,55,,64,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17',
'18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67',
',61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,12,,59,44,47,,54,45',
'10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49',
'65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',64,131,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,',
'43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,',
',,,,21,20,,,,,,52,,55,,64,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17',
'18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67',
',61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,131,,59,44,47,,54,45',
',,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65',
'66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64',
'12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43',
'75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,',
',21,20,,,,,,52,,55,,64,131,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,',
',,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61',
'68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,131,,59,44,47,,54,45,,',
',,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66',
'56,,,58,63,74,67,,61,68,,69,489,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64',
'12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43',
'75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,,,,,,,,,,',
',21,20,,,,,,52,,55,,64,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18',
',,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61',
'68,,69,498,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,12,,59,44,47,,54,45',
'10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49',
'65,66,56,,,58,63,74,67,,61,68,,69,500,,,,,,,,,,,,,,,,21,20,,,,,,52,',
'55,,64,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,',
'53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63,74,67,,61,68,,69,,,,,,',
',,,,,,,,,,21,20,,,,,,52,,55,,64,12,,59,44,47,,54,45,10,11,,,62,19,,',
'46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,65,66,56,,,58,63',
'74,67,,61,68,,69,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,64,131,,59,44,47',
',54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,111',
'60,49,65,66,56,,,58,,,67,107,102,113,,116,,110,,112,,103,105,104,106',
',,,,,,,,,,,,,,,115,,,,109,108,,,95,96,98,97,100,101,,93,94,111,,296',
',,92,,,,,,,107,102,113,,116,,110,,112,,103,105,104,106,,,,,99,,,,,,',
',,,,115,,,,109,108,,,95,96,98,97,100,101,,93,94,111,,297,,,92,,,,,,',
'107,102,113,,116,,110,,112,,103,105,104,106,,,,,99,,,,,,,,,,,115,,,',
'109,108,,,95,96,98,97,100,101,,93,94,111,,298,,,92,,,,,,,107,102,113',
',116,,110,,112,,103,105,104,106,,,,,99,,,,,,,,,,,115,,,,109,108,,111',
'95,96,98,97,100,101,,93,94,,,107,102,113,92,116,,110,,112,,103,105,104',
'106,,,,,,,,,,,,,,,99,115,,,,109,108,,,95,96,98,97,100,101,,93,94,,,',
',,92,,,,111,,,,,,,326,327,,,,107,102,113,330,116,111,110,,112,99,103',
'105,104,106,,,,,,113,,116,,110,,112,,,,115,,,,109,108,,,95,96,98,97',
'100,101,,93,94,115,,,111,,92,,,95,96,98,97,,,,93,94,113,,116,111,110',
'92,112,,,,,,,99,,,,113,,116,,110,,112,,,,115,,,99,,,,,95,96,98,97,,',
',93,94,115,,,111,,92,,,95,96,98,97,100,101,,93,94,113,,116,111,110,92',
'112,,,,,,,99,,,102,113,,116,,110,,112,,103,,115,,,99,,,,,95,96,98,97',
'100,101,,93,94,115,,,,,92,,111,95,96,98,97,100,101,,93,94,,,,102,113',
'92,116,111,110,,112,,103,99,,,,,,,102,113,,116,,110,,112,,103,99,115',
',,,,,,,95,96,98,97,100,101,,93,94,115,,,,,92,,111,95,96,98,97,100,101',
',93,94,,,,102,113,92,116,,110,,112,,103,99,,,,,,,,,,,,,,,,,99,115,,',
',,111,,,95,96,98,97,100,101,,93,94,107,102,113,,116,92,110,,112,,103',
'105,104,106,,,,,,,,,,,,,,,,115,99,,,,111,,,95,96,98,97,100,101,,93,94',
'107,102,113,,116,92,110,,112,,103,105,104,106,,,,,,,,,,,,,,,,115,99',
',,,108,,,95,96,98,97,100,101,111,93,94,,,336,,,92,,,,107,102,113,,116',
',110,,112,,103,105,104,106,,,,,,,,99,,,,,,,,115,,,,109,108,,111,95,96',
'98,97,100,101,,93,94,,,107,102,113,92,116,,110,,112,,103,105,104,106',
',,,,,,,,,,,,,,99,115,,,,109,108,,111,95,96,98,97,100,101,,93,94,,,107',
'102,113,92,116,,110,,112,,103,105,104,106,,,,,,,,,,,,,,,99,115,,,,109',
'108,,,95,96,98,97,100,101,111,93,94,,,,,,92,,,,107,102,113,362,116,',
'110,,112,,103,105,104,106,,,,,,,,99,,,,,,,,115,,,,109,108,,111,95,96',
'98,97,100,101,,93,94,,,107,102,113,92,116,,110,,112,,103,105,104,106',
',,,,,,,,,,,,,,99,115,,,,109,108,,111,95,96,98,97,100,101,,93,94,,,107',
'102,113,92,116,,110,,112,,103,105,104,106,,,,,,,,,,,,,,,99,115,,,,109',
'108,,111,95,96,98,97,100,101,,93,94,,,107,102,113,92,116,,110,,112,',
'103,105,104,106,,,,,,,,,,,,,,,99,115,,,,109,108,,111,95,96,98,97,100',
'101,,93,94,,,107,102,113,92,116,,110,,112,,103,105,104,106,,,,,,,,,',
',,,,,99,115,,,,109,108,,111,95,96,98,97,100,101,,93,94,,,107,102,113',
'92,116,,110,,112,,103,105,104,106,,,,,,,,,,,,,,,99,115,,,,109,108,,111',
'95,96,98,97,100,101,,93,94,,,107,102,113,92,116,,110,,112,,103,105,104',
'106,,,,,,,,,,,,,,,99,115,,,,109,108,,111,95,96,98,97,100,101,,93,94',
',,107,102,113,92,116,,110,,112,,103,105,104,106,,,,,,,,,,,,,,,99,115',
',,,109,108,,,95,96,98,97,100,101,,93,94,,348,225,347,226,92,345,228',
'349,,342,,344,346,,,,,,,229,224,350,,,,343,,,,99,,,,,,,,227,351,,,,',
',,,,,,,354,352,355,353,356,231,230,357,348,225,347,226,,345,228,349',
',342,,344,346,,,,,,,229,224,350,,,,343,,,,,,,,,,,,227,351,,,,,,,,,,',
',354,352,355,353,356,231,230,357,348,225,347,226,,345,228,349,,342,',
'344,346,,,,,,,229,224,350,,,,343,,,,,,,,,,,,227,351,,,,,,,,,,,,354,352',
'355,353,356,231,230,357,348,225,347,226,,345,228,349,,342,,344,346,',
',,,,,229,224,350,,,,343,,,,,,,,,,,,227,351,,,,,,,,,,,,354,352,355,353',
'356,231,230,357,348,225,347,226,,345,228,349,,342,,344,346,,,,,,,229',
'224,350,,,,343,,,,,,,,,,,,227,351,,,,,,,,,,,,354,352,355,353,356,231',
'230,357,348,225,347,226,,345,228,349,,342,,344,346,,,,,,,229,224,350',
',,,343,,,,,,,,,,,,227,351,,,,,,,,,,,,354,352,355,353,356,231,230,357' ]
        racc_action_table = arr = ::Array.new(10028, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,294,208,0,0,1,0,7,7,7,142,233,292,12,113,180,294,12,180,5,12,206',
'207,0,0,233,215,233,222,233,0,233,0,292,0,0,8,0,0,0,142,0,0,0,0,208',
'50,0,0,12,51,0,233,12,0,0,113,7,7,7,7,12,0,55,206,207,223,55,0,215,58',
'222,0,0,233,0,0,0,208,208,0,0,0,0,0,268,373,0,4,4,0,373,4,4,268,4,391',
'16,16,55,234,478,306,55,145,391,478,268,388,223,388,55,4,4,234,268,234',
'145,234,4,234,4,49,4,4,145,4,4,4,4,4,4,4,4,237,306,4,4,75,145,4,234',
'76,4,4,49,80,446,237,446,237,4,237,82,237,114,218,4,269,117,218,4,4',
'234,4,4,218,269,118,4,4,4,4,4,134,237,4,10,10,4,269,10,10,135,10,137',
'381,138,269,140,237,237,218,190,56,167,218,237,56,381,141,10,10,144',
'218,155,190,381,10,218,10,157,10,10,190,10,10,10,167,10,10,10,10,238',
'209,10,10,169,190,10,56,171,10,10,56,47,47,238,178,238,10,238,56,238',
'183,60,10,209,127,60,10,10,127,10,10,57,57,194,10,10,10,10,10,199,238',
'10,11,11,10,200,11,11,201,11,188,188,61,61,188,238,238,60,202,131,127',
'60,238,131,127,204,11,11,219,60,62,62,127,11,255,11,260,11,11,262,11',
'11,11,263,11,11,11,11,235,266,11,11,63,63,11,131,270,11,11,131,120,120',
'235,274,235,11,235,131,235,279,153,11,280,168,153,11,11,168,11,11,151',
'151,281,11,11,11,11,11,284,235,11,17,17,11,290,17,17,291,17,235,235',
'152,152,299,235,235,153,300,170,168,153,235,170,168,301,17,17,302,153',
'166,166,168,17,304,17,307,17,17,308,17,17,17,310,17,17,323,235,236,328',
'17,17,185,185,17,170,329,17,17,170,412,412,236,331,236,17,236,170,236',
'337,216,17,339,217,216,17,17,217,17,17,341,343,360,17,17,17,17,17,363',
'236,17,18,18,17,367,18,18,369,18,236,236,372,375,376,236,236,216,379',
'221,217,216,236,221,217,380,18,18,387,216,389,390,217,18,398,18,403',
'18,18,411,18,18,18,413,18,18,420,236,424,427,18,18,432,433,18,221,434',
'18,18,221,440,449,59,59,365,18,59,221,365,450,452,18,453,456,459,18',
'18,460,18,18,466,467,472,18,18,18,18,18,475,476,18,19,19,18,487,19,19',
'488,19,490,365,497,59,130,365,59,499,365,501,507,,,365,,,19,19,130,',
'130,,130,19,130,19,59,19,19,,19,19,19,,19,19,59,59,239,,19,19,,,19,130',
',19,19,,,,239,,239,19,239,,239,,,19,,,,19,19,,19,19,,,,19,19,19,19,19',
',239,19,20,20,19,,20,20,,20,,,,,132,239,239,,,,,,239,,,,20,20,132,,132',
',132,20,132,20,,20,20,,20,20,20,,20,20,20,20,133,,20,20,,,20,132,,20',
'20,,,,133,,133,20,133,,133,,,20,,,,20,20,,20,20,,,,20,20,20,20,20,,133',
'20,21,21,20,,21,21,,21,,,,,232,,,,,,,,,,,,21,21,232,,232,,232,21,232',
'21,,21,21,,21,21,21,,21,21,21,21,,,21,21,,,21,232,,21,21,,,,,,,21,,',
',,,21,,,,21,21,,21,21,,,,21,21,21,21,21,,,21,48,48,21,,48,48,,48,,,',
',,,,,,,,,,,,,48,48,48,,,,,48,,48,,48,48,,48,48,48,,48,48,48,48,,,48',
'48,,,48,,,48,48,,,,220,220,,48,220,,,,,48,,,,48,48,,48,48,,,,48,48,48',
'48,48,,,48,52,52,48,,52,52,,52,,,,220,,,220,,,,,,,,,,52,52,,,,,,52,',
'52,220,52,52,,52,52,52,,52,52,220,220,,,52,52,,,52,,,52,52,,,,305,305',
',52,305,,,,,52,,,,52,52,,52,52,,,,52,52,52,52,52,,,52,53,53,52,,53,53',
',53,,,,305,,,305,,,,,,,,,,53,53,,,,,,53,,53,305,53,53,,53,53,53,,53',
'53,305,305,,,53,53,,,53,,,53,53,,,,400,400,,53,400,,,,,53,,,,53,53,',
'53,53,,,,53,53,53,53,53,,,53,54,54,53,,54,54,,54,,,,400,,,400,,,,,,',
',,,54,54,,,,,,54,,54,400,54,54,,54,54,54,,54,54,400,400,,,54,54,,,54',
',,54,54,,,,,,,54,,,,,,54,,,,54,54,,54,54,,,,54,54,54,54,54,,,54,67,67',
'54,,67,67,67,67,,,,,,,,,,,,,,,,,67,67,,,,,,67,,67,,67,67,,67,67,67,',
'67,67,67,67,,,67,67,,,67,,,67,67,,,,,,,67,,,,,,67,,,,67,67,,67,67,,',
',67,67,67,67,67,67,67,67,68,68,67,,68,68,68,68,,,,,,,,,,,,,,,,,68,68',
',,,,,68,,68,,68,68,,68,68,68,,68,68,68,68,,,68,68,,,68,,,68,68,,,,,',
',68,,,,,,68,,,,68,68,,68,68,,,,68,68,68,68,68,68,68,68,69,69,68,,69',
'69,,69,69,,,,,,,,,,,,,,,,69,69,,,,,,69,,69,,69,69,,69,69,69,,69,69,69',
'69,,,69,69,,,69,,,69,69,,,,,,,69,,,,,,69,,,,69,69,,69,69,,,,69,69,69',
'69,69,69,69,69,73,73,69,,73,73,,73,,,,,,,,,,,,,,,,,73,73,,,,,,73,,73',
',73,73,,73,73,73,,73,73,73,73,,,73,73,,,73,,,73,73,,,,,,,73,,,,,,73',
',,,73,73,,73,73,,,,73,73,73,73,73,,,73,78,78,73,,78,78,,78,,,,,,,,,',
',,,,,,,78,78,,,,,,78,,78,,78,78,,78,78,78,,78,78,,,,,78,78,,,78,,,78',
'78,,,,,,,78,,,,,,78,,,,78,78,,78,78,,,,78,78,78,78,78,,,78,81,81,78',
',81,81,,81,,,,,,,,,,,,,,,,,81,81,,,,,,81,,81,,81,81,,81,81,81,,81,81',
'81,81,,,81,81,,,81,,,81,81,,,,,,,81,,,,,,81,,,,81,81,,81,81,,,,81,81',
'81,81,81,,,81,83,83,81,,83,83,,83,,,,,,,,,,,,,,,,,83,83,,,,,,83,,83',
',83,83,,83,83,83,,83,83,83,83,,,83,83,,,83,,,83,83,,,,,,,83,,,,,,83',
',,,83,83,,83,83,,,,83,83,83,83,83,,,83,84,84,83,,84,84,,84,,,,,,,,,',
',,,,,,,84,84,,,,,,84,,84,,84,84,,84,84,84,,84,84,84,84,,,84,84,,,84',
',,84,84,,,,,,,84,,,,,,84,,,,84,84,,84,84,,,,84,84,84,84,84,,,84,85,85',
'84,,85,85,,85,,,,,,,,,,,,,,,,,85,85,,,,,,85,,85,,85,85,,85,85,85,,85',
'85,85,85,,,85,85,,,85,,,85,85,,,,,,,85,,,,,,85,,,,85,85,,85,85,,,,85',
'85,85,85,85,,,85,86,86,85,,86,86,,86,,,,,,,,,,,,,,,,,86,86,,,,,,86,',
'86,,86,86,,86,86,86,,86,86,86,86,,,86,86,,,86,,,86,86,,,,,,,86,,,,,',
'86,,,,86,86,,86,86,,,,86,86,86,86,86,,,86,87,87,86,,87,87,,87,,,,,,',
',,,,,,,,,,87,87,,,,,,87,,87,,87,87,,87,87,87,,87,87,87,87,,,87,87,,',
'87,,,87,87,,,,,,,87,,,,,,87,,,,87,87,,87,87,,,,87,87,87,87,87,,,87,88',
'88,87,,88,88,,88,,,,,,,,,,,,,,,,,88,88,,,,,,88,,88,,88,88,,88,88,88',
',88,88,88,88,,,88,88,,,88,,,88,88,,,,,,,88,,,,,,88,,,,88,88,,88,88,',
',,88,88,88,88,88,,,88,89,89,88,,89,89,,89,,,,,,,,,,,,,,,,,89,89,,,,',
',89,,89,,89,89,,89,89,89,,89,89,89,89,,,89,89,,,89,,,89,89,,,,,,,89',
',,,,,89,,,,89,89,,89,89,,,,89,89,89,89,89,,,89,90,90,89,,90,90,,90,',
',,,,,,,,,,,,,,,90,90,,,,,,90,,90,,90,90,,90,90,90,,90,90,90,90,,,90',
'90,,,90,,,90,90,,,,,,,90,,,,,,90,,,,90,90,,90,90,,,,90,90,90,90,90,',
',90,91,91,90,,91,91,,91,,,,,,,,,,,,,,,,,91,91,,,,,,91,91,91,91,91,91',
'91,91,91,91,,91,91,,,,,91,91,91,91,91,,,91,91,,,,,,,91,,,,,91,91,,,',
'91,91,,91,91,,,,91,91,91,91,91,91,91,91,92,92,91,,92,92,,92,,,,,,,,',
',,,,,,,,92,92,,,,,,92,,92,,92,92,,92,92,92,,92,92,,,,,92,92,,,92,,,92',
'92,,,,,,,92,,,,,,92,,,,92,92,,92,92,,,,92,92,92,92,92,,,92,93,93,92',
',93,93,,93,,,,,,,,,,,,,,,,,93,93,,,,,,93,,93,,93,93,,93,93,93,,93,93',
',,,,93,93,,,93,,,93,93,,,,,,,93,,,,,,93,,,,93,93,,93,93,,,,93,93,93',
'93,93,,,93,94,94,93,,94,94,,94,,,,,,,,,,,,,,,,,94,94,,,,,,94,,94,,94',
'94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,94,,,,,,,94,,,,,,94,,,,94,94',
',94,94,,,,94,94,94,94,94,,,94,95,95,94,,95,95,,95,,,,,,,,,,,,,,,,,95',
'95,,,,,,95,,95,,95,95,,95,95,95,,95,95,,,,,95,95,,,95,,,95,95,,,,,,',
'95,,,,,,95,,,,95,95,,95,95,,,,95,95,95,95,95,,,95,96,96,95,,96,96,,96',
',,,,,,,,,,,,,,,,96,96,,,,,,96,,96,,96,96,,96,96,96,,96,96,,,,,96,96',
',,96,,,96,96,,,,,,,96,,,,,,96,,,,96,96,,96,96,,,,96,96,96,96,96,,,96',
'97,97,96,,97,97,,97,,,,,,,,,,,,,,,,,97,97,,,,,,97,,97,,97,97,,97,97',
'97,,97,97,,,,,97,97,,,97,,,97,97,,,,,,,97,,,,,,97,,,,97,97,,97,97,,',
',97,97,97,97,97,,,97,98,98,97,,98,98,,98,,,,,,,,,,,,,,,,,98,98,,,,,',
'98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,98,,,,,,,98,,,,,',
'98,,,,98,98,,98,98,,,,98,98,98,98,98,,,98,99,99,98,,99,99,,99,,,,,,',
',,,,,,,,,,99,99,,,,,,99,,99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99,',
',99,99,,,,,,,99,,,,,,99,,,,99,99,,99,99,,,,99,99,99,99,99,,,99,100,100',
'99,,100,100,,100,,,,,,,,,,,,,,,,,100,100,,,,,,100,,100,,100,100,,100',
'100,100,,100,100,,,,,100,100,,,100,,,100,100,,,,,,,100,,,,,,100,,,,100',
'100,,100,100,,,,100,100,100,100,100,,,100,101,101,100,,101,101,,101',
',,,,,,,,,,,,,,,,101,101,,,,,,101,,101,,101,101,,101,101,101,,101,101',
',,,,101,101,,,101,,,101,101,,,,,,,101,,,,,,101,,,,101,101,,101,101,',
',,101,101,101,101,101,,,101,102,102,101,,102,102,,102,,,,,,,,,,,,,,',
',,102,102,,,,,,102,,102,,102,102,,102,102,102,,102,102,,,,,102,102,',
',102,,,102,102,,,,,,,102,,,,,,102,,,,102,102,,102,102,,,,102,102,102',
'102,102,,,102,103,103,102,,103,103,,103,,,,,,,,,,,,,,,,,103,103,,,,',
',103,,103,,103,103,,103,103,103,,103,103,,,,,103,103,,,103,,,103,103',
',,,,,,103,,,,,,103,,,,103,103,,103,103,,,,103,103,103,103,103,,,103',
'104,104,103,,104,104,,104,,,,,,,,,,,,,,,,,104,104,,,,,,104,,104,,104',
'104,,104,104,104,,104,104,,,,,104,104,,,104,,,104,104,,,,,,,104,,,,',
',104,,,,104,104,,104,104,,,,104,104,104,104,104,,,104,105,105,104,,105',
'105,,105,,,,,,,,,,,,,,,,,105,105,,,,,,105,,105,,105,105,,105,105,105',
',105,105,,,,,105,105,,,105,,,105,105,,,,,,,105,,,,,,105,,,,105,105,',
'105,105,,,,105,105,105,105,105,,,105,106,106,105,,106,106,,106,,,,,',
',,,,,,,,,,,106,106,,,,,,106,,106,,106,106,,106,106,106,,106,106,,,,',
'106,106,,,106,,,106,106,,,,,,,106,,,,,,106,,,,106,106,,106,106,,,,106',
'106,106,106,106,,,106,107,107,106,,107,107,,107,,,,,,,,,,,,,,,,,107',
'107,,,,,,107,,107,,107,107,,107,107,107,,107,107,,,,,107,107,,,107,',
',107,107,,,,,,,107,,,,,,107,,,,107,107,,107,107,,,,107,107,107,107,107',
',,107,108,108,107,,108,108,,108,,,,,,,,,,,,,,,,,108,108,,,,,,108,,108',
',108,108,,108,108,108,,108,108,,,,,108,108,,,108,,,108,108,,,,,,,108',
',,,,,108,,,,108,108,,108,108,,,,108,108,108,108,108,,,108,109,109,108',
',109,109,,109,,,,,,,,,,,,,,,,,109,109,,,,,,109,,109,,109,109,,109,109',
'109,,109,109,,,,,109,109,,,109,,,109,109,,,,,,,109,,,,,,109,,,,109,109',
',109,109,,,,109,109,109,109,109,,,109,110,110,109,,110,110,,110,,,,',
',,,,,,,,,,,,110,110,,,,,,110,,110,,110,110,,110,110,110,,110,110,,,',
',110,110,,,110,,,110,110,,,,,,,110,,,,,,110,,,110,110,110,,110,110,',
',,110,110,110,110,110,,,110,111,111,110,,111,111,,111,,,,,,,,,,,,,,',
',,111,111,,,,,,111,,111,,111,111,,111,111,111,,111,111,,,,,111,111,',
',111,,,111,111,,,,,,,111,,,,,,111,,,,111,111,,111,111,,,,111,111,111',
'111,111,,,111,115,115,111,,115,115,,115,,,,,,,,,,,,,,,,,115,115,,,,',
',115,,115,,115,115,,115,115,115,,115,115,,,,,115,115,,,115,,,115,115',
',,,,,,115,,,,,,115,,,,115,115,,115,115,,,,115,115,115,115,115,,,115',
'116,116,115,,116,116,,116,,,,,,,,,,,,,,,,,116,116,,,,,,116,,116,,116',
'116,,116,116,116,,116,116,,,,,116,116,,,116,,,116,116,,,,,,,116,,,,',
',116,,,,116,116,,116,116,,,,116,116,116,116,116,,,116,119,119,116,,119',
'119,,119,,,,,,,,,,,,,,,,,119,119,,,,,,119,,119,,119,119,,119,119,119',
',119,119,,,,,119,119,,,119,,,119,119,,,,,,,119,,,,,,119,,,,119,119,',
'119,119,,,,119,119,119,119,119,,,119,146,146,119,,146,146,,146,,,,,',
',,,,,,,,,,,146,146,146,,,,,146,,146,,146,146,,146,146,146,,146,146,146',
'146,,,146,146,,,146,,,146,146,,,,,,,146,,,,,,146,,,,146,146,,146,146',
',,,146,146,146,146,146,,,146,154,154,146,,154,154,,154,154,,,,,,,,,',
',,,,,,154,154,,,,,,154,,154,,154,154,,154,154,154,,154,154,154,154,',
',154,154,,,154,,,154,154,,,,,,,154,,,,,,154,,,,154,154,,154,154,,,,154',
'154,154,154,154,,,154,189,189,154,,189,189,,189,,,,,,,,,,,,,,,,,189',
'189,,,,,,189,,189,,189,189,,189,189,189,,189,189,189,189,,,189,189,',
',189,,,189,189,,,,,,,189,,,,,,189,,,,189,189,,189,189,,,,189,189,189',
'189,189,,,189,192,192,189,,192,192,,192,192,,,,,,,,,,,,,,,,192,192,',
',,,,192,,192,,192,192,,192,192,192,,192,192,192,192,,,192,192,,,192',
',,192,192,,,,,,,192,,,,,,192,,,,192,192,,192,192,,,,192,192,192,192',
'192,192,192,192,205,205,192,,205,205,,205,,,205,,,,,,,,,,,,,,205,205',
',,,,,205,,205,,205,205,,205,205,205,,205,205,,,,,205,205,,,205,,,205',
'205,,,,,,,205,,,,,,205,,,,205,205,,205,205,,,,205,205,205,205,205,,',
'205,210,210,205,,210,210,,210,,,,,,,,,,,,,,,,,210,210,,,,,,210,,210',
',210,210,,210,210,210,,210,210,,,,,210,210,,,210,,,210,210,,,,,,,210',
',,,,,210,,,,210,210,,210,210,,,,210,210,210,210,210,,,210,211,211,210',
',211,211,,211,,,,,,,,,,,,,,,,,211,211,,,,,,211,,211,,211,211,,211,211',
'211,,211,211,,,,,211,211,,,211,,,211,211,,,,,,,211,,,,,,211,,,,211,211',
',211,211,,,,211,211,211,211,211,,,211,212,212,211,,212,212,,212,,,,',
',,,,,,,,,,,,212,212,,,,,,212,,212,,212,212,,212,212,212,,212,212,,,',
',212,212,,,212,,,212,212,,,,,,,212,,,,,,212,,,,212,212,,212,212,,,,212',
'212,212,212,212,,,212,253,253,212,,253,253,,253,,,,,,,,,,,,,,,,,253',
'253,,,,,,253,,253,,253,253,,253,253,253,,253,253,,,,,253,253,,,253,',
',253,253,,,,,,,253,,,,,,253,,,,253,253,,253,253,,,,253,253,253,253,253',
',,253,273,273,253,,273,273,,273,,,,,,,,,,,,,,,,,273,273,,,,,,273,,273',
',273,273,,273,273,273,,273,273,273,273,,,273,273,,,273,,,273,273,,,',
',,,273,,,,,,273,,,,273,273,,273,273,,,,273,273,273,273,273,,,273,276',
'276,273,,276,276,,276,,,,,,,,,,,,,,,,,276,276,,,,,,276,,276,,276,276',
',276,276,276,,276,276,,,,,276,276,,,276,,,276,276,,,,,,,276,,,,,,276',
',,,276,276,,276,276,,,,276,276,276,276,276,,,276,277,277,276,,277,277',
',277,,,,,,,,,,,,,,,,,277,277,,,,,,277,,277,,277,277,,277,277,277,,277',
'277,,,,,277,277,,,277,,,277,277,,,,,,,277,,,,,,277,,,,277,277,,277,277',
',,,277,277,277,277,277,,,277,278,278,277,,278,278,,278,,,,,,,,,,,,,',
',,,278,278,,,,,,278,,278,,278,278,,278,278,278,,278,278,278,278,,,278',
'278,,,278,,,278,278,,,,,,,278,,,,,,278,,,,278,278,,278,278,,,,278,278',
'278,278,278,,,278,296,296,278,,296,296,,296,296,,,,,,,,,,,,,,,,296,296',
',,,,,296,,296,,296,296,,296,296,296,,296,296,296,296,,,296,296,,,296',
',,296,296,,,,,,,296,,,,,,296,,,,296,296,,296,296,,,,296,296,296,296',
'296,,,296,297,297,296,,297,297,,297,297,,,,,,,,,,,,,,,,297,297,,,,,',
'297,,297,,297,297,,297,297,297,,297,297,297,297,,,297,297,,,297,,,297',
'297,,,,,,,297,,,,,,297,,,,297,297,,297,297,,,,297,297,297,297,297,,',
'297,298,298,297,,298,298,,298,,,,,,,,,,,,,,,,,298,298,,,,,,298,,298',
',298,298,,298,298,298,,298,298,,,,,298,298,,,298,,,298,298,,,,,,,298',
',,,,,298,,,,298,298,,298,298,,,,298,298,298,298,298,,,298,309,309,298',
',309,309,,309,,,,,,,,,,,,,,,,,309,309,,,,,,309,,309,,309,309,,309,309',
'309,,309,309,309,309,,,309,309,,,309,,,309,309,,,,,,,309,,,,,,309,,',
',309,309,,309,309,,,,309,309,309,309,309,309,309,309,312,312,309,,312',
'312,,312,312,,,,,,,,,,,,,,,,312,312,,,,,,312,,312,,312,312,,312,312',
'312,,312,312,312,312,,,312,312,,,312,,,312,312,,,,,,,312,,,,,,312,,',
',312,312,,312,312,,,,312,312,312,312,312,312,312,312,313,313,312,,313',
'313,,313,,,,,,,,,,,,,,,,,313,313,,,,,,313,,313,,313,313,,313,313,313',
',313,313,313,313,,,313,313,,,313,,,313,313,,,,,,,313,,,,,,313,,,,313',
'313,,313,313,,,,313,313,313,313,313,313,313,313,318,318,313,,318,318',
',318,,,,,,,,,,,,,,,,,318,318,,,,,,318,,318,,318,318,,318,318,318,,318',
'318,318,318,,,318,318,,,318,,,318,318,,,,,,,318,,,,,,318,,,,318,318',
',318,318,,,,318,318,318,318,318,,,318,333,333,318,,333,333,,333,,,,',
',,,,,,,,,,,,333,333,,,,,,333,,333,,333,333,,333,333,333,,333,333,,,',
',333,333,,,333,,,333,333,,,,,,,333,,,,,,333,,,,333,333,,333,333,,,,333',
'333,333,333,333,,,333,334,334,333,,334,334,,334,,,,,,,,,,,,,,,,,334',
'334,,,,,,334,,334,,334,334,,334,334,334,,334,334,,,,,334,334,,,334,',
',334,334,,,,,,,334,,,,,,334,,,,334,334,,334,334,,,,334,334,334,334,334',
',,334,335,335,334,,335,335,,335,,,,,,,,,,,,,,,,,335,335,,,,,,335,,335',
',335,335,,335,335,335,,335,335,,,,,335,335,,,335,,,335,335,,,,,,,335',
',,,,,335,,,,335,335,,335,335,,,,335,335,335,335,335,,,335,336,336,335',
',336,336,,336,,,,,,,,,,,,,,,,,336,336,,,,,,336,,336,,336,336,,336,336',
'336,,336,336,,,,,336,336,,,336,,,336,336,,,,,,,336,,,,,,336,,,,336,336',
',336,336,,,,336,336,336,336,336,,,336,340,340,336,,340,340,,340,,,,',
',,,,,,,,,,,,340,340,,,,,,340,,340,,340,340,,340,340,340,,340,340,,,',
',340,340,,,340,,,340,340,,,,,,,340,,,,,,340,,,,340,340,,340,340,,,,340',
'340,340,340,340,,,340,361,361,340,,361,361,,361,,,,,,,,,,,,,,,,,361',
'361,,,,,,361,,361,,361,361,,361,361,361,,361,361,,,,,361,361,,,361,',
',361,361,,,,,,,361,,,,,,361,,,,361,361,,361,361,,,,361,361,361,361,361',
',,361,378,378,361,,378,378,,378,378,,,,,,,,,,,,,,,,378,378,,,,,,378',
',378,,378,378,,378,378,378,,378,378,378,378,,,378,378,,,378,,,378,378',
',,,,,,378,,,,,,378,,,,378,378,,378,378,,,,378,378,378,378,378,,,378',
'382,382,378,,382,382,,382,,,,,,,,,,,,,,,,,382,382,,,,,,382,,382,,382',
'382,,382,382,382,,382,382,,,,,382,382,,,382,,,382,382,,,,,,,382,,,,',
',382,,,,382,382,,382,382,,,,382,382,382,382,382,,,382,385,385,382,,385',
'385,,385,,,,,,,,,,,,,,,,,385,385,,,,,,385,,385,,385,385,,385,385,385',
',385,385,385,385,,,385,385,,,385,,,385,385,,,,,,,385,,,,,,385,,,,385',
'385,,385,385,,,,385,385,385,385,385,,,385,392,392,385,,392,392,,392',
'392,,,,,,,,,,,,,,,,392,392,,,,,,392,,392,,392,392,,392,392,392,,392',
'392,,,,,392,392,,,392,,,392,392,,,,,,,392,,,,,,392,,,,392,392,,392,392',
',,,392,392,392,392,392,,,392,394,394,392,,394,394,,394,,,,,,,,,,,,,',
',,,394,394,,,,,,394,,394,,394,394,,394,394,394,,394,394,394,394,,,394',
'394,,,394,,,394,394,,,,,,,394,,,,,,394,,,,394,394,,394,394,,,,394,394',
'394,394,394,,,394,395,395,394,,395,395,,395,,,,,,,,,,,,,,,,,395,395',
',,,,,395,,395,,395,395,,395,395,395,,395,395,395,395,,,395,395,,,395',
',,395,395,,,,,,,395,,,,,,395,,,,395,395,,395,395,,,,395,395,395,395',
'395,,,395,421,421,395,,421,421,,421,,,,,,,,,,,,,,,,,421,421,,,,,,421',
',421,,421,421,,421,421,421,,421,421,,,,,421,421,,,421,,,421,421,,,,',
',,421,,,,,,421,,,,421,421,,421,421,,,,421,421,421,421,421,,,421,428',
'428,421,,428,428,,428,,,,,,,,,,,,,,,,,428,428,,,,,,428,,428,,428,428',
',428,428,428,,428,428,428,428,,,428,428,,,428,,,428,428,,,,,,,428,,',
',,,428,,,,428,428,,428,428,,,,428,428,428,428,428,,,428,436,436,428',
',436,436,,436,,,,,,,,,,,,,,,,,436,436,,,,,,436,,436,,436,436,,436,436',
'436,,436,436,,,,,436,436,,,436,,,436,436,,,,,,,436,,,,,,436,,,,436,436',
',436,436,,,,436,436,436,436,436,,,436,439,439,436,,439,439,,439,,,,',
',,,,,,,,,,,,439,439,,,,,,439,,439,,439,439,,439,439,439,,439,439,439',
'439,,,439,439,,,439,,,439,439,,,,,,,439,,,,,,439,,,,439,439,,439,439',
',,,439,439,439,439,439,,,439,442,442,439,,442,442,,442,,,,,,,,,,,,,',
',,,442,442,,,,,,442,,442,,442,442,,442,442,442,,442,442,,,,,442,442',
',,442,,,442,442,,,,,,,442,,,,,,442,,,,442,442,,442,442,,,,442,442,442',
'442,442,,,442,448,448,442,,448,448,,448,,,,,,,,,,,,,,,,,448,448,,,,',
',448,,448,,448,448,,448,448,448,,448,448,,,,,448,448,,,448,,,448,448',
',,,,,,448,,,,,,448,,,,448,448,,448,448,,,,448,448,448,448,448,,,448',
'461,461,448,,461,461,,461,461,,,,,,,,,,,,,,,,461,461,,,,,,461,,461,',
'461,461,,461,461,461,,461,461,461,461,,,461,461,,,461,,,461,461,,,,',
',,461,,,,,,461,,,,461,461,,461,461,,,,461,461,461,461,461,,,461,463',
'463,461,,463,463,,463,,,,,,,,,,,,,,,,,463,463,,,,,,463,,463,,463,463',
',463,463,463,,463,463,463,463,,,463,463,,,463,,,463,463,,,,,,,463,,',
',,,463,,,,463,463,,463,463,,,,463,463,463,463,463,,,463,481,481,463',
',481,481,,481,481,,,,,,,,,,,,,,,,481,481,,,,,,481,,481,,481,481,,481',
'481,481,,481,481,481,481,,,481,481,,,481,,,481,481,,,,,,,481,,,,,,481',
',,,481,481,,481,481,,,,481,481,481,481,481,,,481,483,483,481,,483,483',
',483,483,,,,,,,,,,,,,,,,483,483,,,,,,483,,483,,483,483,,483,483,483',
',483,483,483,483,,,483,483,,,483,,,483,483,,,,,,,483,,,,,,483,,,,483',
'483,,483,483,,,,483,483,483,483,483,,,483,484,484,483,,484,484,,484',
',,,,,,,,,,,,,,,,484,484,,,,,,484,,484,,484,484,,484,484,484,,484,484',
'484,484,,,484,484,,,484,,,484,484,,,,,,,484,,,,,,484,,,,484,484,,484',
'484,,,,484,484,484,484,484,,,484,492,492,484,,492,492,,492,,,,,,,,,',
',,,,,,,492,492,,,,,,492,,492,,492,492,,492,492,492,,492,492,,,,,492',
'492,,,492,,,492,492,,,,,,,492,,,,,,492,,,,492,492,,492,492,,,9,492,492',
'492,492,492,,,492,,,492,9,9,9,,9,,9,,9,,9,9,9,9,,,,,,,,,,,,,,,,9,,,',
'9,9,,,9,9,9,9,9,9,,9,9,147,,147,,,9,,,,,,,147,147,147,,147,,147,,147',
',147,147,147,147,,,,,9,,,,,,,,,,,147,,,,147,147,,,147,147,147,147,147',
'147,,147,147,149,,149,,,147,,,,,,,149,149,149,,149,,149,,149,,149,149',
'149,149,,,,,147,,,,,,,,,,,149,,,,149,149,,,149,149,149,149,149,149,',
'149,149,150,,150,,,149,,,,,,,150,150,150,,150,,150,,150,,150,150,150',
'150,,,,,149,,,,,,,,,,,150,,,,150,150,,191,150,150,150,150,150,150,,150',
'150,,,191,191,191,150,191,,191,,191,,191,191,191,191,,,,,,,,,,,,,,,150',
'191,,,,191,191,,,191,191,191,191,191,191,,191,191,,,,,,191,,,,203,,',
',,,,191,191,,,,203,203,203,203,203,240,203,,203,191,203,203,203,203',
',,,,,240,,240,,240,,240,,,,203,,,,203,203,,,203,203,203,203,203,203',
',203,203,240,,,241,,203,,,240,240,240,240,,,,240,240,241,,241,242,241',
'240,241,,,,,,,203,,,,242,,242,,242,,242,,,,241,,,240,,,,,241,241,241',
'241,,,,241,241,242,,,243,,241,,,242,242,242,242,242,242,,242,242,243',
',243,244,243,242,243,,,,,,,241,,,244,244,,244,,244,,244,,244,,243,,',
'242,,,,,243,243,243,243,243,243,,243,243,244,,,,,243,,245,244,244,244',
'244,244,244,,244,244,,,,245,245,244,245,246,245,,245,,245,243,,,,,,',
'246,246,,246,,246,,246,,246,244,245,,,,,,,,245,245,245,245,245,245,',
'245,245,246,,,,,245,,247,246,246,246,246,246,246,,246,246,,,,247,247',
'246,247,,247,,247,,247,245,,,,,,,,,,,,,,,,,246,247,,,,,248,,,247,247',
'247,247,247,247,,247,247,248,248,248,,248,247,248,,248,,248,248,248',
'248,,,,,,,,,,,,,,,,248,247,,,,249,,,248,248,248,248,248,248,,248,248',
'249,249,249,,249,248,249,,249,,249,249,249,249,,,,,,,,,,,,,,,,249,248',
',,,249,,,249,249,249,249,249,249,250,249,249,,,250,,,249,,,,250,250',
'250,,250,,250,,250,,250,250,250,250,,,,,,,,249,,,,,,,,250,,,,250,250',
',254,250,250,250,250,250,250,,250,250,,,254,254,254,250,254,,254,,254',
',254,254,254,254,,,,,,,,,,,,,,,250,254,,,,254,254,,259,254,254,254,254',
'254,254,,254,254,,,259,259,259,254,259,,259,,259,,259,259,259,259,,',
',,,,,,,,,,,,254,259,,,,259,259,,,259,259,259,259,259,259,264,259,259',
',,,,,259,,,,264,264,264,264,264,,264,,264,,264,264,264,264,,,,,,,,259',
',,,,,,,264,,,,264,264,,374,264,264,264,264,264,264,,264,264,,,374,374',
'374,264,374,,374,,374,,374,374,374,374,,,,,,,,,,,,,,,264,374,,,,374',
'374,,416,374,374,374,374,374,374,,374,374,,,416,416,416,374,416,,416',
',416,,416,416,416,416,,,,,,,,,,,,,,,374,416,,,,416,416,,417,416,416',
'416,416,416,416,,416,416,,,417,417,417,416,417,,417,,417,,417,417,417',
'417,,,,,,,,,,,,,,,416,417,,,,417,417,,418,417,417,417,417,417,417,,417',
'417,,,418,418,418,417,418,,418,,418,,418,418,418,418,,,,,,,,,,,,,,,417',
'418,,,,418,418,,419,418,418,418,418,418,418,,418,418,,,419,419,419,418',
'419,,419,,419,,419,419,419,419,,,,,,,,,,,,,,,418,419,,,,419,419,,423',
'419,419,419,419,419,419,,419,419,,,423,423,423,419,423,,423,,423,,423',
'423,423,423,,,,,,,,,,,,,,,419,423,,,,423,423,,445,423,423,423,423,423',
'423,,423,423,,,445,445,445,423,445,,445,,445,,445,445,445,445,,,,,,',
',,,,,,,,423,445,,,,445,445,,,445,445,445,445,445,445,,445,445,,258,258',
'258,258,445,258,258,258,,258,,258,258,,,,,,,258,258,258,,,,258,,,,445',
',,,,,,,258,258,,,,,,,,,,,,258,258,258,258,258,258,258,258,330,330,330',
'330,,330,330,330,,330,,330,330,,,,,,,330,330,330,,,,330,,,,,,,,,,,,330',
'330,,,,,,,,,,,,330,330,330,330,330,330,330,330,332,332,332,332,,332',
'332,332,,332,,332,332,,,,,,,332,332,332,,,,332,,,,,,,,,,,,332,332,,',
',,,,,,,,,332,332,332,332,332,332,332,332,362,362,362,362,,362,362,362',
',362,,362,362,,,,,,,362,362,362,,,,362,,,,,,,,,,,,362,362,,,,,,,,,,',
',362,362,362,362,362,362,362,362,370,370,370,370,,370,370,370,,370,',
'370,370,,,,,,,370,370,370,,,,370,,,,,,,,,,,,370,370,,,,,,,,,,,,370,370',
'370,370,370,370,370,370,396,396,396,396,,396,396,396,,396,,396,396,',
',,,,,396,396,396,,,,396,,,,,,,,,,,,396,396,,,,,,,,,,,,396,396,396,396',
'396,396,396,396' ]
        racc_action_check = arr = ::Array.new(10028, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,     6,   nil,   nil,    87,     7,   nil,    -8,    28,  8439,
   176,   265,    12,   nil,   nil,   nil,    10,   354,   443,   532,
   621,   710,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   148,   799,    96,
   -25,    24,   888,   977,  1066,    62,   193,   168,    62,   503,
   244,   189,   207,   229,   nil,   nil,   nil,  1155,  1244,  1333,
   nil,   nil,   nil,  1422,   nil,    62,    71,   nil,  1511,   nil,
   147,  1600,   141,  1689,  1778,  1867,  1956,  2045,  2134,  2223,
  2312,  2401,  2490,  2579,  2668,  2757,  2846,  2935,  3024,  3113,
  3202,  3291,  3380,  3469,  3558,  3647,  3736,  3825,  3914,  4003,
  4092,  4181,   nil,   -27,   147,  4270,  4359,   151,   160,  4448,
   299,   nil,   nil,   nil,   nil,   nil,   nil,   247,   nil,   nil,
   539,   282,   628,   662,   147,   156,   nil,   173,   116,   nil,
   183,   185,     2,   nil,   143,    68,  4537,  8497,   nil,  8555,
  8613,   319,   340,   333,  4626,   193,   nil,   191,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   358,   169,   336,   219,
   371,   219,   nil,   nil,   nil,   nil,   nil,   nil,   226,   nil,
     6,   nil,   nil,   233,   nil,   402,   nil,   nil,   273,  4715,
   157,  8661,  4804,   nil,   245,   nil,   nil,   nil,   nil,   255,
   261,   264,   274,  8728,   277,  4893,    10,    11,    -9,   198,
  4982,  5071,  5160,   nil,   nil,    15,   422,   425,   155,   284,
   859,   460,    17,    55,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   717,     5,    94,   306,   395,   128,   217,   573,
  8745,  8789,  8806,  8850,  8867,  8915,  8932,  8980,  9026,  9072,
  9127,   nil,   nil,  5249,  9175,   286,   nil,   nil,  9647,  9223,
   252,   nil,   280,   265,  9278,   nil,   275,   nil,    58,   131,
   312,   nil,   nil,  5338,   300,   nil,  5427,  5516,  5605,   284,
   328,   297,   nil,   nil,   340,   nil,   nil,   nil,   nil,   nil,
   343,   325,   -24,   nil,   -11,   nil,  5694,  5783,  5872,   359,
   363,   370,   372,   nil,   349,   948,    61,   329,   385,  5961,
   389,   nil,  6050,  6139,   nil,   nil,   nil,   nil,  6228,   nil,
   nil,   nil,   nil,   387,   nil,   nil,   nil,   nil,   391,   400,
  9705,   407,  9763,  6317,  6406,  6495,  6584,   410,   nil,   418,
  6673,   421,   nil,   423,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   426,  6762,  9821,   433,   nil,   505,   nil,   435,   nil,   438,
  9879,   nil,   383,    79,  9326,   446,   448,   nil,  6851,   454,
   396,   150,  6940,   nil,   nil,  7029,   nil,   461,    75,   463,
   440,    84,  7118,   nil,  7207,  7296,  9937,   nil,   468,   nil,
  1037,   nil,   nil,   470,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   410,   333,   473,   nil,   nil,  9374,  9422,  9470,  9518,
   479,  7385,   nil,  9566,   481,   nil,   nil,   479,  7474,   nil,
   nil,   nil,   467,   468,   486,   nil,  7563,   nil,   nil,  7652,
   493,   nil,  7741,   nil,   nil,  9614,   114,   nil,  7830,   495,
   478,   nil,   504,   506,   nil,   nil,   506,   nil,   nil,   507,
   507,  7919,   nil,  8008,   nil,   nil,   513,   481,   nil,   nil,
   nil,   nil,   515,   nil,   nil,   521,   522,   nil,    94,   nil,
   nil,  8097,   nil,  8186,  8275,   nil,   nil,   527,   530,   nil,
   532,   nil,  8364,   nil,   nil,   nil,   nil,   534,   nil,   539,
   nil,   541,   nil,   nil,   nil,   nil,   nil,   509,   nil,   nil,
   nil,   nil ]

racc_action_default = [
    -3,  -283,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -283,  -283,  -182,   -33,   -34,   -35,   -36,  -283,  -283,  -283,
  -283,  -283,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -83,   -84,   -85,   -86,   -87,   -88,   -89,  -283,  -283,
   -96,  -100,  -283,  -283,  -283,  -283,  -283,  -283,  -283,  -283,
  -283,  -231,  -254,  -230,  -204,  -205,  -206,  -283,  -283,  -283,
  -227,  -228,  -229,  -283,  -233,  -283,  -246,  -249,  -283,  -255,
  -283,  -283,    -7,  -283,  -283,  -283,  -283,  -283,  -283,  -283,
  -283,  -137,  -283,  -283,  -283,  -283,  -283,  -283,  -283,  -283,
  -283,  -283,  -283,  -283,  -283,  -283,  -283,  -283,  -283,  -283,
  -283,  -283,   -94,  -283,  -132,  -282,  -282,   -22,   -23,  -283,
  -282,  -152,  -179,  -180,  -181,  -182,  -183,  -283,  -149,  -150,
   -47,  -182,   -48,   -55,  -283,  -283,   -14,  -256,   -91,   -95,
  -199,  -283,  -254,   -97,  -282,  -283,  -283,  -283,  -108,  -283,
  -283,  -282,  -282,  -283,  -283,  -256,  -163,  -165,  -166,  -167,
  -168,  -169,  -171,  -172,  -230,  -231,  -282,  -221,  -223,  -226,
  -222,  -256,  -208,  -217,  -218,  -219,  -224,  -225,  -256,  -210,
  -283,  -213,  -214,  -283,  -232,  -283,  -237,  -240,  -283,  -244,
  -283,  -283,  -283,   512,    -6,    -9,   -11,   -12,   -13,   -17,
   -18,   -19,   -20,  -283,  -256,  -283,   -87,   -88,   -89,  -274,
  -267,  -273,  -261,  -138,  -141,  -283,  -264,  -278,  -182,  -281,
  -270,  -276,  -205,  -206,  -260,  -265,  -266,  -268,  -269,  -271,
  -279,  -280,   -37,   -38,   -39,   -40,   -41,   -42,   -43,   -44,
   -45,   -46,   -49,   -50,   -51,   -52,   -53,   -54,   -56,   -57,
  -283,   -58,  -126,  -283,   -62,  -256,  -101,  -102,  -137,  -136,
  -283,  -135,  -283,  -258,  -283,   -28,  -282,  -184,  -283,  -283,
  -283,   -59,   -60,  -257,  -283,   -93,  -283,  -283,  -244,  -283,
  -283,  -283,  -178,  -106,  -256,  -189,  -191,  -192,  -193,  -194,
  -196,  -283,  -283,  -254,  -283,   -99,  -283,  -283,  -283,  -283,
  -283,  -283,  -283,  -160,  -282,  -257,  -283,  -282,  -283,  -257,
  -283,  -211,  -283,  -283,  -234,  -235,  -236,  -238,  -283,  -241,
  -242,  -243,  -245,  -256,  -247,  -250,  -252,  -253,    -8,  -283,
  -137,  -283,  -257,  -283,  -283,  -283,  -283,  -256,  -128,  -283,
  -257,  -256,  -140,  -283,  -261,  -262,  -263,  -264,  -267,  -270,
  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -281,  -133,  -134,
  -283,  -259,  -137,  -283,  -155,  -283,  -185,  -256,  -186,  -256,
  -137,   -15,   -90,  -283,  -201,  -283,  -283,  -103,  -283,  -176,
  -283,  -257,  -283,  -197,  -198,  -283,   -98,  -283,  -111,  -283,
  -117,  -283,  -283,  -121,  -282,  -282,  -137,  -159,  -283,  -173,
  -283,  -164,  -170,  -283,  -207,  -220,  -209,  -212,  -215,  -216,
  -239,  -283,  -283,  -256,   -26,  -139,  -144,  -142,  -143,  -130,
  -283,  -257,   -61,   -63,  -283,   -25,   -29,  -256,  -282,  -156,
  -157,  -158,  -283,  -283,  -256,   -92,  -283,  -200,  -202,  -244,
  -283,  -105,  -283,  -107,  -190,  -195,  -111,  -110,  -283,  -283,
  -117,  -116,  -283,  -283,  -120,  -122,  -283,  -153,  -154,  -283,
  -256,  -283,  -174,  -282,  -248,  -251,  -283,   -30,  -127,  -129,
  -131,   -27,  -283,  -187,  -188,  -283,  -283,  -104,  -283,  -109,
  -112,  -283,  -115,  -283,  -282,  -145,  -146,  -283,  -283,  -162,
  -283,   -24,   -31,  -151,  -148,  -203,  -177,  -283,  -114,  -283,
  -119,  -283,  -124,  -125,  -147,  -161,  -175,  -258,  -113,  -118,
  -123,   -32 ]

racc_goto_table = [
     2,   263,   130,   132,   133,   252,   134,   135,   121,   160,
   158,   261,   261,   321,   255,   140,   325,   143,   175,   175,
   184,   280,   360,   141,   137,   401,    82,   393,   284,   266,
   117,   118,   204,   127,   136,   260,   262,   147,   149,   150,
   282,   171,   178,     1,     3,   466,   426,   251,   377,   480,
   392,   151,   152,   173,   173,   173,   166,   451,   447,   186,
   299,   300,   501,   191,   337,   456,   459,   415,   363,   195,
   196,   197,   198,   323,   153,   307,   203,   232,   233,   234,
   235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
   245,   246,   247,   248,   249,   250,   254,   429,   398,   472,
   259,   259,   375,   194,   264,   275,   274,   199,   200,   201,
   202,   140,   402,   444,   384,   383,   479,   482,   408,   319,
   462,   455,   294,   270,   304,   320,   317,   121,   318,   316,
   187,   189,   136,   140,   490,   nil,   nil,   nil,   nil,   nil,
   308,   141,   nil,   nil,   nil,   nil,   nil,   310,   338,   301,
   nil,   367,   369,   nil,   302,   nil,   140,   nil,   nil,   nil,
   nil,   nil,   364,   nil,   152,   nil,   166,   nil,   nil,   nil,
   160,   158,   nil,   331,   nil,   140,   nil,   nil,   328,   373,
   nil,   nil,   nil,   141,   403,   nil,   nil,   nil,   nil,   322,
   132,   nil,   329,   nil,   nil,   147,   149,   150,   nil,   341,
   399,   nil,   nil,   282,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   151,   152,   121,   nil,   nil,   166,   nil,   nil,
   nil,   nil,   nil,   nil,   339,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   140,   140,   nil,   465,   250,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   379,   nil,   nil,
   nil,   nil,   nil,   380,   nil,   160,   158,   nil,   nil,   371,
   405,   254,   374,   476,   409,   410,   511,   nil,   nil,   nil,
   nil,   413,   nil,   nil,   nil,   nil,   nil,   nil,   322,   nil,
   nil,   nil,   nil,   254,   nil,   nil,   nil,   nil,   nil,   nil,
   458,   458,   411,   nil,   nil,   173,   387,   389,   173,   173,
   nil,   nil,   nil,   427,   186,   nil,   420,   nil,   nil,   nil,
   424,   434,   nil,   nil,   nil,   nil,   469,   nil,   416,   417,
   418,   419,   nil,   nil,   458,   423,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   432,   460,   433,   435,
   nil,   nil,   nil,   nil,   nil,   478,   264,   140,   nil,   nil,
   160,   158,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   458,
   nil,   430,   nil,   nil,   nil,   nil,   nil,   445,   nil,   nil,
   nil,   371,   nil,   nil,   507,   nil,   nil,   254,   440,   nil,
   502,   nil,   467,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   471,   nil,   nil,   nil,
   nil,   nil,   nil,   475,   nil,   nil,   250,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   423,   nil,   nil,   nil,   nil,   nil,   254,   nil,   487,
   nil,   nil,   nil,   147,   nil,   nil,   nil,   nil,   nil,   322,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   488,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   264,   nil,   nil,
   nil,   497,   nil,   499,   503 ]

racc_goto_check = [
     2,    13,    10,    10,    10,    59,     6,     6,    66,    41,
    42,    58,    58,    84,    22,    43,   101,    45,    88,    88,
    94,    49,    14,    83,     8,    75,     5,    56,    51,    67,
     9,     9,    11,    69,     6,    62,    62,    10,    10,    10,
    58,    85,    85,     1,     3,    12,    16,    21,    50,    52,
    55,    66,    66,     6,     6,     6,    66,    54,    53,     6,
    67,    67,    57,    10,    60,    68,    68,    63,    71,     6,
     6,     6,     6,    51,    69,    67,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    72,    74,    68,
    10,    10,    84,     5,    10,    45,    15,     9,     9,     9,
     9,    43,    77,    78,    79,    81,    53,    54,    87,    90,
    75,    56,     8,    66,    15,    91,    95,    66,    96,    98,
    99,   100,     6,    43,    68,   nil,   nil,   nil,   nil,   nil,
    15,    83,   nil,   nil,   nil,   nil,   nil,    15,    59,    66,
   nil,    51,    51,   nil,     2,   nil,    43,   nil,   nil,   nil,
   nil,   nil,    58,   nil,    66,   nil,    66,   nil,   nil,   nil,
    41,    42,   nil,    15,   nil,    43,   nil,   nil,     6,    22,
   nil,   nil,   nil,    83,    49,   nil,   nil,   nil,   nil,     2,
    10,   nil,     2,   nil,   nil,    10,    10,    10,   nil,    11,
    58,   nil,   nil,    58,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    66,    66,    66,   nil,   nil,    66,   nil,   nil,
   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    43,    43,   nil,   101,    10,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,   nil,   nil,
   nil,   nil,   nil,    15,   nil,    41,    42,   nil,   nil,     6,
    88,    10,    10,    84,    88,    94,    14,   nil,   nil,   nil,
   nil,    11,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,
    58,    58,    15,   nil,   nil,     6,     2,     2,     6,     6,
   nil,   nil,   nil,    11,     6,   nil,    15,   nil,   nil,   nil,
    15,    11,   nil,   nil,   nil,   nil,    59,   nil,    10,    10,
    10,    10,   nil,   nil,    58,    10,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    15,    11,    15,    45,
   nil,   nil,   nil,   nil,   nil,    22,    10,    43,   nil,   nil,
    41,    42,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    58,
   nil,    66,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,
   nil,     6,   nil,   nil,    13,   nil,   nil,    10,     2,   nil,
    58,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,
   nil,   nil,   nil,    15,   nil,   nil,    10,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,   nil,    10,   nil,    15,
   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,     2,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,
   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    43,     0,    44,   nil,    22,   -14,   nil,   -24,    20,
   -15,   -59,  -368,  -118,  -241,   -31,  -315,   nil,   nil,   nil,
   nil,   -63,   -97,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -50,   -49,   -34,   nil,   -33,   nil,   nil,   nil,  -123,
  -232,  -117,  -399,  -330,  -333,  -248,  -271,  -422,  -104,  -105,
  -189,   nil,   -80,  -265,   nil,   nil,    -4,   -91,  -329,    17,
   nil,  -198,  -268,   nil,  -206,  -280,   nil,  -194,  -268,  -178,
   nil,  -176,   nil,   -26,  -176,   -26,   nil,  -194,   -49,   nil,
   -69,   -63,   nil,   nil,   -53,   -59,   -57,   nil,   -56,    55,
    55,  -175 ]

racc_goto_default = [
   nil,   nil,   457,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   265,    13,    14,    15,
    16,   nil,   391,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    48,   nil,    50,    51,   144,   nil,
   nil,   nil,   148,   nil,   nil,   nil,   nil,   nil,   267,   nil,
   nil,   114,   nil,   213,   215,   214,    57,   nil,   nil,   nil,
   120,   nil,   nil,   155,   nil,   156,   157,   161,   285,   286,
   287,   288,   289,   292,   nil,   nil,   180,   182,   183,   174,
    70,    71,    72,    73,   nil,   nil,   nil,   185,   nil,   nil,
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 97, :_reduce_1,
  1, 97, :_reduce_2,
  0, 97, :_reduce_3,
  1, 98, :_reduce_4,
  1, 100, :_reduce_5,
  3, 100, :_reduce_6,
  2, 100, :_reduce_7,
  1, 101, :_reduce_8,
  3, 101, :_reduce_9,
  1, 102, :_reduce_none,
  3, 102, :_reduce_11,
  3, 102, :_reduce_12,
  3, 102, :_reduce_13,
  1, 104, :_reduce_14,
  3, 104, :_reduce_15,
  1, 103, :_reduce_none,
  3, 103, :_reduce_17,
  3, 103, :_reduce_18,
  3, 103, :_reduce_19,
  3, 103, :_reduce_20,
  1, 105, :_reduce_none,
  2, 105, :_reduce_22,
  2, 105, :_reduce_23,
  7, 105, :_reduce_24,
  5, 105, :_reduce_25,
  5, 105, :_reduce_26,
  4, 112, :_reduce_27,
  1, 109, :_reduce_28,
  3, 109, :_reduce_29,
  1, 108, :_reduce_30,
  2, 108, :_reduce_31,
  4, 108, :_reduce_32,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  3, 106, :_reduce_37,
  3, 106, :_reduce_38,
  3, 106, :_reduce_39,
  3, 106, :_reduce_40,
  3, 106, :_reduce_41,
  3, 106, :_reduce_42,
  3, 106, :_reduce_43,
  3, 106, :_reduce_44,
  3, 106, :_reduce_45,
  3, 106, :_reduce_46,
  2, 106, :_reduce_47,
  2, 106, :_reduce_48,
  3, 106, :_reduce_49,
  3, 106, :_reduce_50,
  3, 106, :_reduce_51,
  3, 106, :_reduce_52,
  3, 106, :_reduce_53,
  3, 106, :_reduce_54,
  2, 106, :_reduce_55,
  3, 106, :_reduce_56,
  3, 106, :_reduce_57,
  3, 106, :_reduce_58,
  3, 106, :_reduce_59,
  3, 106, :_reduce_60,
  5, 116, :_reduce_61,
  1, 118, :_reduce_62,
  3, 118, :_reduce_63,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_85,
  1, 113, :_reduce_86,
  1, 113, :_reduce_87,
  1, 113, :_reduce_88,
  1, 113, :_reduce_89,
  4, 115, :_reduce_90,
  2, 115, :_reduce_91,
  5, 115, :_reduce_92,
  3, 115, :_reduce_93,
  2, 140, :_reduce_94,
  2, 140, :_reduce_95,
  1, 120, :_reduce_96,
  2, 120, :_reduce_97,
  4, 142, :_reduce_98,
  3, 142, :_reduce_99,
  1, 142, :_reduce_100,
  3, 143, :_reduce_101,
  3, 143, :_reduce_102,
  3, 141, :_reduce_103,
  3, 146, :_reduce_104,
  2, 146, :_reduce_105,
  2, 144, :_reduce_106,
  4, 144, :_reduce_107,
  2, 123, :_reduce_108,
  5, 148, :_reduce_109,
  4, 148, :_reduce_110,
  0, 149, :_reduce_none,
  2, 149, :_reduce_112,
  4, 149, :_reduce_113,
  3, 149, :_reduce_114,
  6, 124, :_reduce_115,
  5, 124, :_reduce_116,
  0, 150, :_reduce_none,
  4, 150, :_reduce_118,
  3, 150, :_reduce_119,
  5, 122, :_reduce_120,
  1, 151, :_reduce_121,
  2, 151, :_reduce_122,
  5, 152, :_reduce_123,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 117, :_reduce_none,
  4, 117, :_reduce_127,
  1, 156, :_reduce_128,
  3, 156, :_reduce_129,
  3, 155, :_reduce_130,
  6, 121, :_reduce_131,
  2, 121, :_reduce_132,
  3, 157, :_reduce_133,
  3, 157, :_reduce_134,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  0, 107, :_reduce_137,
  1, 107, :_reduce_138,
  3, 107, :_reduce_139,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  3, 159, :_reduce_142,
  3, 159, :_reduce_143,
  3, 159, :_reduce_144,
  6, 125, :_reduce_145,
  6, 126, :_reduce_146,
  7, 114, :_reduce_147,
  7, 114, :_reduce_148,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  7, 127, :_reduce_151,
  1, 166, :_reduce_152,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 167, :_reduce_none,
  2, 167, :_reduce_156,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  4, 129, :_reduce_159,
  3, 129, :_reduce_160,
  7, 128, :_reduce_161,
  6, 128, :_reduce_162,
  1, 169, :_reduce_163,
  3, 169, :_reduce_164,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_167,
  1, 171, :_reduce_none,
  1, 172, :_reduce_169,
  3, 172, :_reduce_170,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 170, :_reduce_none,
  2, 170, :_reduce_174,
  7, 131, :_reduce_175,
  2, 145, :_reduce_176,
  5, 145, :_reduce_177,
  1, 145, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_182,
  1, 162, :_reduce_183,
  1, 163, :_reduce_184,
  2, 163, :_reduce_185,
  2, 163, :_reduce_186,
  4, 163, :_reduce_187,
  4, 163, :_reduce_188,
  1, 147, :_reduce_189,
  3, 147, :_reduce_190,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  3, 177, :_reduce_195,
  1, 177, :_reduce_196,
  2, 178, :_reduce_197,
  2, 176, :_reduce_198,
  1, 179, :_reduce_199,
  4, 179, :_reduce_200,
  4, 132, :_reduce_201,
  5, 133, :_reduce_202,
  7, 133, :_reduce_203,
  1, 119, :_reduce_204,
  1, 134, :_reduce_205,
  1, 134, :_reduce_206,
  4, 135, :_reduce_207,
  2, 135, :_reduce_208,
  4, 135, :_reduce_209,
  2, 135, :_reduce_210,
  3, 136, :_reduce_211,
  4, 136, :_reduce_212,
  2, 136, :_reduce_213,
  1, 182, :_reduce_214,
  3, 182, :_reduce_215,
  3, 183, :_reduce_216,
  1, 184, :_reduce_none,
  1, 184, :_reduce_218,
  1, 181, :_reduce_219,
  3, 181, :_reduce_220,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 186, :_reduce_230,
  1, 186, :_reduce_231,
  2, 187, :_reduce_232,
  1, 189, :_reduce_233,
  1, 191, :_reduce_234,
  1, 192, :_reduce_235,
  2, 190, :_reduce_236,
  1, 193, :_reduce_237,
  1, 194, :_reduce_238,
  2, 194, :_reduce_239,
  2, 188, :_reduce_240,
  2, 195, :_reduce_241,
  2, 195, :_reduce_242,
  3, 99, :_reduce_243,
  0, 180, :_reduce_none,
  1, 180, :_reduce_none,
  0, 196, :_reduce_246,
  2, 196, :_reduce_247,
  4, 196, :_reduce_248,
  1, 130, :_reduce_249,
  3, 130, :_reduce_250,
  5, 130, :_reduce_251,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 139, :_reduce_254,
  1, 137, :_reduce_255,
  0, 111, :_reduce_none,
  1, 111, :_reduce_257,
  0, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  0, 154, :_reduce_282 ]

racc_reduce_n = 283

racc_shift_n = 512

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :WSLPAREN => 26,
  :LPAREN => 27,
  :RPAREN => 28,
  :ISEQUAL => 29,
  :GREATEREQUAL => 30,
  :GREATERTHAN => 31,
  :LESSTHAN => 32,
  :IF => 33,
  :ELSE => 34,
  :DEFINE => 35,
  :ELSIF => 36,
  :VARIABLE => 37,
  :CLASS => 38,
  :INHERITS => 39,
  :NODE => 40,
  :BOOLEAN => 41,
  :NAME => 42,
  :SEMIC => 43,
  :CASE => 44,
  :DEFAULT => 45,
  :AT => 46,
  :ATAT => 47,
  :LCOLLECT => 48,
  :RCOLLECT => 49,
  :CLASSREF => 50,
  :NOT => 51,
  :OR => 52,
  :AND => 53,
  :UNDEF => 54,
  :PARROW => 55,
  :PLUS => 56,
  :MINUS => 57,
  :TIMES => 58,
  :DIV => 59,
  :LSHIFT => 60,
  :RSHIFT => 61,
  :UMINUS => 62,
  :MATCH => 63,
  :NOMATCH => 64,
  :REGEX => 65,
  :IN_EDGE => 66,
  :OUT_EDGE => 67,
  :IN_EDGE_SUB => 68,
  :OUT_EDGE_SUB => 69,
  :IN => 70,
  :UNLESS => 71,
  :PIPE => 72,
  :LAMBDA => 73,
  :SELBRACE => 74,
  :NUMBER => 75,
  :HEREDOC => 76,
  :SUBLOCATE => 77,
  :RENDER_STRING => 78,
  :RENDER_EXPR => 79,
  :EPP_START => 80,
  :EPP_END => 81,
  :EPP_END_TRIM => 82,
  :FUNCTION => 83,
  :TYPE => 84,
  :PRIVATE => 85,
  :ATTR => 86,
  :APPLICATION => 87,
  :PRODUCES => 88,
  :CONSUMES => 89,
  :SITE => 90,
  :LOW => 91,
  :HIGH => 92,
  :LISTSTART => 93,
  :SPLAT => 94,
  :MODULO => 95 }

racc_nt_base = 96

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "WSLPAREN",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "TYPE",
  "PRIVATE",
  "ATTR",
  "APPLICATION",
  "PRODUCES",
  "CONSUMES",
  "SITE",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "capability_mapping",
  "call_function_expression",
  "bracketed_expression",
  "selector_entries",
  "expressions",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "hostclass_expression",
  "node_definition_expression",
  "site_definition_expression",
  "epp_render_expression",
  "function_definition",
  "type_alias",
  "type_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "call_function_start",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "opt_return_type",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "capability_kw",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "optional_statements",
  "collection_entries",
  "hashpairs",
  "hashpair",
  "collection_entry",
  "collection_entry_keyword",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_2(val, _values, result)
     result = create_program(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_3(val, _values, result)
     result = create_empty_program 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 73)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 89)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, 'virtual')
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 128)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, 'exported')
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 139)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 146)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 155)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2], val[1], val[4])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 177)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 180)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_37(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_38(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_39(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_40(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_41(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_42(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_43(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_44(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_45(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_46(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_47(val, _values, result)
     result = val[1].minus            ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_48(val, _values, result)
     result = val[1].unfold           ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_49(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_50(val, _values, result)
     result = val[0].eq  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_51(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_52(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_53(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_54(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_55(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_56(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_57(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_58(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_59(val, _values, result)
     result = val[1].paren            ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 221)
  def _reduce_60(val, _values, result)
     result = val[1].paren          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 224)
  def _reduce_61(val, _values, result)
     result = val[0].access(val[2])         ; loc result, val[0], val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 233)
  def _reduce_62(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 234)
  def _reduce_63(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

module_eval(<<'.,.,', 'egrammar.ra', 260)
  def _reduce_85(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 261)
  def _reduce_86(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 262)
  def _reduce_87(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 263)
  def _reduce_88(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 264)
  def _reduce_89(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 273)
  def _reduce_90(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 277)
  def _reduce_91(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 281)
  def _reduce_92(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[4]
      result.lambda = val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 286)
  def _reduce_93(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 292)
  def _reduce_94(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 293)
  def _reduce_95(val, _values, result)
     result = Factory.QNAME(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 298)
  def _reduce_96(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 299)
  def _reduce_97(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 302)
  def _reduce_98(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 303)
  def _reduce_99(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 304)
  def _reduce_100(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 308)
  def _reduce_101(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 312)
  def _reduce_102(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 320)
  def _reduce_103(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[2][:value], val[1])
      loc result, val[0][:start], val[2][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 325)
  def _reduce_104(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 326)
  def _reduce_105(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 330)
  def _reduce_106(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 331)
  def _reduce_107(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 339)
  def _reduce_108(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 346)
  def _reduce_109(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 350)
  def _reduce_110(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 111 omitted

module_eval(<<'.,.,', 'egrammar.ra', 358)
  def _reduce_112(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 362)
  def _reduce_113(val, _values, result)
            result = Factory.block_or_expression(val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 366)
  def _reduce_114(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 373)
  def _reduce_115(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 377)
  def _reduce_116(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 117 omitted

module_eval(<<'.,.,', 'egrammar.ra', 387)
  def _reduce_118(val, _values, result)
            result = Factory.block_or_expression(val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 391)
  def _reduce_119(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 398)
  def _reduce_120(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 404)
  def _reduce_121(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 405)
  def _reduce_122(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 410)
  def _reduce_123(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

module_eval(<<'.,.,', 'egrammar.ra', 426)
  def _reduce_127(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 431)
  def _reduce_128(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 432)
  def _reduce_129(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 437)
  def _reduce_130(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 447)
  def _reduce_131(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 451)
  def _reduce_132(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 456)
  def _reduce_133(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 457)
  def _reduce_134(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 135 omitted

# reduce 136 omitted

module_eval(<<'.,.,', 'egrammar.ra', 466)
  def _reduce_137(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_138(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 468)
  def _reduce_139(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

module_eval(<<'.,.,', 'egrammar.ra', 483)
  def _reduce_142(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], '=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 487)
  def _reduce_143(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], '+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 491)
  def _reduce_144(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 500)
  def _reduce_145(val, _values, result)
          definition = Factory.DEFINITION(classname(val[1][:value]), val[2], val[4])
      loc(definition, val[0], val[5])
      result = add_definition(definition)
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 512)
  def _reduce_146(val, _values, result)
        definition = Factory.APPLICATION(classname(val[1][:value]), val[2], val[4])
    loc(definition, val[0], val[5])
    result = add_definition(definition)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 519)
  def _reduce_147(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        Factory.QNAME(classname(val[0][:value])),
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 526)
  def _reduce_148(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        val[0],
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

# reduce 149 omitted

# reduce 150 omitted

module_eval(<<'.,.,', 'egrammar.ra', 543)
  def _reduce_151(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      definition = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 554)
  def _reduce_152(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

module_eval(<<'.,.,', 'egrammar.ra', 563)
  def _reduce_156(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'egrammar.ra', 580)
  def _reduce_159(val, _values, result)
        definition = Factory.SITE(val[2])
    loc(definition, val[0], val[3])
    result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 585)
  def _reduce_160(val, _values, result)
        definition = Factory.SITE(nil)
    loc(definition, val[0], val[2])
    result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_161(val, _values, result)
          definition = Factory.NODE(val[1], val[3], val[5])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 601)
  def _reduce_162(val, _values, result)
          definition = Factory.NODE(val[1], val[3], nil)
      loc(definition, val[0], val[5])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 612)
  def _reduce_163(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 613)
  def _reduce_164(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 165 omitted

# reduce 166 omitted

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_167(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 168 omitted

module_eval(<<'.,.,', 'egrammar.ra', 624)
  def _reduce_169(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 625)
  def _reduce_170(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

module_eval(<<'.,.,', 'egrammar.ra', 634)
  def _reduce_174(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_175(val, _values, result)
          definition = Factory.FUNCTION(val[1][:value], val[2], val[5], val[3])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_176(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_177(val, _values, result)
     result = val[1].access(val[3]) ; loc result, val[1], val[4] 
    result
  end
.,.,

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_182(val, _values, result)
     error val[0], "'class' keyword not allowed at this location" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_183(val, _values, result)
     error val[0], "A quoted string is not valid as a name here" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_184(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_185(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_186(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_187(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_188(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_189(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_190(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_195(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 684)
  def _reduce_196(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_197(val, _values, result)
     result = val[1]; val[1].captures_rest 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_198(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 693)
  def _reduce_199(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_200(val, _values, result)
     result = val[0].access(val[2]) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_201(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[1], val[3])
      loc(definition, val[0], val[3])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 708)
  def _reduce_202(val, _values, result)
            definition = Factory.TYPE_DEFINITION(val[1][:value], nil, val[3])
        loc(definition, val[0], val[4])
        result = add_definition(definition)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 713)
  def _reduce_203(val, _values, result)
            definition = Factory.TYPE_DEFINITION(val[1][:value], val[3][:value], val[5])
        loc(definition, val[0], val[6])
        result = add_definition(definition)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 722)
  def _reduce_204(val, _values, result)
         fqn = Factory.fqn(val[0][:value])
     loc(fqn, val[0])
     fqn['offset'] += 1
     fqn['length'] -= 1
     result = fqn.var
     loc(result, val[0])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 733)
  def _reduce_205(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 734)
  def _reduce_206(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 740)
  def _reduce_207(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 741)
  def _reduce_208(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 742)
  def _reduce_209(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 743)
  def _reduce_210(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 746)
  def _reduce_211(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 747)
  def _reduce_212(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 748)
  def _reduce_213(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 751)
  def _reduce_214(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 752)
  def _reduce_215(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 755)
  def _reduce_216(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 217 omitted

module_eval(<<'.,.,', 'egrammar.ra', 759)
  def _reduce_218(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 762)
  def _reduce_219(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 763)
  def _reduce_220(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

module_eval(<<'.,.,', 'egrammar.ra', 780)
  def _reduce_230(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 781)
  def _reduce_231(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 783)
  def _reduce_232(val, _values, result)
     result = Factory.STRING(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 784)
  def _reduce_233(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 785)
  def _reduce_234(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 786)
  def _reduce_235(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 787)
  def _reduce_236(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 788)
  def _reduce_237(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 791)
  def _reduce_238(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 792)
  def _reduce_239(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 795)
  def _reduce_240(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 798)
  def _reduce_241(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 799)
  def _reduce_242(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 802)
  def _reduce_243(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 244 omitted

# reduce 245 omitted

module_eval(<<'.,.,', 'egrammar.ra', 809)
  def _reduce_246(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 810)
  def _reduce_247(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 811)
  def _reduce_248(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 814)
  def _reduce_249(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 815)
  def _reduce_250(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 816)
  def _reduce_251(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 252 omitted

# reduce 253 omitted

module_eval(<<'.,.,', 'egrammar.ra', 822)
  def _reduce_254(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 825)
  def _reduce_255(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 256 omitted

module_eval(<<'.,.,', 'egrammar.ra', 831)
  def _reduce_257(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 258 omitted

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

# reduce 263 omitted

# reduce 264 omitted

# reduce 265 omitted

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

module_eval(<<'.,.,', 'egrammar.ra', 862)
  def _reduce_282(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
