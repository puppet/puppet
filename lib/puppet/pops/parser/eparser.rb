#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 710)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'54,56,-130,242,49,119,51,54,56,118,241,230,338,290,72,242,229,275,54',
'56,-210,-201,211,13,-128,211,237,236,95,39,99,46,94,48,43,252,47,62',
'58,326,41,61,44,45,-130,128,59,12,126,222,60,54,56,11,98,49,128,51,368',
'126,208,63,-210,-201,79,78,-128,40,63,74,75,57,242,232,13,50,73,253',
'231,63,39,328,46,115,48,43,80,47,62,58,306,41,61,44,45,218,119,59,12',
'225,118,60,54,56,11,323,49,322,51,54,56,119,63,119,289,118,72,118,40',
'308,54,56,57,119,227,13,50,118,249,310,95,39,99,46,94,48,43,292,47,62',
'58,65,41,61,44,45,67,128,59,12,126,207,60,54,56,11,98,49,128,51,366',
'126,234,63,119,235,79,78,118,40,63,74,75,57,251,119,13,50,73,118,274',
'63,39,323,46,322,48,43,80,47,62,58,315,41,61,44,45,316,317,59,12,211',
'273,60,54,56,11,320,49,228,51,364,324,326,63,107,267,249,72,251,40,249',
'334,335,57,266,273,13,50,198,174,67,95,39,99,46,94,48,43,141,47,62,58',
'265,41,61,44,45,345,251,59,12,251,120,60,54,56,11,98,49,249,51,348,107',
'108,63,76,77,79,78,293,40,107,74,75,57,352,222,13,50,73,354,355,356',
'39,357,46,358,48,101,80,47,62,58,104,41,61,68,70,69,71,59,12,360,361',
'60,54,56,11,72,49,362,51,296,67,64,63,369,370,371,72,372,40,95,,99,57',
'94,,13,50,,,,95,39,99,46,94,48,101,,47,62,58,,41,61,,98,,,59,12,,,60',
'54,56,11,98,49,,51,,,,63,76,77,79,78,,40,,74,75,57,,,13,50,73,,,,39',
',46,,48,101,80,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,72,49,,51,,,',
'63,,,,72,,40,95,,99,57,94,,13,50,,,,95,39,99,46,94,48,101,,47,62,58',
',41,61,,98,,,59,12,,,60,54,56,11,98,49,,51,74,75,,63,,,,73,,40,,74,75',
'57,,,13,50,73,,,,39,,46,,48,43,,47,62,58,,41,61,44,45,,,59,12,,,60,54',
'56,11,72,49,,51,,,,63,,,,72,,40,95,,99,57,94,,13,50,,,,95,39,99,46,94',
'48,101,,47,62,58,,41,61,,98,,,59,12,,,60,54,56,11,98,49,,51,74,75,,63',
',,,73,,40,,,,57,,,13,50,73,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59',
'12,,,60,54,56,11,72,49,,51,,,,63,,,,72,,40,95,,99,57,94,,13,50,,,,95',
'39,99,46,94,48,101,,47,62,58,,41,61,,98,,,59,12,,,60,54,56,11,98,49',
',51,,,,63,,,,73,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61',
',,,,59,12,,,60,54,56,11,72,49,,51,,,,63,,,,,,40,95,,99,57,94,,13,50',
',,,,39,,46,,48,101,,47,62,58,,41,61,,98,,,59,12,,,60,54,56,11,,49,,51',
',,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,114,,47,62,58,,41,61,,,,',
'59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,',
'48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,271,,,63,,,',
',,40,,,,57,,,13,50,,,,,39,,46,,48,43,,47,62,58,,41,61,44,45,,,59,12',
',,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101',
',47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,277,,,63,,,,,,40,,',
',57,,,13,50,,,,,39,,46,,48,43,,47,62,58,,41,61,44,45,,,59,12,,,60,54',
'56,11,,49,131,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47',
'62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,133,51,,,,63,,,,,,40,,,,57',
',,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11',
',49,,51,136,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58',
',41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,',
',,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,279',
',,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,43,,47,62,58,,41,61,44,45',
',,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46',
',48,43,,47,62,58,,41,61,44,45,,,59,12,,,60,54,56,11,,49,,51,,,,63,,',
',,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,',
'60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,43,,47',
'62,58,,41,61,44,45,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57',
',,13,50,,,,,39,,46,,48,43,,47,62,58,,41,61,44,45,,,59,12,,,60,54,56',
'11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,43,,47,62,58,',
'41,61,44,45,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50',
',,,,39,,46,,48,43,,47,62,58,,41,61,44,45,,,59,12,,,60,54,56,11,,49,',
'51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,43,,47,62,58,,41,61,44',
'45,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39',
',46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,',
',,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,',
',60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101',
',47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57',
',,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11',
',49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41',
'61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39',
',46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,',
',,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,',
',60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101',
',47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57',
',,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11',
',49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41',
'61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39',
',46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,',
',,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,',
',60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101',
',47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57',
',,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11',
',49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41',
'61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39',
',46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,',
',,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,',
',60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101',
',47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57',
',,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11',
',49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41',
'61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39',
',46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,',
',,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,',
',60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101',
',47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,344,,,63,,,,,,40,,',
'173,57,,,13,50,,,,,39,,46,,48,43,,47,62,58,,41,61,44,45,,,59,12,,,60',
'54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,176,193,187,194,48',
'188,196,189,185,183,,178,191,,,,,59,12,197,192,190,54,56,11,,49,,51',
',,,63,,,,,195,177,,,,57,,,13,50,,,,,39,,46,,48,43,,47,62,58,,41,61,44',
'45,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39',
',46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,',
',,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,',
',60,54,56,11,,49,,51,329,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101',
',47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57',
',,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11',
',49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41',
'61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,176',
'193,187,194,48,188,196,189,185,183,,178,191,,,,,59,12,197,192,190,,',
'11,54,56,,,49,,51,63,,,,,195,177,,,,57,,,,50,,13,205,,,,,39,,46,,48',
'101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,',
',,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56',
'11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58',
',41,61,,,,,59,12,,,60,,,11,54,56,,,49,,51,63,,,,,,40,,,,57,,,,50,,13',
'213,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49',
',51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61',
',,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,',
'46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,299,51,,,,63',
',,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12',
',,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101',
',47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57',
',,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11',
',49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41',
'61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39',
',46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,,,,63,',
',,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,',
',60,54,56,11,,49,,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101',
',47,62,58,,41,61,,,,,59,12,,,60,54,56,11,,49,,51,301,,,63,,,,,,40,,',
',57,,,13,50,,,,,39,,46,,48,101,,47,62,58,,41,61,,,,,59,12,,,60,54,56',
'11,,49,298,51,,,,63,,,,,,40,,,,57,,,13,50,,,,,39,,46,,48,101,,47,62',
'58,,41,61,,,,,59,12,,,60,,,11,,,,,,,,63,,,,,,40,72,,217,57,,,,50,,91',
'92,93,88,83,95,,99,,94,,,84,86,85,87,,,,,,,,,,,,,,,,98,,,,90,89,,,76',
'77,79,78,81,82,,74,75,72,,216,,,73,,,,91,92,93,88,83,95,80,99,,94,,',
'84,86,85,87,,,,,,,,,,,,,,,,98,,,,90,89,,,76,77,79,78,81,82,,74,75,,',
',,,73,,72,,,,,233,,,80,91,92,93,88,83,95,,99,,94,,,84,86,85,87,,,,,',
',,,,,,,,,,98,,,,90,89,,,76,77,79,78,81,82,,74,75,72,,215,,,73,,,,91',
'92,93,88,83,95,80,99,,94,,,84,86,85,87,,,,,,,,,,,,,,,,98,,,,90,89,,',
'76,77,79,78,81,82,,74,75,72,,,,,73,,,,91,92,93,88,83,95,80,99,,94,,',
'84,86,85,87,,,,,,,,,,,,,,,,98,,,,90,89,,,76,77,79,78,81,82,,74,75,72',
',214,,,73,,,,91,92,93,88,83,95,80,99,,94,,,84,86,85,87,,,,,,,,,,,,,',
',,98,,,,90,89,,,76,77,79,78,81,82,,74,75,72,,,,,73,,,,91,92,93,88,83',
'95,80,99,,94,,203,84,86,85,87,,,,,,,,,,,,,,,,98,,,,90,89,,,76,77,79',
'78,81,82,,74,75,72,,,,,73,,,,91,92,93,88,83,95,80,99,,94,,,84,86,85',
'87,,,,,,,,,,,,,,,,98,,,,90,89,,,76,77,79,78,81,82,,74,75,72,,,,,73,',
',,91,92,93,88,83,95,80,99,,94,,,84,86,85,87,,,,,,,,,,,,,,,,98,,,,90',
'89,,,76,77,79,78,81,82,,74,75,72,,,,,73,,,,91,92,93,88,83,95,80,99,',
'94,,,84,86,85,87,,,,,,,,,,,,,,,,98,,,,90,89,,,76,77,79,78,81,82,,74',
'75,72,,,,,73,,,,91,92,93,88,83,95,80,99,,94,,,84,86,85,87,,,,,,,,,,',
',,,,,98,,,,90,89,,,76,77,79,78,81,82,,74,75,72,,,,,73,,,,91,92,93,88',
'83,95,80,99,,94,,,84,86,85,87,,,,,,,,,,,,,,,,98,,,,90,89,,,76,77,79',
'78,81,82,,74,75,72,,,,,73,,,,91,92,93,88,83,95,80,99,,94,,,84,86,85',
'87,,,,,,,,,,,,,,,,98,,,,90,89,,,76,77,79,78,81,82,,74,75,72,,,,,73,',
',,91,92,93,88,83,95,80,99,,94,,,84,86,85,87,72,,,,,,,,,,,,,,95,98,99',
',94,90,89,,,76,77,79,78,81,82,,74,75,,,,,,73,,,98,,,72,,,,80,76,77,79',
'78,81,82,,74,75,95,,99,,94,73,,,,,,72,,,,80,,,,,,,,,83,95,98,99,,94',
',,84,,76,77,79,78,81,82,,74,75,,,,,,73,,,98,,,,,72,,80,76,77,79,78,81',
'82,,74,75,,83,95,,99,73,94,,,84,,,,72,,80,,,,,,,,,,,83,95,98,99,,94',
',,84,,76,77,79,78,81,82,,74,75,,,,,,73,,,98,,,,,72,,80,76,77,79,78,81',
'82,,74,75,,83,95,,99,73,94,,,84,,,,,,80,,,,,,,,,,,,,98,,,,,72,,,76,77',
'79,78,81,82,,74,75,88,83,95,,99,73,94,,,84,86,85,87,,,80,,,,,,,,,,,',
',98,,,,,72,,,76,77,79,78,81,82,,74,75,88,83,95,,99,73,94,,,84,86,85',
'87,,,80,,,,,,,,,,,,,98,,,,,89,,,76,77,79,78,81,82,,74,75,72,,,,,73,',
',,91,92,93,88,83,95,80,99,,94,,,84,86,85,87,,,,,,,,,,,,,,,,98,,,,90',
'89,,,76,77,79,78,81,82,,74,75,72,,,,,73,,,,91,92,93,88,83,95,80,99,',
'94,,,84,86,85,87,,,,,,,,,,,,,,,,98,,,,90,89,,,76,77,79,78,81,82,,74',
'75,72,,,,,73,,,,91,92,93,88,83,95,80,99,,94,,,84,86,85,87,,,,,,,,,,',
',,,,,98,,,,90,89,,,76,77,79,78,81,82,,74,75,,,,,,73,,72,,,,,243,,,80',
'91,92,93,88,83,95,,99,,94,,,84,86,85,87,,,,,,,,,,,,,,,,98,,,,90,89,',
',76,77,79,78,81,82,,74,75,72,,96,,,73,,,,91,92,93,88,83,95,80,99,,94',
',,84,86,85,87,,,,,,,,,,,,,,,,98,,,,90,89,,,76,77,79,78,81,82,,74,75',
',,,,,73,,72,,,,,,,,80,91,92,93,88,83,95,247,99,,94,,,84,86,85,87,,,',
',,,,,,,,,,,,98,,,,90,89,,,76,77,79,78,81,82,,74,75,72,,,,,73,,,,91,92',
'93,88,83,95,80,99,,94,,,84,86,85,87,,,,,,,,,,,,,,,,98,,,,90,89,,,76',
'77,79,78,81,82,,74,75,,261,193,260,194,73,258,196,262,256,255,,257,259',
',80,,,,,197,192,263,261,193,260,194,,258,196,262,256,255,,257,259,,',
'195,264,,,197,192,263,261,193,260,194,,258,196,262,256,255,,257,259',
',,195,264,,,197,192,263,,,,,,,,,,,,,,,,195,264' ]
        racc_action_table = arr = ::Array.new(5652, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,185,212,0,289,0,189,189,289,148,130,289,222,152,148,130,212,47,47',
'190,191,222,0,183,107,140,140,152,0,152,0,152,0,0,186,0,0,0,324,0,0',
'0,0,185,189,0,0,189,116,0,355,355,0,152,355,47,355,355,47,107,0,190',
'191,152,152,183,0,189,152,152,0,280,132,355,0,152,186,132,47,355,280',
'355,43,355,355,152,355,355,355,244,355,355,355,355,114,101,355,355,122',
'101,355,4,4,355,277,4,277,4,225,225,43,355,187,220,43,153,187,355,248',
'227,227,355,114,122,4,355,114,219,250,153,4,153,4,153,4,4,223,4,4,4',
'4,4,4,4,4,142,225,4,4,225,106,4,354,354,4,153,354,227,354,354,227,135',
'4,188,135,153,153,188,4,225,153,153,4,254,46,354,4,153,46,211,227,354',
'320,354,320,354,354,153,354,354,354,268,354,354,354,354,270,272,354',
'354,273,209,354,352,352,354,276,352,124,352,352,278,279,354,205,204',
'283,157,284,354,285,286,287,354,202,291,352,354,97,95,66,157,352,157',
'352,157,352,352,64,352,352,352,200,352,352,352,352,305,180,352,352,307',
'44,352,173,173,352,157,173,179,173,314,315,38,352,157,157,157,157,224',
'352,37,157,157,352,323,121,173,352,157,326,327,331,173,332,173,333,173',
'173,157,173,173,173,36,173,173,7,7,7,7,173,173,339,340,173,11,11,173',
'149,11,343,11,228,5,1,173,359,363,365,158,367,173,149,,149,173,149,',
'11,173,,,,158,11,158,11,158,11,11,,11,11,11,,11,11,,149,,,11,11,,,11',
'12,12,11,158,12,,12,,,,11,158,158,158,158,,11,,158,158,11,,,12,11,158',
',,,12,,12,,12,12,158,12,12,12,,12,12,,,,,12,12,,,12,13,13,12,156,13',
',13,,,,12,,,,155,,12,156,,156,12,156,,13,12,,,,155,13,155,13,155,13',
'13,,13,13,13,,13,13,,156,,,13,13,,,13,335,335,13,155,335,,335,156,156',
',13,,,,156,,13,,155,155,13,,,335,13,155,,,,335,,335,,335,335,,335,335',
'335,,335,335,335,335,,,335,335,,,335,322,322,335,154,322,,322,,,,335',
',,,150,,335,154,,154,335,154,,322,335,,,,150,322,150,322,150,322,322',
',322,322,322,,322,322,,154,,,322,322,,,322,177,177,322,150,177,,177',
'154,154,,322,,,,154,,322,,,,322,,,177,322,150,,,,177,,177,,177,177,',
'177,177,177,,177,177,,,,,177,177,,,177,39,39,177,151,39,,39,,,,177,',
',,100,,177,151,,151,177,151,,39,177,,,,100,39,100,39,100,39,39,,39,39',
'39,,39,39,,151,,,39,39,,,39,40,40,39,100,40,,40,,,,39,,,,151,,39,,,',
'39,,,40,39,,,,,40,,40,,40,40,,40,40,40,,40,40,,,,,40,40,,,40,41,41,40',
'102,41,,41,,,,40,,,,,,40,102,,102,40,102,,41,40,,,,,41,,41,,41,41,,41',
'41,41,,41,41,,102,,,41,41,,,41,42,42,41,,42,,42,,,,41,,,,,,41,,,,41',
',,42,41,,,,,42,,42,,42,42,,42,42,42,,42,42,,,,,42,42,,,42,178,178,42',
',178,,178,,,,42,,,,,,42,,,,42,,,178,42,,,,,178,,178,,178,178,,178,178',
'178,,178,178,,,,,178,178,,,178,207,207,178,,207,,207,207,,,178,,,,,',
'178,,,,178,,,207,178,,,,,207,,207,,207,207,,207,207,207,,207,207,207',
'207,,,207,207,,,207,306,306,207,,306,,306,,,,207,,,,,,207,,,,207,,,306',
'207,,,,,306,,306,,306,306,,306,306,306,,306,306,,,,,306,306,,,306,214',
'214,306,,214,,214,214,,,306,,,,,,306,,,,306,,,214,306,,,,,214,,214,',
'214,214,,214,214,214,,214,214,214,214,,,214,214,,,214,49,49,214,,49',
'49,49,,,,214,,,,,,214,,,,214,,,49,214,,,,,49,,49,,49,49,,49,49,49,,49',
'49,,,,,49,49,,,49,50,50,49,,50,50,50,,,,49,,,,,,49,,,,49,,,50,49,,,',
',50,,50,,50,50,,50,50,50,,50,50,,,,,50,50,,,50,51,51,50,,51,,51,51,',
',50,,,,,,50,,,,50,,,51,50,,,,,51,,51,,51,51,,51,51,51,,51,51,,,,,51',
'51,,,51,55,55,51,,55,,55,,,,51,,,,,,51,,,,51,,,55,51,,,,,55,,55,,55',
'55,,55,55,55,,55,55,,,,,55,55,,,55,215,215,55,,215,,215,215,,,55,,,',
',,55,,,,55,,,215,55,,,,,215,,215,,215,215,,215,215,215,,215,215,215',
'215,,,215,215,,,215,65,65,215,,65,,65,,,,215,,,,,,215,,,,215,,,65,215',
',,,,65,,65,,65,65,,65,65,65,,65,65,65,65,,,65,65,,,65,216,216,65,,216',
',216,,,,65,,,,,,65,,,,65,,,216,65,,,,,216,,216,,216,216,,216,216,216',
',216,216,,,,,216,216,,,216,67,67,216,,67,,67,,,,216,,,,,,216,,,,216',
',,67,216,,,,,67,,67,,67,67,,67,67,67,,67,67,67,67,,,67,67,,,67,68,68',
'67,,68,,68,,,,67,,,,,,67,,,,67,,,68,67,,,,,68,,68,,68,68,,68,68,68,',
'68,68,68,68,,,68,68,,,68,69,69,68,,69,,69,,,,68,,,,,,68,,,,68,,,69,68',
',,,,69,,69,,69,69,,69,69,69,,69,69,69,69,,,69,69,,,69,70,70,69,,70,',
'70,,,,69,,,,,,69,,,,69,,,70,69,,,,,70,,70,,70,70,,70,70,70,,70,70,70',
'70,,,70,70,,,70,71,71,70,,71,,71,,,,70,,,,,,70,,,,70,,,71,70,,,,,71',
',71,,71,71,,71,71,71,,71,71,71,71,,,71,71,,,71,72,72,71,,72,,72,,,,71',
',,,,,71,,,,71,,,72,71,,,,,72,,72,,72,72,,72,72,72,,72,72,,,,,72,72,',
',72,73,73,72,,73,,73,,,,72,,,,,,72,,,,72,,,73,72,,,,,73,,73,,73,73,',
'73,73,73,,73,73,,,,,73,73,,,73,74,74,73,,74,,74,,,,73,,,,,,73,,,,73',
',,74,73,,,,,74,,74,,74,74,,74,74,74,,74,74,,,,,74,74,,,74,75,75,74,',
'75,,75,,,,74,,,,,,74,,,,74,,,75,74,,,,,75,,75,,75,75,,75,75,75,,75,75',
',,,,75,75,,,75,76,76,75,,76,,76,,,,75,,,,,,75,,,,75,,,76,75,,,,,76,',
'76,,76,76,,76,76,76,,76,76,,,,,76,76,,,76,77,77,76,,77,,77,,,,76,,,',
',,76,,,,76,,,77,76,,,,,77,,77,,77,77,,77,77,77,,77,77,,,,,77,77,,,77',
'78,78,77,,78,,78,,,,77,,,,,,77,,,,77,,,78,77,,,,,78,,78,,78,78,,78,78',
'78,,78,78,,,,,78,78,,,78,79,79,78,,79,,79,,,,78,,,,,,78,,,,78,,,79,78',
',,,,79,,79,,79,79,,79,79,79,,79,79,,,,,79,79,,,79,80,80,79,,80,,80,',
',,79,,,,,,79,,,,79,,,80,79,,,,,80,,80,,80,80,,80,80,80,,80,80,,,,,80',
'80,,,80,81,81,80,,81,,81,,,,80,,,,,,80,,,,80,,,81,80,,,,,81,,81,,81',
'81,,81,81,81,,81,81,,,,,81,81,,,81,82,82,81,,82,,82,,,,81,,,,,,81,,',
',81,,,82,81,,,,,82,,82,,82,82,,82,82,82,,82,82,,,,,82,82,,,82,83,83',
'82,,83,,83,,,,82,,,,,,82,,,,82,,,83,82,,,,,83,,83,,83,83,,83,83,83,',
'83,83,,,,,83,83,,,83,84,84,83,,84,,84,,,,83,,,,,,83,,,,83,,,84,83,,',
',,84,,84,,84,84,,84,84,84,,84,84,,,,,84,84,,,84,85,85,84,,85,,85,,,',
'84,,,,,,84,,,,84,,,85,84,,,,,85,,85,,85,85,,85,85,85,,85,85,,,,,85,85',
',,85,86,86,85,,86,,86,,,,85,,,,,,85,,,,85,,,86,85,,,,,86,,86,,86,86',
',86,86,86,,86,86,,,,,86,86,,,86,87,87,86,,87,,87,,,,86,,,,,,86,,,,86',
',,87,86,,,,,87,,87,,87,87,,87,87,87,,87,87,,,,,87,87,,,87,88,88,87,',
'88,,88,,,,87,,,,,,87,,,,87,,,88,87,,,,,88,,88,,88,88,,88,88,88,,88,88',
',,,,88,88,,,88,89,89,88,,89,,89,,,,88,,,,,,88,,,,88,,,89,88,,,,,89,',
'89,,89,89,,89,89,89,,89,89,,,,,89,89,,,89,90,90,89,,90,,90,,,,89,,,',
',,89,,,,89,,,90,89,,,,,90,,90,,90,90,,90,90,90,,90,90,,,,,90,90,,,90',
'91,91,90,,91,,91,,,,90,,,,,,90,,,,90,,,91,90,,,,,91,,91,,91,91,,91,91',
'91,,91,91,,,,,91,91,,,91,92,92,91,,92,,92,,,,91,,,,,,91,,,,91,,,92,91',
',,,,92,,92,,92,92,,92,92,92,,92,92,,,,,92,92,,,92,93,93,92,,93,,93,',
',,92,,,,,,92,,,,92,,,93,92,,,,,93,,93,,93,93,,93,93,93,,93,93,,,,,93',
'93,,,93,94,94,93,,94,,94,,,,93,,,,,,93,,,,93,,,94,93,,,,,94,,94,,94',
'94,,94,94,94,,94,94,,,,,94,94,,,94,293,293,94,,293,,293,293,,,94,,,',
',,94,,,94,94,,,293,94,,,,,293,,293,,293,293,,293,293,293,,293,293,293',
'293,,,293,293,,,293,96,96,293,,96,,96,,,,293,,,,,,293,,,,293,,,96,293',
',,,,96,96,96,96,96,96,96,96,96,96,,96,96,,,,,96,96,96,96,96,292,292',
'96,,292,,292,,,,96,,,,,96,96,,,,96,,,292,96,,,,,292,,292,,292,292,,292',
'292,292,,292,292,292,292,,,292,292,,,292,98,98,292,,98,,98,,,,292,,',
',,,292,,,,292,,,98,292,,,,,98,,98,,98,98,,98,98,98,,98,98,,,,,98,98',
',,98,99,99,98,,99,,99,,,,98,,,,,,98,,,,98,,,99,98,,,,,99,,99,,99,99',
',99,99,99,,99,99,,,,,99,99,,,99,281,281,99,,281,,281,281,,,99,,,,,,99',
',,,99,,,281,99,,,,,281,,281,,281,281,,281,281,281,,281,281,,,,,281,281',
',,281,274,274,281,,274,,274,,,,281,,,,,,281,,,,281,,,274,281,,,,,274',
',274,,274,274,,274,274,274,,274,274,,,,,274,274,,,274,267,267,274,,267',
',267,,,,274,,,,,,274,,,,274,,,267,274,,,,,267,,267,,267,267,,267,267',
'267,,267,267,,,,,267,267,,,267,217,217,267,,217,,217,,,,267,,,,,,267',
',,,267,,,217,267,,,,,217,217,217,217,217,217,217,217,217,217,,217,217',
',,,,217,217,217,217,217,,,217,104,104,,,104,,104,217,,,,,217,217,,,',
'217,,,,217,,104,104,,,,,104,,104,,104,104,,104,104,104,,104,104,,,,',
'104,104,,,104,253,253,104,,253,,253,,,,104,,,,,,104,,,,104,,,253,104',
',,,,253,,253,,253,253,,253,253,253,,253,253,,,,,253,253,,,253,252,252',
'253,,252,,252,,,,253,,,,,,253,,,,253,,,252,253,,,,,252,,252,,252,252',
',252,252,252,,252,252,,,,,252,252,,,252,,,252,108,108,,,108,,108,252',
',,,,,252,,,,252,,,,252,,108,108,,,,,108,,108,,108,108,,108,108,108,',
'108,108,,,,,108,108,,,108,218,218,108,,218,,218,,,,108,,,,,,108,,,,108',
',,218,108,,,,,218,,218,,218,218,,218,218,218,,218,218,,,,,218,218,,',
'218,176,176,218,,176,,176,,,,218,,,,,,218,,,,218,,,176,218,,,,,176,',
'176,,176,176,,176,176,176,,176,176,,,,,176,176,,,176,231,231,176,,231',
'231,231,,,,176,,,,,,176,,,,176,,,231,176,,,,,231,,231,,231,231,,231',
'231,231,,231,231,,,,,231,231,,,231,233,233,231,,233,,233,,,,231,,,,',
',231,,,,231,,,233,231,,,,,233,,233,,233,233,,233,233,233,,233,233,,',
',,233,233,,,233,249,249,233,,249,,249,,,,233,,,,,,233,,,,233,,,249,233',
',,,,249,,249,,249,249,,249,249,249,,249,249,,,,,249,249,,,249,115,115',
'249,,115,,115,,,,249,,,,,,249,,,,249,,,115,249,,,,,115,,115,,115,115',
',115,115,115,,115,115,,,,,115,115,,,115,243,243,115,,243,,243,,,,115',
',,,,,115,,,,115,,,243,115,,,,,243,,243,,243,243,,243,243,243,,243,243',
',,,,243,243,,,243,242,242,243,,242,,242,,,,243,,,,,,243,,,,243,,,242',
'243,,,,,242,,242,,242,242,,242,242,242,,242,242,,,,,242,242,,,242,240',
'240,242,,240,,240,,,,242,,,,,,242,,,,242,,,240,242,,,,,240,,240,,240',
'240,,240,240,240,,240,240,,,,,240,240,,,240,235,235,240,,235,,235,235',
',,240,,,,,,240,,,,240,,,235,240,,,,,235,,235,,235,235,,235,235,235,',
'235,235,,,,,235,235,,,235,229,229,235,,229,229,229,,,,235,,,,,,235,',
',,235,,,229,235,,,,,229,,229,,229,229,,229,229,229,,229,229,,,,,229',
'229,,,229,,,229,,,,,,,,229,,,,,,229,113,,113,229,,,,229,,113,113,113',
'113,113,113,,113,,113,,,113,113,113,113,,,,,,,,,,,,,,,,113,,,,113,113',
',,113,113,113,113,113,113,,113,113,112,,112,,,113,,,,112,112,112,112',
'112,112,113,112,,112,,,112,112,112,112,,,,,,,,,,,,,,,,112,,,,112,112',
',,112,112,112,112,112,112,,112,112,,,,,,112,,134,,,,,134,,,112,134,134',
'134,134,134,134,,134,,134,,,134,134,134,134,,,,,,,,,,,,,,,,134,,,,134',
'134,,,134,134,134,134,134,134,,134,134,111,,111,,,134,,,,111,111,111',
'111,111,111,134,111,,111,,,111,111,111,111,,,,,,,,,,,,,,,,111,,,,111',
'111,,,111,111,111,111,111,111,,111,111,138,,,,,111,,,,138,138,138,138',
'138,138,111,138,,138,,,138,138,138,138,,,,,,,,,,,,,,,,138,,,,138,138',
',,138,138,138,138,138,138,,138,138,109,,109,,,138,,,,109,109,109,109',
'109,109,138,109,,109,,,109,109,109,109,,,,,,,,,,,,,,,,109,,,,109,109',
',,109,109,109,109,109,109,,109,109,103,,,,,109,,,,103,103,103,103,103',
'103,109,103,,103,,103,103,103,103,103,,,,,,,,,,,,,,,,103,,,,103,103',
',,103,103,103,103,103,103,,103,103,297,,,,,103,,,,297,297,297,297,297',
'297,103,297,,297,,,297,297,297,297,,,,,,,,,,,,,,,,297,,,,297,297,,,297',
'297,297,297,297,297,,297,297,300,,,,,297,,,,300,300,300,300,300,300',
'297,300,,300,,,300,300,300,300,,,,,,,,,,,,,,,,300,,,,300,300,,,300,300',
'300,300,300,300,,300,300,304,,,,,300,,,,304,304,304,304,304,304,300',
'304,,304,,,304,304,304,304,,,,,,,,,,,,,,,,304,,,,304,304,,,304,304,304',
'304,304,304,,304,304,312,,,,,304,,,,312,312,312,312,312,312,304,312',
',312,,,312,312,312,312,,,,,,,,,,,,,,,,312,,,,312,312,,,312,312,312,312',
'312,312,,312,312,199,,,,,312,,,,199,199,199,199,199,199,312,199,,199',
',,199,199,199,199,,,,,,,,,,,,,,,,199,,,,199,199,,,199,199,199,199,199',
'199,,199,199,313,,,,,199,,,,313,313,313,313,313,313,199,313,,313,,,313',
'313,313,313,,,,,,,,,,,,,,,,313,,,,313,313,,,313,313,313,313,313,313',
',313,313,319,,,,,313,,,,319,319,319,319,319,319,313,319,,319,,,319,319',
'319,319,159,,,,,,,,,,,,,,159,319,159,,159,319,319,,,319,319,319,319',
'319,319,,319,319,,,,,,319,,,159,,,160,,,,319,159,159,159,159,159,159',
',159,159,160,,160,,160,159,,,,,,161,,,,159,,,,,,,,,161,161,160,161,',
'161,,,161,,160,160,160,160,160,160,,160,160,,,,,,160,,,161,,,,,162,',
'160,161,161,161,161,161,161,,161,161,,162,162,,162,161,162,,,162,,,',
'163,,161,,,,,,,,,,,163,163,162,163,,163,,,163,,162,162,162,162,162,162',
',162,162,,,,,,162,,,163,,,,,164,,162,163,163,163,163,163,163,,163,163',
',164,164,,164,163,164,,,164,,,,,,163,,,,,,,,,,,,,164,,,,,165,,,164,164',
'164,164,164,164,,164,164,165,165,165,,165,164,165,,,165,165,165,165',
',,164,,,,,,,,,,,,,165,,,,,166,,,165,165,165,165,165,165,,165,165,166',
'166,166,,166,165,166,,,166,166,166,166,,,165,,,,,,,,,,,,,166,,,,,166',
',,166,166,166,166,166,166,,166,166,167,,,,,166,,,,167,167,167,167,167',
'167,166,167,,167,,,167,167,167,167,,,,,,,,,,,,,,,,167,,,,167,167,,,167',
'167,167,167,167,167,,167,167,168,,,,,167,,,,168,168,168,168,168,168',
'167,168,,168,,,168,168,168,168,,,,,,,,,,,,,,,,168,,,,168,168,,,168,168',
'168,168,168,168,,168,168,169,,,,,168,,,,169,169,169,169,169,169,168',
'169,,169,,,169,169,169,169,,,,,,,,,,,,,,,,169,,,,169,169,,,169,169,169',
'169,169,169,,169,169,,,,,,169,,170,,,,,170,,,169,170,170,170,170,170',
'170,,170,,170,,,170,170,170,170,,,,,,,,,,,,,,,,170,,,,170,170,,,170',
'170,170,170,170,170,,170,170,10,,10,,,170,,,,10,10,10,10,10,10,170,10',
',10,,,10,10,10,10,,,,,,,,,,,,,,,,10,,,,10,10,,,10,10,10,10,10,10,,10',
'10,,,,,,10,,175,,,,,,,,10,175,175,175,175,175,175,175,175,,175,,,175',
'175,175,175,,,,,,,,,,,,,,,,175,,,,175,175,,,175,175,175,175,175,175',
',175,175,129,,,,,175,,,,129,129,129,129,129,129,175,129,,129,,,129,129',
'129,129,,,,,,,,,,,,,,,,129,,,,129,129,,,129,129,129,129,129,129,,129',
'129,,246,246,246,246,129,246,246,246,246,246,,246,246,,129,,,,,246,246',
'246,198,198,198,198,,198,198,198,198,198,,198,198,,,246,246,,,198,198',
'198,251,251,251,251,,251,251,251,251,251,,251,251,,,198,198,,,251,251',
'251,,,,,,,,,,,,,,,,251,251' ]
        racc_action_check = arr = ::Array.new(5652, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   315,   nil,   nil,   100,   302,   nil,   233,   nil,   nil,
  5384,   304,   355,   406,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   269,   202,   239,   610,
   661,   712,   763,    75,   209,   nil,   139,    16,   nil,  1018,
  1069,  1120,   nil,   nil,   nil,  1171,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   239,  1273,   219,  1375,  1426,  1477,
  1528,  1579,  1630,  1681,  1732,  1783,  1834,  1885,  1936,  1987,
  2038,  2089,  2140,  2191,  2242,  2293,  2344,  2395,  2446,  2497,
  2548,  2599,  2650,  2701,  2752,   190,  2854,   221,  2956,  3007,
   620,    60,   711,  4395,  3265,   nil,   143,   -10,  3421,  4338,
   nil,  4224,  4103,  4046,    87,  3727,    24,   nil,   nil,   nil,
   nil,   252,    87,   nil,   189,   nil,   nil,   nil,   nil,  5505,
     4,   nil,    66,   nil,  4167,   153,   nil,   nil,  4281,   nil,
    22,   nil,   134,   nil,   nil,   nil,   nil,   nil,     3,   303,
   518,   609,     8,   110,   507,   416,   405,   212,   314,  4819,
  4862,  4887,  4932,  4957,  5002,  5047,  5092,  5149,  5206,  5263,
  5327,   nil,   nil,   253,   nil,  5448,  3523,   559,   814,   219,
   237,   nil,   nil,    13,   nil,    -9,    24,    77,   128,     5,
     9,    10,   nil,   nil,   nil,   nil,   nil,   nil,  5560,  4680,
   196,   nil,   202,   nil,   204,   145,   nil,   865,   nil,   190,
   nil,   165,    -9,   nil,   967,  1222,  1324,  3211,  3472,    87,
    77,   nil,   -13,   129,   262,   107,   nil,   118,   273,  3982,
   nil,  3574,   nil,  3625,   nil,  3931,   nil,   nil,   nil,   nil,
  3880,   nil,  3829,  3778,    78,   nil,  5538,   nil,   110,  3676,
   120,  5582,  3367,  3316,   162,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  3160,   166,   nil,
   188,   nil,   128,   166,  3109,   nil,   198,    73,   203,   181,
    60,  3058,   nil,   176,   207,   180,   213,   215,   nil,   -31,
   nil,   214,  2905,  2803,   nil,   nil,   nil,  4452,   nil,   nil,
  4509,   nil,   nil,   nil,  4566,   239,   916,   240,   nil,   nil,
   nil,   nil,  4623,  4737,   253,   193,   nil,   nil,   nil,  4794,
   151,   nil,   508,   268,     7,   nil,   273,   274,   nil,   nil,
   nil,   274,   276,   278,   nil,   457,   nil,   nil,   nil,   277,
   295,   nil,   nil,   302,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   202,   nil,   151,    49,   nil,   nil,   nil,   308,
   nil,   nil,   nil,   309,   nil,   310,   nil,   312,   nil,   nil,
   nil,   nil,   nil ]

racc_action_default = [
  -212,  -213,    -1,    -2,    -3,    -4,    -7,    -9,   -10,   -15,
  -105,  -213,  -213,  -213,   -44,   -45,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,
   -60,   -61,   -62,   -63,   -64,   -65,   -70,   -71,   -75,  -213,
  -213,  -213,  -213,  -213,  -116,  -118,  -213,  -213,  -163,  -213,
  -213,  -213,  -176,  -177,  -178,  -213,  -180,  -187,  -188,  -189,
  -190,  -191,  -192,  -193,  -213,  -213,    -6,  -213,  -213,  -213,
  -213,  -213,  -213,  -213,  -213,  -213,  -213,  -213,  -213,  -213,
  -213,  -213,  -213,  -213,  -213,  -213,  -213,  -213,  -213,  -213,
  -213,  -213,  -213,  -213,  -213,  -213,  -125,  -120,  -212,  -212,
   -27,  -213,   -34,  -213,  -213,   -72,  -213,  -213,  -213,  -213,
   -82,  -213,  -213,  -213,  -213,  -213,  -212,  -135,  -154,  -155,
  -117,  -212,  -212,  -144,  -146,  -147,  -148,  -149,  -150,   -42,
  -213,  -166,  -213,  -169,  -213,  -213,  -172,  -173,  -184,  -179,
  -213,   373,    -5,    -8,   -11,   -12,   -13,   -14,  -213,   -17,
   -18,   -19,   -20,   -21,   -22,   -23,   -24,   -25,   -26,   -28,
   -29,   -30,   -31,   -32,   -33,   -35,   -36,   -37,   -38,   -39,
  -213,   -40,  -100,  -213,   -76,  -213,  -205,  -211,  -199,  -196,
  -194,  -114,  -126,  -188,  -129,  -192,  -213,  -202,  -200,  -208,
  -190,  -191,  -198,  -203,  -204,  -206,  -207,  -209,  -125,  -124,
  -213,  -123,  -213,   -41,  -194,   -67,   -77,  -213,   -80,  -194,
  -159,  -162,  -213,   -74,  -213,  -213,  -213,  -125,  -213,  -196,
  -212,  -156,  -213,  -213,  -213,  -213,  -152,  -213,  -213,  -213,
  -164,  -213,  -167,  -213,  -170,  -213,  -181,  -182,  -183,  -185,
  -213,   -16,  -213,  -213,  -194,  -102,  -125,  -113,  -213,  -197,
  -213,  -195,  -213,  -213,  -194,  -128,  -130,  -199,  -200,  -201,
  -202,  -205,  -208,  -210,  -211,  -121,  -122,  -195,  -213,   -69,
  -213,   -79,  -213,  -195,  -213,   -73,  -213,   -85,  -213,   -91,
  -213,  -213,   -95,  -196,  -194,  -196,  -213,  -213,  -138,  -213,
  -157,  -194,  -212,  -213,  -145,  -153,  -151,   -43,  -165,  -168,
  -175,  -171,  -174,  -186,  -104,  -213,  -195,  -194,  -108,  -115,
  -109,  -127,  -131,  -132,  -213,   -66,   -78,   -81,  -160,  -161,
   -85,   -84,  -213,  -213,   -91,   -90,  -213,  -213,   -99,   -94,
   -96,  -213,  -213,  -213,  -111,  -212,  -139,  -140,  -141,  -213,
  -213,  -136,  -137,  -213,  -143,  -101,  -103,  -112,  -119,   -68,
   -83,   -86,  -213,   -89,  -213,  -213,  -106,  -107,  -110,  -213,
  -158,  -133,  -142,  -213,   -88,  -213,   -93,  -213,   -98,  -134,
   -87,   -92,   -97 ]

racc_goto_table = [
     2,   139,     3,   100,   102,   103,   105,   121,   172,   137,
   127,   125,   180,   209,   325,   248,   179,   321,   340,   294,
   220,   295,   200,   202,   282,   223,   244,   309,   250,   246,
   327,   109,   111,   112,   113,   219,    66,   311,   281,   130,
   132,   129,   129,   134,   351,   206,   287,   138,   144,   145,
   146,   147,   268,   336,   224,   286,   171,   272,   318,   353,
   350,   359,   148,   135,   129,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   245,   175,   330,
   199,   199,   305,   143,   204,     1,   129,   142,   212,   239,
   129,   240,   314,   238,   nil,   nil,   nil,   175,   nil,   nil,
   nil,   nil,   nil,   nil,   254,   nil,   nil,   nil,   221,   331,
   nil,   333,   nil,   221,   226,   nil,   nil,   nil,   291,   nil,
   nil,   nil,   332,   284,   nil,   nil,   nil,   283,   285,   339,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   121,   nil,
   nil,   nil,   127,   125,   nil,   347,   nil,   nil,   nil,   nil,
   nil,   nil,   307,   nil,   nil,   170,   nil,   nil,   109,   111,
   112,   nil,   nil,   nil,   269,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   303,   nil,   127,   125,
   127,   125,   nil,   302,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   270,   129,   175,
   175,   nil,   nil,   nil,   276,   278,   nil,   nil,   nil,   nil,
   346,   297,   288,   297,   nil,   300,   nil,   134,   nil,   nil,
   nil,   nil,   138,   nil,   297,   304,   nil,   nil,   nil,   nil,
   nil,   175,   nil,   nil,   312,   313,   nil,   nil,   nil,   nil,
   337,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   297,
   nil,   nil,   nil,   nil,   nil,   nil,   319,   nil,   nil,   nil,
   nil,   nil,   nil,   129,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   349,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   343,   342,   nil,   nil,   nil,   170,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   109,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   342,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   363,   nil,   365,   367 ]

racc_goto_check = [
     2,    78,     3,     9,     9,     9,    37,    62,    49,    74,
    29,    35,    54,    42,    45,    53,    52,    44,    64,    70,
    63,    70,    58,    58,    47,    63,    50,    55,    36,    56,
    48,     9,     9,     9,     9,    52,     5,    59,    46,    11,
    11,     9,     9,     9,    43,    41,    66,     9,     7,     7,
     7,     7,    36,    67,    69,    53,    12,    36,    72,    45,
    44,    64,    11,    73,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,    49,     9,    47,
     9,     9,    36,     6,    11,     1,     9,     5,    11,    79,
     9,    80,    36,    82,   nil,   nil,   nil,     9,   nil,   nil,
   nil,   nil,   nil,   nil,    54,   nil,   nil,   nil,     3,    53,
   nil,    53,   nil,     3,     3,   nil,   nil,   nil,    42,   nil,
   nil,   nil,    36,    54,   nil,   nil,   nil,    52,    52,    36,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    62,   nil,
   nil,   nil,    29,    35,   nil,    36,   nil,   nil,   nil,   nil,
   nil,   nil,    54,   nil,   nil,     9,   nil,   nil,     9,     9,
     9,   nil,   nil,   nil,    37,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    78,   nil,    29,    35,
    29,    35,   nil,    74,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,     9,     9,
     9,   nil,   nil,   nil,     2,     2,   nil,   nil,   nil,   nil,
    49,     9,     3,     9,   nil,     9,   nil,     9,   nil,   nil,
   nil,   nil,     9,   nil,     9,     9,   nil,   nil,   nil,   nil,
   nil,     9,   nil,   nil,     9,     9,   nil,   nil,   nil,   nil,
    62,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     9,
   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,
   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    37,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,     3,   nil,   nil,   nil,     9,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    95,     0,     2,   nil,    32,    26,   -20,   nil,    -8,
   nil,   -10,   -38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -37,
   nil,   nil,   nil,   nil,   nil,   -36,  -152,   -31,   nil,   nil,
   nil,   -61,   -94,  -278,  -260,  -265,  -178,  -192,  -250,   -86,
  -147,   nil,   -80,  -164,   -84,  -222,  -146,   nil,   -76,  -214,
   nil,   nil,   -39,   -96,  -274,   nil,  -174,  -236,   nil,   -68,
  -206,   nil,  -215,    12,   -42,   nil,   nil,   nil,   -54,   -41,
   -39,   nil,   -37 ]

racc_goto_default = [
   nil,   nil,   341,   201,     4,     5,     6,     7,     8,    10,
     9,   280,   nil,    14,    36,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,   nil,   nil,    37,    38,
   106,   nil,   nil,   110,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    42,   nil,   nil,   nil,   181,   nil,    97,   nil,   182,
   186,   184,   117,   nil,   nil,   116,   nil,   nil,   122,   nil,
   123,   124,   210,   nil,   nil,    52,    53,    55,   nil,   nil,
   nil,   140,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 82, :_reduce_1,
  1, 82, :_reduce_none,
  1, 83, :_reduce_3,
  1, 85, :_reduce_4,
  3, 85, :_reduce_5,
  2, 85, :_reduce_6,
  1, 86, :_reduce_7,
  3, 86, :_reduce_8,
  1, 87, :_reduce_none,
  1, 88, :_reduce_10,
  3, 88, :_reduce_11,
  3, 88, :_reduce_12,
  3, 88, :_reduce_13,
  3, 88, :_reduce_14,
  1, 90, :_reduce_none,
  4, 90, :_reduce_16,
  3, 90, :_reduce_17,
  3, 90, :_reduce_18,
  3, 90, :_reduce_19,
  3, 90, :_reduce_20,
  3, 90, :_reduce_21,
  3, 90, :_reduce_22,
  3, 90, :_reduce_23,
  3, 90, :_reduce_24,
  3, 90, :_reduce_25,
  3, 90, :_reduce_26,
  2, 90, :_reduce_27,
  3, 90, :_reduce_28,
  3, 90, :_reduce_29,
  3, 90, :_reduce_30,
  3, 90, :_reduce_31,
  3, 90, :_reduce_32,
  3, 90, :_reduce_33,
  2, 90, :_reduce_34,
  3, 90, :_reduce_35,
  3, 90, :_reduce_36,
  3, 90, :_reduce_37,
  3, 90, :_reduce_38,
  3, 90, :_reduce_39,
  3, 90, :_reduce_40,
  3, 90, :_reduce_41,
  1, 92, :_reduce_42,
  3, 92, :_reduce_43,
  1, 91, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 111, :_reduce_64,
  1, 111, :_reduce_65,
  5, 94, :_reduce_66,
  3, 94, :_reduce_67,
  6, 94, :_reduce_68,
  4, 94, :_reduce_69,
  1, 94, :_reduce_70,
  1, 98, :_reduce_71,
  2, 98, :_reduce_72,
  4, 119, :_reduce_73,
  3, 119, :_reduce_74,
  1, 119, :_reduce_75,
  3, 120, :_reduce_76,
  2, 118, :_reduce_77,
  3, 122, :_reduce_78,
  2, 122, :_reduce_79,
  2, 121, :_reduce_80,
  4, 121, :_reduce_81,
  2, 101, :_reduce_82,
  5, 124, :_reduce_83,
  4, 124, :_reduce_84,
  0, 125, :_reduce_none,
  2, 125, :_reduce_86,
  4, 125, :_reduce_87,
  3, 125, :_reduce_88,
  6, 102, :_reduce_89,
  5, 102, :_reduce_90,
  0, 126, :_reduce_none,
  4, 126, :_reduce_92,
  3, 126, :_reduce_93,
  5, 100, :_reduce_94,
  1, 127, :_reduce_95,
  2, 127, :_reduce_96,
  5, 128, :_reduce_97,
  4, 128, :_reduce_98,
  1, 129, :_reduce_99,
  1, 93, :_reduce_none,
  4, 93, :_reduce_101,
  1, 131, :_reduce_102,
  3, 131, :_reduce_103,
  3, 130, :_reduce_104,
  1, 89, :_reduce_105,
  6, 89, :_reduce_106,
  6, 89, :_reduce_107,
  5, 89, :_reduce_108,
  5, 89, :_reduce_109,
  6, 89, :_reduce_110,
  5, 89, :_reduce_111,
  4, 136, :_reduce_112,
  1, 137, :_reduce_113,
  1, 133, :_reduce_114,
  3, 133, :_reduce_115,
  1, 132, :_reduce_116,
  2, 132, :_reduce_117,
  1, 132, :_reduce_118,
  6, 99, :_reduce_119,
  2, 99, :_reduce_120,
  3, 138, :_reduce_121,
  3, 138, :_reduce_122,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  0, 135, :_reduce_125,
  1, 135, :_reduce_126,
  3, 135, :_reduce_127,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  3, 140, :_reduce_131,
  3, 140, :_reduce_132,
  6, 103, :_reduce_133,
  7, 104, :_reduce_134,
  1, 146, :_reduce_135,
  1, 145, :_reduce_none,
  1, 145, :_reduce_none,
  1, 147, :_reduce_none,
  2, 147, :_reduce_139,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  6, 105, :_reduce_142,
  5, 105, :_reduce_143,
  1, 149, :_reduce_144,
  3, 149, :_reduce_145,
  1, 151, :_reduce_146,
  1, 151, :_reduce_147,
  1, 151, :_reduce_148,
  1, 151, :_reduce_none,
  1, 152, :_reduce_150,
  3, 152, :_reduce_151,
  1, 150, :_reduce_none,
  2, 150, :_reduce_153,
  1, 143, :_reduce_154,
  1, 143, :_reduce_155,
  1, 144, :_reduce_156,
  2, 144, :_reduce_157,
  4, 144, :_reduce_158,
  1, 123, :_reduce_159,
  3, 123, :_reduce_160,
  3, 153, :_reduce_161,
  1, 153, :_reduce_162,
  1, 97, :_reduce_163,
  3, 106, :_reduce_164,
  4, 106, :_reduce_165,
  2, 106, :_reduce_166,
  3, 106, :_reduce_167,
  4, 106, :_reduce_168,
  2, 106, :_reduce_169,
  3, 109, :_reduce_170,
  4, 109, :_reduce_171,
  2, 109, :_reduce_172,
  1, 154, :_reduce_173,
  3, 154, :_reduce_174,
  3, 155, :_reduce_175,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 156, :_reduce_178,
  2, 157, :_reduce_179,
  1, 158, :_reduce_180,
  1, 160, :_reduce_181,
  1, 161, :_reduce_182,
  2, 159, :_reduce_183,
  1, 162, :_reduce_184,
  1, 163, :_reduce_185,
  2, 163, :_reduce_186,
  1, 112, :_reduce_187,
  1, 115, :_reduce_188,
  1, 113, :_reduce_189,
  1, 114, :_reduce_190,
  1, 108, :_reduce_191,
  1, 107, :_reduce_192,
  1, 110, :_reduce_193,
  0, 117, :_reduce_none,
  1, 117, :_reduce_195,
  0, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  0, 84, :_reduce_212 ]

racc_reduce_n = 213

racc_shift_n = 373

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :DELETES => 17,
  :LESSEQUAL => 18,
  :NOTEQUAL => 19,
  :DOT => 20,
  :COLON => 21,
  :LLCOLLECT => 22,
  :RRCOLLECT => 23,
  :QMARK => 24,
  :LPAREN => 25,
  :RPAREN => 26,
  :ISEQUAL => 27,
  :GREATEREQUAL => 28,
  :GREATERTHAN => 29,
  :LESSTHAN => 30,
  :IF => 31,
  :ELSE => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :ATAT => 45,
  :LCOLLECT => 46,
  :RCOLLECT => 47,
  :CLASSREF => 48,
  :NOT => 49,
  :OR => 50,
  :AND => 51,
  :UNDEF => 52,
  :PARROW => 53,
  :PLUS => 54,
  :MINUS => 55,
  :TIMES => 56,
  :DIV => 57,
  :LSHIFT => 58,
  :RSHIFT => 59,
  :UMINUS => 60,
  :MATCH => 61,
  :NOMATCH => 62,
  :REGEX => 63,
  :IN_EDGE => 64,
  :OUT_EDGE => 65,
  :IN_EDGE_SUB => 66,
  :OUT_EDGE_SUB => 67,
  :IN => 68,
  :UNLESS => 69,
  :PIPE => 70,
  :LAMBDA => 71,
  :SELBRACE => 72,
  :NUMBER => 73,
  :LOW => 74,
  :HIGH => 75,
  :CALL => 76,
  :LISTSTART => 77,
  :MODULO => 78,
  :TITLE_COLON => 79,
  :CASE_COLON => 80 }

racc_nt_base = 81

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "LOW",
  "HIGH",
  "CALL",
  "LISTSTART",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "number",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 59)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'egrammar.ra', 64)
  def _reduce_3(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_4(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 71)
  def _reduce_5(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 72)
  def _reduce_6(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 76)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 77)
  def _reduce_8(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 84)
  def _reduce_11(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 85)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 86)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 87)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_16(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_17(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_18(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_19(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_20(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_21(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_22(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_23(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_24(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_25(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_26(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_27(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_28(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_29(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_30(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_31(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_32(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_33(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_34(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_35(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_36(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_37(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_38(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_39(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_40(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 119)
  def _reduce_41(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_42(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 128)
  def _reduce_43(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

module_eval(<<'.,.,', 'egrammar.ra', 159)
  def _reduce_64(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 160)
  def _reduce_65(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 168)
  def _reduce_66(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 172)
  def _reduce_67(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 176)
  def _reduce_68(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_69(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 185)
  def _reduce_70(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 190)
  def _reduce_71(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 191)
  def _reduce_72(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_73(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 195)
  def _reduce_74(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_75(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_76(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_77(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_78(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_79(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 223)
  def _reduce_80(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 224)
  def _reduce_81(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 234)
  def _reduce_82(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 241)
  def _reduce_83(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 245)
  def _reduce_84(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 85 omitted

module_eval(<<'.,.,', 'egrammar.ra', 253)
  def _reduce_86(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 257)
  def _reduce_87(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 261)
  def _reduce_88(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 270)
  def _reduce_89(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 274)
  def _reduce_90(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 91 omitted

module_eval(<<'.,.,', 'egrammar.ra', 284)
  def _reduce_92(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 288)
  def _reduce_93(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 296)
  def _reduce_94(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 302)
  def _reduce_95(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 303)
  def _reduce_96(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 308)
  def _reduce_97(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 312)
  def _reduce_98(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 316)
  def _reduce_99(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'egrammar.ra', 327)
  def _reduce_101(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 332)
  def _reduce_102(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 333)
  def _reduce_103(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 338)
  def _reduce_104(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 350)
  def _reduce_105(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 353)
  def _reduce_106(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error val[1], "A resource default can not be virtual or exported"
      when :override
        error val[1], "A resource override can not be virtual or exported"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 368)
  def _reduce_107(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class, :defaults, :override
        error val[1], "Defaults are not virtualizable"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 376)
  def _reduce_108(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error val[1], "A resource default can not specify a resource name"
      when :override
        error val[1], "A resource override does not allow override of name of resource"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 389)
  def _reduce_109(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        error val[1], "All resource specifications require names"
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 404)
  def _reduce_110(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        result.form = val[0]
        loc result, val[1], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 409)
  def _reduce_111(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 414)
  def _reduce_112(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 416)
  def _reduce_113(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 419)
  def _reduce_114(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 420)
  def _reduce_115(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 425)
  def _reduce_116(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 426)
  def _reduce_117(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 427)
  def _reduce_118(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 439)
  def _reduce_119(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 443)
  def _reduce_120(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 448)
  def _reduce_121(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 449)
  def _reduce_122(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 123 omitted

# reduce 124 omitted

module_eval(<<'.,.,', 'egrammar.ra', 462)
  def _reduce_125(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 463)
  def _reduce_126(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 464)
  def _reduce_127(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

module_eval(<<'.,.,', 'egrammar.ra', 480)
  def _reduce_131(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 484)
  def _reduce_132(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 494)
  def _reduce_133(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 508)
  def _reduce_134(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 518)
  def _reduce_135(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

module_eval(<<'.,.,', 'egrammar.ra', 527)
  def _reduce_139(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

module_eval(<<'.,.,', 'egrammar.ra', 544)
  def _reduce_142(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 548)
  def _reduce_143(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], nil))
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 558)
  def _reduce_144(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 559)
  def _reduce_145(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 564)
  def _reduce_146(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 565)
  def _reduce_147(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 566)
  def _reduce_148(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 149 omitted

module_eval(<<'.,.,', 'egrammar.ra', 570)
  def _reduce_150(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 571)
  def _reduce_151(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 152 omitted

module_eval(<<'.,.,', 'egrammar.ra', 576)
  def _reduce_153(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 582)
  def _reduce_154(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_155(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 587)
  def _reduce_156(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 588)
  def _reduce_157(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_158(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 593)
  def _reduce_159(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 594)
  def _reduce_160(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 598)
  def _reduce_161(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 599)
  def _reduce_162(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 612)
  def _reduce_163(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 618)
  def _reduce_164(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 619)
  def _reduce_165(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_166(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_167(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_168(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 623)
  def _reduce_169(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_170(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_171(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 628)
  def _reduce_172(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 631)
  def _reduce_173(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 632)
  def _reduce_174(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 635)
  def _reduce_175(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 176 omitted

# reduce 177 omitted

module_eval(<<'.,.,', 'egrammar.ra', 641)
  def _reduce_178(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_179(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_180(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_181(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_182(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_183(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_184(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_185(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_186(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_187(val, _values, result)
     result = Factory.NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_188(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_189(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_190(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_191(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_192(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_193(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 194 omitted

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_195(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_212(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
