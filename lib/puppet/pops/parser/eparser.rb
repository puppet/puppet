#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 703)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'52,54,-204,244,47,218,49,110,234,-126,224,281,233,243,-124,223,-195',
'234,52,54,205,267,13,205,215,52,54,113,38,220,44,112,46,42,113,45,59',
'55,112,40,58,43,-204,245,56,12,52,54,57,-126,47,11,49,356,-124,118,-195',
'202,120,60,113,234,55,226,112,39,227,327,13,318,222,48,229,228,38,221',
'44,60,46,42,298,45,59,55,60,40,58,43,201,300,56,12,52,54,57,113,47,11',
'49,112,113,313,113,312,112,60,112,65,67,66,68,39,215,313,13,312,284',
'48,283,243,38,280,44,305,46,42,306,45,59,55,62,40,58,43,307,205,56,12',
'52,54,57,192,47,11,49,354,310,241,314,316,64,60,168,241,243,323,324',
'39,266,265,13,265,103,48,64,134,38,259,44,333,46,42,258,45,59,55,296',
'40,58,43,114,257,56,12,52,54,57,336,47,11,49,352,103,104,243,103,340',
'60,316,342,52,54,343,39,344,345,13,100,348,48,349,350,38,241,44,64,46',
'42,61,45,59,55,357,40,58,43,358,359,56,12,52,54,57,69,47,11,49,118,360',
',120,,,60,,,91,,95,39,90,,13,,,48,,,38,60,44,,46,97,,45,59,55,,40,58',
'94,,,56,12,52,54,57,69,47,11,49,,,,71,72,,60,,,91,70,95,39,90,,13,,',
'48,,,38,,44,,46,97,,45,59,55,,40,58,94,,,56,12,52,54,57,69,47,11,49',
',,,71,72,,60,,,91,70,95,39,90,,13,,,48,,,38,,44,,46,97,,45,59,55,,40',
'58,94,,,56,12,52,54,57,69,47,11,49,,,,71,72,,60,,,91,70,95,39,90,,13',
',,48,,,38,,44,,46,97,,45,59,55,,40,58,94,,,56,12,52,54,57,,47,11,49',
'347,,,,,,60,,,52,54,,39,,,13,,,48,,,38,,44,,46,42,,45,59,55,,40,58,43',
',,56,12,52,54,57,,47,11,49,55,,,,,,60,,,52,54,,39,,,13,,,48,,,38,60',
'44,,46,97,,45,59,55,,40,58,,,,56,12,52,54,57,,47,11,49,118,,,120,,,60',
',,52,54,,39,,,13,,,48,,,38,60,44,,46,97,,45,59,55,,40,58,,,,56,12,52',
'54,57,69,47,11,49,118,,,120,,,60,,,91,,95,39,90,,13,,,48,,,38,60,44',
',46,97,,45,59,55,,40,58,94,,,56,12,52,54,57,69,47,11,49,,,,,,,60,,,91',
',95,39,90,,13,,,48,,,38,,44,,46,97,,45,59,55,,40,58,94,,,56,12,52,54',
'57,,47,11,49,,,,,,,60,,,,,,39,,,13,,,48,,,38,,44,,46,97,,45,59,55,,40',
'58,,,,56,12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,,,48,,,38,,44,',
'46,97,,45,59,55,,40,58,,,,56,12,52,54,57,,47,11,49,,,,,,,60,,,,,,39',
',,13,,,48,,,38,,44,,46,97,,45,59,55,,40,58,,,,56,12,52,54,57,,47,11',
'49,263,,,,,,60,,,,,,39,,,13,,,48,,,38,,44,,46,42,,45,59,55,,40,58,43',
',,56,12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,,,48,,,38,,44,,46,97',
',45,59,55,,40,58,,,,56,12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,',
',48,,,38,,44,,46,97,,45,59,55,,40,58,,,,56,12,,,57,,,11,52,54,,,47,124',
'49,60,,,,,,39,,,,,,48,,,13,,,,,,38,,44,,46,97,,45,59,55,,40,58,,,,56',
'12,,,57,,,11,52,54,,,47,126,49,60,,,,,,39,,,,,,48,,,13,,,,,,38,,44,',
'46,97,,45,59,55,,40,58,,,,56,12,52,54,57,,47,11,49,129,,,,,,60,,,,,',
'39,,,13,,,48,,,38,,44,,46,97,,45,59,55,,40,58,,,,56,12,52,54,57,,47',
'11,49,,,,,,,60,,,,,,39,,,13,,,48,,,38,,44,,46,97,,45,59,55,,40,58,,',
',56,12,52,54,57,,47,11,49,269,,,,,,60,,,,,,39,,,13,,,48,,,38,,44,,46',
'42,,45,59,55,,40,58,43,,,56,12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,',
',13,,,48,,,38,,44,,46,42,,45,59,55,,40,58,43,,,56,12,52,54,57,,47,11',
'49,271,,,,,,60,,,,,,39,,,13,,,48,,,38,,44,,46,42,,45,59,55,,40,58,43',
',,56,12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,,,48,,,38,,44,,46,42',
',45,59,55,,40,58,43,,,56,12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,,,13',
',,48,,,38,,44,,46,42,,45,59,55,,40,58,43,,,56,12,52,54,57,,47,11,49',
',,,,,,60,,,,,,39,,,13,,,48,,,38,,44,,46,42,,45,59,55,,40,58,43,,,56',
'12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,,,48,,,38,,44,,46,42,,45',
'59,55,,40,58,43,,,56,12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,,,48',
',,38,,44,,46,42,,45,59,55,,40,58,43,,,56,12,52,54,57,,47,11,49,,,,,',
',60,,,,,,39,,,13,,,48,,,38,,44,,46,97,,45,59,55,,40,58,,,,56,12,52,54',
'57,,47,11,49,,,,,,,60,,,,,,39,,,13,,,48,,,38,,44,,46,97,,45,59,55,,40',
'58,,,,56,12,52,54,57,,47,11,49,332,,,,,,60,,,,,,39,,,13,,,48,,,38,,44',
',46,42,,45,59,55,,40,58,43,,,56,12,52,54,57,,47,11,49,330,,,,,,60,,',
',,,39,,,13,,,48,,,38,,44,,46,42,,45,59,55,,40,58,43,,,56,12,52,54,57',
',47,11,49,,,,,,,60,,,,,,39,,,13,,,48,,,38,,44,,46,97,,45,59,55,,40,58',
',,,56,12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,,,48,,,38,,44,,46',
'97,,45,59,55,,40,58,,,,56,12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,,,13',
',,48,,,38,,44,,46,97,,45,59,55,,40,58,,,,56,12,52,54,57,,47,11,49,,',
',,,,60,,,,,,39,,,13,,,48,,,38,,44,,46,97,,45,59,55,,40,58,,,,56,12,52',
'54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,,,48,,,38,,44,,46,97,,45,59,55',
',40,58,,,,56,12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,,,48,,,38,',
'44,,46,97,,45,59,55,,40,58,,,,56,12,52,54,57,,47,11,49,,,,,,,60,,,,',
',39,,,13,,,48,,,38,,44,,46,97,,45,59,55,,40,58,,,,56,12,52,54,57,,47',
'11,49,,,,,,,60,,,,,,39,,,13,,,48,,,38,,44,,46,97,,45,59,55,,40,58,,',
',56,12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,,,48,,,38,,44,,46,97',
',45,59,55,,40,58,,,,56,12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,',
',48,,,38,,44,,46,97,,45,59,55,,40,58,,,,56,12,52,54,57,,47,11,49,,,',
',,,60,,,,,,39,,,13,,,48,,,38,,44,,46,97,,45,59,55,,40,58,,,,56,12,52',
'54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,,,48,,,38,,44,,46,97,,45,59,55',
',40,58,,,,56,12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,,,48,,,38,',
'44,,46,97,,45,59,55,,40,58,,,,56,12,52,54,57,,47,11,49,,,,,,,60,,,,',
',39,,,13,,,48,,,38,,44,,46,97,,45,59,55,,40,58,,,,56,12,52,54,57,,47',
'11,49,,,,,,,60,,,,,,39,,,13,,,48,,,38,,44,,46,97,,45,59,55,,40,58,,',
',56,12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,,,48,,,38,,44,,46,97',
',45,59,55,,40,58,,,,56,12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,',
',48,,,38,,44,,46,97,,45,59,55,,40,58,,,,56,12,52,54,57,,47,11,49,,,',
',,,60,,,,,,39,,,13,,,48,,,38,,44,,46,97,,45,59,55,,40,58,,,,56,12,52',
'54,57,,47,11,49,319,,,,,,60,,,,,,39,,167,13,,,48,,,38,,44,,46,97,,45',
'59,55,,40,58,,,,56,12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,,,48',
',,170,187,181,188,46,182,190,183,179,177,,172,185,,,,56,12,191,186,184',
',,11,52,54,,,47,,49,60,,,,,189,171,,,,,,48,,,13,,,,,,38,,44,,46,97,',
'45,59,55,,40,58,,,,56,12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,,',
'48,,,38,,44,,46,97,,45,59,55,,40,58,,,,56,12,52,54,57,,47,11,49,,,,',
',,60,,,,,,39,,,13,,,48,,,38,,44,,46,97,,45,59,55,,40,58,,,,56,12,52',
'54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,,,48,,,38,,44,,46,97,,45,59,55',
',40,58,,,,56,12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,,,48,,,38,',
'44,,46,97,,45,59,55,,40,58,,,,56,12,52,54,57,,47,11,49,,,,,,,60,,,,',
',39,,,13,,,48,,,38,,44,,46,97,,45,59,55,,40,58,,,,56,12,52,54,57,,47',
'11,49,,,,,,,60,,,,,,39,,,13,,,48,,,38,,44,,46,97,,45,59,55,,40,58,,',
',56,12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,199,,48,,,38,,44,,46',
'97,,45,59,55,,40,58,,,,56,12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,,,13',
',,48,,,38,,44,,46,97,,45,59,55,,40,58,,,,56,12,52,54,57,,47,11,49,,',
',,,,60,,,,,,39,,,13,,,48,,,38,,44,,46,97,,45,59,55,,40,58,,,,56,12,52',
'54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,207,,48,,,38,,44,,46,97,,45,59',
'55,,40,58,,,,56,12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,,,48,,,170',
'187,181,188,46,182,190,183,179,177,,172,185,,,,56,12,191,186,184,,,11',
',,52,54,,,47,60,49,291,,,189,171,,,,,,48,,,,,13,,,,,,38,,44,,46,97,',
'45,59,55,,40,58,,,,56,12,,,57,,,11,52,54,,,47,289,49,60,,,,,,39,,,,',
',48,,,13,,,,,,38,,44,,46,97,,45,59,55,,40,58,,,,56,12,52,54,57,,47,11',
'49,,,,,,,60,,,,,,39,,,13,,,48,,,38,,44,,46,97,,45,59,55,,40,58,,,,56',
'12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,,,48,,,38,,44,,46,97,,45',
'59,55,,40,58,,,,56,12,52,54,57,,47,11,49,,,,,,,60,,,,,,39,,,13,,,48',
',,38,,44,,46,97,,45,59,55,,40,58,,,,56,12,52,54,57,,47,11,49,,,,,,,60',
',,,,,39,,,13,,,48,,,38,,44,,46,97,,45,59,55,,40,58,,,,56,12,,,57,,,11',
'52,54,,,47,288,49,60,,,,,,39,,,,,,48,,,13,,,,,,38,,44,,46,97,,45,59',
'55,,40,58,,,,56,12,,,57,,,11,,,,,,69,,60,,,,,,39,88,89,85,80,91,48,95',
',90,,,81,83,82,84,,,,,,,,,,,,,,,94,,,,87,86,,,73,74,76,75,78,79,,71',
'72,,,,,,70,69,,211,,,,,77,,88,89,85,80,91,,95,,90,,,81,83,82,84,,,,',
',,,,,,,,,,94,,,,87,86,,,73,74,76,75,78,79,,71,72,,,,,,70,69,,210,,,',
',77,,88,89,85,80,91,,95,,90,,,81,83,82,84,,,,,,,,,,,,,,,94,,,,87,86',
',,73,74,76,75,78,79,69,71,72,,,225,,,70,88,89,85,80,91,,95,77,90,,,81',
'83,82,84,,,,,,,,,,,,,,,94,,,,87,86,,,73,74,76,75,78,79,,71,72,,,,,,70',
'69,,209,,,,,77,,88,89,85,80,91,,95,,90,,,81,83,82,84,,,,,,,,,,,,,,,94',
',,,87,86,,,73,74,76,75,78,79,69,71,72,,,,,,70,88,89,85,80,91,,95,77',
'90,,,81,83,82,84,,,,,,,,,,,,,,,94,,,,87,86,,,73,74,76,75,78,79,,71,72',
',,,,,70,69,,208,,,,,77,,88,89,85,80,91,,95,,90,,,81,83,82,84,,,,,,,',
',,,,,,,94,,,,87,86,,,73,74,76,75,78,79,69,71,72,,,,,,70,88,89,85,80',
'91,,95,77,90,,197,81,83,82,84,,,,,,,,,,,,,,,94,,,,87,86,,,73,74,76,75',
'78,79,69,71,72,,,,,,70,88,89,85,80,91,,95,77,90,,,81,83,82,84,,,,,,',
',,,,,,,,94,,,,87,86,,,73,74,76,75,78,79,69,71,72,,,,,,70,88,89,85,80',
'91,,95,77,90,69,,81,83,82,84,,,,,,,,91,,95,,90,,,94,,,,87,86,69,,73',
'74,76,75,78,79,,71,72,,94,91,,95,70,90,,,,,76,75,77,,,71,72,,,,,,70',
',,,94,,,,77,,,,,,76,75,,,69,71,72,,,,,,70,88,89,85,80,91,,95,77,90,',
',81,83,82,84,,,,,,,,,,,,,,,94,,,,87,86,,,73,74,76,75,78,79,69,71,72',
',,,,,70,88,89,85,80,91,,95,77,90,,,81,83,82,84,,,,,,,,,,,,,,,94,,,,87',
'86,,,73,74,76,75,78,79,69,71,72,,,,,,70,88,89,85,80,91,,95,77,90,69',
',81,83,82,84,,,,,,,,91,,95,,90,,,94,,,,87,86,69,,73,74,76,75,78,79,',
'71,72,,94,91,,95,70,90,,,73,74,76,75,77,,69,71,72,,,,,,70,,,,94,91,',
'95,77,90,,,73,74,76,75,69,,,71,72,,,,,,70,,,91,94,95,,90,77,,,,73,74',
'76,75,78,79,,71,72,,,,,,70,,94,,,,,,77,,73,74,76,75,78,79,69,71,72,',
',,,,70,,,,80,91,,95,77,90,,,81,,,,69,,,,,,,,,,,,80,91,94,95,,90,,,81',
',73,74,76,75,78,79,,71,72,,,,,,70,,94,,,,,,77,,73,74,76,75,78,79,69',
'71,72,,,,,,70,,,,80,91,,95,77,90,,,81,,,,69,,,,,,,,,,,,80,91,94,95,',
'90,,,81,,73,74,76,75,78,79,,71,72,,,,,,70,,94,,,,,,77,,73,74,76,75,78',
'79,69,71,72,,,,,,70,,,85,80,91,,95,77,90,,,81,83,82,84,,,,,,,,,,,,,',
',94,,,,,,69,,73,74,76,75,78,79,,71,72,85,80,91,,95,70,90,,,81,83,82',
'84,77,,,,,,,,,,,,,,94,,,,,86,,,73,74,76,75,78,79,69,71,72,,,,,,70,88',
'89,85,80,91,,95,77,90,,,81,83,82,84,,,,,,,,,,,,,,,94,,,,87,86,,,73,74',
'76,75,78,79,69,71,72,,,,,,70,88,89,85,80,91,,95,77,90,,,81,83,82,84',
',,,,,,,,,,,,,,94,,,,87,86,,,73,74,76,75,78,79,69,71,72,,,235,,,70,88',
'89,85,80,91,,95,77,90,,,81,83,82,84,,,,,,,,,,,,,,,94,,,,87,86,,,73,74',
'76,75,78,79,69,71,72,,,,,,70,88,89,85,80,91,,95,77,90,,,81,83,82,84',
',,,,,,,,,,,,,,94,,,,87,86,,,73,74,76,75,78,79,69,71,72,,,,,,70,88,89',
'85,80,91,239,95,77,90,,,81,83,82,84,,,,,,,,,,,,,,,94,,,,87,86,,,73,74',
'76,75,78,79,,71,72,,,,,,70,69,,92,,,,,77,,88,89,85,80,91,,95,,90,,,81',
'83,82,84,,,,,,,,,,,,,,,94,,,,87,86,,,73,74,76,75,78,79,69,71,72,,,,',
',70,88,89,85,80,91,,95,77,90,,,81,83,82,84,,,,,,,,,,,,,,,94,,,,87,86',
',,73,74,76,75,78,79,,71,72,,,,,,70,,,,253,187,252,188,77,250,190,254',
'248,247,,249,251,,,,,,191,186,255,253,187,252,188,,250,190,254,248,247',
',249,251,,,189,256,,191,186,255,253,187,252,188,,250,190,254,248,247',
',249,251,,,189,256,,191,186,255,,,,,,,,,,,,,,,,189,256' ]
        racc_action_table = arr = ::Array.new(5062, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,184,180,0,116,0,42,206,179,125,215,141,297,177,125,185,141,220,220',
'215,206,0,103,111,71,71,44,0,116,0,44,0,0,42,0,0,0,42,0,0,0,184,180',
'0,0,343,343,0,179,343,0,343,343,177,220,185,103,220,0,280,272,71,128',
'280,0,128,280,343,272,123,0,133,133,343,123,343,220,343,343,240,343',
'343,343,71,343,343,343,102,242,343,343,4,4,343,181,4,343,4,181,182,310',
'97,310,182,343,97,7,7,7,7,343,115,269,4,269,217,343,216,246,4,213,4',
'260,4,4,262,4,4,4,4,4,4,4,264,265,4,4,342,342,4,93,342,4,342,342,268',
'212,270,271,135,4,91,275,276,277,278,4,205,282,342,203,199,4,63,61,342',
'198,342,295,342,342,196,342,342,342,236,342,342,342,43,194,342,342,340',
'340,342,304,340,342,340,340,305,37,174,36,313,342,314,316,45,45,317',
'342,321,322,340,35,328,342,329,331,340,173,340,5,340,340,1,340,340,340',
'346,340,340,340,351,353,340,340,170,170,340,151,170,340,170,45,355,',
'45,,,340,,,151,,151,340,151,,170,,,340,,,170,45,170,,170,170,,170,170',
'170,,170,170,151,,,170,170,11,11,170,149,11,170,11,,,,151,151,,170,',
',149,151,149,170,149,,11,,,170,,,11,,11,,11,11,,11,11,11,,11,11,149',
',,11,11,12,12,11,150,12,11,12,,,,149,149,,11,,,150,149,150,11,150,,12',
',,11,,,12,,12,,12,12,,12,12,12,,12,12,150,,,12,12,13,13,12,96,13,12',
'13,,,,150,150,,12,,,96,150,96,12,96,,13,,,12,,,13,,13,,13,13,,13,13',
'13,,13,13,96,,,13,13,324,324,13,,324,13,324,324,,,,,,13,,,72,72,,13',
',,324,,,13,,,324,,324,,324,324,,324,324,324,,324,324,324,,,324,324,312',
'312,324,,312,324,312,72,,,,,,324,,,218,218,,324,,,312,,,324,,,312,72',
'312,,312,312,,312,312,312,,312,312,,,,312,312,167,167,312,,167,312,167',
'218,,,218,,,312,,,183,183,,312,,,167,,,312,,,167,218,167,,167,167,,167',
'167,167,,167,167,,,,167,167,38,38,167,98,38,167,38,183,,,183,,,167,',
',98,,98,167,98,,38,,,167,,,38,183,38,,38,38,,38,38,38,,38,38,98,,,38',
'38,39,39,38,142,39,38,39,,,,,,,38,,,142,,142,38,142,,39,,,38,,,39,,39',
',39,39,,39,39,39,,39,39,142,,,39,39,40,40,39,,40,39,40,,,,,,,39,,,,',
',39,,,40,,,39,,,40,,40,,40,40,,40,40,40,,40,40,,,,40,40,41,41,40,,41',
'40,41,,,,,,,40,,,,,,40,,,41,,,40,,,41,,41,,41,41,,41,41,41,,41,41,,',
',41,41,172,172,41,,172,41,172,,,,,,,41,,,,,,41,,,172,,,41,,,172,,172',
',172,172,,172,172,172,,172,172,,,,172,172,201,201,172,,201,172,201,201',
',,,,,172,,,,,,172,,,201,,,172,,,201,,201,,201,201,,201,201,201,,201',
'201,201,,,201,201,296,296,201,,296,201,296,,,,,,,201,,,,,,201,,,296',
',,201,,,296,,296,,296,296,,296,296,296,,296,296,,,,296,296,171,171,296',
',171,296,171,,,,,,,296,,,,,,296,,,171,,,296,,,171,,171,,171,171,,171',
'171,171,,171,171,,,,171,171,,,171,,,171,47,47,,,47,47,47,171,,,,,,171',
',,,,,171,,,47,,,,,,47,,47,,47,47,,47,47,47,,47,47,,,,47,47,,,47,,,47',
'48,48,,,48,48,48,47,,,,,,47,,,,,,47,,,48,,,,,,48,,48,,48,48,,48,48,48',
',48,48,,,,48,48,49,49,48,,49,48,49,49,,,,,,48,,,,,,48,,,49,,,48,,,49',
',49,,49,49,,49,49,49,,49,49,,,,49,49,53,53,49,,53,49,53,,,,,,,49,,,',
',,49,,,53,,,49,,,53,,53,,53,53,,53,53,53,,53,53,,,,53,53,208,208,53',
',208,53,208,208,,,,,,53,,,,,,53,,,208,,,53,,,208,,208,,208,208,,208',
'208,208,,208,208,208,,,208,208,62,62,208,,62,208,62,,,,,,,208,,,,,,208',
',,62,,,208,,,62,,62,,62,62,,62,62,62,,62,62,62,,,62,62,209,209,62,,209',
'62,209,209,,,,,,62,,,,,,62,,,209,,,62,,,209,,209,,209,209,,209,209,209',
',209,209,209,,,209,209,64,64,209,,64,209,64,,,,,,,209,,,,,,209,,,64',
',,209,,,64,,64,,64,64,,64,64,64,,64,64,64,,,64,64,65,65,64,,65,64,65',
',,,,,,64,,,,,,64,,,65,,,64,,,65,,65,,65,65,,65,65,65,,65,65,65,,,65',
'65,66,66,65,,66,65,66,,,,,,,65,,,,,,65,,,66,,,65,,,66,,66,,66,66,,66',
'66,66,,66,66,66,,,66,66,67,67,66,,67,66,67,,,,,,,66,,,,,,66,,,67,,,66',
',,67,,67,,67,67,,67,67,67,,67,67,67,,,67,67,68,68,67,,68,67,68,,,,,',
',67,,,,,,67,,,68,,,67,,,68,,68,,68,68,,68,68,68,,68,68,68,,,68,68,69',
'69,68,,69,68,69,,,,,,,68,,,,,,68,,,69,,,68,,,69,,69,,69,69,,69,69,69',
',69,69,,,,69,69,70,70,69,,70,69,70,,,,,,,69,,,,,,69,,,70,,,69,,,70,',
'70,,70,70,,70,70,70,,70,70,,,,70,70,284,284,70,,284,70,284,284,,,,,',
'70,,,,,,70,,,284,,,70,,,284,,284,,284,284,,284,284,284,,284,284,284',
',,284,284,283,283,284,,283,284,283,283,,,,,,284,,,,,,284,,,283,,,284',
',,283,,283,,283,283,,283,283,283,,283,283,283,,,283,283,73,73,283,,73',
'283,73,,,,,,,283,,,,,,283,,,73,,,283,,,73,,73,,73,73,,73,73,73,,73,73',
',,,73,73,74,74,73,,74,73,74,,,,,,,73,,,,,,73,,,74,,,73,,,74,,74,,74',
'74,,74,74,74,,74,74,,,,74,74,75,75,74,,75,74,75,,,,,,,74,,,,,,74,,,75',
',,74,,,75,,75,,75,75,,75,75,75,,75,75,,,,75,75,76,76,75,,76,75,76,,',
',,,,75,,,,,,75,,,76,,,75,,,76,,76,,76,76,,76,76,76,,76,76,,,,76,76,77',
'77,76,,77,76,77,,,,,,,76,,,,,,76,,,77,,,76,,,77,,77,,77,77,,77,77,77',
',77,77,,,,77,77,78,78,77,,78,77,78,,,,,,,77,,,,,,77,,,78,,,77,,,78,',
'78,,78,78,,78,78,78,,78,78,,,,78,78,79,79,78,,79,78,79,,,,,,,78,,,,',
',78,,,79,,,78,,,79,,79,,79,79,,79,79,79,,79,79,,,,79,79,80,80,79,,80',
'79,80,,,,,,,79,,,,,,79,,,80,,,79,,,80,,80,,80,80,,80,80,80,,80,80,,',
',80,80,81,81,80,,81,80,81,,,,,,,80,,,,,,80,,,81,,,80,,,81,,81,,81,81',
',81,81,81,,81,81,,,,81,81,82,82,81,,82,81,82,,,,,,,81,,,,,,81,,,82,',
',81,,,82,,82,,82,82,,82,82,82,,82,82,,,,82,82,83,83,82,,83,82,83,,,',
',,,82,,,,,,82,,,83,,,82,,,83,,83,,83,83,,83,83,83,,83,83,,,,83,83,84',
'84,83,,84,83,84,,,,,,,83,,,,,,83,,,84,,,83,,,84,,84,,84,84,,84,84,84',
',84,84,,,,84,84,85,85,84,,85,84,85,,,,,,,84,,,,,,84,,,85,,,84,,,85,',
'85,,85,85,,85,85,85,,85,85,,,,85,85,86,86,85,,86,85,86,,,,,,,85,,,,',
',85,,,86,,,85,,,86,,86,,86,86,,86,86,86,,86,86,,,,86,86,87,87,86,,87',
'86,87,,,,,,,86,,,,,,86,,,87,,,86,,,87,,87,,87,87,,87,87,87,,87,87,,',
',87,87,88,88,87,,88,87,88,,,,,,,87,,,,,,87,,,88,,,87,,,88,,88,,88,88',
',88,88,88,,88,88,,,,88,88,89,89,88,,89,88,89,,,,,,,88,,,,,,88,,,89,',
',88,,,89,,89,,89,89,,89,89,89,,89,89,,,,89,89,90,90,89,,90,89,90,,,',
',,,89,,,,,,89,,,90,,,89,,,90,,90,,90,90,,90,90,90,,90,90,,,,90,90,273',
'273,90,,273,90,273,273,,,,,,90,,,,,,90,,90,273,,,90,,,273,,273,,273',
'273,,273,273,273,,273,273,,,,273,273,92,92,273,,92,273,92,,,,,,,273',
',,,,,273,,,92,,,273,,,92,92,92,92,92,92,92,92,92,92,,92,92,,,,92,92',
'92,92,92,,,92,266,266,,,266,,266,92,,,,,92,92,,,,,,92,,,266,,,,,,266',
',266,,266,266,,266,266,266,,266,266,,,,266,266,94,94,266,,94,266,94',
',,,,,,266,,,,,,266,,,94,,,266,,,94,,94,,94,94,,94,94,94,,94,94,,,,94',
'94,95,95,94,,95,94,95,,,,,,,94,,,,,,94,,,95,,,94,,,95,,95,,95,95,,95',
'95,95,,95,95,,,,95,95,259,259,95,,259,95,259,,,,,,,95,,,,,,95,,,259',
',,95,,,259,,259,,259,259,,259,259,259,,259,259,,,,259,259,245,245,259',
',245,259,245,,,,,,,259,,,,,,259,,,245,,,259,,,245,,245,,245,245,,245',
'245,245,,245,245,,,,245,245,244,244,245,,244,245,244,,,,,,,245,,,,,',
'245,,,244,,,245,,,244,,244,,244,244,,244,244,244,,244,244,,,,244,244',
'210,210,244,,210,244,210,,,,,,,244,,,,,,244,,,210,,,244,,,210,,210,',
'210,210,,210,210,210,,210,210,,,,210,210,100,100,210,,100,210,100,,',
',,,,210,,,,,,210,,,100,100,,210,,,100,,100,,100,100,,100,100,100,,100',
'100,,,,100,100,241,241,100,,241,100,241,,,,,,,100,,,,,,100,,,241,,,100',
',,241,,241,,241,241,,241,241,241,,241,241,,,,241,241,235,235,241,,235',
'241,235,,,,,,,241,,,,,,241,,,235,,,241,,,235,,235,,235,235,,235,235',
'235,,235,235,,,,235,235,104,104,235,,104,235,104,,,,,,,235,,,,,,235',
',,104,104,,235,,,104,,104,,104,104,,104,104,104,,104,104,,,,104,104',
'211,211,104,,211,104,211,,,,,,,104,,,,,,104,,,211,,,104,,,211,211,211',
'211,211,211,211,211,211,211,,211,211,,,,211,211,211,211,211,,,211,,',
'227,227,,,227,211,227,227,,,211,211,,,,,,211,,,,,227,,,,,,227,,227,',
'227,227,,227,227,227,,227,227,,,,227,227,,,227,,,227,223,223,,,223,223',
'223,227,,,,,,227,,,,,,227,,,223,,,,,,223,,223,,223,223,,223,223,223',
',223,223,,,,223,223,225,225,223,,225,223,225,,,,,,,223,,,,,,223,,,225',
',,223,,,225,,225,,225,225,,225,225,225,,225,225,,,,225,225,110,110,225',
',110,225,110,,,,,,,225,,,,,,225,,,110,,,225,,,110,,110,,110,110,,110',
'110,110,,110,110,,,,110,110,234,234,110,,234,110,234,,,,,,,110,,,,,',
'110,,,234,,,110,,,234,,234,,234,234,,234,234,234,,234,234,,,,234,234',
'232,232,234,,232,234,232,,,,,,,234,,,,,,234,,,232,,,234,,,232,,232,',
'232,232,,232,232,232,,232,232,,,,232,232,,,232,,,232,221,221,,,221,221',
'221,232,,,,,,232,,,,,,232,,,221,,,,,,221,,221,,221,221,,221,221,221',
',221,221,,,,221,221,,,221,,,221,,,,,,122,,221,,,,,,221,122,122,122,122',
'122,221,122,,122,,,122,122,122,122,,,,,,,,,,,,,,,122,,,,122,122,,,122',
'122,122,122,122,122,,122,122,,,,,,122,109,,109,,,,,122,,109,109,109',
'109,109,,109,,109,,,109,109,109,109,,,,,,,,,,,,,,,109,,,,109,109,,,109',
'109,109,109,109,109,,109,109,,,,,,109,108,,108,,,,,109,,108,108,108',
'108,108,,108,,108,,,108,108,108,108,,,,,,,,,,,,,,,108,,,,108,108,,,108',
'108,108,108,108,108,127,108,108,,,127,,,108,127,127,127,127,127,,127',
'108,127,,,127,127,127,127,,,,,,,,,,,,,,,127,,,,127,127,,,127,127,127',
'127,127,127,,127,127,,,,,,127,107,,107,,,,,127,,107,107,107,107,107',
',107,,107,,,107,107,107,107,,,,,,,,,,,,,,,107,,,,107,107,,,107,107,107',
'107,107,107,131,107,107,,,,,,107,131,131,131,131,131,,131,107,131,,',
'131,131,131,131,,,,,,,,,,,,,,,131,,,,131,131,,,131,131,131,131,131,131',
',131,131,,,,,,131,105,,105,,,,,131,,105,105,105,105,105,,105,,105,,',
'105,105,105,105,,,,,,,,,,,,,,,105,,,,105,105,,,105,105,105,105,105,105',
'99,105,105,,,,,,105,99,99,99,99,99,,99,105,99,,99,99,99,99,99,,,,,,',
',,,,,,,,99,,,,99,99,,,99,99,99,99,99,99,287,99,99,,,,,,99,287,287,287',
'287,287,,287,99,287,,,287,287,287,287,,,,,,,,,,,,,,,287,,,,287,287,',
',287,287,287,287,287,287,290,287,287,,,,,,287,290,290,290,290,290,,290',
'287,290,147,,290,290,290,290,,,,,,,,147,,147,,147,,,290,,,,290,290,148',
',290,290,290,290,290,290,,290,290,,147,148,,148,290,148,,,,,147,147',
'290,,,147,147,,,,,,147,,,,148,,,,147,,,,,,148,148,,,302,148,148,,,,',
',148,302,302,302,302,302,,302,148,302,,,302,302,302,302,,,,,,,,,,,,',
',,302,,,,302,302,,,302,302,302,302,302,302,193,302,302,,,,,,302,193',
'193,193,193,193,,193,302,193,,,193,193,193,193,,,,,,,,,,,,,,,193,,,',
'193,193,,,193,193,193,193,193,193,303,193,193,,,,,,193,303,303,303,303',
'303,,303,193,303,152,,303,303,303,303,,,,,,,,152,,152,,152,,,303,,,',
'303,303,153,,303,303,303,303,303,303,,303,303,,152,153,,153,303,153',
',,152,152,152,152,303,,154,152,152,,,,,,152,,,,153,154,,154,152,154',
',,153,153,153,153,155,,,153,153,,,,,,153,,,155,154,155,,155,153,,,,154',
'154,154,154,154,154,,154,154,,,,,,154,,155,,,,,,154,,155,155,155,155',
'155,155,156,155,155,,,,,,155,,,,156,156,,156,155,156,,,156,,,,157,,',
',,,,,,,,,157,157,156,157,,157,,,157,,156,156,156,156,156,156,,156,156',
',,,,,156,,157,,,,,,156,,157,157,157,157,157,157,158,157,157,,,,,,157',
',,,158,158,,158,157,158,,,158,,,,159,,,,,,,,,,,,159,159,158,159,,159',
',,159,,158,158,158,158,158,158,,158,158,,,,,,158,,159,,,,,,158,,159',
'159,159,159,159,159,160,159,159,,,,,,159,,,160,160,160,,160,159,160',
',,160,160,160,160,,,,,,,,,,,,,,,160,,,,,,161,,160,160,160,160,160,160',
',160,160,161,161,161,,161,160,161,,,161,161,161,161,160,,,,,,,,,,,,',
',161,,,,,161,,,161,161,161,161,161,161,162,161,161,,,,,,161,162,162',
'162,162,162,,162,161,162,,,162,162,162,162,,,,,,,,,,,,,,,162,,,,162',
'162,,,162,162,162,162,162,162,163,162,162,,,,,,162,163,163,163,163,163',
',163,162,163,,,163,163,163,163,,,,,,,,,,,,,,,163,,,,163,163,,,163,163',
'163,163,163,163,164,163,163,,,164,,,163,164,164,164,164,164,,164,163',
'164,,,164,164,164,164,,,,,,,,,,,,,,,164,,,,164,164,,,164,164,164,164',
'164,164,309,164,164,,,,,,164,309,309,309,309,309,,309,164,309,,,309',
'309,309,309,,,,,,,,,,,,,,,309,,,,309,309,,,309,309,309,309,309,309,169',
'309,309,,,,,,309,169,169,169,169,169,169,169,309,169,,,169,169,169,169',
',,,,,,,,,,,,,,169,,,,169,169,,,169,169,169,169,169,169,,169,169,,,,',
',169,10,,10,,,,,169,,10,10,10,10,10,,10,,10,,,10,10,10,10,,,,,,,,,,',
',,,,10,,,,10,10,,,10,10,10,10,10,10,294,10,10,,,,,,10,294,294,294,294',
'294,,294,10,294,,,294,294,294,294,,,,,,,,,,,,,,,294,,,,294,294,,,294',
'294,294,294,294,294,,294,294,,,,,,294,,,,192,192,192,192,294,192,192',
'192,192,192,,192,192,,,,,,192,192,192,238,238,238,238,,238,238,238,238',
'238,,238,238,,,192,192,,238,238,238,243,243,243,243,,243,243,243,243',
'243,,243,243,,,238,238,,243,243,243,,,,,,,,,,,,,,,,243,243' ]
        racc_action_check = arr = ::Array.new(5062, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   218,   nil,   nil,    90,   203,   nil,    45,   nil,   nil,
  4860,   274,   320,   366,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   183,   127,   169,   550,   596,
   642,   688,    -1,   137,    -8,   198,   nil,   924,   976,  1022,
   nil,   nil,   nil,  1068,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   165,  1160,   152,  1252,  1298,  1344,  1390,  1436,  1482,
  1528,    23,   428,  1666,  1712,  1758,  1804,  1850,  1896,  1942,
  1988,  2034,  2080,  2126,  2172,  2218,  2264,  2310,  2356,  2402,
  2448,   113,  2540,   133,  2638,  2684,   365,    67,   549,  3893,
  2914,   nil,    80,   -11,  3052,  3841,   nil,  3728,  3615,  3554,
  3296,     0,   nil,   nil,   nil,    88,    -7,   nil,   nil,   nil,
   nil,   nil,  3493,    63,   nil,     3,   nil,  3667,    54,   nil,
   nil,  3780,   nil,    68,   nil,   138,   nil,   nil,   nil,   nil,
   nil,     5,   595,   nil,   nil,   nil,   nil,  4015,  4041,   273,
   319,   227,  4215,  4241,  4267,  4291,  4343,  4367,  4419,  4443,
  4495,  4539,  4591,  4643,  4695,   nil,   nil,   504,   nil,  4799,
   228,   872,   734,   173,   182,   nil,   nil,     3,   nil,    -2,
    -8,    60,    65,   520,    -9,     5,   nil,   nil,   nil,   nil,
   nil,   nil,  4952,  4145,   136,   nil,   150,   nil,   155,    94,
   nil,   780,   nil,   149,   nil,   143,    -4,   nil,  1114,  1206,
  2868,  3098,   107,    85,   nil,   -14,   110,   108,   474,   nil,
    16,  3440,   nil,  3204,   nil,  3250,   nil,  3152,   nil,   nil,
   nil,   nil,  3388,   nil,  3342,  3006,   164,   nil,  4973,   nil,
    71,  2960,    80,  4994,  2822,  2776,   107,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  2730,
    98,   nil,   117,   nil,    66,   101,  2592,   nil,   137,    82,
   139,   118,    49,  2494,   nil,   113,   142,   146,   148,   nil,
    25,   nil,   147,  1620,  1574,   nil,   nil,  3945,   nil,   nil,
  3997,   nil,   nil,   nil,  4912,   160,   826,     1,   nil,   nil,
   nil,   nil,  4093,  4197,   178,   124,   nil,   nil,   nil,  4747,
    70,   nil,   458,   188,   167,   nil,   191,   194,   nil,   nil,
   nil,   195,   196,   nil,   412,   nil,   nil,   nil,   183,   201,
   nil,   202,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   182,   nil,   136,    44,   nil,   nil,   213,   nil,   nil,   nil,
   nil,   217,   nil,   218,   nil,   229,   nil,   nil,   nil,   nil,
   nil ]

racc_action_default = [
  -206,  -207,    -1,    -2,    -3,    -4,    -7,    -9,   -10,   -15,
  -103,  -207,  -207,  -207,   -43,   -44,   -45,   -46,   -47,   -48,
   -49,   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,
   -59,   -60,   -61,   -62,   -63,   -68,   -69,   -73,  -207,  -207,
  -207,  -207,  -207,  -113,  -207,  -207,  -158,  -207,  -207,  -207,
  -171,  -172,  -173,  -207,  -175,  -182,  -183,  -184,  -185,  -186,
  -187,  -207,  -207,    -6,  -207,  -207,  -207,  -207,  -207,  -207,
  -207,  -207,  -207,  -207,  -207,  -207,  -207,  -207,  -207,  -207,
  -207,  -207,  -207,  -207,  -207,  -207,  -207,  -207,  -207,  -207,
  -207,  -207,  -121,  -116,  -206,  -206,   -27,  -207,   -34,  -207,
  -207,   -70,  -207,  -207,  -207,  -207,   -80,  -207,  -207,  -207,
  -207,  -206,  -147,  -148,  -114,  -206,  -206,  -139,  -141,  -142,
  -143,  -144,   -41,  -207,  -161,  -207,  -164,  -207,  -207,  -167,
  -168,  -179,  -174,  -207,   361,    -5,    -8,   -11,   -12,   -13,
   -14,  -207,   -17,   -18,  -156,  -157,   -19,   -20,   -21,   -22,
   -23,   -24,   -25,   -26,   -28,   -29,   -30,   -31,   -32,   -33,
   -35,   -36,   -37,   -38,  -207,   -39,   -98,  -207,   -74,  -207,
  -199,  -205,  -193,  -190,  -188,  -111,  -122,  -182,  -125,  -186,
  -207,  -196,  -194,  -202,  -184,  -185,  -192,  -197,  -198,  -200,
  -201,  -203,  -121,  -120,  -207,  -119,  -207,   -40,  -188,   -65,
   -75,  -207,   -78,  -188,  -152,  -155,  -207,   -72,  -207,  -207,
  -207,  -121,  -190,  -206,  -149,  -207,  -207,  -207,  -207,  -145,
  -207,  -207,  -159,  -207,  -162,  -207,  -165,  -207,  -176,  -177,
  -178,  -180,  -207,   -16,  -207,  -207,  -188,  -100,  -121,  -110,
  -207,  -191,  -207,  -189,  -207,  -207,  -188,  -124,  -126,  -193,
  -194,  -195,  -196,  -199,  -202,  -204,  -205,  -117,  -118,  -189,
  -207,   -67,  -207,   -77,  -207,  -189,  -207,   -71,  -207,   -83,
  -207,   -89,  -207,  -207,   -93,  -190,  -188,  -207,  -207,  -133,
  -207,  -150,  -188,  -207,  -207,  -140,  -146,   -42,  -160,  -163,
  -170,  -166,  -169,  -181,  -102,  -207,  -189,  -188,  -106,  -112,
  -107,  -123,  -127,  -128,  -207,   -64,   -76,   -79,  -153,  -154,
   -83,   -82,  -207,  -207,   -89,   -88,  -207,  -207,   -97,   -92,
   -94,  -207,  -207,  -108,  -207,  -134,  -135,  -136,  -207,  -207,
  -130,  -207,  -138,   -99,  -101,  -109,  -115,   -66,   -81,   -84,
  -207,   -87,  -207,  -207,  -104,  -105,  -207,  -132,  -151,  -129,
  -137,  -207,   -86,  -207,   -91,  -207,   -96,  -131,   -85,   -90,
   -95 ]

racc_goto_table = [
     2,     3,   101,    96,    98,    99,   115,   132,   119,   130,
   174,   173,   166,   203,   315,   317,   121,   240,   213,   311,
   274,   285,   216,   286,   194,   196,   242,    63,   236,   212,
   105,   107,   108,   109,   143,   146,   299,   123,   125,   122,
   122,   127,   144,   144,   238,   131,   137,   138,   139,   140,
   260,   145,   145,   273,   301,   264,   277,   341,   339,   141,
   338,   122,   142,   200,   278,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   320,   169,   135,   193,   193,   295,   237,
   198,   325,   122,   217,   206,   165,   122,   308,   304,   128,
   136,     1,   169,   231,   232,   230,   nil,   nil,   nil,   nil,
   246,   nil,   214,   nil,   nil,   nil,   214,   219,   nil,   321,
   nil,   nil,   nil,   nil,   nil,   282,   nil,   nil,   322,   276,
   275,   nil,   nil,   nil,   328,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   115,   nil,   nil,   119,   nil,   nil,   335,
   nil,   nil,   nil,   nil,   121,   nil,   297,   nil,   nil,   164,
   nil,   nil,   105,   107,   108,   261,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   119,   nil,   119,   nil,   nil,   293,   292,   nil,   121,
   nil,   121,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   262,   122,   169,   nil,   nil,   nil,   nil,   268,   270,
   nil,   nil,   nil,   287,   279,   287,   nil,   290,   334,   127,
   nil,   nil,   nil,   nil,   131,   nil,   287,   294,   nil,   nil,
   nil,   nil,   nil,   169,   nil,   nil,   302,   303,   nil,   nil,
   nil,   nil,   326,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   287,   nil,   nil,   nil,   nil,   nil,   nil,   309,   nil,
   nil,   nil,   nil,   nil,   nil,   122,   nil,   nil,   nil,   nil,
   nil,   337,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   329,   331,   nil,   nil,   nil,   164,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   105,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   346,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   351,   nil,   353,   355 ]

racc_goto_check = [
     2,     3,    37,     9,     9,     9,    62,    75,    35,    71,
    54,    52,    49,    42,    45,    48,    30,    53,    63,    44,
    47,    68,    63,    68,    58,    58,    36,     5,    50,    52,
     9,     9,     9,     9,    12,    12,    55,    11,    11,     9,
     9,     9,    30,    30,    56,     9,     7,     7,     7,     7,
    36,    31,    31,    46,    59,    36,    53,    45,    43,    11,
    44,     9,     9,    41,    64,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,    47,     9,     5,     9,     9,    36,    49,
    11,    65,     9,    67,    11,    13,     9,    69,    36,    70,
     6,     1,     9,    76,    77,    79,   nil,   nil,   nil,   nil,
    54,   nil,     3,   nil,   nil,   nil,     3,     3,   nil,    53,
   nil,   nil,   nil,   nil,   nil,    42,   nil,   nil,    36,    54,
    52,   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    62,   nil,   nil,    35,   nil,   nil,    36,
   nil,   nil,   nil,   nil,    30,   nil,    54,   nil,   nil,     9,
   nil,   nil,     9,     9,     9,    37,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    35,   nil,    35,   nil,   nil,    75,    71,   nil,    30,
   nil,    30,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,     9,     9,   nil,   nil,   nil,   nil,     2,     2,
   nil,   nil,   nil,     9,     3,     9,   nil,     9,    49,     9,
   nil,   nil,   nil,   nil,     9,   nil,     9,     9,   nil,   nil,
   nil,   nil,   nil,     9,   nil,   nil,     9,     9,   nil,   nil,
   nil,   nil,    62,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,
   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,
   nil,    37,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,     2,   nil,   nil,   nil,     9,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   101,     0,     1,   nil,    23,    36,   -19,   nil,    -8,
   nil,   -10,   -37,     5,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -29,   -20,   nil,   nil,   nil,   -37,  -148,   -34,   nil,   nil,
   nil,   -39,   -90,  -254,  -250,  -257,  -157,  -190,  -257,   -78,
  -139,   nil,   -81,  -156,   -82,  -205,  -125,   nil,   -70,  -189,
   nil,   nil,   -38,   -93,  -149,  -189,   nil,   -23,  -197,  -168,
    50,   -40,   nil,   nil,   nil,   -46,   -30,   -29,   nil,   -28 ]

racc_goto_default = [
   nil,   nil,   nil,   195,     4,     5,     6,     7,     8,    10,
     9,   272,   nil,   nil,    14,    35,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,   nil,   nil,    36,    37,
   102,   nil,   nil,   106,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    41,   nil,   nil,   nil,   175,   nil,    93,   nil,   176,
   180,   178,   111,   nil,   nil,   nil,   116,   nil,   117,   204,
   nil,   nil,    50,    51,    53,   nil,   nil,   nil,   133,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 78, :_reduce_1,
  1, 78, :_reduce_none,
  1, 79, :_reduce_3,
  1, 81, :_reduce_4,
  3, 81, :_reduce_5,
  2, 81, :_reduce_6,
  1, 82, :_reduce_7,
  3, 82, :_reduce_8,
  1, 83, :_reduce_none,
  1, 84, :_reduce_10,
  3, 84, :_reduce_11,
  3, 84, :_reduce_12,
  3, 84, :_reduce_13,
  3, 84, :_reduce_14,
  1, 86, :_reduce_none,
  4, 86, :_reduce_16,
  3, 86, :_reduce_17,
  3, 86, :_reduce_18,
  3, 86, :_reduce_19,
  3, 86, :_reduce_20,
  3, 86, :_reduce_21,
  3, 86, :_reduce_22,
  3, 86, :_reduce_23,
  3, 86, :_reduce_24,
  3, 86, :_reduce_25,
  3, 86, :_reduce_26,
  2, 86, :_reduce_27,
  3, 86, :_reduce_28,
  3, 86, :_reduce_29,
  3, 86, :_reduce_30,
  3, 86, :_reduce_31,
  3, 86, :_reduce_32,
  3, 86, :_reduce_33,
  2, 86, :_reduce_34,
  3, 86, :_reduce_35,
  3, 86, :_reduce_36,
  3, 86, :_reduce_37,
  3, 86, :_reduce_38,
  3, 86, :_reduce_39,
  3, 86, :_reduce_40,
  1, 88, :_reduce_41,
  3, 88, :_reduce_42,
  1, 87, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 108, :_reduce_62,
  1, 108, :_reduce_63,
  5, 91, :_reduce_64,
  3, 91, :_reduce_65,
  6, 91, :_reduce_66,
  4, 91, :_reduce_67,
  1, 91, :_reduce_68,
  1, 95, :_reduce_69,
  2, 95, :_reduce_70,
  4, 115, :_reduce_71,
  3, 115, :_reduce_72,
  1, 115, :_reduce_73,
  3, 116, :_reduce_74,
  2, 114, :_reduce_75,
  3, 118, :_reduce_76,
  2, 118, :_reduce_77,
  2, 117, :_reduce_78,
  4, 117, :_reduce_79,
  2, 98, :_reduce_80,
  5, 120, :_reduce_81,
  4, 120, :_reduce_82,
  0, 121, :_reduce_none,
  2, 121, :_reduce_84,
  4, 121, :_reduce_85,
  3, 121, :_reduce_86,
  6, 99, :_reduce_87,
  5, 99, :_reduce_88,
  0, 122, :_reduce_none,
  4, 122, :_reduce_90,
  3, 122, :_reduce_91,
  5, 97, :_reduce_92,
  1, 123, :_reduce_93,
  2, 123, :_reduce_94,
  5, 124, :_reduce_95,
  4, 124, :_reduce_96,
  1, 125, :_reduce_97,
  1, 90, :_reduce_none,
  4, 90, :_reduce_99,
  1, 127, :_reduce_100,
  3, 127, :_reduce_101,
  3, 126, :_reduce_102,
  1, 85, :_reduce_103,
  6, 85, :_reduce_104,
  6, 85, :_reduce_105,
  5, 85, :_reduce_106,
  5, 85, :_reduce_107,
  5, 85, :_reduce_108,
  4, 132, :_reduce_109,
  1, 133, :_reduce_110,
  1, 129, :_reduce_111,
  3, 129, :_reduce_112,
  1, 128, :_reduce_113,
  2, 128, :_reduce_114,
  6, 96, :_reduce_115,
  2, 96, :_reduce_116,
  3, 134, :_reduce_117,
  3, 134, :_reduce_118,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  0, 131, :_reduce_121,
  1, 131, :_reduce_122,
  3, 131, :_reduce_123,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  3, 136, :_reduce_127,
  3, 136, :_reduce_128,
  6, 100, :_reduce_129,
  5, 100, :_reduce_130,
  7, 101, :_reduce_131,
  6, 101, :_reduce_132,
  1, 141, :_reduce_none,
  2, 141, :_reduce_134,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  6, 102, :_reduce_137,
  5, 102, :_reduce_138,
  1, 143, :_reduce_139,
  3, 143, :_reduce_140,
  1, 145, :_reduce_141,
  1, 145, :_reduce_142,
  1, 145, :_reduce_143,
  1, 145, :_reduce_none,
  1, 144, :_reduce_none,
  2, 144, :_reduce_146,
  1, 139, :_reduce_147,
  1, 139, :_reduce_148,
  1, 140, :_reduce_149,
  2, 140, :_reduce_150,
  4, 140, :_reduce_151,
  1, 119, :_reduce_152,
  3, 119, :_reduce_153,
  3, 146, :_reduce_154,
  1, 146, :_reduce_155,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 94, :_reduce_158,
  3, 103, :_reduce_159,
  4, 103, :_reduce_160,
  2, 103, :_reduce_161,
  3, 103, :_reduce_162,
  4, 103, :_reduce_163,
  2, 103, :_reduce_164,
  3, 106, :_reduce_165,
  4, 106, :_reduce_166,
  2, 106, :_reduce_167,
  1, 147, :_reduce_168,
  3, 147, :_reduce_169,
  3, 148, :_reduce_170,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 149, :_reduce_173,
  2, 150, :_reduce_174,
  1, 151, :_reduce_175,
  1, 153, :_reduce_176,
  1, 154, :_reduce_177,
  2, 152, :_reduce_178,
  1, 155, :_reduce_179,
  1, 156, :_reduce_180,
  2, 156, :_reduce_181,
  1, 111, :_reduce_182,
  1, 109, :_reduce_183,
  1, 110, :_reduce_184,
  1, 105, :_reduce_185,
  1, 104, :_reduce_186,
  1, 107, :_reduce_187,
  0, 113, :_reduce_none,
  1, 113, :_reduce_189,
  0, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  0, 80, :_reduce_206 ]

racc_reduce_n = 207

racc_shift_n = 361

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :DEFINE => 32,
  :ELSIF => 33,
  :VARIABLE => 34,
  :CLASS => 35,
  :INHERITS => 36,
  :NODE => 37,
  :BOOLEAN => 38,
  :NAME => 39,
  :SEMIC => 40,
  :CASE => 41,
  :DEFAULT => 42,
  :AT => 43,
  :LCOLLECT => 44,
  :RCOLLECT => 45,
  :CLASSREF => 46,
  :NOT => 47,
  :OR => 48,
  :AND => 49,
  :UNDEF => 50,
  :PARROW => 51,
  :PLUS => 52,
  :MINUS => 53,
  :TIMES => 54,
  :DIV => 55,
  :LSHIFT => 56,
  :RSHIFT => 57,
  :UMINUS => 58,
  :MATCH => 59,
  :NOMATCH => 60,
  :REGEX => 61,
  :IN_EDGE => 62,
  :OUT_EDGE => 63,
  :IN_EDGE_SUB => 64,
  :OUT_EDGE_SUB => 65,
  :IN => 66,
  :UNLESS => 67,
  :PIPE => 68,
  :SELBRACE => 69,
  :LOW => 70,
  :HIGH => 71,
  :CALL => 72,
  :LISTSTART => 73,
  :MODULO => 74,
  :TITLE_COLON => 75,
  :CASE_COLON => 76 }

racc_nt_base = 77

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "SELBRACE",
  "LOW",
  "HIGH",
  "CALL",
  "LISTSTART",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "match_rvalue",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 58)
  def _reduce_1(val, _values, result)
     result = Factory.block_or_expression(*val[0]) 
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'egrammar.ra', 63)
  def _reduce_3(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_4(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_5(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 71)
  def _reduce_6(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 75)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 76)
  def _reduce_8(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_11(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 84)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 85)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 86)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_16(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_17(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_18(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_19(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_20(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_21(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_22(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_23(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_24(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_25(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_26(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_27(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_28(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_29(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_30(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_31(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_32(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_33(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_34(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_35(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_36(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_37(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_38(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_39(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_40(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_41(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_42(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

module_eval(<<'.,.,', 'egrammar.ra', 156)
  def _reduce_62(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 157)
  def _reduce_63(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 165)
  def _reduce_64(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 169)
  def _reduce_65(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 173)
  def _reduce_66(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 178)
  def _reduce_67(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 182)
  def _reduce_68(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_69(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_70(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 191)
  def _reduce_71(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 192)
  def _reduce_72(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 193)
  def _reduce_73(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_74(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_75(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_76(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_77(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_78(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 221)
  def _reduce_79(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 231)
  def _reduce_80(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 238)
  def _reduce_81(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 242)
  def _reduce_82(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 83 omitted

module_eval(<<'.,.,', 'egrammar.ra', 250)
  def _reduce_84(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 254)
  def _reduce_85(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 258)
  def _reduce_86(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 267)
  def _reduce_87(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 271)
  def _reduce_88(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'egrammar.ra', 281)
  def _reduce_90(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 285)
  def _reduce_91(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 293)
  def _reduce_92(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 299)
  def _reduce_93(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 300)
  def _reduce_94(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 305)
  def _reduce_95(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_96(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 313)
  def _reduce_97(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 98 omitted

module_eval(<<'.,.,', 'egrammar.ra', 324)
  def _reduce_99(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 329)
  def _reduce_100(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 330)
  def _reduce_101(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 335)
  def _reduce_102(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 351)
  def _reduce_103(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 354)
  def _reduce_104(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error "A resource default can not be virtual or exported"
      when :override
        error "A resource override can not be virtual or exported"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 369)
  def _reduce_105(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        error "Defaults are not virtualizable"
      when :defaults
        error "Defaults are not virtualizable"
      when :override
        error "Defaults are not virtualizable"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 381)
  def _reduce_106(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error "A resource default can not specify a resource name"
      when :override
        error "A resource override does not allow override of name of resource"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 394)
  def _reduce_107(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        error "All resource specifications require names"
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 409)
  def _reduce_108(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 414)
  def _reduce_109(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 416)
  def _reduce_110(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 419)
  def _reduce_111(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 420)
  def _reduce_112(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 425)
  def _reduce_113(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 426)
  def _reduce_114(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_115(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 442)
  def _reduce_116(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 447)
  def _reduce_117(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 448)
  def _reduce_118(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 119 omitted

# reduce 120 omitted

module_eval(<<'.,.,', 'egrammar.ra', 461)
  def _reduce_121(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 462)
  def _reduce_122(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 463)
  def _reduce_123(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

module_eval(<<'.,.,', 'egrammar.ra', 479)
  def _reduce_127(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 483)
  def _reduce_128(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 493)
  def _reduce_129(val, _values, result)
          result = Factory.DEFINITION(classname(val[1][:value]), val[2], val[4])
      loc result, val[0], val[5]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 498)
  def _reduce_130(val, _values, result)
          result = Factory.DEFINITION(classname(val[1][:value]), val[2], nil)
      loc result, val[0], val[4]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 513)
  def _reduce_131(val, _values, result)
          @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5])
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 518)
  def _reduce_132(val, _values, result)
          @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), nil)
      loc result, val[0], val[5]
      
    result
  end
.,.,

# reduce 133 omitted

module_eval(<<'.,.,', 'egrammar.ra', 526)
  def _reduce_134(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 135 omitted

# reduce 136 omitted

module_eval(<<'.,.,', 'egrammar.ra', 543)
  def _reduce_137(val, _values, result)
          result = Factory.NODE(val[1], val[2], val[4])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 547)
  def _reduce_138(val, _values, result)
          result = Factory.NODE(val[1], val[2], nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 557)
  def _reduce_139(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 558)
  def _reduce_140(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 563)
  def _reduce_141(val, _values, result)
     result = Factory.fqn(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 564)
  def _reduce_142(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 565)
  def _reduce_143(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'egrammar.ra', 571)
  def _reduce_146(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 576)
  def _reduce_147(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_148(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 581)
  def _reduce_149(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 582)
  def _reduce_150(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_151(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 587)
  def _reduce_152(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 588)
  def _reduce_153(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 592)
  def _reduce_154(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 593)
  def _reduce_155(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 156 omitted

# reduce 157 omitted

module_eval(<<'.,.,', 'egrammar.ra', 606)
  def _reduce_158(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 612)
  def _reduce_159(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 613)
  def _reduce_160(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 614)
  def _reduce_161(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_162(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_163(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 617)
  def _reduce_164(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_165(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_166(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_167(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 625)
  def _reduce_168(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_169(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 629)
  def _reduce_170(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 171 omitted

# reduce 172 omitted

module_eval(<<'.,.,', 'egrammar.ra', 635)
  def _reduce_173(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 636)
  def _reduce_174(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 637)
  def _reduce_175(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_176(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_177(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_178(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 641)
  def _reduce_179(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_180(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_181(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_182(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_183(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_184(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_185(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_186(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_187(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_189(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_206(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
