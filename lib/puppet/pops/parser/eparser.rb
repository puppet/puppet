#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 767)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'60,62,-134,281,54,244,56,-221,82,-132,-230,271,251,270,354,365,353,250',
'271,319,230,230,105,15,109,304,104,140,230,43,246,50,334,53,47,130,51',
'72,68,129,45,71,48,49,-134,282,69,14,108,-221,70,-132,-230,12,13,264',
'227,302,60,62,141,73,54,280,56,401,82,44,271,337,83,67,63,249,65,66',
'64,359,248,52,105,15,109,55,104,253,126,43,254,50,278,53,47,130,51,72',
'68,129,45,71,48,49,339,237,69,14,108,77,70,130,341,12,13,129,130,294',
'60,62,129,73,54,295,56,130,82,44,296,129,83,67,63,130,65,66,354,129',
'353,52,105,15,109,55,104,280,130,43,247,50,129,53,47,369,51,72,68,75',
'45,71,48,49,256,255,69,14,108,346,70,60,62,12,13,266,267,347,60,62,348',
'73,54,230,56,399,82,44,241,351,118,67,63,355,65,66,357,241,226,52,105',
'15,109,55,104,278,280,43,278,50,321,53,47,366,51,72,68,302,45,71,48',
'49,302,217,69,14,108,193,70,77,160,12,13,376,303,157,60,62,378,73,54',
'155,56,397,82,44,280,278,131,67,63,381,65,66,118,119,318,52,105,15,109',
'55,104,118,385,43,357,50,387,53,47,388,51,72,68,389,45,71,48,49,390',
'391,69,14,108,115,70,393,394,12,13,395,322,77,60,62,74,73,54,402,56',
'403,82,44,404,405,,67,63,,65,66,,,,52,105,15,109,55,104,,,43,,50,,53',
'111,,51,72,68,,45,71,78,80,79,81,69,14,108,,70,,,12,13,,,,60,62,,73',
'54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68',
',45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65',
'66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,',
',12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43',
',50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54',
',56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,',
'45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66',
',,,52,,15,,55,,,,43,,50,,53,47,,51,72,68,,45,71,48,49,,,69,14,,,70,',
',12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43',
',50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54',
',56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,',
'45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66',
',,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12',
'13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50',
',53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56',
',,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71',
',,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52',
',15,,55,,,,43,,50,,53,125,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,',
',60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111',
',51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,',
'67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69',
'14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,',
'55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62',
',73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,195,212,206,213,53',
'207,215,208,204,202,,197,210,,,,,69,14,216,211,209,,,12,13,,,,60,62',
',73,54,144,56,,214,196,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111',
',51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,146,56,,,44',
',,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,',
',69,14,,,70,,,12,13,,,,60,62,,73,54,,56,149,,44,,,,67,63,,65,66,,,,52',
',15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,',
',60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111',
',51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,',
'67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69',
'14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,',
'55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62',
',73,54,,159,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51',
'72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63',
',65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,',
'70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,',
',43,,50,,53,47,,51,72,68,,45,71,48,49,,,69,14,,,70,,,12,13,,,,60,62',
',73,54,,56,149,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,47,,51',
'72,68,,45,71,48,49,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,',
'67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,47,,51,72,68,,45,71,48,49,',
',69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,',
'15,,55,,,,43,,50,,53,47,,51,72,68,,45,71,48,49,,,69,14,,,70,,,12,13',
',,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53',
'47,,51,72,68,,45,71,48,49,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,',
',44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,47,,51,72,68,,45,71',
'48,49,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66',
',,,52,,15,,55,,,,43,,50,,53,47,,51,72,68,,45,71,48,49,,,69,14,,,70,',
',12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43',
',50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54',
',56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,',
'45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66',
',,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12',
'13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50',
',53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56',
',,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71',
',,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52',
',15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,',
',60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111',
',51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,',
'67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69',
'14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,',
'55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62',
',73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51',
'72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63',
',65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,',
'70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,',
',43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73',
'54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68',
',45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65',
'66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,',
',12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43',
',50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54',
',56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,',
'45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66',
',,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12',
'13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50',
',53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56',
',,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71',
',,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52',
',15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,',
',60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111',
',51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,',
'67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69',
'14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,',
'55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62',
',73,54,,56,375,,44,,,192,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,47',
',51,72,68,,45,71,48,49,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44',
',,,67,63,,65,66,,,,52,,15,,55,,,,195,212,206,213,53,207,215,208,204',
'202,,197,210,,,,,69,14,216,211,209,,,12,13,,,,60,62,,73,54,,56,,214',
'196,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,47,,51,72,68,,45,71',
'48,49,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66',
',,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12',
'13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50',
',53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56',
',,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71',
',,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,308,,44,,,,67,63,,65,66,',
',,52,,15,,55,,,,43,,50,,53,47,,51,72,68,,45,71,48,49,,,69,14,,,70,,',
'12,13,,,,60,62,,73,54,,56,306,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43',
',50,,53,47,,51,72,68,,45,71,48,49,,,69,14,,,70,,,12,13,,,,60,62,,73',
'54,327,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72',
'68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,',
'65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70',
',,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,224,55,,',
',43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73',
'54,,56,360,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72',
'68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,300,,44,,,,67,63',
',65,66,,,,52,,15,,55,,,,43,,50,,53,47,,51,72,68,,45,71,48,49,,,69,14',
',,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,232',
'55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62',
',73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,47,,51,72',
'68,,45,71,48,49,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67',
'63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14',
',,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55',
',,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,',
'73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72',
'68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,328,56,,,44,,,,67,63',
',65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,',
'70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,',
',43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73',
'54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68',
',45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73,54,,56,,,44,,,,67,63,,65',
'66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,',
',12,13,,,,60,62,,73,54,,56,330,,44,,,,67,63,,65,66,,,,52,,15,,55,,,',
'43,,50,,53,111,,51,72,68,,45,71,,,,,69,14,,,70,,,12,13,,,,60,62,,73',
'54,,56,,,44,,,,67,63,,65,66,,,,52,,15,,55,,,,43,,50,,53,111,,51,72,68',
',45,71,,60,62,,69,14,,,70,,,12,13,,,,,,,73,,,,,,44,,60,62,67,63,,65',
'66,82,,,52,,140,,55,137,101,102,103,98,93,105,,109,,104,60,62,94,96',
'95,97,,,,73,,,140,,,137,,,,141,63,108,,,,100,99,,,86,87,89,88,91,92',
'73,84,85,140,,,137,82,83,236,141,63,,,,,101,102,103,98,93,105,,109,',
'104,73,90,94,96,95,97,,,,,141,63,,,,,,,,,,108,,,,100,99,,,86,87,89,88',
'91,92,82,84,85,,,,,,83,101,102,103,98,93,105,,109,,104,60,62,94,96,95',
'97,,,90,,,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,82,84,85,140,',
'252,137,,83,101,102,103,98,93,105,,109,,104,,,94,96,95,97,,73,90,,,',
',,,,,141,63,,,108,,,,100,99,,,86,87,89,88,91,92,,84,85,,,,,82,83,235',
',,,,,,101,102,103,98,93,105,,109,,104,,90,94,96,95,97,,,,,,,,,,,,,,',
',108,,,,100,99,,,86,87,89,88,91,92,82,84,85,,,,,,83,101,102,103,98,93',
'105,,109,,104,,,94,96,95,97,,,90,,,,,,,,,,,,,108,,,,100,99,,,86,87,89',
'88,91,92,,84,85,,,,,82,83,234,,,,,,,101,102,103,98,93,105,,109,,104',
',90,94,96,95,97,,,,,,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,,84',
'85,,,,,82,83,106,,,252,,,,101,102,103,98,93,105,,109,,104,,90,94,96',
'95,97,,,,,,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,,84,85,,,,,82',
'83,233,,,,,,,101,102,103,98,93,105,,109,,104,,90,94,96,95,97,,,,,,,',
',,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,82,84,85,,,,,,83,101,102,103',
'98,93,105,,109,,104,,222,94,96,95,97,,,90,,,,,,,,,,,,,108,,,,100,99',
',,86,87,89,88,91,92,82,84,85,,,,,,83,101,102,103,98,93,105,,109,,104',
',,94,96,95,97,,,90,,,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,82',
'84,85,,,,,,83,101,102,103,98,93,105,,109,,104,266,267,94,96,95,97,,',
'90,,,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,82,84,85,,,,,,83,101',
'102,103,98,93,105,,109,,104,,,94,96,95,97,,,90,,,,,,,,,,,,,108,,,,100',
'99,,,86,87,89,88,91,92,82,84,85,,,,,,83,101,102,103,98,93,105,,109,',
'104,,,94,96,95,97,,,90,,,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92',
'82,84,85,,,,,,83,101,102,103,98,93,105,,109,,104,,,94,96,95,97,,,90',
',,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,82,84,85,,,,,,83,101,102',
'103,98,93,105,,109,,104,,,94,96,95,97,,,90,,,,,,,,,,,,,108,,,,100,99',
',,86,87,89,88,91,92,82,84,85,,,,,,83,101,102,103,98,93,105,,109,82,104',
',82,94,96,95,97,,,90,,,,105,,109,105,104,109,,104,,108,,,,100,99,,,86',
'87,89,88,91,92,,84,85,108,,,108,,83,,,,,89,88,,89,88,84,85,,84,85,,',
'83,,90,83,,,,,,,,,,,82,,,,,90,,,90,101,102,103,98,93,105,276,109,,104',
',,94,96,95,97,,,,,,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,,84,85',
',,,,82,83,106,,,,,,,101,102,103,98,93,105,,109,,104,,90,94,96,95,97',
',,,,,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,82,84,85,,,272,,,83',
'101,102,103,98,93,105,,109,82,104,,,94,96,95,97,,,90,,,,105,,109,,104',
',,,,108,,,,100,99,,,86,87,89,88,91,92,,84,85,108,,,82,,83,,,86,87,89',
'88,,,,84,85,105,,109,82,104,83,,90,,,,,,,,,,105,,109,,104,,,90,,108',
',,,,,,,86,87,89,88,,,,84,85,108,,,82,,83,,,86,87,89,88,91,92,,84,85',
'105,,109,,104,83,,90,,82,,,,,,,,,,,,,93,105,90,109,108,104,,,94,,,,86',
'87,89,88,91,92,,84,85,,,,,,83,108,,,,,,,82,86,87,89,88,91,92,,84,85',
',90,,93,105,83,109,82,104,,,94,,,,,,,,,93,105,,109,90,104,,,94,,108',
',,,,,,,86,87,89,88,91,92,,84,85,108,,,,,83,,,86,87,89,88,91,92,,84,85',
',,,,82,83,,90,,,,,,101,102,103,98,93,105,,109,82,104,,90,94,96,95,97',
',,,,,,105,,109,,104,,,,,108,,,,100,99,,82,86,87,89,88,91,92,,84,85,108',
',98,93,105,83,109,,104,,,94,96,95,97,84,85,,,,,,83,,90,,,,,,108,,,,',
'82,,,86,87,89,88,91,92,,84,85,98,93,105,,109,83,104,,,94,96,95,97,,',
',,,,,,,,,90,,,,108,,,,,99,,,86,87,89,88,91,92,82,84,85,,,,,,83,101,102',
'103,98,93,105,,109,,104,,,94,96,95,97,,,90,,,,,,,,,,,,,108,,,,100,99',
',,86,87,89,88,91,92,82,84,85,,,,,,83,101,102,103,98,93,105,,109,82,104',
',,94,96,95,97,,,90,,,93,105,,109,,104,,,94,,108,,,,100,99,,,86,87,89',
'88,91,92,,84,85,108,,,82,,83,,,86,87,89,88,91,92,82,84,85,105,,109,',
'104,83,,90,,,,105,,109,,104,,,,,,,,,90,,108,,,,,,,,,,,108,,,,84,85,',
',,,,83,,,,84,85,,290,212,289,213,83,287,215,291,285,284,,286,288,,,',
',,,216,211,292,290,212,289,213,,287,215,291,285,284,,286,288,,,214,293',
',,216,211,292,290,212,289,213,,287,215,291,285,284,,286,288,,,214,293',
',,216,211,292,,,,,,,,,,,,,,,,214,293' ]
        racc_action_table = arr = ::Array.new(6619, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,204,205,0,133,0,210,170,202,209,231,145,167,306,315,306,145,167',
'241,157,118,170,0,170,231,170,247,241,0,133,0,269,0,0,207,0,0,0,207',
'0,0,0,0,204,205,0,0,170,210,0,202,209,0,0,157,118,263,388,388,247,0',
'388,199,388,388,169,0,309,273,170,0,0,143,0,0,0,309,143,0,169,388,169',
'0,169,148,47,388,148,388,198,388,388,206,388,388,388,206,388,388,388',
'388,277,125,388,388,169,161,388,50,279,388,388,50,47,219,5,5,47,388',
'5,221,5,111,113,388,223,111,169,388,388,125,388,388,351,125,351,388',
'113,5,113,388,113,283,318,5,135,5,318,5,5,318,5,5,5,5,5,5,5,5,153,153',
'5,5,113,297,5,155,155,5,5,334,334,299,387,387,301,5,387,302,387,387',
'168,5,132,305,224,5,5,307,5,5,308,127,117,5,168,387,168,5,168,312,313',
'387,314,387,242,387,387,316,387,387,387,228,387,387,387,387,320,107',
'387,387,168,105,387,76,74,387,387,333,230,64,385,385,336,387,385,63',
'385,385,112,387,338,238,48,387,387,345,387,387,346,42,239,387,112,385',
'112,387,112,41,354,385,355,385,357,385,385,358,385,385,385,362,385,385',
'385,385,363,364,385,385,112,40,385,370,371,385,385,374,243,6,192,192',
'1,385,192,392,192,396,110,385,398,400,,385,385,,385,385,,,,385,110,192',
'110,385,110,,,192,,192,,192,192,,192,192,192,,192,192,8,8,8,8,192,192',
'110,,192,,,192,192,,,,12,12,,192,12,,12,,,192,,,,192,192,,192,192,,',
',192,,12,,192,,,,12,,12,,12,12,,12,12,12,,12,12,,,,,12,12,,,12,,,12',
'12,,,,13,13,,12,13,,13,,,12,,,,12,12,,12,12,,,,12,,13,,12,,,,13,,13',
',13,13,,13,13,13,,13,13,,,,,13,13,,,13,,,13,13,,,,14,14,,13,14,,14,',
',13,,,,13,13,,13,13,,,,13,,14,,13,,,,14,,14,,14,14,,14,14,14,,14,14',
',,,,14,14,,,14,,,14,14,,,,15,15,,14,15,,15,,,14,,,,14,14,,14,14,,,,14',
',15,,14,,,,15,,15,,15,15,,15,15,15,,15,15,,,,,15,15,,,15,,,15,15,,,',
'366,366,,15,366,,366,,,15,,,,15,15,,15,15,,,,15,,366,,15,,,,366,,366',
',366,366,,366,366,366,,366,366,366,366,,,366,366,,,366,,,366,366,,,',
'353,353,,366,353,,353,,,366,,,,366,366,,366,366,,,,366,,353,,366,,,',
'353,,353,,353,353,,353,353,353,,353,353,,,,,353,353,,,353,,,353,353',
',,,195,195,,353,195,,195,,,353,,,,353,353,,353,353,,,,353,,195,,353',
',,,195,,195,,195,195,,195,195,195,,195,195,,,,,195,195,,,195,,,195,195',
',,,43,43,,195,43,,43,,,195,,,,195,195,,195,195,,,,195,,43,,195,,,,43',
',43,,43,43,,43,43,43,,43,43,,,,,43,43,,,43,,,43,43,,,,44,44,,43,44,',
'44,,,43,,,,43,43,,43,43,,,,43,,44,,43,,,,44,,44,,44,44,,44,44,44,,44',
'44,,,,,44,44,,,44,,,44,44,,,,45,45,,44,45,,45,,,44,,,,44,44,,44,44,',
',,44,,45,,44,,,,45,,45,,45,45,,45,45,45,,45,45,,,,,45,45,,,45,,,45,45',
',,,46,46,,45,46,,46,,,45,,,,45,45,,45,45,,,,45,,46,,45,,,,46,,46,,46',
'46,,46,46,46,,46,46,,,,,46,46,,,46,,,46,46,,,,237,237,,46,237,,237,',
',46,,,,46,46,,46,46,,,,46,,237,,46,,,,237,,237,,237,237,,237,237,237',
',237,237,,,,,237,237,,,237,,,237,237,,,,196,196,,237,196,,196,,,237',
',,,237,237,,237,237,,,,237,,196,,237,,,,196,,196,,196,196,,196,196,196',
',196,196,,,,,196,196,,,196,,,196,196,,,,197,197,,196,197,,197,,,196',
',,,196,196,,196,196,,,,196,,197,,196,,,,197,,197,,197,197,,197,197,197',
',197,197,,,,,197,197,,,197,,,197,197,,,,236,236,,197,236,,236,,,197',
',,,197,197,,197,197,,,,197,,236,,197,,,,236,236,236,236,236,236,236',
'236,236,236,,236,236,,,,,236,236,236,236,236,,,236,236,,,,54,54,,236',
'54,54,54,,236,236,,,,236,236,,236,236,,,,236,,54,,236,,,,54,,54,,54',
'54,,54,54,54,,54,54,,,,,54,54,,,54,,,54,54,,,,55,55,,54,55,55,55,,,54',
',,,54,54,,54,54,,,,54,,55,,54,,,,55,,55,,55,55,,55,55,55,,55,55,,,,',
'55,55,,,55,,,55,55,,,,56,56,,55,56,,56,56,,55,,,,55,55,,55,55,,,,55',
',56,,55,,,,56,,56,,56,56,,56,56,56,,56,56,,,,,56,56,,,56,,,56,56,,,',
'61,61,,56,61,,61,,,56,,,,56,56,,56,56,,,,56,,61,,56,,,,61,,61,,61,61',
',61,61,61,,61,61,,,,,61,61,,,61,,,61,61,,,,337,337,,61,337,,337,,,61',
',,,61,61,,61,61,,,,61,,337,,61,,,,337,,337,,337,337,,337,337,337,,337',
'337,,,,,337,337,,,337,,,337,337,,,,272,272,,337,272,,272,,,337,,,,337',
'337,,337,337,,,,337,,272,,337,,,,272,,272,,272,272,,272,272,272,,272',
'272,,,,,272,272,,,272,,,272,272,,,,66,66,,272,66,,66,,,272,,,,272,272',
',272,272,,,,272,,66,,272,,,,66,,66,,66,66,,66,66,66,,66,66,,,,,66,66',
',,66,,,66,66,,,,278,278,,66,278,,278,,,66,,,,66,66,,66,66,,,,66,,278',
',66,,,,278,,278,,278,278,,278,278,278,,278,278,,,,,278,278,,,278,,,278',
'278,,,,75,75,,278,75,,75,,,278,,,,278,278,,278,278,,,,278,,75,,278,',
',,75,,75,,75,75,,75,75,75,,75,75,75,75,,,75,75,,,75,,,75,75,,,,159,159',
',75,159,,159,159,,75,,,,75,75,,75,75,,,,75,,159,,75,,,,159,,159,,159',
'159,,159,159,159,,159,159,159,159,,,159,159,,,159,,,159,159,,,,77,77',
',159,77,,77,,,159,,,,159,159,,159,159,,,,159,,77,,159,,,,77,,77,,77',
'77,,77,77,77,,77,77,77,77,,,77,77,,,77,,,77,77,,,,78,78,,77,78,,78,',
',77,,,,77,77,,77,77,,,,77,,78,,77,,,,78,,78,,78,78,,78,78,78,,78,78',
'78,78,,,78,78,,,78,,,78,78,,,,79,79,,78,79,,79,,,78,,,,78,78,,78,78',
',,,78,,79,,78,,,,79,,79,,79,79,,79,79,79,,79,79,79,79,,,79,79,,,79,',
',79,79,,,,80,80,,79,80,,80,,,79,,,,79,79,,79,79,,,,79,,80,,79,,,,80',
',80,,80,80,,80,80,80,,80,80,80,80,,,80,80,,,80,,,80,80,,,,81,81,,80',
'81,,81,,,80,,,,80,80,,80,80,,,,80,,81,,80,,,,81,,81,,81,81,,81,81,81',
',81,81,81,81,,,81,81,,,81,,,81,81,,,,82,82,,81,82,,82,,,81,,,,81,81',
',81,81,,,,81,,82,,81,,,,82,,82,,82,82,,82,82,82,,82,82,,,,,82,82,,,82',
',,82,82,,,,83,83,,82,83,,83,,,82,,,,82,82,,82,82,,,,82,,83,,82,,,,83',
',83,,83,83,,83,83,83,,83,83,,,,,83,83,,,83,,,83,83,,,,84,84,,83,84,',
'84,,,83,,,,83,83,,83,83,,,,83,,84,,83,,,,84,,84,,84,84,,84,84,84,,84',
'84,,,,,84,84,,,84,,,84,84,,,,85,85,,84,85,,85,,,84,,,,84,84,,84,84,',
',,84,,85,,84,,,,85,,85,,85,85,,85,85,85,,85,85,,,,,85,85,,,85,,,85,85',
',,,86,86,,85,86,,86,,,85,,,,85,85,,85,85,,,,85,,86,,85,,,,86,,86,,86',
'86,,86,86,86,,86,86,,,,,86,86,,,86,,,86,86,,,,87,87,,86,87,,87,,,86',
',,,86,86,,86,86,,,,86,,87,,86,,,,87,,87,,87,87,,87,87,87,,87,87,,,,',
'87,87,,,87,,,87,87,,,,88,88,,87,88,,88,,,87,,,,87,87,,87,87,,,,87,,88',
',87,,,,88,,88,,88,88,,88,88,88,,88,88,,,,,88,88,,,88,,,88,88,,,,89,89',
',88,89,,89,,,88,,,,88,88,,88,88,,,,88,,89,,88,,,,89,,89,,89,89,,89,89',
'89,,89,89,,,,,89,89,,,89,,,89,89,,,,90,90,,89,90,,90,,,89,,,,89,89,',
'89,89,,,,89,,90,,89,,,,90,,90,,90,90,,90,90,90,,90,90,,,,,90,90,,,90',
',,90,90,,,,91,91,,90,91,,91,,,90,,,,90,90,,90,90,,,,90,,91,,90,,,,91',
',91,,91,91,,91,91,91,,91,91,,,,,91,91,,,91,,,91,91,,,,92,92,,91,92,',
'92,,,91,,,,91,91,,91,91,,,,91,,92,,91,,,,92,,92,,92,92,,92,92,92,,92',
'92,,,,,92,92,,,92,,,92,92,,,,93,93,,92,93,,93,,,92,,,,92,92,,92,92,',
',,92,,93,,92,,,,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93,,,93,,,93,93',
',,,94,94,,93,94,,94,,,93,,,,93,93,,93,93,,,,93,,94,,93,,,,94,,94,,94',
'94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,94,,,,95,95,,94,95,,95,,,94',
',,,94,94,,94,94,,,,94,,95,,94,,,,95,,95,,95,95,,95,95,95,,95,95,,,,',
'95,95,,,95,,,95,95,,,,96,96,,95,96,,96,,,95,,,,95,95,,95,95,,,,95,,96',
',95,,,,96,,96,,96,96,,96,96,96,,96,96,,,,,96,96,,,96,,,96,96,,,,97,97',
',96,97,,97,,,96,,,,96,96,,96,96,,,,96,,97,,96,,,,97,,97,,97,97,,97,97',
'97,,97,97,,,,,97,97,,,97,,,97,97,,,,98,98,,97,98,,98,,,97,,,,97,97,',
'97,97,,,,97,,98,,97,,,,98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98',
',,98,98,,,,99,99,,98,99,,99,,,98,,,,98,98,,98,98,,,,98,,99,,98,,,,99',
',99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,100,100,,99,100',
',100,,,99,,,,99,99,,99,99,,,,99,,100,,99,,,,100,,100,,100,100,,100,100',
'100,,100,100,,,,,100,100,,,100,,,100,100,,,,101,101,,100,101,,101,,',
'100,,,,100,100,,100,100,,,,100,,101,,100,,,,101,,101,,101,101,,101,101',
'101,,101,101,,,,,101,101,,,101,,,101,101,,,,102,102,,101,102,,102,,',
'101,,,,101,101,,101,101,,,,101,,102,,101,,,,102,,102,,102,102,,102,102',
'102,,102,102,,,,,102,102,,,102,,,102,102,,,,103,103,,102,103,,103,,',
'102,,,,102,102,,102,102,,,,102,,103,,102,,,,103,,103,,103,103,,103,103',
'103,,103,103,,,,,103,103,,,103,,,103,103,,,,104,104,,103,104,,104,,',
'103,,,,103,103,,103,103,,,,103,,104,,103,,,,104,,104,,104,104,,104,104',
'104,,104,104,,,,,104,104,,,104,,,104,104,,,,322,322,,104,322,,322,322',
',104,,,104,104,104,,104,104,,,,104,,322,,104,,,,322,,322,,322,322,,322',
'322,322,,322,322,322,322,,,322,322,,,322,,,322,322,,,,106,106,,322,106',
',106,,,322,,,,322,322,,322,322,,,,322,,106,,322,,,,106,106,106,106,106',
'106,106,106,106,106,,106,106,,,,,106,106,106,106,106,,,106,106,,,,321',
'321,,106,321,,321,,106,106,,,,106,106,,106,106,,,,106,,321,,106,,,,321',
',321,,321,321,,321,321,321,,321,321,321,321,,,321,321,,,321,,,321,321',
',,,108,108,,321,108,,108,,,321,,,,321,321,,321,321,,,,321,,108,,321',
',,,108,,108,,108,108,,108,108,108,,108,108,,,,,108,108,,,108,,,108,108',
',,,109,109,,108,109,,109,,,108,,,,108,108,,108,108,,,,108,,109,,108',
',,,109,,109,,109,109,,109,109,109,,109,109,,,,,109,109,,,109,,,109,109',
',,,235,235,,109,235,,235,,,109,,,,109,109,,109,109,,,,109,,235,,109',
',,,235,,235,,235,235,,235,235,235,,235,235,,,,,235,235,,,235,,,235,235',
',,,234,234,,235,234,,234,234,,235,,,,235,235,,235,235,,,,235,,234,,235',
',,,234,,234,,234,234,,234,234,234,,234,234,234,234,,,234,234,,,234,',
',234,234,,,,233,233,,234,233,,233,233,,234,,,,234,234,,234,234,,,,234',
',233,,234,,,,233,,233,,233,233,,233,233,233,,233,233,233,233,,,233,233',
',,233,,,233,233,,,,248,248,,233,248,248,248,,,233,,,,233,233,,233,233',
',,,233,,248,,233,,,,248,,248,,248,248,,248,248,248,,248,248,,,,,248',
'248,,,248,,,248,248,,,,271,271,,248,271,,271,,,248,,,,248,248,,248,248',
',,,248,,271,,248,,,,271,,271,,271,271,,271,271,271,,271,271,,,,,271',
'271,,,271,,,271,271,,,,115,115,,271,115,,115,,,271,,,,271,271,,271,271',
',,,271,,115,115,271,,,,115,,115,,115,115,,115,115,115,,115,115,,,,,115',
'115,,,115,,,115,115,,,,310,310,,115,310,,310,310,,115,,,,115,115,,115',
'115,,,,115,,310,,115,,,,310,,310,,310,310,,310,310,310,,310,310,,,,',
'310,310,,,310,,,310,310,,,,226,226,,310,226,,226,226,,310,,,,310,310',
',310,310,,,,310,,226,,310,,,,226,,226,,226,226,,226,226,226,,226,226',
'226,226,,,226,226,,,226,,,226,226,,,,119,119,,226,119,,119,,,226,,,',
'226,226,,226,226,,,,226,,119,119,226,,,,119,,119,,119,119,,119,119,119',
',119,119,,,,,119,119,,,119,,,119,119,,,,156,156,,119,156,,156,,,119',
',,,119,119,,119,119,,,,119,,156,,119,,,,156,,156,,156,156,,156,156,156',
',156,156,156,156,,,156,156,,,156,,,156,156,,,,281,281,,156,281,,281',
',,156,,,,156,156,,156,156,,,,156,,281,,156,,,,281,,281,,281,281,,281',
'281,281,,281,281,,,,,281,281,,,281,,,281,281,,,,296,296,,281,296,,296',
',,281,,,,281,281,,281,281,,,,281,,296,,281,,,,296,,296,,296,296,,296',
'296,296,,296,296,,,,,296,296,,,296,,,296,296,,,,259,259,,296,259,,259',
',,296,,,,296,296,,296,296,,,,296,,259,,296,,,,259,,259,,259,259,,259',
'259,259,,259,259,,,,,259,259,,,259,,,259,259,,,,250,250,,259,250,250',
'250,,,259,,,,259,259,,259,259,,,,259,,250,,259,,,,250,,250,,250,250',
',250,250,250,,250,250,,,,,250,250,,,250,,,250,250,,,,126,126,,250,126',
',126,,,250,,,,250,250,,250,250,,,,250,,126,,250,,,,126,,126,,126,126',
',126,126,126,,126,126,,,,,126,126,,,126,,,126,126,,,,252,252,,126,252',
',252,,,126,,,,126,126,,126,126,,,,126,,252,,126,,,,252,,252,,252,252',
',252,252,252,,252,252,,,,,252,252,,,252,,,252,252,,,,303,303,,252,303',
',303,,,252,,,,252,252,,252,252,,,,252,,303,,252,,,,303,,303,,303,303',
',303,303,303,,303,303,,,,,303,303,,,303,,,303,303,,,,254,254,,303,254',
',254,254,,303,,,,303,303,,303,303,,,,303,,254,,303,,,,254,,254,,254',
'254,,254,254,254,,254,254,,,,,254,254,,,254,,,254,254,,,,282,282,,254',
'282,,282,,,254,,,,254,254,,254,254,,,,254,,282,,254,,,,282,,282,,282',
'282,,282,282,282,,282,282,,244,244,,282,282,,,282,,,282,282,,,,,,,282',
',,,,,282,,51,51,282,282,,282,282,142,,,282,,244,,282,244,142,142,142',
'142,142,142,,142,,142,246,246,142,142,142,142,,,,244,,,51,,,51,,,,244',
'244,142,,,,142,142,,,142,142,142,142,142,142,51,142,142,246,,,246,124',
'142,124,51,51,,,,,124,124,124,124,124,124,,124,,124,246,142,124,124',
'124,124,,,,,246,246,,,,,,,,,,124,,,,124,124,,,124,124,124,124,124,124',
'218,124,124,,,,,,124,218,218,218,218,218,218,,218,,218,208,208,218,218',
'218,218,,,124,,,,,,,,,,,,,218,,,,218,218,,,218,218,218,218,218,218,147',
'218,218,208,,147,208,,218,147,147,147,147,147,147,,147,,147,,,147,147',
'147,147,,208,218,,,,,,,,,208,208,,,147,,,,147,147,,,147,147,147,147',
'147,147,,147,147,,,,,123,147,123,,,,,,,123,123,123,123,123,123,,123',
',123,,147,123,123,123,123,,,,,,,,,,,,,,,,123,,,,123,123,,,123,123,123',
'123,123,123,151,123,123,,,,,,123,151,151,151,151,151,151,,151,,151,',
',151,151,151,151,,,123,,,,,,,,,,,,,151,,,,151,151,,,151,151,151,151',
'151,151,,151,151,,,,,122,151,122,,,,,,,122,122,122,122,122,122,,122',
',122,,151,122,122,122,122,,,,,,,,,,,,,,,,122,,,,122,122,,,122,122,122',
'122,122,122,,122,122,,,,,268,122,268,,,268,,,,268,268,268,268,268,268',
',268,,268,,122,268,268,268,268,,,,,,,,,,,,,,,,268,,,,268,268,,,268,268',
'268,268,268,268,,268,268,,,,,120,268,120,,,,,,,120,120,120,120,120,120',
',120,,120,,268,120,120,120,120,,,,,,,,,,,,,,,,120,,,,120,120,,,120,120',
'120,120,120,120,114,120,120,,,,,,120,114,114,114,114,114,114,,114,,114',
',114,114,114,114,114,,,120,,,,,,,,,,,,,114,,,,114,114,,,114,114,114',
'114,114,114,158,114,114,,,,,,114,158,158,158,158,158,158,,158,,158,',
',158,158,158,158,,,114,,,,,,,,,,,,,158,,,,158,158,,,158,158,158,158',
'158,158,326,158,158,,,,,,158,326,326,326,326,326,326,,326,,326,158,158',
'326,326,326,326,,,158,,,,,,,,,,,,,326,,,,326,326,,,326,326,326,326,326',
'326,329,326,326,,,,,,326,329,329,329,329,329,329,,329,,329,,,329,329',
'329,329,,,326,,,,,,,,,,,,,329,,,,329,329,,,329,329,329,329,329,329,335',
'329,329,,,,,,329,335,335,335,335,335,335,,335,,335,,,335,335,335,335',
',,329,,,,,,,,,,,,,335,,,,335,335,,,335,335,335,335,335,335,343,335,335',
',,,,,335,343,343,343,343,343,343,,343,,343,,,343,343,343,343,,,335,',
',,,,,,,,,,,343,,,,343,343,,,343,343,343,343,343,343,344,343,343,,,,',
',343,344,344,344,344,344,344,,344,,344,,,344,344,344,344,,,343,,,,,',
',,,,,,,344,,,,344,344,,,344,344,344,344,344,344,350,344,344,,,,,,344',
'350,350,350,350,350,350,,350,171,350,,172,350,350,350,350,,,344,,,,171',
',171,172,171,172,,172,,350,,,,350,350,,,350,350,350,350,350,350,,350',
'350,171,,,172,,350,,,,,171,171,,172,172,171,171,,172,172,,,171,,350',
'172,,,,,,,,,,,194,,,,,171,,,172,194,194,194,194,194,194,194,194,,194',
',,194,194,194,194,,,,,,,,,,,,,,,,194,,,,194,194,,,194,194,194,194,194',
'194,,194,194,,,,,11,194,11,,,,,,,11,11,11,11,11,11,,11,,11,,194,11,11',
'11,11,,,,,,,,,,,,,,,,11,,,,11,11,,,11,11,11,11,11,11,189,11,11,,,189',
',,11,189,189,189,189,189,189,,189,176,189,,,189,189,189,189,,,11,,,',
'176,,176,,176,,,,,189,,,,189,189,,,189,189,189,189,189,189,,189,189',
'176,,,177,,189,,,176,176,176,176,,,,176,176,177,,177,178,177,176,,189',
',,,,,,,,,178,,178,,178,,,176,,177,,,,,,,,177,177,177,177,,,,177,177',
'178,,,179,,177,,,178,178,178,178,178,178,,178,178,179,,179,,179,178',
',177,,180,,,,,,,,,,,,,180,180,178,180,179,180,,,180,,,,179,179,179,179',
'179,179,,179,179,,,,,,179,180,,,,,,,181,180,180,180,180,180,180,,180',
'180,,179,,181,181,180,181,182,181,,,181,,,,,,,,,182,182,,182,180,182',
',,182,,181,,,,,,,,181,181,181,181,181,181,,181,181,182,,,,,181,,,182',
'182,182,182,182,182,,182,182,,,,,188,182,,181,,,,,,188,188,188,188,188',
'188,,188,173,188,,182,188,188,188,188,,,,,,,173,,173,,173,,,,,188,,',
',188,188,,184,188,188,188,188,188,188,,188,188,173,,184,184,184,188',
'184,,184,,,184,184,184,184,173,173,,,,,,173,,188,,,,,,184,,,,,185,,',
'184,184,184,184,184,184,,184,184,185,185,185,,185,184,185,,,185,185',
'185,185,,,,,,,,,,,,184,,,,185,,,,,185,,,185,185,185,185,185,185,186',
'185,185,,,,,,185,186,186,186,186,186,186,,186,,186,,,186,186,186,186',
',,185,,,,,,,,,,,,,186,,,,186,186,,,186,186,186,186,186,186,187,186,186',
',,,,,186,187,187,187,187,187,187,,187,183,187,,,187,187,187,187,,,186',
',,183,183,,183,,183,,,183,,187,,,,187,187,,,187,187,187,187,187,187',
',187,187,183,,,174,,187,,,183,183,183,183,183,183,175,183,183,174,,174',
',174,183,,187,,,,175,,175,,175,,,,,,,,,183,,174,,,,,,,,,,,175,,,,174',
'174,,,,,,174,,,,175,175,,275,275,275,275,175,275,275,275,275,275,,275',
'275,,,,,,,275,275,275,280,280,280,280,,280,280,280,280,280,,280,280',
',,275,275,,,280,280,280,217,217,217,217,,217,217,217,217,217,,217,217',
',,280,280,,,217,217,217,,,,,,,,,,,,,,,,217,217' ]
        racc_action_check = arr = ::Array.new(6619, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   292,   nil,   nil,   nil,   114,   277,   nil,   268,   nil,
   nil,  5879,   346,   404,   462,   520,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   256,   189,   226,   752,   810,   868,   926,    78,   200,   nil,
    73,  4823,   nil,   nil,  1216,  1274,  1332,   nil,   nil,   nil,
   nil,  1390,   nil,   162,   161,   nil,  1564,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   226,  1680,   213,  1796,  1854,  1912,
  1970,  2028,  2086,  2144,  2202,  2260,  2318,  2376,  2434,  2492,
  2550,  2608,  2666,  2724,  2782,  2840,  2898,  2956,  3014,  3072,
  3130,  3188,  3246,  3304,  3362,   183,  3478,   211,  3594,  3652,
   292,    87,   234,   118,  5347,  4000,   nil,   186,   -14,  4174,
  5293,   nil,  5171,  5056,  4887,    95,  4522,   168,   nil,   nil,
   nil,   nil,   159,    -7,   nil,   126,   nil,   nil,   nil,   nil,
   nil,   nil,  4826,    66,   nil,     5,   nil,  4995,    76,   nil,
   nil,  5110,   nil,   156,   nil,   165,  4232,   -15,  5401,  1738,
   nil,    95,   nil,   nil,   nil,   nil,   nil,     6,   176,    60,
     2,  5742,  5745,  6218,  6461,  6472,  5950,  5993,  6010,  6053,
  6076,  6123,  6140,  6418,  6248,  6293,  6347,  6401,  6201,  5933,
   nil,   nil,   288,   nil,  5818,   694,  1042,  1100,    49,    51,
   nil,   nil,    -2,   nil,    -9,    -8,    57,    -1,  4964,    -1,
    -4,   nil,   nil,   nil,   nil,   nil,   nil,  6549,  4941,    68,
   nil,    98,   nil,   114,   116,   nil,  4116,   nil,   201,   nil,
   215,    -1,   nil,  3826,  3768,  3710,  1158,   984,   202,   215,
   nil,    -7,   198,   280,  4797,   nil,  4849,   -13,  3884,   nil,
  4464,   nil,  4580,   nil,  4696,   nil,   nil,   nil,   nil,  4406,
   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,  5232,    23,
   nil,  3942,  1506,    57,   nil,  6505,   nil,    93,  1622,   101,
  6527,  4290,  4754,   131,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  4348,   139,   nil,   164,
   nil,   106,   144,  4638,   nil,   176,   -18,   180,   160,    56,
  4058,   nil,   160,   190,   163,     6,   201,   nil,   108,   nil,
   206,  3536,  3420,   nil,   nil,   nil,  5455,   nil,   nil,  5509,
   nil,   nil,   nil,   159,    92,  5563,   225,  1448,   230,   nil,
   nil,   nil,   nil,  5617,  5671,   238,   180,   nil,   nil,   nil,
  5725,   102,   nil,   636,   252,   230,   nil,   256,   259,   nil,
   nil,   nil,   262,   267,   268,   nil,   578,   nil,   nil,   nil,
   257,   275,   nil,   nil,   278,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   230,   nil,   172,    56,   nil,
   nil,   nil,   286,   nil,   nil,   nil,   288,   nil,   291,   nil,
   292,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -232,  -233,    -1,    -2,    -3,    -4,    -5,    -8,   -10,   -11,
   -16,  -109,  -233,  -233,  -233,  -233,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,
   -60,   -61,   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,
   -74,   -75,   -79,  -233,  -233,  -233,  -233,  -233,  -120,  -122,
  -233,  -233,  -160,  -170,  -233,  -233,  -233,  -183,  -184,  -185,
  -186,  -233,  -188,  -233,  -199,  -202,  -233,  -207,  -208,  -209,
  -210,  -211,  -212,  -213,  -233,  -233,    -7,  -233,  -233,  -233,
  -233,  -233,  -233,  -233,  -233,  -233,  -233,  -233,  -233,  -233,
  -233,  -233,  -233,  -233,  -233,  -233,  -233,  -233,  -233,  -233,
  -233,  -233,  -233,  -233,  -233,  -233,  -129,  -124,  -232,  -232,
   -28,  -233,   -29,   -36,  -233,  -233,   -76,  -233,  -233,  -233,
  -233,   -86,  -233,  -233,  -233,  -233,  -233,  -232,  -139,  -161,
  -162,  -121,  -232,  -232,  -148,  -150,  -151,  -152,  -153,  -154,
  -156,  -157,   -44,  -233,  -173,  -233,  -176,  -233,  -233,  -179,
  -180,  -192,  -187,  -233,  -195,  -233,  -233,  -233,  -233,  -233,
   406,    -6,    -9,   -12,   -13,   -14,   -15,  -233,   -18,   -19,
   -20,   -21,   -22,   -23,   -24,   -25,   -26,   -27,   -30,   -31,
   -32,   -33,   -34,   -35,   -37,   -38,   -39,   -40,   -41,  -233,
   -42,  -104,  -233,   -80,  -233,  -225,  -231,  -219,  -216,  -214,
  -118,  -130,  -208,  -133,  -212,  -233,  -222,  -220,  -228,  -210,
  -211,  -218,  -223,  -224,  -226,  -227,  -229,  -129,  -128,  -233,
  -127,  -233,   -43,  -214,   -71,   -81,  -233,   -84,  -214,  -166,
  -169,  -233,   -78,  -233,  -233,  -233,  -129,  -233,  -216,  -232,
  -163,  -233,  -233,  -233,  -233,  -158,  -233,  -233,  -233,  -171,
  -233,  -174,  -233,  -177,  -233,  -189,  -190,  -191,  -193,  -233,
  -196,  -197,  -198,  -214,  -200,  -203,  -205,  -206,  -109,  -233,
   -17,  -233,  -233,  -214,  -106,  -129,  -117,  -233,  -217,  -233,
  -215,  -233,  -233,  -214,  -132,  -134,  -219,  -220,  -221,  -222,
  -225,  -228,  -230,  -231,  -125,  -126,  -215,  -233,   -73,  -233,
   -83,  -233,  -215,  -233,   -77,  -233,   -89,  -233,   -95,  -233,
  -233,   -99,  -216,  -214,  -216,  -233,  -233,  -142,  -233,  -164,
  -214,  -232,  -233,  -149,  -159,  -155,   -45,  -172,  -175,  -182,
  -178,  -181,  -194,  -233,  -233,  -108,  -233,  -215,  -214,  -112,
  -119,  -113,  -131,  -135,  -136,  -233,   -70,   -82,   -85,  -167,
  -168,   -89,   -88,  -233,  -233,   -95,   -94,  -233,  -233,  -103,
   -98,  -100,  -233,  -233,  -233,  -115,  -232,  -143,  -144,  -145,
  -233,  -233,  -140,  -141,  -233,  -147,  -201,  -204,  -105,  -107,
  -116,  -123,   -72,   -87,   -90,  -233,   -93,  -233,  -233,  -110,
  -111,  -114,  -233,  -165,  -137,  -146,  -233,   -92,  -233,   -97,
  -233,  -102,  -138,   -91,   -96,  -101 ]

racc_goto_table = [
     2,   132,     4,   116,   110,   112,   113,   114,   152,   138,
   136,   199,   198,   228,   191,   265,   277,   356,   239,   225,
   371,   352,   311,   242,   163,   164,   165,   166,   323,    76,
   324,   162,   238,   219,   221,   120,   122,   123,   124,   279,
   340,   275,   190,   143,   145,   342,   142,   142,   147,   358,
   273,   310,   263,   151,   316,   367,   315,   243,   158,   384,
   325,   349,   331,   297,   386,   392,   383,   260,   301,   261,
     3,   167,   258,   259,   142,   168,   169,   170,   171,   172,
   173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
   183,   184,   185,   186,   187,   188,   189,   361,   194,   161,
   218,   218,   274,   333,   223,   257,   154,   142,   231,   156,
     1,   142,   nil,   336,   nil,   nil,   nil,   nil,   194,   nil,
   nil,   nil,   283,   345,   nil,   nil,   nil,   nil,   nil,   240,
   362,   nil,   364,   nil,   240,   245,   320,   nil,   nil,   nil,
   nil,   313,   312,   314,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   268,   nil,   363,   nil,   nil,   262,   132,   nil,   269,
   370,   nil,   nil,   nil,   nil,   nil,   138,   136,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   380,   nil,
   338,   nil,   nil,   nil,   189,   nil,   298,   120,   122,   123,
   nil,   377,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   138,   136,   138,   136,   332,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   299,   142,   194,   194,
   nil,   nil,   nil,   305,   307,   nil,   nil,   nil,   nil,   nil,
   326,   317,   326,   nil,   329,   nil,   147,   379,   nil,   nil,
   nil,   151,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   326,   335,   nil,   nil,   nil,   nil,   368,
   194,   nil,   nil,   343,   344,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   326,   nil,
   nil,   nil,   nil,   nil,   nil,   350,   nil,   nil,   nil,   nil,
   nil,   nil,   142,   nil,   nil,   nil,   nil,   nil,   382,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   374,   373,   nil,   nil,   nil,   nil,   nil,   189,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   120,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   373,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   396,   nil,   398,   400 ]

racc_goto_check = [
     2,    65,     4,    40,    10,    10,    10,    10,    83,    32,
    38,    57,    55,    45,    52,    90,    56,    48,    66,    44,
    67,    47,    50,    66,     8,     8,     8,     8,    73,     6,
    73,     7,    55,    61,    61,    10,    10,    10,    10,    39,
    58,    59,    13,    12,    12,    62,    10,    10,    10,    51,
    53,    49,    45,    10,    69,    70,    56,    72,    10,    46,
    75,    76,    78,    39,    48,    67,    47,    79,    39,    80,
     3,    12,    84,    85,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    50,    10,     6,
    10,    10,    52,    39,    12,    87,    88,    10,    12,    89,
     1,    10,   nil,    39,   nil,   nil,   nil,   nil,    10,   nil,
   nil,   nil,    57,    39,   nil,   nil,   nil,   nil,   nil,     4,
    56,   nil,    56,   nil,     4,     4,    45,   nil,   nil,   nil,
   nil,    57,    55,    55,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,    39,   nil,   nil,     2,    65,   nil,     2,
    39,   nil,   nil,   nil,   nil,   nil,    32,    38,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,   nil,
    57,   nil,   nil,   nil,    10,   nil,    40,    10,    10,    10,
   nil,    90,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    32,    38,    32,    38,    83,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,    10,    10,    10,
   nil,   nil,   nil,     2,     2,   nil,   nil,   nil,   nil,   nil,
    10,     4,    10,   nil,    10,   nil,    10,    52,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    10,    10,   nil,   nil,   nil,   nil,    65,
    10,   nil,   nil,    10,    10,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,    40,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,     4,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   110,     0,    70,     2,   nil,    24,   -46,   -54,   nil,
    -8,   nil,   -11,   -62,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -42,   nil,   nil,   nil,   nil,   nil,   -41,  -160,
   -38,   nil,   nil,   nil,   -98,  -105,  -294,  -285,  -291,  -184,
  -213,  -260,   -90,  -142,   nil,   -94,  -182,   -95,  -238,  -153,
   nil,   -75,  -235,   nil,   nil,   -49,  -109,  -301,   nil,  -185,
  -263,   nil,   -76,  -216,   nil,  -187,  -241,   nil,  -192,   -88,
   -86,   nil,   nil,   -53,   -81,   -80,   nil,   -48,    43,    45,
  -143 ]

racc_goto_default = [
   nil,   nil,   372,   nil,   220,     5,     6,     7,     8,     9,
    11,    10,   309,   nil,    16,    40,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,   nil,
   nil,    41,    42,   117,   nil,   nil,   121,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,   200,   nil,
   107,   nil,   201,   205,   203,   128,   nil,   nil,   127,   nil,
   nil,   133,   nil,   134,   135,   139,   229,   148,   150,    57,
    58,    59,    61,   nil,   nil,   nil,   153,   nil,   nil,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 91, :_reduce_1,
  1, 91, :_reduce_2,
  1, 91, :_reduce_none,
  1, 92, :_reduce_4,
  1, 95, :_reduce_5,
  3, 95, :_reduce_6,
  2, 95, :_reduce_7,
  1, 96, :_reduce_8,
  3, 96, :_reduce_9,
  1, 97, :_reduce_none,
  1, 98, :_reduce_11,
  3, 98, :_reduce_12,
  3, 98, :_reduce_13,
  3, 98, :_reduce_14,
  3, 98, :_reduce_15,
  1, 100, :_reduce_none,
  4, 100, :_reduce_17,
  3, 100, :_reduce_18,
  3, 100, :_reduce_19,
  3, 100, :_reduce_20,
  3, 100, :_reduce_21,
  3, 100, :_reduce_22,
  3, 100, :_reduce_23,
  3, 100, :_reduce_24,
  3, 100, :_reduce_25,
  3, 100, :_reduce_26,
  3, 100, :_reduce_27,
  2, 100, :_reduce_28,
  2, 100, :_reduce_29,
  3, 100, :_reduce_30,
  3, 100, :_reduce_31,
  3, 100, :_reduce_32,
  3, 100, :_reduce_33,
  3, 100, :_reduce_34,
  3, 100, :_reduce_35,
  2, 100, :_reduce_36,
  3, 100, :_reduce_37,
  3, 100, :_reduce_38,
  3, 100, :_reduce_39,
  3, 100, :_reduce_40,
  3, 100, :_reduce_41,
  3, 100, :_reduce_42,
  3, 100, :_reduce_43,
  1, 102, :_reduce_44,
  3, 102, :_reduce_45,
  1, 101, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 123, :_reduce_68,
  1, 123, :_reduce_69,
  5, 104, :_reduce_70,
  3, 104, :_reduce_71,
  6, 104, :_reduce_72,
  4, 104, :_reduce_73,
  1, 104, :_reduce_74,
  1, 108, :_reduce_75,
  2, 108, :_reduce_76,
  4, 131, :_reduce_77,
  3, 131, :_reduce_78,
  1, 131, :_reduce_79,
  3, 132, :_reduce_80,
  2, 130, :_reduce_81,
  3, 134, :_reduce_82,
  2, 134, :_reduce_83,
  2, 133, :_reduce_84,
  4, 133, :_reduce_85,
  2, 111, :_reduce_86,
  5, 136, :_reduce_87,
  4, 136, :_reduce_88,
  0, 137, :_reduce_none,
  2, 137, :_reduce_90,
  4, 137, :_reduce_91,
  3, 137, :_reduce_92,
  6, 112, :_reduce_93,
  5, 112, :_reduce_94,
  0, 138, :_reduce_none,
  4, 138, :_reduce_96,
  3, 138, :_reduce_97,
  5, 110, :_reduce_98,
  1, 139, :_reduce_99,
  2, 139, :_reduce_100,
  5, 140, :_reduce_101,
  4, 140, :_reduce_102,
  1, 141, :_reduce_103,
  1, 103, :_reduce_none,
  4, 103, :_reduce_105,
  1, 143, :_reduce_106,
  3, 143, :_reduce_107,
  3, 142, :_reduce_108,
  1, 99, :_reduce_109,
  6, 99, :_reduce_110,
  6, 99, :_reduce_111,
  5, 99, :_reduce_112,
  5, 99, :_reduce_113,
  6, 99, :_reduce_114,
  5, 99, :_reduce_115,
  4, 148, :_reduce_116,
  1, 149, :_reduce_117,
  1, 145, :_reduce_118,
  3, 145, :_reduce_119,
  1, 144, :_reduce_120,
  2, 144, :_reduce_121,
  1, 144, :_reduce_122,
  6, 109, :_reduce_123,
  2, 109, :_reduce_124,
  3, 150, :_reduce_125,
  3, 150, :_reduce_126,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 147, :_reduce_129,
  1, 147, :_reduce_130,
  3, 147, :_reduce_131,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  3, 152, :_reduce_135,
  3, 152, :_reduce_136,
  6, 113, :_reduce_137,
  7, 114, :_reduce_138,
  1, 158, :_reduce_139,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 159, :_reduce_none,
  2, 159, :_reduce_143,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  6, 115, :_reduce_146,
  5, 115, :_reduce_147,
  1, 161, :_reduce_148,
  3, 161, :_reduce_149,
  1, 163, :_reduce_150,
  1, 163, :_reduce_151,
  1, 163, :_reduce_152,
  1, 163, :_reduce_none,
  1, 164, :_reduce_154,
  3, 164, :_reduce_155,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 162, :_reduce_none,
  2, 162, :_reduce_159,
  1, 117, :_reduce_160,
  1, 155, :_reduce_161,
  1, 155, :_reduce_162,
  1, 156, :_reduce_163,
  2, 156, :_reduce_164,
  4, 156, :_reduce_165,
  1, 135, :_reduce_166,
  3, 135, :_reduce_167,
  3, 166, :_reduce_168,
  1, 166, :_reduce_169,
  1, 107, :_reduce_170,
  3, 118, :_reduce_171,
  4, 118, :_reduce_172,
  2, 118, :_reduce_173,
  3, 118, :_reduce_174,
  4, 118, :_reduce_175,
  2, 118, :_reduce_176,
  3, 121, :_reduce_177,
  4, 121, :_reduce_178,
  2, 121, :_reduce_179,
  1, 167, :_reduce_180,
  3, 167, :_reduce_181,
  3, 168, :_reduce_182,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 169, :_reduce_186,
  2, 170, :_reduce_187,
  1, 172, :_reduce_188,
  1, 174, :_reduce_189,
  1, 175, :_reduce_190,
  2, 173, :_reduce_191,
  1, 176, :_reduce_192,
  1, 177, :_reduce_193,
  2, 177, :_reduce_194,
  2, 171, :_reduce_195,
  2, 178, :_reduce_196,
  2, 178, :_reduce_197,
  3, 93, :_reduce_198,
  0, 179, :_reduce_199,
  2, 179, :_reduce_200,
  4, 179, :_reduce_201,
  1, 116, :_reduce_202,
  3, 116, :_reduce_203,
  5, 116, :_reduce_204,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 124, :_reduce_207,
  1, 127, :_reduce_208,
  1, 125, :_reduce_209,
  1, 126, :_reduce_210,
  1, 120, :_reduce_211,
  1, 119, :_reduce_212,
  1, 122, :_reduce_213,
  0, 129, :_reduce_none,
  1, 129, :_reduce_215,
  0, 146, :_reduce_none,
  1, 146, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  0, 94, :_reduce_232 ]

racc_reduce_n = 233

racc_shift_n = 406

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :DELETES => 17,
  :LESSEQUAL => 18,
  :NOTEQUAL => 19,
  :DOT => 20,
  :COLON => 21,
  :LLCOLLECT => 22,
  :RRCOLLECT => 23,
  :QMARK => 24,
  :LPAREN => 25,
  :RPAREN => 26,
  :ISEQUAL => 27,
  :GREATEREQUAL => 28,
  :GREATERTHAN => 29,
  :LESSTHAN => 30,
  :IF => 31,
  :ELSE => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :ATAT => 45,
  :LCOLLECT => 46,
  :RCOLLECT => 47,
  :CLASSREF => 48,
  :NOT => 49,
  :OR => 50,
  :AND => 51,
  :UNDEF => 52,
  :PARROW => 53,
  :PLUS => 54,
  :MINUS => 55,
  :TIMES => 56,
  :DIV => 57,
  :LSHIFT => 58,
  :RSHIFT => 59,
  :UMINUS => 60,
  :MATCH => 61,
  :NOMATCH => 62,
  :REGEX => 63,
  :IN_EDGE => 64,
  :OUT_EDGE => 65,
  :IN_EDGE_SUB => 66,
  :OUT_EDGE_SUB => 67,
  :IN => 68,
  :UNLESS => 69,
  :PIPE => 70,
  :LAMBDA => 71,
  :SELBRACE => 72,
  :NUMBER => 73,
  :HEREDOC => 74,
  :SUBLOCATE => 75,
  :RENDER_STRING => 76,
  :RENDER_EXPR => 77,
  :EPP_START => 78,
  :EPP_END => 79,
  :EPP_END_TRIM => 80,
  :FUNCTION => 81,
  :LOW => 82,
  :HIGH => 83,
  :CALL => 84,
  :LISTSTART => 85,
  :SPLAT => 86,
  :MODULO => 87,
  :TITLE_COLON => 88,
  :CASE_COLON => 89 }

racc_nt_base = 90

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "LOW",
  "HIGH",
  "CALL",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "function_definition",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "number",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 66)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'egrammar.ra', 72)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 78)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 79)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 84)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 85)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 92)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_15(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_17(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_18(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_19(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_20(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_21(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_22(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_23(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_24(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_25(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_26(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_27(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_28(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_29(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_30(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_31(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_32(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_33(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 119)
  def _reduce_34(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 120)
  def _reduce_35(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 121)
  def _reduce_36(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 122)
  def _reduce_37(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 123)
  def _reduce_38(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 124)
  def _reduce_39(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_40(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_41(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_42(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 128)
  def _reduce_43(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 136)
  def _reduce_44(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 137)
  def _reduce_45(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

module_eval(<<'.,.,', 'egrammar.ra', 170)
  def _reduce_68(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 171)
  def _reduce_69(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 179)
  def _reduce_70(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 183)
  def _reduce_71(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_72(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 192)
  def _reduce_73(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_74(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_75(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_76(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_77(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_78(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_79(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_80(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 224)
  def _reduce_81(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 229)
  def _reduce_82(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 230)
  def _reduce_83(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 234)
  def _reduce_84(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 235)
  def _reduce_85(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 245)
  def _reduce_86(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 252)
  def _reduce_87(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 256)
  def _reduce_88(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'egrammar.ra', 264)
  def _reduce_90(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 268)
  def _reduce_91(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 272)
  def _reduce_92(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 281)
  def _reduce_93(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 285)
  def _reduce_94(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'egrammar.ra', 295)
  def _reduce_96(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 299)
  def _reduce_97(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 307)
  def _reduce_98(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 313)
  def _reduce_99(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 314)
  def _reduce_100(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 319)
  def _reduce_101(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 323)
  def _reduce_102(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 327)
  def _reduce_103(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 104 omitted

module_eval(<<'.,.,', 'egrammar.ra', 338)
  def _reduce_105(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 343)
  def _reduce_106(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 344)
  def _reduce_107(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 349)
  def _reduce_108(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 361)
  def _reduce_109(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 364)
  def _reduce_110(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error val[1], "A resource default can not be virtual or exported"
      when :override
        error val[1], "A resource override can not be virtual or exported"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 379)
  def _reduce_111(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class, :defaults, :override
        error val[1], "Defaults are not virtualizable"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 387)
  def _reduce_112(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error val[1], "A resource default can not specify a resource name"
      when :override
        error val[1], "A resource override does not allow override of name of resource"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 400)
  def _reduce_113(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 421)
  def _reduce_114(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        result.form = val[0]
        loc result, val[1], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 426)
  def _reduce_115(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 431)
  def _reduce_116(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_117(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 436)
  def _reduce_118(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 437)
  def _reduce_119(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 442)
  def _reduce_120(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 443)
  def _reduce_121(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_122(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 456)
  def _reduce_123(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 460)
  def _reduce_124(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 465)
  def _reduce_125(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 466)
  def _reduce_126(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'egrammar.ra', 479)
  def _reduce_129(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 480)
  def _reduce_130(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 481)
  def _reduce_131(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'egrammar.ra', 497)
  def _reduce_135(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 501)
  def _reduce_136(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 511)
  def _reduce_137(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 525)
  def _reduce_138(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 535)
  def _reduce_139(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'egrammar.ra', 544)
  def _reduce_143(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'egrammar.ra', 561)
  def _reduce_146(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 565)
  def _reduce_147(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], nil))
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 575)
  def _reduce_148(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 576)
  def _reduce_149(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 581)
  def _reduce_150(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 582)
  def _reduce_151(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_152(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 153 omitted

module_eval(<<'.,.,', 'egrammar.ra', 587)
  def _reduce_154(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 588)
  def _reduce_155(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'egrammar.ra', 597)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 602)
  def _reduce_160(val, _values, result)
     result = Factory.QNAME(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 614)
  def _reduce_161(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_162(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 619)
  def _reduce_163(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_164(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_165(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 625)
  def _reduce_166(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_167(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 630)
  def _reduce_168(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 631)
  def _reduce_169(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_170(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_171(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_172(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_173(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_174(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_175(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_176(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_177(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_178(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_179(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_180(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_181(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 667)
  def _reduce_182(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_186(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_187(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_188(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_189(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_190(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_191(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_192(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_193(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 684)
  def _reduce_194(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_195(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_196(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_197(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_198(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 697)
  def _reduce_199(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 698)
  def _reduce_200(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_201(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 702)
  def _reduce_202(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 703)
  def _reduce_203(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 704)
  def _reduce_204(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 205 omitted

# reduce 206 omitted

module_eval(<<'.,.,', 'egrammar.ra', 710)
  def _reduce_207(val, _values, result)
     result = Factory.NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 711)
  def _reduce_208(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 712)
  def _reduce_209(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 713)
  def _reduce_210(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 714)
  def _reduce_211(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 719)
  def _reduce_212(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 722)
  def _reduce_213(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 214 omitted

module_eval(<<'.,.,', 'egrammar.ra', 728)
  def _reduce_215(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

module_eval(<<'.,.,', 'egrammar.ra', 751)
  def _reduce_232(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
