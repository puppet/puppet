#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 771)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'63,65,-134,282,57,245,59,-222,85,-132,-231,320,133,272,257,256,132,63',
'65,272,231,231,108,15,112,231,107,305,360,43,247,50,122,52,47,133,51',
'75,71,132,45,74,48,49,-134,283,72,14,111,-222,73,-132,-231,12,13,142',
'265,319,140,271,228,76,63,65,272,335,57,44,59,402,86,70,66,133,68,69',
'67,132,76,53,54,56,55,252,295,15,58,250,251,66,238,43,249,50,281,52',
'47,133,51,75,71,132,45,74,48,49,133,129,72,14,132,254,73,370,255,12',
'13,355,133,354,63,65,132,76,63,65,267,268,57,44,59,338,279,70,66,133',
'68,69,355,132,354,53,54,56,55,340,80,15,58,81,83,82,84,43,342,50,296',
'52,47,297,51,75,71,78,45,74,48,49,121,281,72,14,248,347,73,348,349,12',
'13,231,242,352,303,356,358,76,63,65,242,227,57,44,59,400,279,70,66,281',
'68,69,279,366,367,53,54,56,55,326,303,15,58,218,194,80,161,43,377,50',
'304,52,47,158,51,75,71,379,45,74,48,49,156,281,72,14,279,134,73,382',
'121,12,13,303,323,121,386,358,388,76,63,65,389,390,57,44,59,398,391',
'70,66,392,68,69,118,394,395,53,54,56,55,396,322,15,58,80,77,403,404',
'43,405,50,406,52,47,,51,75,71,,45,74,48,49,,,72,14,,,73,,,12,13,,,,',
',,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,',
'50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,',
'57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51',
'75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66',
',68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,',
',,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53',
'54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73',
',,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15',
'58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,',
'76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50',
',52,47,,51,75,71,,45,74,48,49,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,',
'57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51',
'75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66',
',68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,',
',,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53',
'54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73',
',,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15',
'58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,',
'76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50',
',52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57',
'44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,128,,51,75',
'71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,',
'68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,',
',72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54',
'56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12',
'13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,',
',,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63',
'65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,196,213,207',
'214,52,208,216,209,205,203,,198,211,,,,,72,14,217,212,210,63,65,12,13',
',,,63,65,,76,,,63,65,215,197,57,145,59,70,66,,68,69,,,,53,54,56,55,',
',,58,15,,142,,,140,43,,50,142,52,114,140,51,75,71,,45,74,,,85,,72,14',
'76,,73,63,65,12,13,76,,,108,66,112,76,107,,63,65,66,44,57,147,59,70',
'66,,68,69,,,,53,54,56,55,,111,,58,15,,142,,,140,43,,50,,52,114,,51,75',
'71,,45,74,86,,,,72,14,76,,73,,,12,13,,,,,66,,76,63,65,,,57,44,59,150',
',70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45',
'74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,',
',,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14',
',,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55',
',,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,',
',,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43',
',50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,',
',57,44,160,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114',
',51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,',
'70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45',
'74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,',
',,53,54,56,55,,,15,58,,,,,43,,50,,52,47,,51,75,71,,45,74,48,49,,,72',
'14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,150,,70,66,,68,69,,,,53,54',
'56,55,,,15,58,,,,,43,,50,,52,47,,51,75,71,,45,74,48,49,,,72,14,,,73',
',,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15',
'58,,,,,43,,50,,52,47,,51,75,71,,45,74,48,49,,,72,14,,,73,,,12,13,,,',
',,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43',
',50,,52,47,,51,75,71,,45,74,48,49,,,72,14,,,73,,,12,13,,,,,,,76,63,65',
',,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,47,',
'51,75,71,,45,74,48,49,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59',
',,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,47,,51,75,71,,45',
'74,48,49,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68',
'69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,47,,51,75,71,,45,74,48,49,',
',72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54',
'56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12',
'13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,',
',,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63',
'65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114',
',51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,',
'70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45',
'74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,',
',,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14',
',,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55',
',,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,',
',,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43',
',50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,',
',57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,',
'51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70',
'66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74',
',,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53',
'54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73',
',,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15',
'58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,',
'76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50',
',52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57',
'44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75',
'71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,',
'68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,',
',72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54',
'56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12',
'13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,',
',,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63',
'65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114',
',51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,',
'70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45',
'74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,',
',,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14',
',,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55',
',,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,',
',,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43',
',50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,',
',57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,',
'51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70',
'66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74',
',,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,376,193,70,66,,68,69',
',,,53,54,56,55,,,15,58,,,,,43,,50,,52,47,,51,75,71,,45,74,48,49,,,72',
'14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56',
'55,,,15,58,,,,,196,213,207,214,52,208,216,209,205,203,,198,211,,,85',
',72,14,217,212,210,,,12,13,,,,108,,112,76,107,,63,65,215,197,57,,59',
'70,66,,68,69,85,,,53,54,56,55,,111,,58,15,,,108,,112,43,107,50,,52,47',
',51,75,71,,45,74,48,49,,,72,14,,,73,,111,12,13,,,,,,,76,63,65,,,57,44',
'59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71',
',45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68',
'69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72',
'14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56',
'55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13',
',,,,,,76,63,65,,,57,44,59,309,,70,66,,68,69,,,,53,54,56,55,,,15,58,',
',,,43,,50,,52,47,,51,75,71,,45,74,48,49,,,72,14,,,73,,,12,13,,,,,,,76',
'63,65,,,57,44,59,307,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50',
',52,47,,51,75,71,,45,74,48,49,85,,72,14,,,73,,,12,13,,,,108,,112,76',
'107,,63,65,,44,57,328,59,70,66,,68,69,85,,,53,54,56,55,,111,,58,15,',
',108,,112,43,107,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,111,12',
'13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,',
',,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,',
',63,65,,44,57,,59,70,66,,68,69,,,,53,54,56,55,,,,58,15,225,,,,,43,,50',
',52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57',
'44,59,361,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51',
'75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,301,,70',
'66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,47,,51,75,71,,45,74',
'48,49,,,72,14,,,73,,,12,13,,,,,,,76,,,63,65,,44,57,,59,70,66,,68,69',
',,,53,54,56,55,,,,58,15,233,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,',
'72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54',
'56,55,,,15,58,,,,,43,,50,,52,47,,51,75,71,,45,74,48,49,,,72,14,,,73',
',,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15',
'58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,',
'76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50',
',52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57',
'44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75',
'71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,,,63,65,,44,57,329,59,70,66',
',68,69,,,,53,54,56,55,,,,58,15,,,,,,43,,50,,52,114,,51,75,71,,45,74',
',,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53',
'54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73',
',,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15',
'58,,,,,43,,50,,52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,',
'76,63,65,,,57,44,59,,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50',
',52,114,,51,75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57',
'44,59,331,,70,66,,68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51',
'75,71,,45,74,,,,,72,14,,,73,,,12,13,,,,,,,76,63,65,,,57,44,59,,,70,66',
',68,69,,,,53,54,56,55,,,15,58,,,,,43,,50,,52,114,,51,75,71,,45,74,,',
',,72,14,,,73,,,12,13,,,,,,,76,,,,,,44,,,,70,66,,68,69,,,85,53,54,56',
'55,,,,58,104,105,106,101,96,108,,112,,107,,,97,99,98,100,,,,,,,,,,,',
',,,,111,,,,103,102,,,89,90,92,91,94,95,,87,88,85,,237,,,86,,,,104,105',
'106,101,96,108,,112,,107,,,97,99,98,100,,,93,,,,,,,,,,,,,111,,,,103',
'102,,,89,90,92,91,94,95,85,87,88,,,,,,86,104,105,106,101,96,108,,112',
',107,,,97,99,98,100,,,,,,93,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94',
'95,85,87,88,,,253,,,86,104,105,106,101,96,108,,112,,107,,,97,99,98,100',
',,,,,93,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94,95,,87,88,85,,236,',
',86,,,,104,105,106,101,96,108,,112,,107,,,97,99,98,100,,,93,,,,,,,,',
',,,,111,,,,103,102,,,89,90,92,91,94,95,85,87,88,,,,,,86,104,105,106',
'101,96,108,,112,,107,,,97,99,98,100,,,,,,93,,,,,,,,,,111,,,,103,102',
',,89,90,92,91,94,95,,87,88,85,,235,,,86,,,,104,105,106,101,96,108,,112',
',107,,,97,99,98,100,,,93,,,,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94',
'95,,87,88,,85,,109,,86,253,,,,104,105,106,101,96,108,,112,,107,,,97',
'99,98,100,,93,,,,,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94,95,,87,88',
'85,,234,,,86,,,,104,105,106,101,96,108,,112,,107,,,97,99,98,100,,,93',
',,,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94,95,85,87,88,,,,,,86,104',
'105,106,101,96,108,,112,,107,,223,97,99,98,100,,,,,,93,,,,,,,,,,111',
',,,103,102,,,89,90,92,91,94,95,85,87,88,,,,,,86,104,105,106,101,96,108',
',112,,107,,,97,99,98,100,,,,,,93,,,,,,,,,,111,,,,103,102,,,89,90,92',
'91,94,95,85,87,88,,,,,,86,104,105,106,101,96,108,,112,,107,267,268,97',
'99,98,100,,,,,,93,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94,95,85,87',
'88,,,,,,86,104,105,106,101,96,108,,112,,107,,,97,99,98,100,,,,,,93,',
',,,,,,,,111,,,,103,102,,,89,90,92,91,94,95,85,87,88,,,,,,86,104,105',
'106,101,96,108,,112,,107,,,97,99,98,100,,,,,,93,,,,,,,,,,111,,,,103',
'102,,,89,90,92,91,94,95,85,87,88,,,,,,86,104,105,106,101,96,108,,112',
',107,,,97,99,98,100,,,,,,93,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94',
'95,85,87,88,,,,,,86,104,105,106,101,96,108,,112,,107,,,97,99,98,100',
',,,,,93,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94,95,85,87,88,,,,,,86',
'104,105,106,101,96,108,,112,85,107,,85,97,99,98,100,85,,,,,93,108,,112',
'108,107,112,,107,108,111,112,,107,103,102,,,89,90,92,91,94,95,,87,88',
'111,,,111,,86,,,111,,92,91,,92,91,87,88,,87,88,,,86,87,88,86,,93,,,86',
',,,,,,,,85,,,,,93,,,93,104,105,106,101,96,108,277,112,,107,,,97,99,98',
'100,,,,,,,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94,95,,87,88,85,,109',
',,86,,,,104,105,106,101,96,108,,112,,107,,,97,99,98,100,,,93,,,,,,,',
',,,,,111,,,,103,102,,,89,90,92,91,94,95,85,87,88,,,273,,,86,104,105',
'106,101,96,108,,112,85,107,,,97,99,98,100,,,,,,93,108,,112,,107,,,,',
'111,,,,103,102,,,89,90,92,91,94,95,,87,88,111,,,85,,86,,,89,90,92,91',
',,,87,88,108,,112,85,107,86,,,,,93,,,,,,,108,,112,,107,,,,,111,93,,',
',,,,89,90,92,91,,,,87,88,111,,,85,,86,,,89,90,92,91,94,95,,87,88,108',
',112,85,107,86,,,,,93,,,,,,96,108,,112,,107,,,97,,111,93,,,,,,,89,90',
'92,91,94,95,,87,88,111,,,,,86,,85,89,90,92,91,94,95,,87,88,,,,96,108',
'86,112,85,107,,93,97,,,,,,,,,96,108,,112,,107,,93,97,,111,,,,,,,,89',
'90,92,91,94,95,,87,88,111,,,,,86,,,89,90,92,91,94,95,,87,88,,,85,,,86',
',,,,93,104,105,106,101,96,108,,112,,107,,,97,99,98,100,93,,,,,,,,,,',
',,,,111,,,,103,102,,85,89,90,92,91,94,95,,87,88,,,101,96,108,86,112',
',107,,85,97,99,98,100,,,,,,,,101,96,108,,112,93,107,,111,97,99,98,100',
',,,89,90,92,91,94,95,,87,88,,,,111,,86,,,102,,,89,90,92,91,94,95,,87',
'88,85,,,,,86,,93,,104,105,106,101,96,108,,112,,107,,,97,99,98,100,,',
'93,,,,,,,,,,,,,111,,,,103,102,,,89,90,92,91,94,95,85,87,88,,,,,,86,104',
'105,106,101,96,108,,112,,107,,85,97,99,98,100,,,,,,93,,,96,108,,112',
',107,,111,97,,85,103,102,,,89,90,92,91,94,95,,87,88,108,,112,111,107',
'86,85,,,,,89,90,92,91,94,95,,87,88,108,,112,,107,86,111,93,,,,,,,,,',
',,,,87,88,,,,111,93,86,,,,,,,,,,,,,87,88,,291,213,290,214,86,288,216',
'292,286,285,,287,289,,,,,,,217,212,293,291,213,290,214,,288,216,292',
'286,285,,287,289,,,215,294,,,217,212,293,291,213,290,214,,288,216,292',
'286,285,,287,289,,,215,294,,,217,212,293,,,,,,,,,,,,,,,,215,294' ]
        racc_action_table = arr = ::Array.new(6905, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,205,206,0,136,0,211,171,203,210,242,208,232,154,154,208,245,245',
'310,242,158,171,0,171,121,171,232,310,0,136,0,42,0,0,207,0,0,0,207,0',
'0,0,0,205,206,0,0,171,211,0,203,210,0,0,245,158,240,245,168,121,0,389',
'389,168,270,389,0,389,389,171,0,0,50,0,0,0,50,245,0,0,0,0,146,220,389',
'0,144,146,245,128,389,144,389,200,389,389,114,389,389,389,114,389,389',
'389,389,319,47,389,389,319,149,389,319,149,389,389,307,128,307,156,156',
'128,389,5,5,335,335,5,389,5,274,199,389,389,47,389,389,352,47,352,389',
'389,389,389,278,162,5,389,8,8,8,8,5,280,5,222,5,5,224,5,5,5,5,5,5,5',
'5,225,284,5,5,138,298,5,300,302,5,5,303,135,306,229,308,309,5,388,388',
'130,120,388,5,388,388,313,5,5,314,5,5,315,316,317,5,5,5,5,248,321,388',
'5,110,108,79,77,388,334,388,231,388,388,67,388,388,388,337,388,388,388',
'388,66,339,388,388,239,48,388,346,347,388,388,264,244,41,355,356,358',
'388,386,386,359,363,386,388,386,386,364,388,388,365,388,388,40,371,372',
'388,388,388,388,375,243,386,388,6,1,393,397,386,399,386,401,386,386',
',386,386,386,,386,386,386,386,,,386,386,,,386,,,386,386,,,,,,,386,193',
'193,,,193,386,193,,,386,386,,386,386,,,,386,386,386,386,,,193,386,,',
',,193,,193,,193,193,,193,193,193,,193,193,,,,,193,193,,,193,,,193,193',
',,,,,,193,12,12,,,12,193,12,,,193,193,,193,193,,,,193,193,193,193,,',
'12,193,,,,,12,,12,,12,12,,12,12,12,,12,12,,,,,12,12,,,12,,,12,12,,,',
',,,12,13,13,,,13,12,13,,,12,12,,12,12,,,,12,12,12,12,,,13,12,,,,,13',
',13,,13,13,,13,13,13,,13,13,,,,,13,13,,,13,,,13,13,,,,,,,13,14,14,,',
'14,13,14,,,13,13,,13,13,,,,13,13,13,13,,,14,13,,,,,14,,14,,14,14,,14',
'14,14,,14,14,,,,,14,14,,,14,,,14,14,,,,,,,14,15,15,,,15,14,15,,,14,14',
',14,14,,,,14,14,14,14,,,15,14,,,,,15,,15,,15,15,,15,15,15,,15,15,,,',
',15,15,,,15,,,15,15,,,,,,,15,367,367,,,367,15,367,,,15,15,,15,15,,,',
'15,15,15,15,,,367,15,,,,,367,,367,,367,367,,367,367,367,,367,367,367',
'367,,,367,367,,,367,,,367,367,,,,,,,367,354,354,,,354,367,354,,,367',
'367,,367,367,,,,367,367,367,367,,,354,367,,,,,354,,354,,354,354,,354',
'354,354,,354,354,,,,,354,354,,,354,,,354,354,,,,,,,354,196,196,,,196',
'354,196,,,354,354,,354,354,,,,354,354,354,354,,,196,354,,,,,196,,196',
',196,196,,196,196,196,,196,196,,,,,196,196,,,196,,,196,196,,,,,,,196',
'43,43,,,43,196,43,,,196,196,,196,196,,,,196,196,196,196,,,43,196,,,',
',43,,43,,43,43,,43,43,43,,43,43,,,,,43,43,,,43,,,43,43,,,,,,,43,44,44',
',,44,43,44,,,43,43,,43,43,,,,43,43,43,43,,,44,43,,,,,44,,44,,44,44,',
'44,44,44,,44,44,,,,,44,44,,,44,,,44,44,,,,,,,44,45,45,,,45,44,45,,,44',
'44,,44,44,,,,44,44,44,44,,,45,44,,,,,45,,45,,45,45,,45,45,45,,45,45',
',,,,45,45,,,45,,,45,45,,,,,,,45,46,46,,,46,45,46,,,45,45,,45,45,,,,45',
'45,45,45,,,46,45,,,,,46,,46,,46,46,,46,46,46,,46,46,,,,,46,46,,,46,',
',46,46,,,,,,,46,238,238,,,238,46,238,,,46,46,,46,46,,,,46,46,46,46,',
',238,46,,,,,238,,238,,238,238,,238,238,238,,238,238,,,,,238,238,,,238',
',,238,238,,,,,,,238,197,197,,,197,238,197,,,238,238,,238,238,,,,238',
'238,238,238,,,197,238,,,,,197,,197,,197,197,,197,197,197,,197,197,,',
',,197,197,,,197,,,197,197,,,,,,,197,198,198,,,198,197,198,,,197,197',
',197,197,,,,197,197,197,197,,,198,197,,,,,198,,198,,198,198,,198,198',
'198,,198,198,,,,,198,198,,,198,,,198,198,,,,,,,198,237,237,,,237,198',
'237,,,198,198,,198,198,,,,198,198,198,198,,,237,198,,,,,237,237,237',
'237,237,237,237,237,237,237,,237,237,,,,,237,237,237,237,237,247,247',
'237,237,,,,51,51,,237,,,57,57,237,237,57,57,57,237,237,,237,237,,,,237',
'237,237,237,,,,237,57,,247,,,247,57,,57,51,57,57,51,57,57,57,,57,57',
',,170,,57,57,247,,57,209,209,57,57,51,,,170,247,170,57,170,,58,58,51',
'57,58,58,58,57,57,,57,57,,,,57,57,57,57,,170,,57,58,,209,,,209,58,,58',
',58,58,,58,58,58,,58,58,170,,,,58,58,209,,58,,,58,58,,,,,209,,58,59',
'59,,,59,58,59,59,,58,58,,58,58,,,,58,58,58,58,,,59,58,,,,,59,,59,,59',
'59,,59,59,59,,59,59,,,,,59,59,,,59,,,59,59,,,,,,,59,64,64,,,64,59,64',
',,59,59,,59,59,,,,59,59,59,59,,,64,59,,,,,64,,64,,64,64,,64,64,64,,64',
'64,,,,,64,64,,,64,,,64,64,,,,,,,64,338,338,,,338,64,338,,,64,64,,64',
'64,,,,64,64,64,64,,,338,64,,,,,338,,338,,338,338,,338,338,338,,338,338',
',,,,338,338,,,338,,,338,338,,,,,,,338,273,273,,,273,338,273,,,338,338',
',338,338,,,,338,338,338,338,,,273,338,,,,,273,,273,,273,273,,273,273',
'273,,273,273,,,,,273,273,,,273,,,273,273,,,,,,,273,69,69,,,69,273,69',
',,273,273,,273,273,,,,273,273,273,273,,,69,273,,,,,69,,69,,69,69,,69',
'69,69,,69,69,,,,,69,69,,,69,,,69,69,,,,,,,69,279,279,,,279,69,279,,',
'69,69,,69,69,,,,69,69,69,69,,,279,69,,,,,279,,279,,279,279,,279,279',
'279,,279,279,,,,,279,279,,,279,,,279,279,,,,,,,279,78,78,,,78,279,78',
',,279,279,,279,279,,,,279,279,279,279,,,78,279,,,,,78,,78,,78,78,,78',
'78,78,,78,78,78,78,,,78,78,,,78,,,78,78,,,,,,,78,160,160,,,160,78,160',
'160,,78,78,,78,78,,,,78,78,78,78,,,160,78,,,,,160,,160,,160,160,,160',
'160,160,,160,160,160,160,,,160,160,,,160,,,160,160,,,,,,,160,80,80,',
',80,160,80,,,160,160,,160,160,,,,160,160,160,160,,,80,160,,,,,80,,80',
',80,80,,80,80,80,,80,80,80,80,,,80,80,,,80,,,80,80,,,,,,,80,81,81,,',
'81,80,81,,,80,80,,80,80,,,,80,80,80,80,,,81,80,,,,,81,,81,,81,81,,81',
'81,81,,81,81,81,81,,,81,81,,,81,,,81,81,,,,,,,81,82,82,,,82,81,82,,',
'81,81,,81,81,,,,81,81,81,81,,,82,81,,,,,82,,82,,82,82,,82,82,82,,82',
'82,82,82,,,82,82,,,82,,,82,82,,,,,,,82,83,83,,,83,82,83,,,82,82,,82',
'82,,,,82,82,82,82,,,83,82,,,,,83,,83,,83,83,,83,83,83,,83,83,83,83,',
',83,83,,,83,,,83,83,,,,,,,83,84,84,,,84,83,84,,,83,83,,83,83,,,,83,83',
'83,83,,,84,83,,,,,84,,84,,84,84,,84,84,84,,84,84,84,84,,,84,84,,,84',
',,84,84,,,,,,,84,85,85,,,85,84,85,,,84,84,,84,84,,,,84,84,84,84,,,85',
'84,,,,,85,,85,,85,85,,85,85,85,,85,85,,,,,85,85,,,85,,,85,85,,,,,,,85',
'86,86,,,86,85,86,,,85,85,,85,85,,,,85,85,85,85,,,86,85,,,,,86,,86,,86',
'86,,86,86,86,,86,86,,,,,86,86,,,86,,,86,86,,,,,,,86,87,87,,,87,86,87',
',,86,86,,86,86,,,,86,86,86,86,,,87,86,,,,,87,,87,,87,87,,87,87,87,,87',
'87,,,,,87,87,,,87,,,87,87,,,,,,,87,88,88,,,88,87,88,,,87,87,,87,87,',
',,87,87,87,87,,,88,87,,,,,88,,88,,88,88,,88,88,88,,88,88,,,,,88,88,',
',88,,,88,88,,,,,,,88,89,89,,,89,88,89,,,88,88,,88,88,,,,88,88,88,88',
',,89,88,,,,,89,,89,,89,89,,89,89,89,,89,89,,,,,89,89,,,89,,,89,89,,',
',,,,89,90,90,,,90,89,90,,,89,89,,89,89,,,,89,89,89,89,,,90,89,,,,,90',
',90,,90,90,,90,90,90,,90,90,,,,,90,90,,,90,,,90,90,,,,,,,90,91,91,,',
'91,90,91,,,90,90,,90,90,,,,90,90,90,90,,,91,90,,,,,91,,91,,91,91,,91',
'91,91,,91,91,,,,,91,91,,,91,,,91,91,,,,,,,91,92,92,,,92,91,92,,,91,91',
',91,91,,,,91,91,91,91,,,92,91,,,,,92,,92,,92,92,,92,92,92,,92,92,,,',
',92,92,,,92,,,92,92,,,,,,,92,93,93,,,93,92,93,,,92,92,,92,92,,,,92,92',
'92,92,,,93,92,,,,,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93,,,93,,,93',
'93,,,,,,,93,94,94,,,94,93,94,,,93,93,,93,93,,,,93,93,93,93,,,94,93,',
',,,94,,94,,94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,94,,,,,,,94,95',
'95,,,95,94,95,,,94,94,,94,94,,,,94,94,94,94,,,95,94,,,,,95,,95,,95,95',
',95,95,95,,95,95,,,,,95,95,,,95,,,95,95,,,,,,,95,96,96,,,96,95,96,,',
'95,95,,95,95,,,,95,95,95,95,,,96,95,,,,,96,,96,,96,96,,96,96,96,,96',
'96,,,,,96,96,,,96,,,96,96,,,,,,,96,97,97,,,97,96,97,,,96,96,,96,96,',
',,96,96,96,96,,,97,96,,,,,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97,',
',97,,,97,97,,,,,,,97,98,98,,,98,97,98,,,97,97,,97,97,,,,97,97,97,97',
',,98,97,,,,,98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,98,,',
',,,,98,99,99,,,99,98,99,,,98,98,,98,98,,,,98,98,98,98,,,99,98,,,,,99',
',99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,,,,99,100,100',
',,100,99,100,,,99,99,,99,99,,,,99,99,99,99,,,100,99,,,,,100,,100,,100',
'100,,100,100,100,,100,100,,,,,100,100,,,100,,,100,100,,,,,,,100,101',
'101,,,101,100,101,,,100,100,,100,100,,,,100,100,100,100,,,101,100,,',
',,101,,101,,101,101,,101,101,101,,101,101,,,,,101,101,,,101,,,101,101',
',,,,,,101,102,102,,,102,101,102,,,101,101,,101,101,,,,101,101,101,101',
',,102,101,,,,,102,,102,,102,102,,102,102,102,,102,102,,,,,102,102,,',
'102,,,102,102,,,,,,,102,103,103,,,103,102,103,,,102,102,,102,102,,,',
'102,102,102,102,,,103,102,,,,,103,,103,,103,103,,103,103,103,,103,103',
',,,,103,103,,,103,,,103,103,,,,,,,103,104,104,,,104,103,104,,,103,103',
',103,103,,,,103,103,103,103,,,104,103,,,,,104,,104,,104,104,,104,104',
'104,,104,104,,,,,104,104,,,104,,,104,104,,,,,,,104,105,105,,,105,104',
'105,,,104,104,,104,104,,,,104,104,104,104,,,105,104,,,,,105,,105,,105',
'105,,105,105,105,,105,105,,,,,105,105,,,105,,,105,105,,,,,,,105,106',
'106,,,106,105,106,,,105,105,,105,105,,,,105,105,105,105,,,106,105,,',
',,106,,106,,106,106,,106,106,106,,106,106,,,,,106,106,,,106,,,106,106',
',,,,,,106,107,107,,,107,106,107,,,106,106,,106,106,,,,106,106,106,106',
',,107,106,,,,,107,,107,,107,107,,107,107,107,,107,107,,,,,107,107,,',
'107,,,107,107,,,,,,,107,323,323,,,323,107,323,323,107,107,107,,107,107',
',,,107,107,107,107,,,323,107,,,,,323,,323,,323,323,,323,323,323,,323',
'323,323,323,,,323,323,,,323,,,323,323,,,,,,,323,109,109,,,109,323,109',
',,323,323,,323,323,,,,323,323,323,323,,,109,323,,,,,109,109,109,109',
'109,109,109,109,109,109,,109,109,,,116,,109,109,109,109,109,,,109,109',
',,,116,,116,109,116,,322,322,109,109,322,,322,109,109,,109,109,169,',
',109,109,109,109,,116,,109,322,,,169,,169,322,169,322,,322,322,,322',
'322,322,,322,322,322,322,,,322,322,,,322,,169,322,322,,,,,,,322,111',
'111,,,111,322,111,,,322,322,,322,322,,,,322,322,322,322,,,111,322,,',
',,111,,111,,111,111,,111,111,111,,111,111,,,,,111,111,,,111,,,111,111',
',,,,,,111,112,112,,,112,111,112,,,111,111,,111,111,,,,111,111,111,111',
',,112,111,,,,,112,,112,,112,112,,112,112,112,,112,112,,,,,112,112,,',
'112,,,112,112,,,,,,,112,236,236,,,236,112,236,,,112,112,,112,112,,,',
'112,112,112,112,,,236,112,,,,,236,,236,,236,236,,236,236,236,,236,236',
',,,,236,236,,,236,,,236,236,,,,,,,236,235,235,,,235,236,235,235,,236',
'236,,236,236,,,,236,236,236,236,,,235,236,,,,,235,,235,,235,235,,235',
'235,235,,235,235,235,235,,,235,235,,,235,,,235,235,,,,,,,235,234,234',
',,234,235,234,234,,235,235,,235,235,,,,235,235,235,235,,,234,235,,,',
',234,,234,,234,234,,234,234,234,,234,234,234,234,113,,234,234,,,234',
',,234,234,,,,113,,113,234,113,,249,249,,234,249,249,249,234,234,,234',
'234,115,,,234,234,234,234,,113,,234,249,,,115,,115,249,115,249,,249',
'249,,249,249,249,,249,249,,,,,249,249,,,249,,115,249,249,,,,,,,249,272',
'272,,,272,249,272,,,249,249,,249,249,,,,249,249,249,249,,,272,249,,',
',,272,,272,,272,272,,272,272,272,,272,272,,,,,272,272,,,272,,,272,272',
',,,,,,272,,,118,118,,272,118,,118,272,272,,272,272,,,,272,272,272,272',
',,,272,118,118,,,,,118,,118,,118,118,,118,118,118,,118,118,,,,,118,118',
',,118,,,118,118,,,,,,,118,311,311,,,311,118,311,311,,118,118,,118,118',
',,,118,118,118,118,,,311,118,,,,,311,,311,,311,311,,311,311,311,,311',
'311,,,,,311,311,,,311,,,311,311,,,,,,,311,227,227,,,227,311,227,227',
',311,311,,311,311,,,,311,311,311,311,,,227,311,,,,,227,,227,,227,227',
',227,227,227,,227,227,227,227,,,227,227,,,227,,,227,227,,,,,,,227,,',
'122,122,,227,122,,122,227,227,,227,227,,,,227,227,227,227,,,,227,122',
'122,,,,,122,,122,,122,122,,122,122,122,,122,122,,,,,122,122,,,122,,',
'122,122,,,,,,,122,157,157,,,157,122,157,,,122,122,,122,122,,,,122,122',
'122,122,,,157,122,,,,,157,,157,,157,157,,157,157,157,,157,157,157,157',
',,157,157,,,157,,,157,157,,,,,,,157,282,282,,,282,157,282,,,157,157',
',157,157,,,,157,157,157,157,,,282,157,,,,,282,,282,,282,282,,282,282',
'282,,282,282,,,,,282,282,,,282,,,282,282,,,,,,,282,297,297,,,297,282',
'297,,,282,282,,282,282,,,,282,282,282,282,,,297,282,,,,,297,,297,,297',
'297,,297,297,297,,297,297,,,,,297,297,,,297,,,297,297,,,,,,,297,260',
'260,,,260,297,260,,,297,297,,297,297,,,,297,297,297,297,,,260,297,,',
',,260,,260,,260,260,,260,260,260,,260,260,,,,,260,260,,,260,,,260,260',
',,,,,,260,,,251,251,,260,251,251,251,260,260,,260,260,,,,260,260,260',
'260,,,,260,251,,,,,,251,,251,,251,251,,251,251,251,,251,251,,,,,251',
'251,,,251,,,251,251,,,,,,,251,129,129,,,129,251,129,,,251,251,,251,251',
',,,251,251,251,251,,,129,251,,,,,129,,129,,129,129,,129,129,129,,129',
'129,,,,,129,129,,,129,,,129,129,,,,,,,129,253,253,,,253,129,253,,,129',
'129,,129,129,,,,129,129,129,129,,,253,129,,,,,253,,253,,253,253,,253',
'253,253,,253,253,,,,,253,253,,,253,,,253,253,,,,,,,253,304,304,,,304',
'253,304,,,253,253,,253,253,,,,253,253,253,253,,,304,253,,,,,304,,304',
',304,304,,304,304,304,,304,304,,,,,304,304,,,304,,,304,304,,,,,,,304',
'255,255,,,255,304,255,255,,304,304,,304,304,,,,304,304,304,304,,,255',
'304,,,,,255,,255,,255,255,,255,255,255,,255,255,,,,,255,255,,,255,,',
'255,255,,,,,,,255,283,283,,,283,255,283,,,255,255,,255,255,,,,255,255',
'255,255,,,283,255,,,,,283,,283,,283,283,,283,283,283,,283,283,,,,,283',
'283,,,283,,,283,283,,,,,,,283,,,,,,283,,,,283,283,,283,283,,,143,283',
'283,283,283,,,,283,143,143,143,143,143,143,,143,,143,,,143,143,143,143',
',,,,,,,,,,,,,,,143,,,,143,143,,,143,143,143,143,143,143,,143,143,127',
',127,,,143,,,,127,127,127,127,127,127,,127,,127,,,127,127,127,127,,',
'143,,,,,,,,,,,,,127,,,,127,127,,,127,127,127,127,127,127,219,127,127',
',,,,,127,219,219,219,219,219,219,,219,,219,,,219,219,219,219,,,,,,127',
',,,,,,,,,219,,,,219,219,,,219,219,219,219,219,219,148,219,219,,,148',
',,219,148,148,148,148,148,148,,148,,148,,,148,148,148,148,,,,,,219,',
',,,,,,,,148,,,,148,148,,,148,148,148,148,148,148,,148,148,126,,126,',
',148,,,,126,126,126,126,126,126,,126,,126,,,126,126,126,126,,,148,,',
',,,,,,,,,,126,,,,126,126,,,126,126,126,126,126,126,152,126,126,,,,,',
'126,152,152,152,152,152,152,,152,,152,,,152,152,152,152,,,,,,126,,,',
',,,,,,152,,,,152,152,,,152,152,152,152,152,152,,152,152,125,,125,,,152',
',,,125,125,125,125,125,125,,125,,125,,,125,125,125,125,,,152,,,,,,,',
',,,,,125,,,,125,125,,,125,125,125,125,125,125,,125,125,,269,,269,,125',
'269,,,,269,269,269,269,269,269,,269,,269,,,269,269,269,269,,125,,,,',
',,,,,,,,,269,,,,269,269,,,269,269,269,269,269,269,,269,269,123,,123',
',,269,,,,123,123,123,123,123,123,,123,,123,,,123,123,123,123,,,269,',
',,,,,,,,,,,123,,,,123,123,,,123,123,123,123,123,123,117,123,123,,,,',
',123,117,117,117,117,117,117,,117,,117,,117,117,117,117,117,,,,,,123',
',,,,,,,,,117,,,,117,117,,,117,117,117,117,117,117,159,117,117,,,,,,117',
'159,159,159,159,159,159,,159,,159,,,159,159,159,159,,,,,,117,,,,,,,',
',,159,,,,159,159,,,159,159,159,159,159,159,327,159,159,,,,,,159,327',
'327,327,327,327,327,,327,,327,159,159,327,327,327,327,,,,,,159,,,,,',
',,,,327,,,,327,327,,,327,327,327,327,327,327,330,327,327,,,,,,327,330',
'330,330,330,330,330,,330,,330,,,330,330,330,330,,,,,,327,,,,,,,,,,330',
',,,330,330,,,330,330,330,330,330,330,336,330,330,,,,,,330,336,336,336',
'336,336,336,,336,,336,,,336,336,336,336,,,,,,330,,,,,,,,,,336,,,,336',
'336,,,336,336,336,336,336,336,344,336,336,,,,,,336,344,344,344,344,344',
'344,,344,,344,,,344,344,344,344,,,,,,336,,,,,,,,,,344,,,,344,344,,,344',
'344,344,344,344,344,345,344,344,,,,,,344,345,345,345,345,345,345,,345',
',345,,,345,345,345,345,,,,,,344,,,,,,,,,,345,,,,345,345,,,345,345,345',
'345,345,345,351,345,345,,,,,,345,351,351,351,351,351,351,,351,172,351',
',173,351,351,351,351,174,,,,,345,172,,172,173,172,173,,173,174,351,174',
',174,351,351,,,351,351,351,351,351,351,,351,351,172,,,173,,351,,,174',
',172,172,,173,173,172,172,,173,173,,,172,174,174,173,,351,,,174,,,,',
',,,,195,,,,,172,,,173,195,195,195,195,195,195,195,195,,195,,,195,195',
'195,195,,,,,,,,,,,,,,,,195,,,,195,195,,,195,195,195,195,195,195,,195',
'195,11,,11,,,195,,,,11,11,11,11,11,11,,11,,11,,,11,11,11,11,,,195,,',
',,,,,,,,,,11,,,,11,11,,,11,11,11,11,11,11,190,11,11,,,190,,,11,190,190',
'190,190,190,190,,190,177,190,,,190,190,190,190,,,,,,11,177,,177,,177',
',,,,190,,,,190,190,,,190,190,190,190,190,190,,190,190,177,,,178,,190',
',,177,177,177,177,,,,177,177,178,,178,179,178,177,,,,,190,,,,,,,179',
',179,,179,,,,,178,177,,,,,,,178,178,178,178,,,,178,178,179,,,180,,178',
',,179,179,179,179,179,179,,179,179,180,,180,181,180,179,,,,,178,,,,',
',181,181,,181,,181,,,181,,180,179,,,,,,,180,180,180,180,180,180,,180',
'180,181,,,,,180,,182,181,181,181,181,181,181,,181,181,,,,182,182,181',
'182,183,182,,180,182,,,,,,,,,183,183,,183,,183,,181,183,,182,,,,,,,',
'182,182,182,182,182,182,,182,182,183,,,,,182,,,183,183,183,183,183,183',
',183,183,,,189,,,183,,,,,182,189,189,189,189,189,189,,189,,189,,,189',
'189,189,189,183,,,,,,,,,,,,,,,189,,,,189,189,,185,189,189,189,189,189',
'189,,189,189,,,185,185,185,189,185,,185,,186,185,185,185,185,,,,,,,',
'186,186,186,,186,189,186,,185,186,186,186,186,,,,185,185,185,185,185',
'185,,185,185,,,,186,,185,,,186,,,186,186,186,186,186,186,,186,186,187',
',,,,186,,185,,187,187,187,187,187,187,,187,,187,,,187,187,187,187,,',
'186,,,,,,,,,,,,,187,,,,187,187,,,187,187,187,187,187,187,188,187,187',
',,,,,187,188,188,188,188,188,188,,188,,188,,184,188,188,188,188,,,,',
',187,,,184,184,,184,,184,,188,184,,175,188,188,,,188,188,188,188,188',
'188,,188,188,175,,175,184,175,188,176,,,,,184,184,184,184,184,184,,184',
'184,176,,176,,176,184,175,188,,,,,,,,,,,,,,175,175,,,,176,184,175,,',
',,,,,,,,,,176,176,,276,276,276,276,176,276,276,276,276,276,,276,276',
',,,,,,276,276,276,281,281,281,281,,281,281,281,281,281,,281,281,,,276',
'276,,,281,281,281,218,218,218,218,,218,218,218,218,218,,218,218,,,281',
'281,,,218,218,218,,,,,,,,,,,,,,,,218,218' ]
        racc_action_check = arr = ::Array.new(6905, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   274,   nil,   nil,   nil,   122,   261,   nil,    85,   nil,
   nil,  6203,   370,   432,   494,   556,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   237,   173,     7,   804,   866,   928,   990,    99,   191,   nil,
    37,  1296,   nil,   nil,   nil,   nil,   nil,  1302,  1366,  1428,
   nil,   nil,   nil,   nil,  1490,   nil,   155,   151,   nil,  1676,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   214,  1800,   201,
  1924,  1986,  2048,  2110,  2172,  2234,  2296,  2358,  2420,  2482,
  2544,  2606,  2668,  2730,  2792,  2854,  2916,  2978,  3040,  3102,
  3164,  3226,  3288,  3350,  3412,  3474,  3536,  3598,   172,  3722,
   203,  3848,  3910,  4136,    61,  4168,  3762,  5672,  4286,   nil,
   181,   -10,  4474,  5618,   nil,  5503,  5392,  5227,    82,  4848,
   163,   nil,   nil,   nil,   nil,   155,    -7,   nil,   152,   nil,
   nil,   nil,   nil,  5170,    80,   nil,    76,   nil,  5335,   102,
   nil,   nil,  5446,   nil,    10,   nil,   118,  4536,   -14,  5726,
  1862,   nil,   134,   nil,   nil,   nil,   nil,   nil,    52,  3794,
  1342,     2,  6067,  6070,  6075,  6738,  6758,  6274,  6317,  6334,
  6377,  6394,  6441,  6458,  6715,  6564,  6584,  6641,  6695,  6517,
  6257,   nil,   nil,   308,   nil,  6146,   742,  1114,  1176,    91,
    82,   nil,   nil,    -2,   nil,    -9,    -8,    -1,   -24,  1353,
    -1,    -4,   nil,   nil,   nil,   nil,   nil,   nil,  6835,  5281,
    37,   nil,   133,   nil,   147,    98,   nil,  4410,   nil,   170,
   nil,   203,     1,   nil,  4096,  4034,  3972,  1238,  1052,   193,
    20,   nil,   -15,   262,   234,    15,   nil,  1289,   167,  4160,
   nil,  4786,   nil,  4910,   nil,  5034,   nil,   nil,   nil,   nil,
  4722,   nil,   nil,   nil,   229,   nil,   nil,   nil,   nil,  5561,
    56,   nil,  4222,  1614,   119,   nil,  6791,   nil,   136,  1738,
   145,  6813,  4598,  5096,   157,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  4660,   147,   nil,
   166,   nil,   106,   144,  4972,   nil,   172,    85,   174,   152,
     7,  4348,   nil,   153,   185,   159,   192,   194,   nil,    70,
   nil,   196,  3786,  3660,   nil,   nil,   nil,  5780,   nil,   nil,
  5834,   nil,   nil,   nil,   146,    47,  5888,   216,  1552,   219,
   nil,   nil,   nil,   nil,  5942,  5996,   228,   168,   nil,   nil,
   nil,  6050,   106,   nil,   680,   236,   213,   nil,   238,   242,
   nil,   nil,   nil,   242,   247,   250,   nil,   618,   nil,   nil,
   nil,   237,   255,   nil,   nil,   260,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   246,   nil,   184,    60,
   nil,   nil,   nil,   266,   nil,   nil,   nil,   267,   nil,   269,
   nil,   271,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -233,  -234,    -1,    -2,    -3,    -4,    -5,    -8,   -10,   -11,
   -16,  -109,  -234,  -234,  -234,  -234,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,
   -60,   -61,   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,
   -74,   -75,   -79,  -234,  -234,  -234,  -234,  -234,  -120,  -122,
  -234,  -234,  -167,  -168,  -169,  -170,  -171,  -234,  -234,  -234,
  -184,  -185,  -186,  -187,  -234,  -189,  -234,  -200,  -203,  -234,
  -208,  -209,  -210,  -211,  -212,  -213,  -214,  -234,  -234,    -7,
  -234,  -234,  -234,  -234,  -234,  -234,  -234,  -234,  -234,  -234,
  -234,  -234,  -234,  -234,  -234,  -234,  -234,  -234,  -234,  -234,
  -234,  -234,  -234,  -234,  -234,  -234,  -234,  -234,  -234,  -129,
  -124,  -233,  -233,   -28,  -234,   -29,   -36,  -234,  -234,   -76,
  -234,  -234,  -234,  -234,   -86,  -234,  -234,  -234,  -234,  -234,
  -233,  -139,  -158,  -159,  -121,  -233,  -233,  -148,  -150,  -151,
  -152,  -153,  -154,   -44,  -234,  -174,  -234,  -177,  -234,  -234,
  -180,  -181,  -193,  -188,  -234,  -196,  -234,  -234,  -234,  -234,
  -234,   407,    -6,    -9,   -12,   -13,   -14,   -15,  -234,   -18,
   -19,   -20,   -21,   -22,   -23,   -24,   -25,   -26,   -27,   -30,
   -31,   -32,   -33,   -34,   -35,   -37,   -38,   -39,   -40,   -41,
  -234,   -42,  -104,  -234,   -80,  -234,  -226,  -232,  -220,  -217,
  -215,  -118,  -130,  -209,  -133,  -213,  -234,  -223,  -221,  -229,
  -211,  -212,  -219,  -224,  -225,  -227,  -228,  -230,  -129,  -128,
  -234,  -127,  -234,   -43,  -215,   -71,   -81,  -234,   -84,  -215,
  -163,  -166,  -234,   -78,  -234,  -234,  -234,  -129,  -234,  -217,
  -233,  -160,  -234,  -234,  -234,  -234,  -156,  -234,  -234,  -234,
  -172,  -234,  -175,  -234,  -178,  -234,  -190,  -191,  -192,  -194,
  -234,  -197,  -198,  -199,  -215,  -201,  -204,  -206,  -207,  -109,
  -234,   -17,  -234,  -234,  -215,  -106,  -129,  -117,  -234,  -218,
  -234,  -216,  -234,  -234,  -215,  -132,  -134,  -220,  -221,  -222,
  -223,  -226,  -229,  -231,  -232,  -125,  -126,  -216,  -234,   -73,
  -234,   -83,  -234,  -216,  -234,   -77,  -234,   -89,  -234,   -95,
  -234,  -234,   -99,  -217,  -215,  -217,  -234,  -234,  -142,  -234,
  -161,  -215,  -233,  -234,  -149,  -157,  -155,   -45,  -173,  -176,
  -183,  -179,  -182,  -195,  -234,  -234,  -108,  -234,  -216,  -215,
  -112,  -119,  -113,  -131,  -135,  -136,  -234,   -70,   -82,   -85,
  -164,  -165,   -89,   -88,  -234,  -234,   -95,   -94,  -234,  -234,
  -103,   -98,  -100,  -234,  -234,  -234,  -115,  -233,  -143,  -144,
  -145,  -234,  -234,  -140,  -141,  -234,  -147,  -202,  -205,  -105,
  -107,  -116,  -123,   -72,   -87,   -90,  -234,   -93,  -234,  -234,
  -110,  -111,  -114,  -234,  -162,  -137,  -146,  -234,   -92,  -234,
   -97,  -234,  -102,  -138,   -91,   -96,  -101 ]

racc_goto_table = [
     2,   135,     4,   119,   113,   115,   116,   117,   141,   153,
   266,   200,   139,   199,   278,   229,   357,   372,   240,   192,
   353,   191,   324,   243,   325,   312,   220,   222,   163,    79,
   341,   276,   359,   239,   343,   123,   125,   126,   127,   274,
   311,   385,   280,   317,   368,   244,   144,   146,   226,   143,
   143,   148,   264,   350,   316,   332,   152,   164,   165,   166,
   167,   159,   393,   387,   261,   384,   298,   262,     3,   259,
   260,   302,   258,   155,   168,   157,     1,   143,   169,   170,
   171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
   181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
   362,   195,   162,   219,   219,   275,   334,   224,   nil,   nil,
   143,   232,   nil,   nil,   143,   nil,   337,   nil,   nil,   nil,
   284,   195,   nil,   nil,   nil,   nil,   346,   nil,   363,   nil,
   365,   nil,   241,   nil,   nil,   nil,   321,   241,   246,   314,
   nil,   313,   315,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   269,   nil,   nil,   nil,   364,   263,   135,   nil,
   270,   nil,   nil,   371,   nil,   nil,   141,   nil,   nil,   nil,
   139,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   339,   nil,
   nil,   381,   nil,   nil,   nil,   190,   378,   299,   123,   125,
   126,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   141,   nil,   141,   333,   139,   nil,   139,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   300,   143,   195,
   195,   nil,   nil,   nil,   306,   308,   nil,   nil,   nil,   nil,
   nil,   327,   318,   327,   nil,   330,   nil,   148,   nil,   nil,
   380,   nil,   152,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   327,   336,   nil,   nil,   nil,   nil,
   369,   195,   nil,   nil,   344,   345,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   327,
   nil,   nil,   nil,   nil,   nil,   nil,   351,   nil,   nil,   nil,
   nil,   nil,   nil,   143,   nil,   nil,   nil,   nil,   nil,   383,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   375,   374,   nil,   nil,   nil,   nil,   nil,
   190,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   123,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   374,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   397,   nil,   399,   401 ]

racc_goto_check = [
     2,    65,     4,    40,    10,    10,    10,    10,    32,    82,
    89,    57,    38,    55,    56,    45,    48,    67,    66,    52,
    47,    13,    73,    66,    73,    50,    61,    61,     7,     6,
    58,    59,    51,    55,    62,    10,    10,    10,    10,    53,
    49,    46,    39,    69,    70,    72,    12,    12,    44,    10,
    10,    10,    45,    75,    56,    77,    10,     8,     8,     8,
     8,    10,    67,    48,    78,    47,    39,    79,     3,    83,
    84,    39,    86,    87,    12,    88,     1,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    50,    10,     6,    10,    10,    52,    39,    12,   nil,   nil,
    10,    12,   nil,   nil,    10,   nil,    39,   nil,   nil,   nil,
    57,    10,   nil,   nil,   nil,   nil,    39,   nil,    56,   nil,
    56,   nil,     4,   nil,   nil,   nil,    45,     4,     4,    57,
   nil,    55,    55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,    39,     2,    65,   nil,
     2,   nil,   nil,    39,   nil,   nil,    32,   nil,   nil,   nil,
    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    57,   nil,
   nil,    39,   nil,   nil,   nil,    10,    89,    40,    10,    10,
    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    32,   nil,    32,    82,    38,   nil,    38,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,    10,    10,
    10,   nil,   nil,   nil,     2,     2,   nil,   nil,   nil,   nil,
   nil,    10,     4,    10,   nil,    10,   nil,    10,   nil,   nil,
    52,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    10,    10,   nil,   nil,   nil,   nil,
    65,    10,   nil,   nil,    10,    10,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,    40,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,     4,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    76,     0,    68,     2,   nil,    24,   -52,   -24,   nil,
    -8,   nil,   -11,   -86,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -43,   nil,   nil,   nil,   nil,   nil,   -39,  -158,
   -38,   nil,   nil,   nil,   -72,  -106,  -313,  -287,  -293,  -196,
  -211,  -278,   -88,  -154,   nil,   -96,  -185,   -98,  -249,  -164,
   nil,   -85,  -247,   nil,   nil,   -49,  -112,  -305,   nil,  -197,
  -275,   nil,   -91,  -223,   nil,  -250,   nil,  -200,   -92,   -89,
   nil,   nil,   -55,   -85,   -84,   nil,   -82,     7,     8,  -149 ]

racc_goto_default = [
   nil,   nil,   373,   nil,   221,     5,     6,     7,     8,     9,
    11,    10,   310,   nil,    16,    40,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,   nil,
   nil,    41,    42,   120,   nil,   nil,   124,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,   201,   nil,
   110,   nil,   202,   206,   204,   131,   nil,   nil,   130,   nil,
   nil,   136,   nil,   137,   138,   230,   149,   151,    60,    61,
    62,    64,   nil,   nil,   nil,   154,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 94, :_reduce_1,
  1, 94, :_reduce_2,
  1, 94, :_reduce_none,
  1, 95, :_reduce_4,
  1, 98, :_reduce_5,
  3, 98, :_reduce_6,
  2, 98, :_reduce_7,
  1, 99, :_reduce_8,
  3, 99, :_reduce_9,
  1, 100, :_reduce_none,
  1, 101, :_reduce_11,
  3, 101, :_reduce_12,
  3, 101, :_reduce_13,
  3, 101, :_reduce_14,
  3, 101, :_reduce_15,
  1, 103, :_reduce_none,
  4, 103, :_reduce_17,
  3, 103, :_reduce_18,
  3, 103, :_reduce_19,
  3, 103, :_reduce_20,
  3, 103, :_reduce_21,
  3, 103, :_reduce_22,
  3, 103, :_reduce_23,
  3, 103, :_reduce_24,
  3, 103, :_reduce_25,
  3, 103, :_reduce_26,
  3, 103, :_reduce_27,
  2, 103, :_reduce_28,
  2, 103, :_reduce_29,
  3, 103, :_reduce_30,
  3, 103, :_reduce_31,
  3, 103, :_reduce_32,
  3, 103, :_reduce_33,
  3, 103, :_reduce_34,
  3, 103, :_reduce_35,
  2, 103, :_reduce_36,
  3, 103, :_reduce_37,
  3, 103, :_reduce_38,
  3, 103, :_reduce_39,
  3, 103, :_reduce_40,
  3, 103, :_reduce_41,
  3, 103, :_reduce_42,
  3, 103, :_reduce_43,
  1, 105, :_reduce_44,
  3, 105, :_reduce_45,
  1, 104, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 126, :_reduce_68,
  1, 126, :_reduce_69,
  5, 107, :_reduce_70,
  3, 107, :_reduce_71,
  6, 107, :_reduce_72,
  4, 107, :_reduce_73,
  1, 107, :_reduce_74,
  1, 111, :_reduce_75,
  2, 111, :_reduce_76,
  4, 134, :_reduce_77,
  3, 134, :_reduce_78,
  1, 134, :_reduce_79,
  3, 135, :_reduce_80,
  2, 133, :_reduce_81,
  3, 137, :_reduce_82,
  2, 137, :_reduce_83,
  2, 136, :_reduce_84,
  4, 136, :_reduce_85,
  2, 114, :_reduce_86,
  5, 139, :_reduce_87,
  4, 139, :_reduce_88,
  0, 140, :_reduce_none,
  2, 140, :_reduce_90,
  4, 140, :_reduce_91,
  3, 140, :_reduce_92,
  6, 115, :_reduce_93,
  5, 115, :_reduce_94,
  0, 141, :_reduce_none,
  4, 141, :_reduce_96,
  3, 141, :_reduce_97,
  5, 113, :_reduce_98,
  1, 142, :_reduce_99,
  2, 142, :_reduce_100,
  5, 143, :_reduce_101,
  4, 143, :_reduce_102,
  1, 144, :_reduce_103,
  1, 106, :_reduce_none,
  4, 106, :_reduce_105,
  1, 146, :_reduce_106,
  3, 146, :_reduce_107,
  3, 145, :_reduce_108,
  1, 102, :_reduce_109,
  6, 102, :_reduce_110,
  6, 102, :_reduce_111,
  5, 102, :_reduce_112,
  5, 102, :_reduce_113,
  6, 102, :_reduce_114,
  5, 102, :_reduce_115,
  4, 151, :_reduce_116,
  1, 152, :_reduce_117,
  1, 148, :_reduce_118,
  3, 148, :_reduce_119,
  1, 147, :_reduce_120,
  2, 147, :_reduce_121,
  1, 147, :_reduce_122,
  6, 112, :_reduce_123,
  2, 112, :_reduce_124,
  3, 153, :_reduce_125,
  3, 153, :_reduce_126,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  0, 150, :_reduce_129,
  1, 150, :_reduce_130,
  3, 150, :_reduce_131,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  3, 155, :_reduce_135,
  3, 155, :_reduce_136,
  6, 116, :_reduce_137,
  7, 117, :_reduce_138,
  1, 161, :_reduce_139,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 162, :_reduce_none,
  2, 162, :_reduce_143,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  6, 118, :_reduce_146,
  5, 118, :_reduce_147,
  1, 164, :_reduce_148,
  3, 164, :_reduce_149,
  1, 166, :_reduce_150,
  1, 166, :_reduce_151,
  1, 166, :_reduce_152,
  1, 166, :_reduce_none,
  1, 167, :_reduce_154,
  3, 167, :_reduce_155,
  1, 165, :_reduce_none,
  2, 165, :_reduce_157,
  1, 158, :_reduce_158,
  1, 158, :_reduce_159,
  1, 159, :_reduce_160,
  2, 159, :_reduce_161,
  4, 159, :_reduce_162,
  1, 138, :_reduce_163,
  3, 138, :_reduce_164,
  3, 168, :_reduce_165,
  1, 168, :_reduce_166,
  1, 110, :_reduce_167,
  1, 120, :_reduce_168,
  1, 120, :_reduce_169,
  1, 120, :_reduce_170,
  1, 120, :_reduce_171,
  3, 121, :_reduce_172,
  4, 121, :_reduce_173,
  2, 121, :_reduce_174,
  3, 121, :_reduce_175,
  4, 121, :_reduce_176,
  2, 121, :_reduce_177,
  3, 124, :_reduce_178,
  4, 124, :_reduce_179,
  2, 124, :_reduce_180,
  1, 169, :_reduce_181,
  3, 169, :_reduce_182,
  3, 170, :_reduce_183,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 171, :_reduce_187,
  2, 172, :_reduce_188,
  1, 174, :_reduce_189,
  1, 176, :_reduce_190,
  1, 177, :_reduce_191,
  2, 175, :_reduce_192,
  1, 178, :_reduce_193,
  1, 179, :_reduce_194,
  2, 179, :_reduce_195,
  2, 173, :_reduce_196,
  2, 180, :_reduce_197,
  2, 180, :_reduce_198,
  3, 96, :_reduce_199,
  0, 181, :_reduce_200,
  2, 181, :_reduce_201,
  4, 181, :_reduce_202,
  1, 119, :_reduce_203,
  3, 119, :_reduce_204,
  5, 119, :_reduce_205,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 127, :_reduce_208,
  1, 130, :_reduce_209,
  1, 128, :_reduce_210,
  1, 129, :_reduce_211,
  1, 123, :_reduce_212,
  1, 122, :_reduce_213,
  1, 125, :_reduce_214,
  0, 132, :_reduce_none,
  1, 132, :_reduce_216,
  0, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  0, 97, :_reduce_233 ]

racc_reduce_n = 234

racc_shift_n = 407

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :DELETES => 17,
  :LESSEQUAL => 18,
  :NOTEQUAL => 19,
  :DOT => 20,
  :COLON => 21,
  :LLCOLLECT => 22,
  :RRCOLLECT => 23,
  :QMARK => 24,
  :LPAREN => 25,
  :RPAREN => 26,
  :ISEQUAL => 27,
  :GREATEREQUAL => 28,
  :GREATERTHAN => 29,
  :LESSTHAN => 30,
  :IF => 31,
  :ELSE => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :ATAT => 45,
  :LCOLLECT => 46,
  :RCOLLECT => 47,
  :CLASSREF => 48,
  :NOT => 49,
  :OR => 50,
  :AND => 51,
  :UNDEF => 52,
  :PARROW => 53,
  :PLUS => 54,
  :MINUS => 55,
  :TIMES => 56,
  :DIV => 57,
  :LSHIFT => 58,
  :RSHIFT => 59,
  :UMINUS => 60,
  :MATCH => 61,
  :NOMATCH => 62,
  :REGEX => 63,
  :IN_EDGE => 64,
  :OUT_EDGE => 65,
  :IN_EDGE_SUB => 66,
  :OUT_EDGE_SUB => 67,
  :IN => 68,
  :UNLESS => 69,
  :PIPE => 70,
  :LAMBDA => 71,
  :SELBRACE => 72,
  :NUMBER => 73,
  :HEREDOC => 74,
  :SUBLOCATE => 75,
  :RENDER_STRING => 76,
  :RENDER_EXPR => 77,
  :EPP_START => 78,
  :EPP_END => 79,
  :EPP_END_TRIM => 80,
  :FUNCTION => 81,
  :PRIVATE => 82,
  :ATTR => 83,
  :TYPE => 84,
  :LOW => 85,
  :HIGH => 86,
  :CALL => 87,
  :LISTSTART => 88,
  :SPLAT => 89,
  :MODULO => 90,
  :TITLE_COLON => 91,
  :CASE_COLON => 92 }

racc_nt_base = 93

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "LOW",
  "HIGH",
  "CALL",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "reserved_word",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "number",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'egrammar.ra', 73)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 79)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 85)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 86)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 92)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_15(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_17(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_18(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_19(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_20(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_21(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_22(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_23(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_24(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_25(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_26(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_27(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_28(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_29(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_30(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_31(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_32(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 119)
  def _reduce_33(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 120)
  def _reduce_34(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 121)
  def _reduce_35(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 122)
  def _reduce_36(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 123)
  def _reduce_37(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 124)
  def _reduce_38(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_39(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_40(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_41(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 128)
  def _reduce_42(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 129)
  def _reduce_43(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 137)
  def _reduce_44(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 138)
  def _reduce_45(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

module_eval(<<'.,.,', 'egrammar.ra', 171)
  def _reduce_68(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 172)
  def _reduce_69(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 180)
  def _reduce_70(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 184)
  def _reduce_71(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_72(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 193)
  def _reduce_73(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_74(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_75(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_76(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_77(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_78(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_79(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_80(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 225)
  def _reduce_81(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 230)
  def _reduce_82(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 231)
  def _reduce_83(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 235)
  def _reduce_84(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 236)
  def _reduce_85(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 246)
  def _reduce_86(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 253)
  def _reduce_87(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 257)
  def _reduce_88(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'egrammar.ra', 265)
  def _reduce_90(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 269)
  def _reduce_91(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 273)
  def _reduce_92(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 282)
  def _reduce_93(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 286)
  def _reduce_94(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'egrammar.ra', 296)
  def _reduce_96(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 300)
  def _reduce_97(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 308)
  def _reduce_98(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 314)
  def _reduce_99(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 315)
  def _reduce_100(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 320)
  def _reduce_101(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 324)
  def _reduce_102(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 328)
  def _reduce_103(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 104 omitted

module_eval(<<'.,.,', 'egrammar.ra', 339)
  def _reduce_105(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 344)
  def _reduce_106(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_107(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 350)
  def _reduce_108(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 362)
  def _reduce_109(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 365)
  def _reduce_110(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error val[1], "A resource default can not be virtual or exported"
      when :override
        error val[1], "A resource override can not be virtual or exported"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 380)
  def _reduce_111(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class, :defaults, :override
        error val[1], "Defaults are not virtualizable"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 388)
  def _reduce_112(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error val[1], "A resource default can not specify a resource name"
      when :override
        error val[1], "A resource override does not allow override of name of resource"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 401)
  def _reduce_113(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 422)
  def _reduce_114(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        result.form = val[0]
        loc result, val[1], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 427)
  def _reduce_115(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 432)
  def _reduce_116(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 434)
  def _reduce_117(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 437)
  def _reduce_118(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_119(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 443)
  def _reduce_120(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_121(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 445)
  def _reduce_122(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 457)
  def _reduce_123(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 461)
  def _reduce_124(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 466)
  def _reduce_125(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_126(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'egrammar.ra', 480)
  def _reduce_129(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 481)
  def _reduce_130(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 482)
  def _reduce_131(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'egrammar.ra', 498)
  def _reduce_135(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 502)
  def _reduce_136(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 512)
  def _reduce_137(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 526)
  def _reduce_138(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 536)
  def _reduce_139(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'egrammar.ra', 545)
  def _reduce_143(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'egrammar.ra', 562)
  def _reduce_146(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 566)
  def _reduce_147(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], nil))
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 576)
  def _reduce_148(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_149(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 582)
  def _reduce_150(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_151(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 584)
  def _reduce_152(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 153 omitted

module_eval(<<'.,.,', 'egrammar.ra', 588)
  def _reduce_154(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_155(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 156 omitted

module_eval(<<'.,.,', 'egrammar.ra', 594)
  def _reduce_157(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 610)
  def _reduce_158(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 611)
  def _reduce_159(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_160(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_161(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 617)
  def _reduce_162(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_163(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_164(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_165(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_166(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_167(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_168(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_169(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_170(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_171(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_172(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_173(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_174(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_175(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_176(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_177(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_178(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_179(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_180(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 667)
  def _reduce_181(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_182(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_183(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_187(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_188(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_189(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_190(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_191(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_192(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 684)
  def _reduce_193(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_194(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 688)
  def _reduce_195(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_196(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_197(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_198(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 698)
  def _reduce_199(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 701)
  def _reduce_200(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 702)
  def _reduce_201(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 703)
  def _reduce_202(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_203(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 707)
  def _reduce_204(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 708)
  def _reduce_205(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 206 omitted

# reduce 207 omitted

module_eval(<<'.,.,', 'egrammar.ra', 714)
  def _reduce_208(val, _values, result)
     result = Factory.NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 715)
  def _reduce_209(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 716)
  def _reduce_210(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 717)
  def _reduce_211(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 718)
  def _reduce_212(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 723)
  def _reduce_213(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 726)
  def _reduce_214(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 215 omitted

module_eval(<<'.,.,', 'egrammar.ra', 732)
  def _reduce_216(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

module_eval(<<'.,.,', 'egrammar.ra', 755)
  def _reduce_233(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
