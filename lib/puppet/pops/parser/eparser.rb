#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 764)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'62,65,287,-249,63,57,334,58,-134,84,-248,-132,249,142,-130,266,-246',
'387,267,386,335,-237,292,105,18,108,115,103,104,346,43,391,46,250,49',
'12,289,47,37,40,351,45,38,10,11,-249,143,70,17,107,-134,39,-248,-132',
'15,16,-130,120,-246,91,90,114,71,-237,86,87,352,-133,44,116,343,85,36',
'66,-251,68,69,67,290,333,48,50,52,51,53,54,55,62,65,56,249,63,57,411',
'58,92,84,291,292,62,65,329,292,63,281,282,117,118,119,-133,105,18,108',
'268,103,104,-251,43,249,46,358,49,122,330,47,37,40,249,45,38,387,70',
'386,360,70,17,107,329,39,250,70,15,16,323,88,89,91,90,250,71,319,86',
'87,242,317,44,270,269,85,36,66,316,68,69,128,368,369,48,50,52,51,53',
'54,55,62,65,56,349,63,57,288,58,92,84,371,263,287,374,83,329,379,380',
'83,83,83,75,384,105,18,108,268,103,104,388,43,390,46,263,49,12,263,47',
'37,40,73,45,38,10,11,238,397,70,17,107,261,39,260,400,15,16,238,88,89',
'91,90,287,71,241,86,87,239,238,44,83,83,85,36,66,404,68,69,228,128,407',
'48,50,52,51,53,54,55,62,65,56,287,63,57,227,58,92,84,410,75,163,160',
'158,414,390,416,417,418,129,421,422,105,18,108,115,103,104,111,43,423',
'46,424,49,12,128,47,37,40,83,45,38,10,11,75,432,70,17,107,72,39,434',
'435,15,16,436,120,319,91,90,114,71,,86,87,115,,44,116,,85,36,66,,68',
'69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,92,84,120,,,,114,,,,',
'117,118,119,116,105,18,108,,103,104,,43,249,46,,49,122,,47,37,40,,45',
'38,,70,,,70,17,107,,39,250,,15,16,,,,117,118,119,71,,,115,279,,44,,115',
'85,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,324,63,57,,58,428,120',
',,249,114,120,,,,114,,,116,,,18,70,116,,,,43,,46,250,49,12,,47,37,40',
',45,38,10,11,,,70,17,,,39,,,15,16,,,117,118,119,,71,117,118,119,115',
',44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,84',
'120,,,,114,115,,,,,,115,116,105,18,108,,103,104,,43,,46,,49,122,,47',
'37,40,,45,38,,,,120,70,17,107,114,39,120,377,15,16,114,,116,117,118',
'119,71,,116,,,,44,,,85,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56',
',63,57,,58,117,118,119,,,,117,118,119,,,,,,,,18,,,,,,43,,46,,49,12,',
'47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16,76,77,78,,,,71,,,,,,44,,',
',36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,84,,,,,,',
',,79,81,80,82,,105,18,108,,103,104,,43,,46,,49,12,,47,37,40,,45,38,10',
'11,,,70,17,107,,39,,,15,16,,,,,,,71,,86,87,,,44,,,85,36,66,,68,69,,',
',48,50,52,51,53,54,55,62,65,56,84,63,57,,58,,84,,,,,,,,105,,108,,103',
'104,105,18,108,,103,104,,43,,46,,49,122,,47,37,40,,45,38,107,,,,70,17',
'107,,39,,,15,16,,,86,87,,,71,,,85,,,44,,,,36,66,,68,69,,,,48,50,52,51',
'53,54,55,62,65,56,84,63,57,,58,,84,,,,,,,,105,,108,,103,104,105,18,108',
',103,104,,43,,46,,49,122,,47,37,40,,45,38,107,,,,70,17,107,,39,,,15',
'16,,,86,87,,,71,,,85,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62',
'65,56,84,63,57,,58,,84,,,,,,,,105,,108,,103,104,105,18,108,,103,104',
',43,,46,,49,122,,47,37,40,,45,38,107,,,,70,17,107,,39,,,15,16,,,,,,',
'71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,',
'58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,122,,47,37,40,,45,38,,,,,70,17',
',,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55',
'62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40',
',45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,',
',,48,50,52,51,53,54,55,62,65,56,,63,57,,58,426,,,,,,,,,,,,,,,,18,,,',
',,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71',
',,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58',
'420,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70',
'17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54',
'55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,122,,47,37',
'40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,',
',48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43',
',46,,49,122,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44',
',,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,',
',,,,,,,,18,,,,,,43,,46,,49,122,,47,37,40,,45,38,,,,,70,17,,,39,,,15',
'16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56',
',63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,122,,47,37,40,,45,38,',
',,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51',
'53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,122',
',47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68',
'69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,288,,,,,,,,,,,,,,18',
',,,,,43,,46,,49,122,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71',
',,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,147',
'58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70',
'17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54',
'55,62,65,56,,63,57,149,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47',
'37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68',
'69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,151,,,,,,,,,,,,,,,,18',
',,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,',
',71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57',
',58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70',
'17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54',
'55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,122,,47,37',
'40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,',
',48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43',
',46,,49,12,,47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,',
',44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,162,,,',
',,,,,,,,,,,,,18,,,,,,43,,46,,49,122,,47,37,40,,45,38,,,,,70,17,,,39',
',,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62',
'65,56,,63,57,,58,353,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40',
',45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,',
',,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43',
',46,,49,12,,47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,',
',44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,',
',,,,,,,,,,,,18,,,,,,43,,46,,49,122,,47,37,40,,45,38,,,,,70,17,,,39,',
',15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65',
'56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45,38',
'10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50',
'52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49',
'12,,47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36',
'66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,',
',,18,,,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16',
',,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63',
'57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45,38,10,11',
',,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51',
'53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,',
'47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66',
',68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18',
',,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,',
',71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57',
',58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70',
'17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54',
'55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37',
'40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69',
',,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,',
'179,196,188,197,49,189,199,190,37,178,,181,176,,,,,70,17,200,195,177',
',,15,175,,,,,,,71,,,,,198,180,,,,36,66,,68,69,,,,191,192,194,193,184',
'185,186,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,122,',
'47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68',
'69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,',
',,,43,,46,,49,122,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,',
',,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,',
',,,,,,,,,,,,,,,18,,,,,,43,,46,,49,122,,47,37,40,,45,38,,,,,70,17,,,39',
',,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62',
'65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,122,,47,37,40,,45',
'38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50',
'52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49',
'122,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66',
',68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18',
',,,,,43,,46,,49,122,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71',
',,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58',
',,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,122,,47,37,40,,45,38,,,,,70,17,,',
'39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55',
'62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,122,,47,37,40',
',45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48',
'50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46',
',49,122,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,',
'36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,',
',,,,,18,,,,,,43,,46,,49,122,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16',
',,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63',
'57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,122,,47,37,40,,45,38,,,,,70',
'17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54',
'55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,122,,47,37',
'40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,',
',48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43',
',46,,49,122,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44',
',,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,',
',,,,,,,,18,,,,,,43,,46,,49,122,,47,37,40,,45,38,,,,,70,17,,,39,,,15',
'16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56',
',63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,122,,47,37,40,,45,38,',
',,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51',
'53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,122',
',47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68',
'69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,',
',,,43,,46,,49,122,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,',
',,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,',
',,,,,,,,,,,,,,,18,,,,,,43,,46,,49,122,,47,37,40,,45,38,,,,,70,17,,,39',
',,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62',
'65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,122,,47,37,40,,45',
'38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50',
'52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49',
'122,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,224,36',
'66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,',
',,18,226,,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17,,,39,,,15',
'16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56',
',63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45,38,10',
'11,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52',
'51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,122',
',47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68',
'69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,',
',,,43,,46,,49,122,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,',
',,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,',
',,,,,,,,,,,,,,,18,,,,,,43,,46,,49,122,,47,37,40,,45,38,,,,,70,17,,,39',
',,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62',
'65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,122,,47,37,40,,45',
'38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50',
'52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49',
'122,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66',
',68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18',
',,,,,43,,46,,49,122,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71',
',,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58',
',,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17',
',,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55',
'62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,122,,47,37,40',
',45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48',
'50,52,51,53,54,55,62,65,56,,63,57,,58,151,,,,,,,,,,,,,,,,18,,,,,,43',
',46,,49,12,,47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,',
',44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,339',
',,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17',
',,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55',
'62,65,56,,63,57,,58,337,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37',
'40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69',
',,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,',
'43,,46,,49,122,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,',
',44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,',
',,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17,,,39',
',,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62',
'65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45',
'38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48',
'50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,254,,,,,43',
',46,,49,12,,47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,',
',44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,',
',,,,,,,,,,,,18,,,,,,43,,46,,49,122,,47,37,40,,45,38,,,,,70,17,,,39,',
',15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65',
'56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,122,,47,37,40,,45,38',
',,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52',
'51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,122',
',47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68',
'69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,',
',,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71',
',,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58',
',,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17',
',,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55',
'62,65,56,,63,57,,58,327,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37',
'40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69',
',,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,',
'43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,',
',,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,392',
',,,,,,,,,,,,,,,18,,,,,,43,,46,,49,122,,47,37,40,,45,38,,,,,70,17,,,39',
',,15,16,,,,,,,71,,,,,,44,,62,65,36,66,63,68,69,,84,,48,50,52,51,53,54',
'55,,,56,100,95,105,,108,,103,104,,96,98,97,99,,,,,,,142,,,139,,,,,,107',
',,,102,101,,,88,89,91,90,93,94,71,86,87,,,,,,85,,143,66,84,,257,,,,',
'281,282,,,,100,95,105,,108,,103,104,92,96,98,97,99,,,,,,,,,,,,,,,,107',
',,,102,101,,,88,89,91,90,93,94,84,86,87,,,,,,85,,,,100,95,105,320,108',
',103,104,,96,98,97,99,,62,65,,,63,,92,,,,,,,,107,,,,102,101,,,88,89',
'91,90,93,94,,86,87,84,,256,,,85,,,142,,,139,100,95,105,,108,,103,104',
',96,98,97,99,,62,65,,92,63,71,,,,,,,,,107,143,66,,102,101,,,88,89,91',
'90,93,94,,86,87,84,,255,,,85,,,142,,,139,100,95,105,,108,,103,104,,96',
'98,97,99,,,,,92,,71,,,,,,,,,107,143,66,,102,101,,84,88,89,91,90,93,94',
',86,87,,,100,95,105,85,108,,103,104,,96,98,97,99,,,,,,,,,,,,,,,92,107',
',,,102,101,,84,88,89,91,90,93,94,,86,87,,,100,95,105,85,108,,103,104',
',96,98,97,99,,,,,,,,,,,,,,,92,107,,,,102,101,,84,88,89,91,90,93,94,',
'86,87,,,100,95,105,85,108,,103,104,,96,98,97,99,,,,,,,,,,,,,,,92,107',
',,,102,101,,84,88,89,91,90,93,94,,86,87,,,100,95,105,85,108,,103,104',
',96,98,97,99,,,,,,,,,,,,,,,92,107,,,,102,101,,84,88,89,91,90,93,94,',
'86,87,,,100,95,105,85,108,,103,104,,96,98,97,99,,,,,,,,,,,,,,,92,107',
',,,102,101,,84,88,89,91,90,93,94,,86,87,,,100,95,105,85,108,,103,104',
',96,98,97,99,,,,,,,,,,,,,,,92,107,,,,102,101,,,88,89,91,90,93,94,84',
'86,87,,,,,,85,,,,100,95,105,285,108,,103,104,,96,98,97,99,,,,,,,,92',
',,,,,,,107,,,,102,101,,84,88,89,91,90,93,94,,86,87,,,100,95,105,85,108',
'84,103,104,,96,98,97,99,,,,,,,105,,108,,103,104,,,92,107,,,,102,101',
',,88,89,91,90,93,94,,86,87,107,,,,,85,,,88,89,91,90,93,94,84,86,87,',
',,,,85,,,,100,95,105,92,108,84,103,104,,96,98,97,99,,,,,,,105,92,108',
',103,104,,,,107,,,,102,101,,,88,89,91,90,93,94,,86,87,107,,,,,85,,,88',
'89,91,90,93,94,84,86,87,,,293,,,85,,,,100,95,105,92,108,84,103,104,',
'96,98,97,99,,,,,,95,105,92,108,,103,104,,96,,107,,,,102,101,,,88,89',
'91,90,93,94,,86,87,107,,,,,85,,,88,89,91,90,93,94,84,86,87,,,,,,85,',
',,100,95,105,92,108,84,103,104,,96,98,97,99,,,,,,95,105,92,108,,103',
'104,,96,,107,,,,102,101,,,88,89,91,90,93,94,,86,87,107,,,,,85,,,88,89',
'91,90,93,94,84,86,87,,,,,,85,,,,100,95,105,92,108,,103,104,,96,98,97',
'99,,,,,,,,92,,,,,,,,107,,,,,101,,84,88,89,91,90,93,94,,86,87,,,100,95',
'105,85,108,84,103,104,,96,98,97,99,,,,,,95,105,,108,,103,104,,96,92',
'107,,,,,,,,88,89,91,90,93,94,,86,87,107,,62,65,,85,63,84,88,89,91,90',
'93,94,,86,87,,,,95,105,85,108,,103,104,,96,92,,,,,,,,,,,,142,,,139,',
'92,107,,,,,,,,88,89,91,90,93,94,,86,87,71,,,,,85,,,,,143,66,308,196',
'307,197,,305,199,309,,299,,304,306,,,,,92,,200,195,310,,,,303,,,,,,',
',,,,,198,311,,,,,,,,,,,,314,315,313,312,300,301,302,308,196,307,197',
',305,199,309,,299,,304,306,,,,,,,200,195,310,,,,303,,,,,,,,,,,,198,311',
',,,,,,,,,,,314,315,313,312,300,301,302,308,196,307,197,,305,199,309',
',299,,304,306,,,,,,,200,195,310,,,,303,,,,,,,,,,,,198,311,,,,,,,,,,',
',314,315,313,312,300,301,302,308,196,307,197,,305,199,309,,299,,304',
'306,,,,,,,200,195,310,,,,303,,,,,,,,,,,,198,311,,,,,,,,,,,,314,315,313',
'312,300,301,302' ]
        racc_action_table = arr = ::Array.new(8782, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,298,194,0,0,253,0,186,206,193,184,251,261,178,150,177,337,150,337',
'253,176,340,206,0,206,189,206,206,259,0,340,0,251,0,0,187,0,0,0,264',
'0,0,0,0,194,261,0,0,206,186,0,193,184,0,0,178,189,177,206,206,189,0',
'176,206,206,265,185,0,189,258,206,0,0,192,0,0,0,187,252,0,0,0,0,0,0',
'0,423,423,0,250,423,423,383,423,206,211,202,383,158,158,278,202,158',
'358,358,189,189,189,185,211,423,211,283,211,211,192,423,128,423,284',
'423,423,249,423,423,423,329,423,423,384,128,384,286,423,423,211,243',
'423,128,329,423,423,236,211,211,211,211,329,423,233,211,211,128,232',
'423,155,155,211,423,423,230,423,423,226,294,296,423,423,423,423,423',
'423,423,4,4,423,262,4,4,303,4,211,212,318,225,174,321,172,325,326,328',
'171,170,169,164,336,212,4,212,153,212,212,338,4,339,4,148,4,4,146,4',
'4,4,4,4,4,4,4,144,344,4,4,212,137,4,135,357,4,4,134,212,212,212,212',
'359,4,127,212,212,125,112,4,110,109,212,4,4,367,4,4,106,369,370,4,4',
'4,4,4,4,4,417,417,4,373,417,417,105,417,212,207,378,74,72,67,66,387',
'388,390,391,394,42,399,402,207,417,207,12,207,207,12,417,403,417,409',
'417,417,41,417,417,417,8,417,417,417,417,5,419,417,417,207,1,417,425',
'427,417,417,429,12,433,207,207,12,417,,207,207,191,,417,12,,207,417',
'417,,417,417,,,,417,417,417,417,417,417,417,181,181,417,,181,181,,181',
'207,205,191,,,,191,,,,,12,12,12,191,205,181,205,,205,205,,181,160,181',
',181,181,,181,181,181,,181,181,,160,,,181,181,205,,181,160,,181,181',
',,,191,191,191,181,,,188,160,,181,,122,205,181,181,,181,181,,,,181,181',
'181,181,181,181,181,416,416,181,238,416,416,,416,416,188,,,238,188,122',
',,,122,,,188,,,416,238,122,,,,416,,416,238,416,416,,416,416,416,,416',
'416,416,416,,,416,416,,,416,,,416,416,,,188,188,188,,416,122,122,122',
'48,,416,,,,416,416,,416,416,,,,416,416,416,416,416,416,416,180,180,416',
',180,180,,180,,204,48,,,,48,323,,,,,,46,48,204,180,204,,204,204,,180',
',180,,180,180,,180,180,180,,180,180,,,,323,180,180,204,323,180,46,323',
'180,180,46,,323,48,48,48,180,,46,,,,180,,,204,180,180,,180,180,,,,180',
'180,180,180,180,180,180,10,10,180,,10,10,,10,323,323,323,,,,46,46,46',
',,,,,,,10,,,,,,10,,10,,10,10,,10,10,10,,10,10,10,10,,,10,10,,,10,,,10',
'10,7,7,7,,,,10,,,,,,10,,,,10,10,,10,10,,,,10,10,10,10,10,10,10,11,11',
'10,,11,11,,11,,208,,,,,,,,,7,7,7,7,,208,11,208,,208,208,,11,,11,,11',
'11,,11,11,11,,11,11,11,11,,,11,11,208,,11,,,11,11,,,,,,,11,,208,208',
',,11,,,208,11,11,,11,11,,,,11,11,11,11,11,11,11,179,179,11,209,179,179',
',179,,203,,,,,,,,209,,209,,209,209,203,179,203,,203,203,,179,,179,,179',
'179,,179,179,179,,179,179,209,,,,179,179,203,,179,,,179,179,,,209,209',
',,179,,,209,,,179,,,,179,179,,179,179,,,,179,179,179,179,179,179,179',
'15,15,179,210,15,15,,15,,123,,,,,,,,210,,210,,210,210,123,15,123,,123',
'123,,15,,15,,15,15,,15,15,15,,15,15,210,,,,15,15,123,,15,,,15,15,,,210',
'210,,,15,,,210,,,15,,,,15,15,,15,15,,,,15,15,15,15,15,15,15,16,16,15',
'121,16,16,,16,,124,,,,,,,,121,,121,,121,121,124,16,124,,124,124,,16',
',16,,16,16,,16,16,16,,16,16,121,,,,16,16,124,,16,,,16,16,,,,,,,16,,',
',,,16,,,,16,16,,16,16,,,,16,16,16,16,16,16,16,17,17,16,,17,17,,17,,',
',,,,,,,,,,,,,,17,,,,,,17,,17,,17,17,,17,17,17,,17,17,,,,,17,17,,,17',
',,17,17,,,,,,,17,,,,,,17,,,,17,17,,17,17,,,,17,17,17,17,17,17,17,18',
'18,17,,18,18,,18,,,,,,,,,,,,,,,,,18,,,,,,18,,18,,18,18,,18,18,18,,18',
'18,18,18,,,18,18,,,18,,,18,18,,,,,,,18,,,,,,18,,,,18,18,,18,18,,,,18',
'18,18,18,18,18,18,414,414,18,,414,414,,414,414,,,,,,,,,,,,,,,,414,,',
',,,414,,414,,414,414,,414,414,414,,414,414,414,414,,,414,414,,,414,',
',414,414,,,,,,,414,,,,,,414,,,,414,414,,414,414,,,,414,414,414,414,414',
'414,414,397,397,414,,397,397,,397,397,,,,,,,,,,,,,,,,397,,,,,,397,,397',
',397,397,,397,397,397,,397,397,397,397,,,397,397,,,397,,,397,397,,,',
',,,397,,,,,,397,,,,397,397,,397,397,,,,397,397,397,397,397,397,397,43',
'43,397,,43,43,,43,,,,,,,,,,,,,,,,,43,,,,,,43,,43,,43,43,,43,43,43,,43',
'43,,,,,43,43,,,43,,,43,43,,,,,,,43,,,,,,43,,,,43,43,,43,43,,,,43,43',
'43,43,43,43,43,44,44,43,,44,44,,44,,,,,,,,,,,,,,,,,44,,,,,,44,,44,,44',
'44,,44,44,44,,44,44,,,,,44,44,,,44,,,44,44,,,,,,,44,,,,,,44,,,,44,44',
',44,44,,,,44,44,44,44,44,44,44,45,45,44,,45,45,,45,,,,,,,,,,,,,,,,,45',
',,,,,45,,45,,45,45,,45,45,45,,45,45,,,,,45,45,,,45,,,45,45,,,,,,,45',
',,,,,45,,,,45,45,,45,45,,,,45,45,45,45,45,45,45,224,224,45,,224,224',
',224,,,,,,,,,,,,,,,,,224,,,,,,224,,224,,224,224,,224,224,224,,224,224',
',,,,224,224,,,224,,,224,224,,,,,,,224,,,,,,224,,,,224,224,,224,224,',
',,224,224,224,224,224,224,224,319,319,224,,319,319,,319,,,,,,,,,,,,',
',,,,319,,,,,,319,,319,,319,319,,319,319,319,,319,319,,,,,319,319,,,319',
',,319,319,,,,,,,319,,,,,,319,,,,319,319,,319,319,,,,319,319,319,319',
'319,319,319,175,175,319,,175,175,,175,,,175,,,,,,,,,,,,,,175,,,,,,175',
',175,,175,175,,175,175,175,,175,175,,,,,175,175,,,175,,,175,175,,,,',
',,175,,,,,,175,,,,175,175,,175,175,,,,175,175,175,175,175,175,175,56',
'56,175,,56,56,56,56,,,,,,,,,,,,,,,,,56,,,,,,56,,56,,56,56,,56,56,56',
',56,56,56,56,,,56,56,,,56,,,56,56,,,,,,,56,,,,,,56,,,,56,56,,56,56,',
',,56,56,56,56,56,56,56,57,57,56,,57,57,57,57,,,,,,,,,,,,,,,,,57,,,,',
',57,,57,,57,57,,57,57,57,,57,57,57,57,,,57,57,,,57,,,57,57,,,,,,,57',
',,,,,57,,,,57,57,,57,57,,,,57,57,57,57,57,57,57,58,58,57,,58,58,,58',
'58,,,,,,,,,,,,,,,,58,,,,,,58,,58,,58,58,,58,58,58,,58,58,58,58,,,58',
'58,,,58,,,58,58,,,,,,,58,,,,,,58,,,,58,58,,58,58,,,,58,58,58,58,58,58',
'58,64,64,58,,64,64,,64,,,,,,,,,,,,,,,,,64,,,,,,64,,64,,64,64,,64,64',
'64,,64,64,64,64,,,64,64,,,64,,,64,64,,,,,,,64,,,,,,64,,,,64,64,,64,64',
',,,64,64,64,64,64,64,64,386,386,64,,386,386,,386,,,,,,,,,,,,,,,,,386',
',,,,,386,,386,,386,386,,386,386,386,,386,386,,,,,386,386,,,386,,,386',
'386,,,,,,,386,,,,,,386,,,,386,386,,386,386,,,,386,386,386,386,386,386',
'386,263,263,386,,263,263,,263,,,,,,,,,,,,,,,,,263,,,,,,263,,263,,263',
'263,,263,263,263,,263,263,263,263,,,263,263,,,263,,,263,263,,,,,,,263',
',,,,,263,,,,263,263,,263,263,,,,263,263,263,263,263,263,263,69,69,263',
',69,69,,69,,,,,,,,,,,,,,,,,69,,,,,,69,,69,,69,69,,69,69,69,,69,69,,',
',,69,69,,,69,,,69,69,,,,,,,69,,,,,,69,,,,69,69,,69,69,,,,69,69,69,69',
'69,69,69,267,267,69,,267,267,,267,267,,,,,,,,,,,,,,,,267,,,,,,267,,267',
',267,267,,267,267,267,,267,267,267,267,,,267,267,,,267,,,267,267,,,',
',,,267,,,,,,267,,,,267,267,,267,267,,,,267,267,267,267,267,267,267,73',
'73,267,,73,73,,73,,,,,,,,,,,,,,,,,73,,,,,,73,,73,,73,73,,73,73,73,,73',
'73,73,73,,,73,73,,,73,,,73,73,,,,,,,73,,,,,,73,,,,73,73,,73,73,,,,73',
'73,73,73,73,73,73,293,293,73,,293,293,,293,,,,,,,,,,,,,,,,,293,,,,,',
'293,,293,,293,293,,293,293,293,,293,293,,,,,293,293,,,293,,,293,293',
',,,,,,293,,,,,,293,,,,293,293,,293,293,,,,293,293,293,293,293,293,293',
'75,75,293,,75,75,,75,,,,,,,,,,,,,,,,,75,,,,,,75,,75,,75,75,,75,75,75',
',75,75,75,75,,,75,75,,,75,,,75,75,,,,,,,75,,,,,,75,,,,75,75,,75,75,',
',,75,75,75,75,75,75,75,76,76,75,,76,76,,76,,,,,,,,,,,,,,,,,76,,,,,,76',
',76,,76,76,,76,76,76,,76,76,76,76,,,76,76,,,76,,,76,76,,,,,,,76,,,,',
',76,,,,76,76,,76,76,,,,76,76,76,76,76,76,76,77,77,76,,77,77,,77,,,,',
',,,,,,,,,,,,77,,,,,,77,,77,,77,77,,77,77,77,,77,77,77,77,,,77,77,,,77',
',,77,77,,,,,,,77,,,,,,77,,,,77,77,,77,77,,,,77,77,77,77,77,77,77,78',
'78,77,,78,78,,78,,,,,,,,,,,,,,,,,78,,,,,,78,,78,,78,78,,78,78,78,,78',
'78,78,78,,,78,78,,,78,,,78,78,,,,,,,78,,,,,,78,,,,78,78,,78,78,,,,78',
'78,78,78,78,78,78,79,79,78,,79,79,,79,,,,,,,,,,,,,,,,,79,,,,,,79,,79',
',79,79,,79,79,79,,79,79,79,79,,,79,79,,,79,,,79,79,,,,,,,79,,,,,,79',
',,,79,79,,79,79,,,,79,79,79,79,79,79,79,80,80,79,,80,80,,80,,,,,,,,',
',,,,,,,,80,,,,,,80,,80,,80,80,,80,80,80,,80,80,80,80,,,80,80,,,80,,',
'80,80,,,,,,,80,,,,,,80,,,,80,80,,80,80,,,,80,80,80,80,80,80,80,81,81',
'80,,81,81,,81,,,,,,,,,,,,,,,,,81,,,,,,81,,81,,81,81,,81,81,81,,81,81',
'81,81,,,81,81,,,81,,,81,81,,,,,,,81,,,,,,81,,,,81,81,,81,81,,,,81,81',
'81,81,81,81,81,82,82,81,,82,82,,82,,,,,,,,,,,,,,,,,82,,,,,,82,,82,,82',
'82,,82,82,82,,82,82,82,82,,,82,82,,,82,,,82,82,,,,,,,82,,,,,,82,,,,82',
'82,,82,82,,,,82,82,82,82,82,82,82,83,83,82,,83,83,,83,,,,,,,,,,,,,,',
',,83,,,,,,83,83,83,83,83,83,83,83,83,83,,83,83,,,,,83,83,83,83,83,,',
'83,83,,,,,,,83,,,,,83,83,,,,83,83,,83,83,,,,83,83,83,83,83,83,83,84',
'84,83,,84,84,,84,,,,,,,,,,,,,,,,,84,,,,,,84,,84,,84,84,,84,84,84,,84',
'84,,,,,84,84,,,84,,,84,84,,,,,,,84,,,,,,84,,,,84,84,,84,84,,,,84,84',
'84,84,84,84,84,85,85,84,,85,85,,85,,,,,,,,,,,,,,,,,85,,,,,,85,,85,,85',
'85,,85,85,85,,85,85,,,,,85,85,,,85,,,85,85,,,,,,,85,,,,,,85,,,,85,85',
',85,85,,,,85,85,85,85,85,85,85,86,86,85,,86,86,,86,,,,,,,,,,,,,,,,,86',
',,,,,86,,86,,86,86,,86,86,86,,86,86,,,,,86,86,,,86,,,86,86,,,,,,,86',
',,,,,86,,,,86,86,,86,86,,,,86,86,86,86,86,86,86,87,87,86,,87,87,,87',
',,,,,,,,,,,,,,,,87,,,,,,87,,87,,87,87,,87,87,87,,87,87,,,,,87,87,,,87',
',,87,87,,,,,,,87,,,,,,87,,,,87,87,,87,87,,,,87,87,87,87,87,87,87,88',
'88,87,,88,88,,88,,,,,,,,,,,,,,,,,88,,,,,,88,,88,,88,88,,88,88,88,,88',
'88,,,,,88,88,,,88,,,88,88,,,,,,,88,,,,,,88,,,,88,88,,88,88,,,,88,88',
'88,88,88,88,88,89,89,88,,89,89,,89,,,,,,,,,,,,,,,,,89,,,,,,89,,89,,89',
'89,,89,89,89,,89,89,,,,,89,89,,,89,,,89,89,,,,,,,89,,,,,,89,,,,89,89',
',89,89,,,,89,89,89,89,89,89,89,90,90,89,,90,90,,90,,,,,,,,,,,,,,,,,90',
',,,,,90,,90,,90,90,,90,90,90,,90,90,,,,,90,90,,,90,,,90,90,,,,,,,90',
',,,,,90,,,,90,90,,90,90,,,,90,90,90,90,90,90,90,91,91,90,,91,91,,91',
',,,,,,,,,,,,,,,,91,,,,,,91,,91,,91,91,,91,91,91,,91,91,,,,,91,91,,,91',
',,91,91,,,,,,,91,,,,,,91,,,,91,91,,91,91,,,,91,91,91,91,91,91,91,92',
'92,91,,92,92,,92,,,,,,,,,,,,,,,,,92,,,,,,92,,92,,92,92,,92,92,92,,92',
'92,,,,,92,92,,,92,,,92,92,,,,,,,92,,,,,,92,,,,92,92,,92,92,,,,92,92',
'92,92,92,92,92,93,93,92,,93,93,,93,,,,,,,,,,,,,,,,,93,,,,,,93,,93,,93',
'93,,93,93,93,,93,93,,,,,93,93,,,93,,,93,93,,,,,,,93,,,,,,93,,,,93,93',
',93,93,,,,93,93,93,93,93,93,93,94,94,93,,94,94,,94,,,,,,,,,,,,,,,,,94',
',,,,,94,,94,,94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,94,,,,,,,94',
',,,,,94,,,,94,94,,94,94,,,,94,94,94,94,94,94,94,95,95,94,,95,95,,95',
',,,,,,,,,,,,,,,,95,,,,,,95,,95,,95,95,,95,95,95,,95,95,,,,,95,95,,,95',
',,95,95,,,,,,,95,,,,,,95,,,,95,95,,95,95,,,,95,95,95,95,95,95,95,96',
'96,95,,96,96,,96,,,,,,,,,,,,,,,,,96,,,,,,96,,96,,96,96,,96,96,96,,96',
'96,,,,,96,96,,,96,,,96,96,,,,,,,96,,,,,,96,,,,96,96,,96,96,,,,96,96',
'96,96,96,96,96,97,97,96,,97,97,,97,,,,,,,,,,,,,,,,,97,,,,,,97,,97,,97',
'97,,97,97,97,,97,97,,,,,97,97,,,97,,,97,97,,,,,,,97,,,,,,97,,,,97,97',
',97,97,,,,97,97,97,97,97,97,97,98,98,97,,98,98,,98,,,,,,,,,,,,,,,,,98',
',,,,,98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,98,,,,,,,98',
',,,,,98,,,,98,98,,98,98,,,,98,98,98,98,98,98,98,99,99,98,,99,99,,99',
',,,,,,,,,,,,,,,,99,,,,,,99,,99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99',
',,99,99,,,,,,,99,,,,,,99,,,,99,99,,99,99,,,,99,99,99,99,99,99,99,100',
'100,99,,100,100,,100,,,,,,,,,,,,,,,,,100,,,,,,100,,100,,100,100,,100',
'100,100,,100,100,,,,,100,100,,,100,,,100,100,,,,,,,100,,,,,,100,,,,100',
'100,,100,100,,,,100,100,100,100,100,100,100,101,101,100,,101,101,,101',
',,,,,,,,,,,,,,,,101,,,,,,101,,101,,101,101,,101,101,101,,101,101,,,',
',101,101,,,101,,,101,101,,,,,,,101,,,,,,101,,,,101,101,,101,101,,,,101',
'101,101,101,101,101,101,102,102,101,,102,102,,102,,,,,,,,,,,,,,,,,102',
',,,,,102,,102,,102,102,,102,102,102,,102,102,,,,,102,102,,,102,,,102',
'102,,,,,,,102,,,,,,102,,,,102,102,,102,102,,,,102,102,102,102,102,102',
'102,103,103,102,,103,103,,103,,,,,,,,,,,,,,,,,103,,,,,,103,,103,,103',
'103,,103,103,103,,103,103,,,,,103,103,,,103,,,103,103,,,,,,,103,,,,',
',103,,,103,103,103,,103,103,,,,103,103,103,103,103,103,103,104,104,103',
',104,104,,104,,,,,,,,,,,,,,,,,104,104,,,,,104,,104,,104,104,,104,104',
'104,,104,104,104,104,,,104,104,,,104,,,104,104,,,,,,,104,,,,,,104,,',
',104,104,,104,104,,,,104,104,104,104,104,104,104,374,374,104,,374,374',
',374,,,,,,,,,,,,,,,,,374,,,,,,374,,374,,374,374,,374,374,374,,374,374',
'374,374,,,374,374,,,374,,,374,374,,,,,,,374,,,,,,374,,,,374,374,,374',
'374,,,,374,374,374,374,374,374,374,368,368,374,,368,368,,368,,,,,,,',
',,,,,,,,,368,,,,,,368,,368,,368,368,,368,368,368,,368,368,,,,,368,368',
',,368,,,368,368,,,,,,,368,,,,,,368,,,,368,368,,368,368,,,,368,368,368',
'368,368,368,368,107,107,368,,107,107,,107,,,,,,,,,,,,,,,,,107,,,,,,107',
',107,,107,107,,107,107,107,,107,107,,,,,107,107,,,107,,,107,107,,,,',
',,107,,,,,,107,,,,107,107,,107,107,,,,107,107,107,107,107,107,107,108',
'108,107,,108,108,,108,,,,,,,,,,,,,,,,,108,,,,,,108,,108,,108,108,,108',
'108,108,,108,108,,,,,108,108,,,108,,,108,108,,,,,,,108,,,,,,108,,,,108',
'108,,108,108,,,,108,108,108,108,108,108,108,330,330,108,,330,330,,330',
',,,,,,,,,,,,,,,,330,,,,,,330,,330,,330,330,,330,330,330,,330,330,,,',
',330,330,,,330,,,330,330,,,,,,,330,,,,,,330,,,,330,330,,330,330,,,,330',
'330,330,330,330,330,330,333,333,330,,333,333,,333,,,,,,,,,,,,,,,,,333',
',,,,,333,,333,,333,333,,333,333,333,,333,333,,,,,333,333,,,333,,,333',
'333,,,,,,,333,,,,,,333,,,,333,333,,333,333,,,,333,333,333,333,333,333',
'333,111,111,333,,111,111,,111,,,,,,,,,,,,,,,,,111,,,,,,111,,111,,111',
'111,,111,111,111,,111,111,,,,,111,111,,,111,,,111,111,,,,,,,111,,,,',
',111,,,,111,111,,111,111,,,,111,111,111,111,111,111,111,334,334,111',
',334,334,,334,,,,,,,,,,,,,,,,,334,,,,,,334,,334,,334,334,,334,334,334',
',334,334,334,334,,,334,334,,,334,,,334,334,,,,,,,334,,,,,,334,,,,334',
'334,,334,334,,,,334,334,334,334,334,334,334,257,257,334,,257,257,,257',
',,,,,,,,,,,,,,,,257,,,,,,257,,257,,257,257,,257,257,257,,257,257,,,',
',257,257,,,257,,,257,257,,,,,,,257,,,,,,257,,,,257,257,,257,257,,,,257',
'257,257,257,257,257,257,162,162,257,,162,162,,162,162,,,,,,,,,,,,,,',
',162,,,,,,162,,162,,162,162,,162,162,162,,162,162,162,162,,,162,162',
',,162,,,162,162,,,,,,,162,,,,,,162,,,,162,162,,162,162,,,,162,162,162',
'162,162,162,162,256,256,162,,256,256,,256,256,,,,,,,,,,,,,,,,256,,,',
',,256,,256,,256,256,,256,256,256,,256,256,256,256,,,256,256,,,256,,',
'256,256,,,,,,,256,,,,,,256,,,,256,256,,256,256,,,,256,256,256,256,256',
'256,256,255,255,256,,255,255,,255,255,,,,,,,,,,,,,,,,255,,,,,,255,,255',
',255,255,,255,255,255,,255,255,255,255,,,255,255,,,255,,,255,255,,,',
',,,255,,,,,,255,,,,255,255,,255,255,,,,255,255,255,255,255,255,255,292',
'292,255,,292,292,,292,,,,,,,,,,,,,,,,,292,,,,,,292,,292,,292,292,,292',
'292,292,,292,292,,,,,292,292,,,292,,,292,292,,,,,,,292,,,,,,292,,,,292',
'292,,292,292,,,,292,292,292,292,292,292,292,159,159,292,,159,159,,159',
',,,,,,,,,,,,,,,,159,,,,,,159,,159,,159,159,,159,159,159,,159,159,159',
'159,,,159,159,,,159,,,159,159,,,,,,,159,,,,,,159,,,,159,159,,159,159',
',,,159,159,159,159,159,159,159,268,268,159,,268,268,,268,,,,,,,,,,,',
',,,,,268,,,,,,268,,268,,268,268,,268,268,268,,268,268,268,268,,,268',
'268,,,268,,,268,268,,,,,,,268,,,,,,268,,,,268,268,,268,268,,,,268,268',
'268,268,268,268,268,129,129,268,,129,129,,129,,,,,,,,,,,,,,,,,129,129',
',,,,129,,129,,129,129,,129,129,129,,129,129,129,129,,,129,129,,,129',
',,129,129,,,,,,,129,,,,,,129,,,,129,129,,129,129,,,,129,129,129,129',
'129,129,129,290,290,129,,290,290,,290,,,,,,,,,,,,,,,,,290,,,,,,290,',
'290,,290,290,,290,290,290,,290,290,,,,,290,290,,,290,,,290,290,,,,,',
',290,,,,,,290,,,,290,290,,290,290,,,,290,290,290,290,290,290,290,289',
'289,290,,289,289,,289,,,,,,,,,,,,,,,,,289,,,,,,289,,289,,289,289,,289',
'289,289,,289,289,,,,,289,289,,,289,,,289,289,,,,,,,289,,,,,,289,,,,289',
'289,,289,289,,,,289,289,289,289,289,289,289,288,288,289,,288,288,,288',
',,,,,,,,,,,,,,,,288,,,,,,288,,288,,288,288,,288,288,288,,288,288,,,',
',288,288,,,288,,,288,288,,,,,,,288,,,,,,288,,,,288,288,,288,288,,,,288',
'288,288,288,288,288,288,273,273,288,,273,273,,273,,,,,,,,,,,,,,,,,273',
',,,,,273,,273,,273,273,,273,273,273,,273,273,273,273,,,273,273,,,273',
',,273,273,,,,,,,273,,,,,,273,,,,273,273,,273,273,,,,273,273,273,273',
'273,273,273,349,349,273,,349,349,,349,,,,,,,,,,,,,,,,,349,,,,,,349,',
'349,,349,349,,349,349,349,,349,349,349,349,,,349,349,,,349,,,349,349',
',,,,,,349,,,,,,349,,,,349,349,,349,349,,,,349,349,349,349,349,349,349',
'241,241,349,,241,241,,241,241,,,,,,,,,,,,,,,,241,,,,,,241,,241,,241',
'241,,241,241,241,,241,241,241,241,,,241,241,,,241,,,241,241,,,,,,,241',
',,,,,241,,,,241,241,,241,241,,,,241,241,241,241,241,241,241,343,343',
'241,,343,343,,343,,,,,,,,,,,,,,,,,343,,,,,,343,,343,,343,343,,343,343',
'343,,343,343,343,343,,,343,343,,,343,,,343,343,,,,,,,343,,,,,,343,,',
',343,343,,343,343,,,,343,343,343,343,343,343,343,341,341,343,,341,341',
',341,341,,,,,,,,,,,,,,,,341,,,,,,341,,341,,341,341,,341,341,341,,341',
'341,,,,,341,341,,,341,,,341,341,,,,,,,341,,,,,,341,,47,47,341,341,47',
'341,341,,161,,341,341,341,341,341,341,341,,,341,161,161,161,,161,,161',
'161,,161,161,161,161,,,,,,,47,,,47,,,,,,161,,,,161,161,,,161,161,161',
'161,161,161,47,161,161,,,,,,161,,47,47,133,,133,,,,,161,161,,,,133,133',
'133,,133,,133,133,161,133,133,133,133,,,,,,,,,,,,,,,,133,,,,133,133',
',,133,133,133,133,133,133,234,133,133,,,,,,133,,,,234,234,234,234,234',
',234,234,,234,234,234,234,,260,260,,,260,,133,,,,,,,,234,,,,234,234',
',,234,234,234,234,234,234,,234,234,132,,132,,,234,,,260,,,260,132,132',
'132,,132,,132,132,,132,132,132,132,,190,190,,234,190,260,,,,,,,,,132',
'260,260,,132,132,,,132,132,132,132,132,132,,132,132,130,,130,,,132,',
',190,,,190,130,130,130,,130,,130,130,,130,130,130,130,,,,,132,,190,',
',,,,,,,130,190,190,,130,130,,362,130,130,130,130,130,130,,130,130,,',
'362,362,362,130,362,,362,362,,362,362,362,362,,,,,,,,,,,,,,,130,362',
',,,362,362,,363,362,362,362,362,362,362,,362,362,,,363,363,363,362,363',
',363,363,,363,363,363,363,,,,,,,,,,,,,,,362,363,,,,363,363,,364,363',
'363,363,363,363,363,,363,363,,,364,364,364,363,364,,364,364,,364,364',
'364,364,,,,,,,,,,,,,,,363,364,,,,364,364,,365,364,364,364,364,364,364',
',364,364,,,365,365,365,364,365,,365,365,,365,365,365,365,,,,,,,,,,,',
',,,364,365,,,,365,365,,366,365,365,365,365,365,365,,365,365,,,366,366',
'366,365,366,,366,366,,366,366,366,366,,,,,,,,,,,,,,,365,366,,,,366,366',
',229,366,366,366,366,366,366,,366,366,,,229,229,229,366,229,,229,229',
',229,229,229,229,,,,,,,,,,,,,,,366,229,,,,229,229,,,229,229,229,229',
'229,229,173,229,229,,,,,,229,,,,173,173,173,173,173,,173,173,,173,173',
'173,173,,,,,,,,229,,,,,,,,173,,,,173,173,,382,173,173,173,173,173,173',
',173,173,,,382,382,382,173,382,213,382,382,,382,382,382,382,,,,,,,213',
',213,,213,213,,,173,382,,,,382,382,,,382,382,382,382,382,382,,382,382',
'213,,,,,382,,,213,213,213,213,213,213,201,213,213,,,,,,213,,,,201,201',
'201,382,201,214,201,201,,201,201,201,201,,,,,,,214,213,214,,214,214',
',,,201,,,,201,201,,,201,201,201,201,201,201,,201,201,214,,,,,201,,,214',
'214,214,214,214,214,221,214,214,,,221,,,214,,,,221,221,221,201,221,216',
'221,221,,221,221,221,221,,,,,,216,216,214,216,,216,216,,216,,221,,,',
'221,221,,,221,221,221,221,221,221,,221,221,216,,,,,221,,,216,216,216',
'216,216,216,9,216,216,,,,,,216,,,,9,9,9,221,9,215,9,9,,9,9,9,9,,,,,',
'215,215,216,215,,215,215,,215,,9,,,,9,9,,,9,9,9,9,9,9,,9,9,215,,,,,9',
',,215,215,215,215,215,215,220,215,215,,,,,,215,,,,220,220,220,9,220',
',220,220,,220,220,220,220,,,,,,,,215,,,,,,,,220,,,,,220,,219,220,220',
'220,220,220,220,,220,220,,,219,219,219,220,219,218,219,219,,219,219',
'219,219,,,,,,218,218,,218,,218,218,,218,220,219,,,,,,,,219,219,219,219',
'219,219,,219,219,218,,346,346,,219,346,217,218,218,218,218,218,218,',
'218,218,,,,217,217,218,217,,217,217,,217,219,,,,,,,,,,,,346,,,346,,218',
'217,,,,,,,,217,217,217,217,217,217,,217,217,346,,,,,217,,,,,346,346',
'287,287,287,287,,287,287,287,,287,,287,287,,,,,217,,287,287,287,,,,287',
',,,,,,,,,,,287,287,,,,,,,,,,,,287,287,287,287,287,287,287,228,228,228',
'228,,228,228,228,,228,,228,228,,,,,,,228,228,228,,,,228,,,,,,,,,,,,228',
'228,,,,,,,,,,,,228,228,228,228,228,228,228,320,320,320,320,,320,320',
'320,,320,,320,320,,,,,,,320,320,320,,,,320,,,,,,,,,,,,320,320,,,,,,',
',,,,,320,320,320,320,320,320,320,285,285,285,285,,285,285,285,,285,',
'285,285,,,,,,,285,285,285,,,,285,,,,,,,,,,,,285,285,,,,,,,,,,,,285,285',
'285,285,285,285,285' ]
        racc_action_check = arr = ::Array.new(8782, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   311,   nil,   nil,   172,   293,   nil,   649,   292,  8296,
   607,   694,   281,   nil,   nil,   868,   955,  1042,  1129,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   226,   255,  1390,  1477,  1564,   537,  7463,   495,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1912,  1999,  2086,   nil,
   nil,   nil,   nil,   nil,  2173,   nil,   199,   203,   nil,  2434,
   nil,   nil,   273,  2608,   259,  2782,  2869,  2956,  3043,  3130,
  3217,  3304,  3391,  3478,  3565,  3652,  3739,  3826,  3913,  4000,
  4087,  4174,  4261,  4348,  4435,  4522,  4609,  4696,  4783,  4870,
  4957,  5044,  5131,  5218,  5305,   226,   242,  5566,  5653,   235,
   234,  5914,   215,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   953,   412,   872,   959,   213,   nil,   228,    82,  6697,
  7700,   nil,  7643,  7532,   204,   213,   nil,   203,   nil,   nil,
   nil,   nil,   nil,   nil,   193,   nil,   197,   nil,   194,   nil,
     5,   nil,   nil,   188,   nil,   152,   nil,   nil,    97,  6523,
   343,  7466,  6175,   nil,   182,   nil,   nil,   nil,   nil,   185,
   184,   183,   179,  8036,   173,  1825,     9,     4,     2,   781,
   520,   346,   nil,   nil,    -1,    55,    -4,    24,   407,    20,
  7674,   321,    62,    -2,    -9,   nil,   nil,   nil,   nil,   nil,
   nil,  8154,    89,   785,   524,   350,     2,   263,   698,   779,
   866,    89,   176,  8100,  8171,  8313,  8242,  8478,  8431,  8414,
  8367,  8225,   nil,   nil,  1651,   172,    93,   nil,  8579,  7982,
   113,   nil,   130,   108,  7586,   nil,   105,   nil,   411,   nil,
   nil,  7219,   nil,   124,   nil,   nil,   nil,   nil,   nil,   107,
    54,   -24,    72,    -7,   nil,  6349,  6262,  6088,    61,    -9,
  7617,   -28,   168,  2347,    32,    58,   nil,  2521,  6610,   nil,
   nil,   nil,   nil,  7045,   nil,   nil,   nil,   nil,    88,   nil,
   nil,   nil,   nil,   101,   110,  8693,   123,  8522,  6958,  6871,
  6784,   nil,  6436,  2695,   152,   nil,   139,   nil,   -11,   nil,
   nil,   nil,   nil,   168,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   174,  1738,
  8636,   178,   nil,   531,   nil,   176,   180,   nil,   120,    91,
  5740,   nil,   nil,  5827,  6001,   nil,   186,   -16,   193,   172,
     9,  7393,   nil,  7306,   211,   nil,  8478,   nil,   nil,  7132,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   156,    24,   222,
   nil,   nil,  7747,  7794,  7841,  7888,  7935,   238,  5479,   181,
   243,   nil,   nil,   251,  5392,   nil,   nil,   nil,   244,   nil,
   nil,   nil,  8083,    85,    97,   nil,  2260,   267,   244,   nil,
   269,   270,   nil,   nil,   270,   nil,   nil,  1303,   nil,   272,
   nil,   nil,   273,   250,   nil,   nil,   nil,   nil,   nil,   284,
   nil,   nil,   nil,   nil,  1216,   nil,   433,   259,   nil,   297,
   nil,   nil,   nil,    85,   nil,   303,   nil,   304,   nil,   307,
   nil,   nil,   nil,   277,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -253,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -253,  -253,  -253,   -33,   -34,  -253,  -253,  -253,  -253,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -87,   -91,  -253,  -253,  -253,  -253,  -253,  -253,  -184,
  -185,  -186,  -187,  -188,  -189,  -190,  -253,  -253,  -253,  -201,
  -202,  -203,  -204,  -205,  -253,  -207,  -253,  -220,  -223,  -253,
  -228,  -229,  -253,  -253,    -7,  -253,  -253,  -253,  -253,  -253,
  -253,  -253,  -253,  -127,  -253,  -253,  -253,  -253,  -253,  -253,
  -253,  -253,  -253,  -253,  -253,  -253,  -253,  -253,  -253,  -253,
  -253,  -253,  -253,  -253,  -253,  -253,  -122,  -252,  -252,   -22,
   -23,  -253,  -252,  -140,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,   -46,  -253,   -47,   -54,  -253,   -88,  -253,  -253,  -253,
  -253,   -98,  -253,  -253,  -252,  -230,  -149,  -151,  -152,  -153,
  -154,  -155,  -157,  -158,  -252,   -14,  -230,  -192,  -230,  -194,
  -253,  -197,  -198,  -253,  -206,  -253,  -211,  -214,  -253,  -218,
  -253,  -253,  -253,   438,    -6,    -9,   -11,   -12,   -13,   -17,
   -18,   -19,   -20,  -253,  -230,  -253,   -80,   -81,   -82,  -241,
  -247,  -235,  -128,  -131,  -188,  -189,  -190,  -253,  -238,  -236,
  -244,  -250,  -185,  -186,  -187,  -234,  -239,  -240,  -242,  -243,
  -245,   -59,  -253,   -36,   -37,   -38,   -39,   -40,   -41,   -42,
   -43,   -44,   -45,   -48,   -49,   -50,   -51,   -52,   -53,   -55,
   -56,  -253,   -57,  -116,  -253,  -230,   -84,   -92,  -127,  -126,
  -253,  -125,  -253,  -232,  -253,   -28,  -252,  -169,  -253,   -58,
   -93,  -253,   -96,  -230,  -172,  -174,  -175,  -176,  -177,  -179,
  -253,  -253,  -182,  -253,   -90,  -253,  -253,  -253,  -253,  -252,
  -231,  -253,  -253,  -231,  -253,  -253,  -195,  -253,  -253,  -208,
  -209,  -210,  -212,  -253,  -215,  -216,  -217,  -219,  -230,  -221,
  -224,  -226,  -227,    -8,  -253,  -127,  -253,  -231,  -253,  -253,
  -253,   -35,  -253,  -253,  -230,  -118,  -253,   -86,  -230,  -130,
  -132,  -133,  -134,  -253,  -235,  -236,  -237,  -238,  -241,  -244,
  -246,  -247,  -248,  -249,  -250,  -251,  -123,  -124,  -253,  -233,
  -127,  -253,  -143,  -253,  -170,  -230,  -253,   -95,  -253,  -231,
  -253,  -180,  -181,  -253,  -253,   -89,  -253,  -101,  -253,  -107,
  -253,  -253,  -111,  -252,  -253,  -159,  -253,  -150,  -156,  -252,
   -15,  -191,  -193,  -196,  -199,  -200,  -213,  -253,  -253,  -230,
   -26,  -129,  -137,  -135,  -136,   -60,  -120,  -253,  -231,   -83,
  -253,   -25,   -29,  -230,  -252,  -144,  -145,  -146,  -253,   -94,
   -97,  -173,  -178,  -253,  -101,  -100,  -253,  -253,  -107,  -106,
  -253,  -253,  -110,  -112,  -253,  -141,  -142,  -253,  -160,  -253,
  -222,  -225,  -253,   -30,  -117,  -119,   -85,  -121,   -27,  -253,
  -171,  -183,   -99,  -102,  -253,  -105,  -253,  -252,  -138,  -253,
  -148,  -161,   -24,   -31,  -139,  -253,  -104,  -253,  -109,  -253,
  -114,  -115,  -147,  -232,  -103,  -108,  -113,   -32 ]

racc_goto_table = [
     2,   121,   123,   124,   126,   233,   223,   138,   202,   140,
   154,   134,   259,   144,   252,   280,   231,   231,   318,   347,
   342,   243,   429,   264,   174,   265,    74,   394,   341,   130,
   132,   133,   294,   399,   236,   230,   232,   413,   361,   240,
   222,   372,   321,   375,   109,   110,   252,   344,   146,   148,
   389,   286,   125,   278,   385,   161,   258,   402,   409,   348,
   381,   332,   331,   354,   274,   275,   262,     3,   272,   173,
   201,   203,   204,   205,   206,   207,   208,   209,   210,   211,
   212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
   145,   145,   153,   229,   229,   164,   225,   234,   156,   415,
   273,   412,   296,   271,   393,   398,   157,   159,   276,   165,
   166,   167,   168,   169,   170,   171,   172,     1,   nil,   nil,
   328,   253,   nil,   nil,   252,   nil,   nil,   295,   nil,   nil,
   nil,   325,   nil,   nil,   nil,   nil,   nil,   nil,   145,   nil,
   nil,   nil,   nil,   nil,   nil,   322,   nil,   nil,   nil,   nil,
   138,   nil,   140,   134,   nil,   357,   144,   nil,   nil,   277,
   nil,   123,   284,   145,   nil,   130,   132,   133,   345,   298,
   nil,   367,   nil,   nil,   nil,   370,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   297,
   nil,   nil,   nil,   nil,   nil,   nil,   283,   nil,   nil,   nil,
   nil,   nil,   378,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   221,   nil,   401,   nil,   nil,   252,   nil,   nil,   437,   356,
   138,   nil,   140,   nil,   nil,   nil,   359,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   403,   nil,   nil,   nil,
   nil,   326,   nil,   201,   nil,   nil,   nil,   nil,   nil,   nil,
   408,   nil,   396,   nil,   nil,   336,   338,   383,   396,   nil,
   nil,   373,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   405,   nil,   nil,   362,   363,   364,   nil,   365,   366,
   nil,   nil,   nil,   396,   nil,   nil,   nil,   nil,   376,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   350,   nil,   nil,
   nil,   153,   355,   nil,   nil,   234,   138,   156,   140,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   382,   433,   nil,   201,
   nil,   nil,   nil,   nil,   nil,   nil,   430,   201,   nil,   nil,
   nil,   nil,   406,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   221,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   350,   nil,
   nil,   nil,   130,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   419,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   234,
   nil,   nil,   nil,   nil,   425,   nil,   427,   431 ]

racc_goto_check = [
     2,    10,    10,    10,    38,    13,    51,    36,    19,    35,
    81,    58,    15,    58,    37,    89,    50,    50,    14,    66,
    48,    43,    49,    15,    11,    15,     5,    60,    47,    10,
    10,    10,    52,    60,    59,    54,    54,    44,    55,    42,
    20,    16,    62,    63,     9,     9,    37,    65,     8,     8,
    46,    15,     6,    43,    45,    10,    59,    12,    60,    68,
    69,    70,    72,    76,    77,    78,    59,     3,    82,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
     6,     6,     6,    10,    10,     5,     8,    10,     6,    46,
    83,    45,    15,    85,    48,    66,    86,    87,    88,     6,
     6,     6,     6,     9,     9,     9,     9,     1,   nil,   nil,
    15,     8,   nil,   nil,    37,   nil,   nil,    51,   nil,   nil,
   nil,    43,   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,
   nil,   nil,   nil,   nil,   nil,    50,   nil,   nil,   nil,   nil,
    36,   nil,    35,    58,   nil,    15,    58,   nil,   nil,     2,
   nil,    10,     2,     6,   nil,    10,    10,    10,    50,    11,
   nil,    15,   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    38,
   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,   nil,
   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,    89,   nil,   nil,    37,   nil,   nil,    14,    81,
    36,   nil,    35,   nil,   nil,   nil,    11,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,
   nil,     2,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,
    15,   nil,    50,   nil,   nil,     2,     2,    19,    50,   nil,
   nil,    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    51,   nil,   nil,    10,    10,    10,   nil,    10,    10,
   nil,   nil,   nil,    50,   nil,   nil,   nil,   nil,    58,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,
   nil,     6,     6,   nil,   nil,    10,    36,     6,    35,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    10,    13,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,    50,    10,   nil,   nil,
   nil,   nil,    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   117,     0,    67,   nil,    22,    34,   nil,    -8,    34,
   -14,   -59,  -302,  -106,  -215,  -123,  -278,   nil,   nil,   -76,
   -63,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -38,   -40,  -114,   -37,   nil,
   nil,   nil,   -88,  -107,  -349,  -283,  -289,  -229,  -237,  -395,
   -91,   -97,  -192,   nil,   -72,  -249,   nil,   nil,   -35,   -78,
  -316,   nil,  -194,  -280,   nil,  -212,  -241,   nil,  -202,  -269,
  -190,   nil,  -188,   nil,   nil,   nil,  -204,   -94,   -93,   nil,
   nil,   -54,   -87,   -55,   nil,   -52,    40,    40,   -51,  -146 ]

racc_goto_default = [
   nil,   nil,   395,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   235,    13,    14,   340,
   nil,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,   nil,    41,
    42,   127,   nil,   nil,   131,   nil,   nil,   nil,   nil,   nil,
   237,   nil,   nil,   106,   nil,   182,   187,   183,   113,   nil,
   nil,   112,   nil,   nil,   135,   nil,   136,   137,   141,   244,
   245,   246,   247,   248,   251,   150,   152,    59,    60,    61,
    64,   nil,   nil,   nil,   155,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 95, :_reduce_1,
  1, 95, :_reduce_2,
  0, 95, :_reduce_3,
  1, 96, :_reduce_4,
  1, 98, :_reduce_5,
  3, 98, :_reduce_6,
  2, 98, :_reduce_7,
  1, 99, :_reduce_8,
  3, 99, :_reduce_9,
  1, 100, :_reduce_none,
  3, 100, :_reduce_11,
  3, 100, :_reduce_12,
  3, 100, :_reduce_13,
  1, 102, :_reduce_14,
  3, 102, :_reduce_15,
  1, 101, :_reduce_none,
  3, 101, :_reduce_17,
  3, 101, :_reduce_18,
  3, 101, :_reduce_19,
  3, 101, :_reduce_20,
  1, 103, :_reduce_none,
  2, 103, :_reduce_22,
  2, 103, :_reduce_23,
  7, 103, :_reduce_24,
  5, 103, :_reduce_25,
  5, 103, :_reduce_26,
  4, 110, :_reduce_27,
  1, 107, :_reduce_28,
  3, 107, :_reduce_29,
  1, 106, :_reduce_30,
  2, 106, :_reduce_31,
  4, 106, :_reduce_32,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  4, 104, :_reduce_35,
  3, 104, :_reduce_36,
  3, 104, :_reduce_37,
  3, 104, :_reduce_38,
  3, 104, :_reduce_39,
  3, 104, :_reduce_40,
  3, 104, :_reduce_41,
  3, 104, :_reduce_42,
  3, 104, :_reduce_43,
  3, 104, :_reduce_44,
  3, 104, :_reduce_45,
  2, 104, :_reduce_46,
  2, 104, :_reduce_47,
  3, 104, :_reduce_48,
  3, 104, :_reduce_49,
  3, 104, :_reduce_50,
  3, 104, :_reduce_51,
  3, 104, :_reduce_52,
  3, 104, :_reduce_53,
  2, 104, :_reduce_54,
  3, 104, :_reduce_55,
  3, 104, :_reduce_56,
  3, 104, :_reduce_57,
  3, 104, :_reduce_58,
  1, 113, :_reduce_59,
  3, 113, :_reduce_60,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_78,
  1, 111, :_reduce_79,
  1, 111, :_reduce_80,
  1, 111, :_reduce_81,
  1, 111, :_reduce_82,
  5, 112, :_reduce_83,
  3, 112, :_reduce_84,
  6, 112, :_reduce_85,
  4, 112, :_reduce_86,
  1, 116, :_reduce_87,
  2, 116, :_reduce_88,
  4, 133, :_reduce_89,
  3, 133, :_reduce_90,
  1, 133, :_reduce_91,
  3, 134, :_reduce_92,
  2, 132, :_reduce_93,
  3, 136, :_reduce_94,
  2, 136, :_reduce_95,
  2, 135, :_reduce_96,
  4, 135, :_reduce_97,
  2, 119, :_reduce_98,
  5, 138, :_reduce_99,
  4, 138, :_reduce_100,
  0, 139, :_reduce_none,
  2, 139, :_reduce_102,
  4, 139, :_reduce_103,
  3, 139, :_reduce_104,
  6, 120, :_reduce_105,
  5, 120, :_reduce_106,
  0, 140, :_reduce_none,
  4, 140, :_reduce_108,
  3, 140, :_reduce_109,
  5, 118, :_reduce_110,
  1, 141, :_reduce_111,
  2, 141, :_reduce_112,
  5, 142, :_reduce_113,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  1, 114, :_reduce_none,
  4, 114, :_reduce_117,
  1, 146, :_reduce_118,
  3, 146, :_reduce_119,
  3, 145, :_reduce_120,
  6, 117, :_reduce_121,
  2, 117, :_reduce_122,
  3, 147, :_reduce_123,
  3, 147, :_reduce_124,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  0, 105, :_reduce_127,
  1, 105, :_reduce_128,
  3, 105, :_reduce_129,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  3, 149, :_reduce_135,
  3, 149, :_reduce_136,
  3, 149, :_reduce_137,
  6, 121, :_reduce_138,
  7, 122, :_reduce_139,
  1, 155, :_reduce_140,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 156, :_reduce_none,
  2, 156, :_reduce_144,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  7, 123, :_reduce_147,
  6, 123, :_reduce_148,
  1, 158, :_reduce_149,
  3, 158, :_reduce_150,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_153,
  1, 160, :_reduce_none,
  1, 161, :_reduce_155,
  3, 161, :_reduce_156,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 159, :_reduce_none,
  2, 159, :_reduce_160,
  6, 125, :_reduce_161,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_168,
  1, 153, :_reduce_169,
  2, 153, :_reduce_170,
  4, 153, :_reduce_171,
  1, 137, :_reduce_172,
  3, 137, :_reduce_173,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  3, 166, :_reduce_178,
  1, 166, :_reduce_179,
  2, 167, :_reduce_180,
  2, 165, :_reduce_181,
  1, 168, :_reduce_182,
  4, 168, :_reduce_183,
  1, 115, :_reduce_184,
  1, 126, :_reduce_185,
  1, 126, :_reduce_186,
  1, 126, :_reduce_187,
  1, 126, :_reduce_188,
  1, 126, :_reduce_189,
  1, 126, :_reduce_190,
  4, 127, :_reduce_191,
  2, 127, :_reduce_192,
  4, 127, :_reduce_193,
  2, 127, :_reduce_194,
  3, 128, :_reduce_195,
  4, 128, :_reduce_196,
  2, 128, :_reduce_197,
  1, 169, :_reduce_198,
  3, 169, :_reduce_199,
  3, 170, :_reduce_200,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 171, :_reduce_204,
  1, 171, :_reduce_205,
  2, 172, :_reduce_206,
  1, 174, :_reduce_207,
  1, 176, :_reduce_208,
  1, 177, :_reduce_209,
  2, 175, :_reduce_210,
  1, 178, :_reduce_211,
  1, 179, :_reduce_212,
  2, 179, :_reduce_213,
  2, 173, :_reduce_214,
  2, 180, :_reduce_215,
  2, 180, :_reduce_216,
  3, 97, :_reduce_217,
  0, 182, :_reduce_none,
  1, 182, :_reduce_none,
  0, 181, :_reduce_220,
  2, 181, :_reduce_221,
  4, 181, :_reduce_222,
  1, 124, :_reduce_223,
  3, 124, :_reduce_224,
  5, 124, :_reduce_225,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 131, :_reduce_228,
  1, 129, :_reduce_229,
  0, 109, :_reduce_none,
  1, 109, :_reduce_231,
  0, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 144, :_reduce_252 ]

racc_reduce_n = 253

racc_shift_n = 438

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :APPLICATION_R => 86,
  :CONSUMES_R => 87,
  :PRODUCES_R => 88,
  :LOW => 89,
  :HIGH => 90,
  :LISTSTART => 91,
  :SPLAT => 92,
  :MODULO => 93 }

racc_nt_base = 94

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "APPLICATION_R",
  "CONSUMES_R",
  "PRODUCES_R",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "call_function_expression",
  "expressions",
  "selector_entries",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "function_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "optional_statements",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 73)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 89)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 128)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 139)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 146)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 155)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 177)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 180)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_35(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_36(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_37(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_38(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_39(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_40(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_41(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_42(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_43(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_44(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_45(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_46(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_47(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_48(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_49(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_50(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_51(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_52(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_53(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_54(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_55(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_56(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_57(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_58(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 229)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 230)
  def _reduce_60(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

module_eval(<<'.,.,', 'egrammar.ra', 250)
  def _reduce_78(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 251)
  def _reduce_79(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 252)
  def _reduce_80(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 253)
  def _reduce_81(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 254)
  def _reduce_82(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 263)
  def _reduce_83(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 267)
  def _reduce_84(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 271)
  def _reduce_85(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 276)
  def _reduce_86(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 284)
  def _reduce_87(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 285)
  def _reduce_88(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 288)
  def _reduce_89(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 289)
  def _reduce_90(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 290)
  def _reduce_91(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 294)
  def _reduce_92(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 302)
  def _reduce_93(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 307)
  def _reduce_94(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 308)
  def _reduce_95(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 312)
  def _reduce_96(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 313)
  def _reduce_97(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 321)
  def _reduce_98(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 328)
  def _reduce_99(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 332)
  def _reduce_100(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 101 omitted

module_eval(<<'.,.,', 'egrammar.ra', 340)
  def _reduce_102(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 344)
  def _reduce_103(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 348)
  def _reduce_104(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 355)
  def _reduce_105(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 359)
  def _reduce_106(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 107 omitted

module_eval(<<'.,.,', 'egrammar.ra', 369)
  def _reduce_108(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 373)
  def _reduce_109(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 380)
  def _reduce_110(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 386)
  def _reduce_111(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 387)
  def _reduce_112(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 392)
  def _reduce_113(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

module_eval(<<'.,.,', 'egrammar.ra', 408)
  def _reduce_117(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 413)
  def _reduce_118(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 414)
  def _reduce_119(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 419)
  def _reduce_120(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 429)
  def _reduce_121(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_122(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_123(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 439)
  def _reduce_124(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 125 omitted

# reduce 126 omitted

module_eval(<<'.,.,', 'egrammar.ra', 448)
  def _reduce_127(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 449)
  def _reduce_128(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 450)
  def _reduce_129(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'egrammar.ra', 469)
  def _reduce_135(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 473)
  def _reduce_136(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 477)
  def _reduce_137(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 486)
  def _reduce_138(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 500)
  def _reduce_139(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 510)
  def _reduce_140(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'egrammar.ra', 519)
  def _reduce_144(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 145 omitted

# reduce 146 omitted

module_eval(<<'.,.,', 'egrammar.ra', 536)
  def _reduce_147(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 540)
  def _reduce_148(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 550)
  def _reduce_149(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 551)
  def _reduce_150(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 151 omitted

# reduce 152 omitted

module_eval(<<'.,.,', 'egrammar.ra', 558)
  def _reduce_153(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 154 omitted

module_eval(<<'.,.,', 'egrammar.ra', 562)
  def _reduce_155(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 563)
  def _reduce_156(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

module_eval(<<'.,.,', 'egrammar.ra', 572)
  def _reduce_160(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 578)
  def _reduce_161(val, _values, result)
          result = add_definition(Factory.FUNCTION(val[1][:value], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

module_eval(<<'.,.,', 'egrammar.ra', 592)
  def _reduce_168(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_169(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 597)
  def _reduce_170(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 598)
  def _reduce_171(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 602)
  def _reduce_172(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 603)
  def _reduce_173(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_178(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_179(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 619)
  def _reduce_180(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_181(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 625)
  def _reduce_182(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_183(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 631)
  def _reduce_184(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 636)
  def _reduce_185(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 637)
  def _reduce_186(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_187(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_188(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_189(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 641)
  def _reduce_190(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_191(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_192(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_193(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_194(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_195(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_196(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_197(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_198(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_199(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_200(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_204(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_205(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 673)
  def _reduce_206(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_207(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_208(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_209(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_210(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_211(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_212(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_213(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 685)
  def _reduce_214(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 688)
  def _reduce_215(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_216(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 692)
  def _reduce_217(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 218 omitted

# reduce 219 omitted

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_220(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 700)
  def _reduce_221(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 701)
  def _reduce_222(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 704)
  def _reduce_223(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 705)
  def _reduce_224(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_225(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 226 omitted

# reduce 227 omitted

module_eval(<<'.,.,', 'egrammar.ra', 712)
  def _reduce_228(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 715)
  def _reduce_229(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 230 omitted

module_eval(<<'.,.,', 'egrammar.ra', 721)
  def _reduce_231(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

# reduce 249 omitted

# reduce 250 omitted

# reduce 251 omitted

module_eval(<<'.,.,', 'egrammar.ra', 748)
  def _reduce_252(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
