#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 748)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'57,59,275,-130,51,265,53,-216,79,-132,-225,126,313,126,79,125,265,125',
'363,298,224,224,102,14,106,353,101,360,102,41,106,48,101,50,45,235,49',
'69,65,238,43,68,46,47,276,-130,66,13,105,-216,67,-132,-225,12,105,258',
'57,59,260,261,51,70,53,395,240,224,247,42,245,248,80,64,60,244,62,63',
'61,328,243,14,231,264,52,242,126,41,265,48,125,50,45,126,49,69,65,125',
'43,68,46,47,221,316,66,13,57,59,67,235,126,12,57,59,125,331,51,126,53',
'70,79,125,348,272,347,42,348,333,347,64,60,220,62,63,102,14,106,335',
'101,74,52,41,297,48,135,50,45,133,49,69,65,72,43,68,46,47,296,122,66',
'13,105,274,67,57,59,12,114,70,57,59,250,249,51,70,53,393,340,341,60',
'42,342,224,79,64,60,126,62,63,211,125,345,14,241,349,52,351,102,41,106',
'48,101,50,45,290,49,69,65,187,43,68,46,47,272,274,66,13,272,359,67,296',
'289,12,105,296,57,59,74,154,51,70,53,391,151,149,370,42,312,81,82,64',
'60,288,62,63,80,372,274,14,274,127,52,272,375,41,114,48,115,50,45,315',
'49,69,65,114,43,68,46,47,379,351,66,13,381,382,67,383,384,12,57,59,385',
'111,51,387,53,70,75,77,76,78,388,42,389,319,74,64,60,71,62,63,396,14',
'397,57,59,398,52,41,399,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,',
',12,57,59,,,51,,53,70,,135,,,133,42,,,,64,60,,62,63,,14,,57,59,,52,41',
',48,70,50,108,,49,69,65,,43,68,,60,,,66,13,,,67,,,12,57,59,,,51,,53',
'70,,135,,,133,42,,,,64,60,,62,63,,14,,57,59,,52,41,,48,70,50,108,,49',
'69,65,,43,68,,60,,,66,13,,,67,,,12,57,59,,,51,,53,70,79,135,,,133,42',
',,,64,60,,62,63,102,14,106,,101,,52,41,,48,70,50,108,,49,69,65,,43,68',
',60,,,66,13,105,,67,,,12,57,59,,,51,,53,70,79,,,,,42,,,80,64,60,,62',
'63,102,14,106,,101,,52,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66,13',
'105,,67,,,12,57,59,,,51,,53,70,79,81,82,,,42,,,80,64,60,,62,63,102,14',
'106,,101,,52,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,105,,67,,,12',
'57,59,,,51,,53,70,79,81,82,,,42,,,80,64,60,,62,63,102,14,106,,101,,52',
'41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,105,,67,,,12,57,59,,,51,,53',
'70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,108,,49,69,65,,43,68',
',,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,',
',,52,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51',
',53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,108,,49,69,65,',
'43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63',
',14,,,,,52,41,,48,,50,121,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59',
',,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,108,,49,69',
'65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62',
'63,,14,,,,,52,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57',
'59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,108,,49',
'69,65,,43,68,,,,,66,13,,,67,,,12,,,57,59,,,51,70,53,294,,,,42,,,,64',
'60,,62,63,,,,14,,,52,,,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66,13',
',,67,,,12,57,59,,,51,138,53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41',
',48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,140,53,70',
',,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,108,,49,69,65,,43,68,',
',,,66,13,,,67,,,12,,,57,59,,,51,70,53,143,,,,42,,,,64,60,,62,63,,,,14',
',,52,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51',
',53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,108,,49,69,65,',
'43,68,,,,,66,13,,,67,,,12,,,57,59,,,51,70,53,300,,,,42,,,,64,60,,62',
'63,,,,14,,,52,,,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,,67,,',
'12,,,57,59,,,51,70,53,143,,,,42,,,,64,60,,62,63,,,,14,,,52,,,41,,48',
',50,45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57,59,,,51,,153,70,',
',,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,108,,49,69,65,,43,68,,',
',,66,13,,,67,,,12,,,57,59,,,51,70,53,369,,,,42,,,,64,60,,62,63,,,,14',
',,52,,,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57,59',
',,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,45,,49,69',
'65,,43,68,46,47,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60',
',62,63,,14,,,,,52,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,,67',
',,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50',
'45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42',
',,,64,60,,62,63,,14,,,,,52,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66',
'13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41',
',48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57,59,,,51,,53,70',
',,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,45,,49,69,65,,43,68,46',
'47,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,',
',,,52,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57,59,',
',51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,108,,49,69',
'65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62',
'63,,14,,,,,52,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57',
'59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,108,,49',
'69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60',
',62,63,,14,,,,,52,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12',
'57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,108',
',49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64',
'60,,62,63,,14,,,,,52,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67',
',,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50',
'108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,',
',,64,60,,62,63,,14,,,,,52,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13',
',,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48',
',50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,',
'42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,108,,49,69,65,,43,68,,,,,66',
'13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41',
',48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,',
',,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,108,,49,69,65,,43,68,,',
',,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,,',
'52,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53',
'70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,108,,49,69,65,,43,68',
',,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,',
',,52,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51',
',53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,108,,49,69,65,',
'43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63',
',14,,,,,52,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59',
',,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,108,,49,69',
'65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62',
'63,,14,,,,,52,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57',
'59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,108,,49',
'69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60',
',62,63,,14,,,,,52,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12',
'57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,108',
',49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64',
'60,,62,63,,14,,,,,52,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67',
',,12,,,57,59,,,51,70,53,354,,,,42,,,186,64,60,,62,63,,,,14,,,52,,,41',
',48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,',
',,,,42,,,,64,60,,62,63,,14,,,,,52,189,206,200,207,50,201,209,202,198',
'196,,191,204,,,,,66,13,210,205,203,,,12,57,59,,,51,,53,70,,,,,208,190',
',,,64,60,,62,63,,14,,,,,52,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13',
',,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48',
',50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,',
'42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,108,,49,69,65,,43,68,,,,,66',
'13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41',
',48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,',
',,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,108,,49,69,65,,43,68,,',
',,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,,',
'52,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,,,57,59,,,51',
'70,53,302,,,,42,,,,64,60,,62,63,,,,14,,,52,,,41,,48,,50,45,,49,69,65',
',43,68,46,47,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62',
'63,,14,218,,,,52,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12',
'57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,108',
',49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64',
'60,,62,63,,14,,,,,52,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67',
',,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,226,,,,52,41,,48',
',50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,',
'42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,45,,49,69,65,,43,68,46,47,',
',66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52',
'41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,322,53',
'70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,108,,49,69,65,,43,68',
',,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,',
',,52,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51',
',53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,108,,49,69,65,',
'43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63',
',14,,,,,52,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59',
',,51,321,53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,41,,48,,50,108,,49',
'69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60',
',62,63,,14,,,,,52,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12',
',,57,59,,,51,70,53,324,,,,42,,,,64,60,,62,63,,,,14,,,52,,,41,,48,,50',
'108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,',
',,64,60,,62,63,,14,,,,,52,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13',
',,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,,62,63,,14,,,,,52,189,206',
'200,207,50,201,209,202,198,196,,191,204,,,,,66,13,210,205,203,,,12,',
',,,,,,70,,,,,208,190,,,,64,60,,62,63,79,,,,,,52,,,98,99,100,95,90,102',
',106,,101,,,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88',
'89,,81,82,,,79,,103,80,,246,,,,98,99,100,95,90,102,,106,,101,,87,91',
'93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,79,81,82,,',
'246,,,80,98,99,100,95,90,102,,106,,101,,,91,93,92,94,87,,,,,,,,,,,,',
',,105,,,,97,96,,,83,84,86,85,88,89,,81,82,,,79,,230,80,,,,,,98,99,100',
'95,90,102,,106,,101,,87,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83',
'84,86,85,88,89,79,81,82,,,,,,80,98,99,100,95,90,102,,106,,101,,,91,93',
'92,94,87,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,,,79',
',229,80,,,,,,98,99,100,95,90,102,,106,,101,,87,91,93,92,94,,,,,,,,,',
',,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,,,79,,228,80,,,,,,98,99',
'100,95,90,102,,106,,101,,87,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96',
',,83,84,86,85,88,89,,81,82,,,79,,227,80,,,,,,98,99,100,95,90,102,,106',
',101,,87,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89',
'79,81,82,,,,,,80,98,99,100,95,90,102,,106,,101,,216,91,93,92,94,87,',
',,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,79,81,82,,,,,,80,98,99',
'100,95,90,102,,106,,101,,,91,93,92,94,87,,,,,,,,,,,,,,,105,,,,97,96',
',,83,84,86,85,88,89,79,81,82,,,,,,80,98,99,100,95,90,102,,106,,101,260',
'261,91,93,92,94,87,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,79',
'81,82,,,,,,80,98,99,100,95,90,102,,106,,101,,,91,93,92,94,87,,,,,,,',
',,,,,,,105,,,,97,96,,,83,84,86,85,88,89,79,81,82,,,,,,80,98,99,100,95',
'90,102,,106,,101,,,91,93,92,94,87,,,,,,,,,,,,,,,105,,,,97,96,,,83,84',
'86,85,88,89,79,81,82,,,,,,80,98,99,100,95,90,102,,106,,101,,,91,93,92',
'94,87,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,79,81,82,,,,,,80',
'98,99,100,95,90,102,,106,,101,,,91,93,92,94,87,,,,,,,,,,,,,,,105,,,',
'97,96,,,83,84,86,85,88,89,79,81,82,,,,,,80,98,99,100,95,90,102,,106',
',101,79,,91,93,92,94,87,,,,,,,,102,,106,,101,,,105,,,,97,96,,,83,84',
'86,85,88,89,,81,82,,,105,,,80,,79,,,,,86,85,,,,81,82,,,102,87,106,80',
'101,,,,,,,,,,,,,,,,87,,,,,,105,,,,,,,,,,86,85,,,79,81,82,,,,,,80,98',
'99,100,95,90,102,,106,,101,,,91,93,92,94,87,,,,,,,,,,,,,,,105,,,,97',
'96,,,83,84,86,85,88,89,79,81,82,,,,,,80,98,99,100,95,90,102,270,106',
',101,,,91,93,92,94,87,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89',
',81,82,,,79,,103,80,,,,,,98,99,100,95,90,102,,106,,101,79,87,91,93,92',
'94,,,,,,,,,102,,106,,101,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,',
',105,,,80,,79,,,83,84,86,85,,,,81,82,,,102,87,106,80,101,79,,,,,,,,',
',,,,,102,87,106,,101,,,105,,,,,,,,83,84,86,85,,,,81,82,,,105,,,80,,79',
',,83,84,86,85,88,89,,81,82,,,102,87,106,80,101,,,,,,,79,,,,,,,,,87,',
',,90,102,105,106,,101,,79,91,,83,84,86,85,88,89,,81,82,,90,102,,106',
'80,101,,105,91,,,,79,,,83,84,86,85,88,89,87,81,82,,90,102,105,106,80',
'101,,,91,,83,84,86,85,88,89,,81,82,,,87,,,80,,,105,,,,,79,,,83,84,86',
'85,88,89,87,81,82,,90,102,,106,80,101,,,91,,,,,,,,,,,,,87,,,,,,105,',
',,,79,,,83,84,86,85,88,89,,81,82,95,90,102,,106,80,101,,,91,93,92,94',
',,,,,,,,,87,,,,,,105,,,,,79,,,83,84,86,85,88,89,,81,82,95,90,102,,106',
'80,101,,,91,93,92,94,,,,,,,,,,87,,,,,,105,,,,,96,,,83,84,86,85,88,89',
'79,81,82,,,,,,80,98,99,100,95,90,102,,106,,101,,,91,93,92,94,87,,,,',
',,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,79,81,82,,,266,,,80,98,99',
'100,95,90,102,,106,,101,,,91,93,92,94,87,,,,,,,,,,,,,,,105,,,,97,96',
',,83,84,86,85,88,89,79,81,82,,,,,,80,98,99,100,95,90,102,,106,,101,',
',91,93,92,94,87,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,79,81',
'82,,,,,,80,98,99,100,95,90,102,,106,,101,,,91,93,92,94,87,,,,,,,,,,',
',,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,,,,,,80,284,206,283,207',
',281,209,285,279,278,,280,282,,,,87,,,210,205,286,284,206,283,207,,281',
'209,285,279,278,,280,282,,,208,287,,,210,205,286,284,206,283,207,,281',
'209,285,279,278,,280,282,,,208,287,,,210,205,286,,,,,,,,,,,,,,,,208',
'287' ]
        racc_action_table = arr = ::Array.new(6233, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,199,196,0,225,0,204,163,198,203,312,235,201,162,312,303,201,312',
'225,151,235,163,0,163,303,163,310,162,0,162,0,162,0,0,123,0,0,0,129',
'0,0,0,0,199,196,0,0,163,204,0,198,203,0,162,151,382,382,328,328,382',
'0,382,382,129,114,142,0,139,142,163,0,0,139,0,0,0,263,137,382,121,161',
'0,137,48,382,161,382,48,382,382,200,382,382,382,200,382,382,382,382',
'114,237,382,382,240,240,382,128,121,382,5,5,121,267,5,108,5,382,109',
'108,345,232,345,382,300,271,300,382,382,113,382,382,109,5,109,273,109',
'155,382,5,224,5,240,5,5,240,5,5,5,5,5,5,5,5,222,45,5,5,109,277,5,149',
'149,5,218,240,381,381,147,147,381,5,381,381,291,293,240,5,295,296,168',
'5,5,45,5,5,104,45,299,381,131,301,5,302,168,381,168,381,168,381,381',
'217,381,381,381,102,381,381,381,381,306,307,381,381,308,309,381,257',
'215,381,168,314,379,379,73,71,379,381,379,379,61,60,327,381,233,168',
'168,381,381,213,381,381,168,330,193,379,332,46,381,192,339,379,340,379',
'40,379,379,236,379,379,379,39,379,379,379,379,348,349,379,379,351,352',
'379,356,357,379,186,186,358,16,186,364,186,379,8,8,8,8,365,379,368,241',
'6,379,379,1,379,379,386,186,390,238,238,392,379,186,394,186,,186,186',
',186,186,186,,186,186,,,,,186,186,,,186,,,186,12,12,,,12,,12,186,,238',
',,238,186,,,,186,186,,186,186,,12,,202,202,,186,12,,12,238,12,12,,12',
'12,12,,12,12,,238,,,12,12,,,12,,,12,13,13,,,13,,13,12,,202,,,202,12',
',,,12,12,,12,12,,13,,49,49,,12,13,,13,202,13,13,,13,13,13,,13,13,,202',
',,13,13,,,13,,,13,14,14,,,14,,14,13,164,49,,,49,13,,,,13,13,,13,13,164',
'14,164,,164,,13,14,,14,49,14,14,,14,14,14,,14,14,,49,,,14,14,164,,14',
',,14,360,360,,,360,,360,14,167,,,,,14,,,164,14,14,,14,14,167,360,167',
',167,,14,360,,360,,360,360,,360,360,360,,360,360,360,360,,,360,360,167',
',360,,,360,347,347,,,347,,347,360,169,167,167,,,360,,,167,360,360,,360',
'360,169,347,169,,169,,360,347,,347,,347,347,,347,347,347,,347,347,,',
',,347,347,169,,347,,,347,189,189,,,189,,189,347,107,169,169,,,347,,',
'169,347,347,,347,347,107,189,107,,107,,347,189,,189,,189,189,,189,189',
'189,,189,189,,,,,189,189,107,,189,,,189,41,41,,,41,,41,189,,,,,,189',
',,,189,189,,189,189,,41,,,,,189,41,,41,,41,41,,41,41,41,,41,41,,,,,41',
'41,,,41,,,41,42,42,,,42,,42,41,,,,,,41,,,,41,41,,41,41,,42,,,,,41,42',
',42,,42,42,,42,42,42,,42,42,,,,,42,42,,,42,,,42,43,43,,,43,,43,42,,',
',,,42,,,,42,42,,42,42,,43,,,,,42,43,,43,,43,43,,43,43,43,,43,43,,,,',
'43,43,,,43,,,43,44,44,,,44,,44,43,,,,,,43,,,,43,43,,43,43,,44,,,,,43',
'44,,44,,44,44,,44,44,44,,44,44,,,,,44,44,,,44,,,44,190,190,,,190,,190',
'44,,,,,,44,,,,44,44,,44,44,,190,,,,,44,190,,190,,190,190,,190,190,190',
',190,190,,,,,190,190,,,190,,,190,191,191,,,191,,191,190,,,,,,190,,,',
'190,190,,190,190,,191,,,,,190,191,,191,,191,191,,191,191,191,,191,191',
',,,,191,191,,,191,,,191,331,331,,,331,,331,191,,,,,,191,,,,191,191,',
'191,191,,331,,,,,191,331,,331,,331,331,,331,331,331,,331,331,,,,,331',
'331,,,331,,,331,,,220,220,,,220,331,220,220,,,,331,,,,331,331,,331,331',
',,,220,,,331,,,220,,220,,220,220,,220,220,220,,220,220,220,220,,,220',
'220,,,220,,,220,51,51,,,51,51,51,220,,,,,,220,,,,220,220,,220,220,,51',
',,,,220,51,,51,,51,51,,51,51,51,,51,51,,,,,51,51,,,51,,,51,52,52,,,52',
'52,52,51,,,,,,51,,,,51,51,,51,51,,52,,,,,51,52,,52,,52,52,,52,52,52',
',52,52,,,,,52,52,,,52,,,52,,,53,53,,,53,52,53,53,,,,52,,,,52,52,,52',
'52,,,,53,,,52,,,53,,53,,53,53,,53,53,53,,53,53,,,,,53,53,,,53,,,53,58',
'58,,,58,,58,53,,,,,,53,,,,53,53,,53,53,,58,,,,,53,58,,58,,58,58,,58',
'58,58,,58,58,,,,,58,58,,,58,,,58,,,227,227,,,227,58,227,227,,,,58,,',
',58,58,,58,58,,,,227,,,58,,,227,,227,,227,227,,227,227,227,,227,227',
'227,227,,,227,227,,,227,,,227,,,153,153,,,153,227,153,153,,,,227,,,',
'227,227,,227,227,,,,153,,,227,,,153,,153,,153,153,,153,153,153,,153',
'153,153,153,,,153,153,,,153,,,153,63,63,,,63,,63,153,,,,,,153,,,,153',
'153,,153,153,,63,,,,,153,63,,63,,63,63,,63,63,63,,63,63,,,,,63,63,,',
'63,,,63,,,316,316,,,316,63,316,316,,,,63,,,,63,63,,63,63,,,,316,,,63',
',,316,,316,,316,316,,316,316,316,,316,316,316,316,,,316,316,,,316,,',
'316,72,72,,,72,,72,316,,,,,,316,,,,316,316,,316,316,,72,,,,,316,72,',
'72,,72,72,,72,72,72,,72,72,72,72,,,72,72,,,72,,,72,315,315,,,315,,315',
'72,,,,,,72,,,,72,72,,72,72,,315,,,,,72,315,,315,,315,315,,315,315,315',
',315,315,315,315,,,315,315,,,315,,,315,74,74,,,74,,74,315,,,,,,315,',
',,315,315,,315,315,,74,,,,,315,74,,74,,74,74,,74,74,74,,74,74,74,74',
',,74,74,,,74,,,74,75,75,,,75,,75,74,,,,,,74,,,,74,74,,74,74,,75,,,,',
'74,75,,75,,75,75,,75,75,75,,75,75,75,75,,,75,75,,,75,,,75,76,76,,,76',
',76,75,,,,,,75,,,,75,75,,75,75,,76,,,,,75,76,,76,,76,76,,76,76,76,,76',
'76,76,76,,,76,76,,,76,,,76,77,77,,,77,,77,76,,,,,,76,,,,76,76,,76,76',
',77,,,,,76,77,,77,,77,77,,77,77,77,,77,77,77,77,,,77,77,,,77,,,77,78',
'78,,,78,,78,77,,,,,,77,,,,77,77,,77,77,,78,,,,,77,78,,78,,78,78,,78',
'78,78,,78,78,78,78,,,78,78,,,78,,,78,79,79,,,79,,79,78,,,,,,78,,,,78',
'78,,78,78,,79,,,,,78,79,,79,,79,79,,79,79,79,,79,79,,,,,79,79,,,79,',
',79,80,80,,,80,,80,79,,,,,,79,,,,79,79,,79,79,,80,,,,,79,80,,80,,80',
'80,,80,80,80,,80,80,,,,,80,80,,,80,,,80,81,81,,,81,,81,80,,,,,,80,,',
',80,80,,80,80,,81,,,,,80,81,,81,,81,81,,81,81,81,,81,81,,,,,81,81,,',
'81,,,81,82,82,,,82,,82,81,,,,,,81,,,,81,81,,81,81,,82,,,,,81,82,,82',
',82,82,,82,82,82,,82,82,,,,,82,82,,,82,,,82,83,83,,,83,,83,82,,,,,,82',
',,,82,82,,82,82,,83,,,,,82,83,,83,,83,83,,83,83,83,,83,83,,,,,83,83',
',,83,,,83,84,84,,,84,,84,83,,,,,,83,,,,83,83,,83,83,,84,,,,,83,84,,84',
',84,84,,84,84,84,,84,84,,,,,84,84,,,84,,,84,85,85,,,85,,85,84,,,,,,84',
',,,84,84,,84,84,,85,,,,,84,85,,85,,85,85,,85,85,85,,85,85,,,,,85,85',
',,85,,,85,86,86,,,86,,86,85,,,,,,85,,,,85,85,,85,85,,86,,,,,85,86,,86',
',86,86,,86,86,86,,86,86,,,,,86,86,,,86,,,86,87,87,,,87,,87,86,,,,,,86',
',,,86,86,,86,86,,87,,,,,86,87,,87,,87,87,,87,87,87,,87,87,,,,,87,87',
',,87,,,87,88,88,,,88,,88,87,,,,,,87,,,,87,87,,87,87,,88,,,,,87,88,,88',
',88,88,,88,88,88,,88,88,,,,,88,88,,,88,,,88,89,89,,,89,,89,88,,,,,,88',
',,,88,88,,88,88,,89,,,,,88,89,,89,,89,89,,89,89,89,,89,89,,,,,89,89',
',,89,,,89,90,90,,,90,,90,89,,,,,,89,,,,89,89,,89,89,,90,,,,,89,90,,90',
',90,90,,90,90,90,,90,90,,,,,90,90,,,90,,,90,91,91,,,91,,91,90,,,,,,90',
',,,90,90,,90,90,,91,,,,,90,91,,91,,91,91,,91,91,91,,91,91,,,,,91,91',
',,91,,,91,92,92,,,92,,92,91,,,,,,91,,,,91,91,,91,91,,92,,,,,91,92,,92',
',92,92,,92,92,92,,92,92,,,,,92,92,,,92,,,92,93,93,,,93,,93,92,,,,,,92',
',,,92,92,,92,92,,93,,,,,92,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93',
',,93,,,93,94,94,,,94,,94,93,,,,,,93,,,,93,93,,93,93,,94,,,,,93,94,,94',
',94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,95,95,,,95,,95,94,,,,,,94',
',,,94,94,,94,94,,95,,,,,94,95,,95,,95,95,,95,95,95,,95,95,,,,,95,95',
',,95,,,95,96,96,,,96,,96,95,,,,,,95,,,,95,95,,95,95,,96,,,,,95,96,,96',
',96,96,,96,96,96,,96,96,,,,,96,96,,,96,,,96,97,97,,,97,,97,96,,,,,,96',
',,,96,96,,96,96,,97,,,,,96,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97',
',,97,,,97,98,98,,,98,,98,97,,,,,,97,,,,97,97,,97,97,,98,,,,,97,98,,98',
',98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,99,99,,,99,,99,98,,,,,,98',
',,,98,98,,98,98,,99,,,,,98,99,,99,,99,99,,99,99,99,,99,99,,,,,99,99',
',,99,,,99,100,100,,,100,,100,99,,,,,,99,,,,99,99,,99,99,,100,,,,,99',
'100,,100,,100,100,,100,100,100,,100,100,,,,,100,100,,,100,,,100,101',
'101,,,101,,101,100,,,,,,100,,,,100,100,,100,100,,101,,,,,100,101,,101',
',101,101,,101,101,101,,101,101,,,,,101,101,,,101,,,101,,,304,304,,,304',
'101,304,304,,,,101,,,101,101,101,,101,101,,,,304,,,101,,,304,,304,,304',
'304,,304,304,304,,304,304,,,,,304,304,,,304,,,304,103,103,,,103,,103',
'304,,,,,,304,,,,304,304,,304,304,,103,,,,,304,103,103,103,103,103,103',
'103,103,103,103,,103,103,,,,,103,103,103,103,103,,,103,297,297,,,297',
',297,103,,,,,103,103,,,,103,103,,103,103,,297,,,,,103,297,,297,,297',
'297,,297,297,297,,297,297,,,,,297,297,,,297,,,297,105,105,,,105,,105',
'297,,,,,,297,,,,297,297,,297,297,,105,,,,,297,105,,105,,105,105,,105',
'105,105,,105,105,,,,,105,105,,,105,,,105,106,106,,,106,,106,105,,,,',
',105,,,,105,105,,105,105,,106,,,,,105,106,,106,,106,106,,106,106,106',
',106,106,,,,,106,106,,,106,,,106,290,290,,,290,,290,106,,,,,,106,,,',
'106,106,,106,106,,290,,,,,106,290,,290,,290,290,,290,290,290,,290,290',
',,,,290,290,,,290,,,290,276,276,,,276,,276,290,,,,,,290,,,,290,290,',
'290,290,,276,,,,,290,276,,276,,276,276,,276,276,276,,276,276,,,,,276',
'276,,,276,,,276,275,275,,,275,,275,276,,,,,,276,,,,276,276,,276,276',
',275,,,,,276,275,,275,,275,275,,275,275,275,,275,275,,,,,275,275,,,275',
',,275,,,228,228,,,228,275,228,228,,,,275,,,,275,275,,275,275,,,,228',
',,275,,,228,,228,,228,228,,228,228,228,,228,228,228,228,,,228,228,,',
'228,,,228,111,111,,,111,,111,228,,,,,,228,,,,228,228,,228,228,,111,111',
',,,228,111,,111,,111,111,,111,111,111,,111,111,,,,,111,111,,,111,,,111',
'272,272,,,272,,272,111,,,,,,111,,,,111,111,,111,111,,272,,,,,111,272',
',272,,272,272,,272,272,272,,272,272,,,,,272,272,,,272,,,272,266,266',
',,266,,266,272,,,,,,272,,,,272,272,,272,272,,266,,,,,272,266,,266,,266',
'266,,266,266,266,,266,266,,,,,266,266,,,266,,,266,115,115,,,115,,115',
'266,,,,,,266,,,,266,266,,266,266,,115,115,,,,266,115,,115,,115,115,',
'115,115,115,,115,115,,,,,115,115,,,115,,,115,150,150,,,150,,150,115',
',,,,,115,,,,115,115,,115,115,,150,,,,,115,150,,150,,150,150,,150,150',
'150,,150,150,150,150,,,150,150,,,150,,,150,229,229,,,229,,229,150,,',
',,,150,,,,150,150,,150,150,,229,,,,,150,229,,229,,229,229,,229,229,229',
',229,229,,,,,229,229,,,229,,,229,244,244,,,244,244,244,229,,,,,,229',
',,,229,229,,229,229,,244,,,,,229,244,,244,,244,244,,244,244,244,,244',
'244,,,,,244,244,,,244,,,244,231,231,,,231,,231,244,,,,,,244,,,,244,244',
',244,244,,231,,,,,244,231,,231,,231,231,,231,231,231,,231,231,,,,,231',
'231,,,231,,,231,265,265,,,265,,265,231,,,,,,231,,,,231,231,,231,231',
',265,,,,,231,265,,265,,265,265,,265,265,265,,265,265,,,,,265,265,,,265',
',,265,122,122,,,122,,122,265,,,,,,265,,,,265,265,,265,265,,122,,,,,265',
'122,,122,,122,122,,122,122,122,,122,122,,,,,122,122,,,122,,,122,242',
'242,,,242,242,242,122,,,,,,122,,,,122,122,,122,122,,242,,,,,122,242',
',242,,242,242,,242,242,242,,242,242,,,,,242,242,,,242,,,242,253,253',
',,253,,253,242,,,,,,242,,,,242,242,,242,242,,253,,,,,242,253,,253,,253',
'253,,253,253,253,,253,253,,,,,253,253,,,253,,,253,,,248,248,,,248,253',
'248,248,,,,253,,,,253,253,,253,253,,,,248,,,253,,,248,,248,,248,248',
',248,248,248,,248,248,,,,,248,248,,,248,,,248,246,246,,,246,,246,248',
',,,,,248,,,,248,248,,248,248,,246,,,,,248,246,,246,,246,246,,246,246',
'246,,246,246,,,,,246,246,,,246,,,246,230,230,,,230,,230,246,,,,,,246',
',,,246,246,,246,246,,230,,,,,246,230,230,230,230,230,230,230,230,230',
'230,,230,230,,,,,230,230,230,230,230,,,230,,,,,,,,230,,,,,230,230,,',
',230,230,,230,230,136,,,,,,230,,,136,136,136,136,136,136,,136,,136,',
',136,136,136,136,,,,,,,,,,,,,,,,136,,,,136,136,,,136,136,136,136,136',
'136,,136,136,,,262,,262,136,,262,,,,262,262,262,262,262,262,,262,,262',
',136,262,262,262,262,,,,,,,,,,,,,,,,262,,,,262,262,,,262,262,262,262',
'262,262,141,262,262,,,141,,,262,141,141,141,141,141,141,,141,,141,,',
'141,141,141,141,262,,,,,,,,,,,,,,,141,,,,141,141,,,141,141,141,141,141',
'141,,141,141,,,120,,120,141,,,,,,120,120,120,120,120,120,,120,,120,',
'141,120,120,120,120,,,,,,,,,,,,,,,,120,,,,120,120,,,120,120,120,120',
'120,120,145,120,120,,,,,,120,145,145,145,145,145,145,,145,,145,,,145',
'145,145,145,120,,,,,,,,,,,,,,,145,,,,145,145,,,145,145,145,145,145,145',
',145,145,,,119,,119,145,,,,,,119,119,119,119,119,119,,119,,119,,145',
'119,119,119,119,,,,,,,,,,,,,,,,119,,,,119,119,,,119,119,119,119,119',
'119,,119,119,,,118,,118,119,,,,,,118,118,118,118,118,118,,118,,118,',
'119,118,118,118,118,,,,,,,,,,,,,,,,118,,,,118,118,,,118,118,118,118',
'118,118,,118,118,,,116,,116,118,,,,,,116,116,116,116,116,116,,116,,116',
',118,116,116,116,116,,,,,,,,,,,,,,,,116,,,,116,116,,,116,116,116,116',
'116,116,110,116,116,,,,,,116,110,110,110,110,110,110,,110,,110,,110',
'110,110,110,110,116,,,,,,,,,,,,,,,110,,,,110,110,,,110,110,110,110,110',
'110,152,110,110,,,,,,110,152,152,152,152,152,152,,152,,152,,,152,152',
'152,152,110,,,,,,,,,,,,,,,152,,,,152,152,,,152,152,152,152,152,152,320',
'152,152,,,,,,152,320,320,320,320,320,320,,320,,320,152,152,320,320,320',
'320,152,,,,,,,,,,,,,,,320,,,,320,320,,,320,320,320,320,320,320,323,320',
'320,,,,,,320,323,323,323,323,323,323,,323,,323,,,323,323,323,323,320',
',,,,,,,,,,,,,,323,,,,323,323,,,323,323,323,323,323,323,329,323,323,',
',,,,323,329,329,329,329,329,329,,329,,329,,,329,329,329,329,323,,,,',
',,,,,,,,,,329,,,,329,329,,,329,329,329,329,329,329,212,329,329,,,,,',
'329,212,212,212,212,212,212,,212,,212,,,212,212,212,212,329,,,,,,,,',
',,,,,,212,,,,212,212,,,212,212,212,212,212,212,337,212,212,,,,,,212',
'337,337,337,337,337,337,,337,,337,,,337,337,337,337,212,,,,,,,,,,,,',
',,337,,,,337,337,,,337,337,337,337,337,337,338,337,337,,,,,,337,338',
'338,338,338,338,338,,338,,338,165,,338,338,338,338,337,,,,,,,,165,,165',
',165,,,338,,,,338,338,,,338,338,338,338,338,338,,338,338,,,165,,,338',
',166,,,,,165,165,,,,165,165,,,166,338,166,165,166,,,,,,,,,,,,,,,,165',
',,,,,166,,,,,,,,,,166,166,,,344,166,166,,,,,,166,344,344,344,344,344',
'344,,344,,344,,,344,344,344,344,166,,,,,,,,,,,,,,,344,,,,344,344,,,344',
'344,344,344,344,344,188,344,344,,,,,,344,188,188,188,188,188,188,188',
'188,,188,,,188,188,188,188,344,,,,,,,,,,,,,,,188,,,,188,188,,,188,188',
'188,188,188,188,,188,188,,,11,,11,188,,,,,,11,11,11,11,11,11,,11,,11',
'170,188,11,11,11,11,,,,,,,,,170,,170,,170,,,11,,,,11,11,,,11,11,11,11',
'11,11,,11,11,,,170,,,11,,171,,,170,170,170,170,,,,170,170,,,171,11,171',
'170,171,172,,,,,,,,,,,,,,172,170,172,,172,,,171,,,,,,,,171,171,171,171',
',,,171,171,,,172,,,171,,173,,,172,172,172,172,172,172,,172,172,,,173',
'171,173,172,173,,,,,,,174,,,,,,,,,172,,,,174,174,173,174,,174,,175,174',
',173,173,173,173,173,173,,173,173,,175,175,,175,173,175,,174,175,,,',
'176,,,174,174,174,174,174,174,173,174,174,,176,176,175,176,174,176,',
',176,,175,175,175,175,175,175,,175,175,,,174,,,175,,,176,,,,,177,,,176',
'176,176,176,176,176,175,176,176,,177,177,,177,176,177,,,177,,,,,,,,',
',,,,176,,,,,,177,,,,,178,,,177,177,177,177,177,177,,177,177,178,178',
'178,,178,177,178,,,178,178,178,178,,,,,,,,,,177,,,,,,178,,,,,179,,,178',
'178,178,178,178,178,,178,178,179,179,179,,179,178,179,,,179,179,179',
'179,,,,,,,,,,178,,,,,,179,,,,,179,,,179,179,179,179,179,179,180,179',
'179,,,,,,179,180,180,180,180,180,180,,180,,180,,,180,180,180,180,179',
',,,,,,,,,,,,,,180,,,,180,180,,,180,180,180,180,180,180,183,180,180,',
',183,,,180,183,183,183,183,183,183,,183,,183,,,183,183,183,183,180,',
',,,,,,,,,,,,,183,,,,183,183,,,183,183,183,183,183,183,182,183,183,,',
',,,183,182,182,182,182,182,182,,182,,182,,,182,182,182,182,183,,,,,',
',,,,,,,,,182,,,,182,182,,,182,182,182,182,182,182,181,182,182,,,,,,182',
'181,181,181,181,181,181,,181,,181,,,181,181,181,181,182,,,,,,,,,,,,',
',,181,,,,181,181,,,181,181,181,181,181,181,,181,181,,,,,,181,274,274',
'274,274,,274,274,274,274,274,,274,274,,,,181,,,274,274,274,269,269,269',
'269,,269,269,269,269,269,,269,269,,,274,274,,,269,269,269,211,211,211',
'211,,211,211,211,211,211,,211,211,,,269,269,,,211,211,211,,,,,,,,,,',
',,,,,211,211' ]
        racc_action_check = arr = ::Array.new(6233, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   295,   nil,   nil,   nil,   108,   280,   nil,   220,   nil,
   nil,  5532,   328,   382,   436,   nil,   254,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   191,
   229,   652,   706,   760,   814,   147,   203,   nil,    48,   407,
   nil,  1086,  1140,  1196,   nil,   nil,   nil,   nil,  1250,   nil,
   156,   160,   nil,  1416,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   225,  1526,   212,  1634,  1688,  1742,  1796,  1850,  1904,
  1958,  2012,  2066,  2120,  2174,  2228,  2282,  2336,  2390,  2444,
  2498,  2552,  2606,  2660,  2714,  2768,  2822,  2876,  2930,  2984,
  3038,  3092,   165,  3202,   178,  3310,  3364,   602,    79,   112,
  4923,  3636,   nil,   121,    30,  3798,  4869,   nil,  4810,  4751,
  4638,    72,  4122,    10,   nil,   nil,   nil,   nil,    82,    27,
   nil,   170,   nil,   nil,   nil,   nil,  4466,    71,   nil,    61,
   nil,  4579,    57,   nil,   nil,  4692,   nil,   164,   nil,   159,
  3852,   -15,  4977,  1362,   nil,   125,   nil,   nil,   nil,   nil,
   nil,    74,     8,     2,   440,  5320,  5365,   494,   174,   548,
  5551,  5596,  5615,  5660,  5685,  5705,  5730,  5775,  5820,  5865,
  5919,  6081,  6027,  5973,   nil,   nil,   274,   nil,  5473,   598,
   868,   922,   208,   232,   nil,   nil,    -8,   nil,    -2,    -9,
    55,   -23,   353,    -1,    -4,   nil,   nil,   nil,   nil,   nil,
   nil,  6163,  5193,   192,   nil,   195,   nil,   189,    94,   nil,
  1032,   nil,   142,   nil,   125,    -7,   nil,  1306,  3582,  3906,
  4394,  4014,    80,   197,   nil,   -14,   249,    93,   299,   nil,
   102,   251,  4176,   nil,  3960,   nil,  4340,   nil,  4286,   nil,
   nil,   nil,   nil,  4230,   nil,   nil,   nil,   205,   nil,   nil,
   nil,   nil,  4525,    68,   nil,  4068,  3744,   101,   nil,  6141,
   nil,   116,  3690,   126,  6119,  3526,  3472,   147,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  3418,   148,   nil,   166,   nil,   108,   144,  3256,   nil,   179,
    92,   182,   161,     4,  3148,   nil,   169,   199,   173,   206,
    19,   nil,   -25,   nil,   209,  1580,  1472,   nil,   nil,   nil,
  5031,   nil,   nil,  5085,   nil,   nil,   nil,   162,   -21,  5139,
   234,   976,   234,   nil,   nil,   nil,   nil,  5247,  5301,   241,
   182,   nil,   nil,   nil,  5419,    88,   nil,   544,   258,   235,
   nil,   262,   263,   nil,   nil,   nil,   264,   265,   269,   nil,
   490,   nil,   nil,   nil,   255,   279,   nil,   nil,   281,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   220,
   nil,   164,    54,   nil,   nil,   nil,   289,   nil,   nil,   nil,
   291,   nil,   294,   nil,   297,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -227,  -228,    -1,    -2,    -3,    -4,    -5,    -8,   -10,   -11,
   -16,  -107,  -228,  -228,  -228,   -45,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,
   -60,   -61,   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -73,
   -77,  -228,  -228,  -228,  -228,  -228,  -118,  -120,  -228,  -228,
  -165,  -228,  -228,  -228,  -178,  -179,  -180,  -181,  -228,  -183,
  -228,  -194,  -197,  -228,  -202,  -203,  -204,  -205,  -206,  -207,
  -208,  -228,  -228,    -7,  -228,  -228,  -228,  -228,  -228,  -228,
  -228,  -228,  -228,  -228,  -228,  -228,  -228,  -228,  -228,  -228,
  -228,  -228,  -228,  -228,  -228,  -228,  -228,  -228,  -228,  -228,
  -228,  -228,  -228,  -127,  -122,  -227,  -227,   -28,  -228,   -35,
  -228,  -228,   -74,  -228,  -228,  -228,  -228,   -84,  -228,  -228,
  -228,  -228,  -228,  -227,  -137,  -156,  -157,  -119,  -227,  -227,
  -146,  -148,  -149,  -150,  -151,  -152,   -43,  -228,  -168,  -228,
  -171,  -228,  -228,  -174,  -175,  -187,  -182,  -228,  -190,  -228,
  -228,  -228,  -228,  -228,   400,    -6,    -9,   -12,   -13,   -14,
   -15,  -228,   -18,   -19,   -20,   -21,   -22,   -23,   -24,   -25,
   -26,   -27,   -29,   -30,   -31,   -32,   -33,   -34,   -36,   -37,
   -38,   -39,   -40,  -228,   -41,  -102,  -228,   -78,  -228,  -220,
  -226,  -214,  -211,  -209,  -116,  -128,  -203,  -131,  -207,  -228,
  -217,  -215,  -223,  -205,  -206,  -213,  -218,  -219,  -221,  -222,
  -224,  -127,  -126,  -228,  -125,  -228,   -42,  -209,   -70,   -79,
  -228,   -82,  -209,  -161,  -164,  -228,   -76,  -228,  -228,  -228,
  -127,  -228,  -211,  -227,  -158,  -228,  -228,  -228,  -228,  -154,
  -228,  -228,  -228,  -166,  -228,  -169,  -228,  -172,  -228,  -184,
  -185,  -186,  -188,  -228,  -191,  -192,  -193,  -209,  -195,  -198,
  -200,  -201,  -107,  -228,   -17,  -228,  -228,  -209,  -104,  -127,
  -115,  -228,  -212,  -228,  -210,  -228,  -228,  -209,  -130,  -132,
  -214,  -215,  -216,  -217,  -220,  -223,  -225,  -226,  -123,  -124,
  -210,  -228,   -72,  -228,   -81,  -228,  -210,  -228,   -75,  -228,
   -87,  -228,   -93,  -228,  -228,   -97,  -211,  -209,  -211,  -228,
  -228,  -140,  -228,  -159,  -209,  -227,  -228,  -147,  -155,  -153,
   -44,  -167,  -170,  -177,  -173,  -176,  -189,  -228,  -228,  -106,
  -228,  -210,  -209,  -110,  -117,  -111,  -129,  -133,  -134,  -228,
   -69,   -80,   -83,  -162,  -163,   -87,   -86,  -228,  -228,   -93,
   -92,  -228,  -228,  -101,   -96,   -98,  -228,  -228,  -228,  -113,
  -227,  -141,  -142,  -143,  -228,  -228,  -138,  -139,  -228,  -145,
  -196,  -199,  -103,  -105,  -114,  -121,   -71,   -85,   -88,  -228,
   -91,  -228,  -228,  -108,  -109,  -112,  -228,  -160,  -135,  -144,
  -228,   -90,  -228,   -95,  -228,  -100,  -136,   -89,   -94,   -99 ]

racc_goto_table = [
     2,   112,     4,   146,   107,   109,   110,   128,   134,   185,
   259,   132,   222,   193,   365,   350,   184,   233,   346,   192,
   156,   271,   236,   334,   305,   157,   158,   159,   160,    73,
   317,   269,   318,   116,   118,   119,   120,   352,   232,   336,
   137,   139,   267,   136,   136,   141,   213,   215,   304,   257,
   145,   378,   310,   361,   237,   152,   219,   343,   325,   386,
   254,   309,   380,   377,   255,     3,   252,   253,   161,   251,
   148,   136,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
   180,   181,   182,   183,   268,   188,   155,   212,   212,   355,
   217,   150,     1,   136,   225,   nil,   nil,   136,   nil,   nil,
   273,   nil,   nil,   nil,   188,   nil,   nil,   nil,   nil,   nil,
   nil,   277,   nil,   nil,   nil,   234,   nil,   nil,   nil,   nil,
   234,   239,   nil,   314,   291,   356,   nil,   358,   nil,   295,
   307,   nil,   nil,   nil,   nil,   262,   306,   308,   nil,   nil,
   256,   nil,   nil,   263,   nil,   nil,   nil,   nil,   nil,   128,
   nil,   134,   nil,   nil,   132,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   327,   nil,   nil,   nil,   183,   332,
   292,   116,   118,   119,   330,   nil,   371,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   339,   nil,   nil,   134,   326,   134,
   132,   nil,   132,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   293,   136,   188,   188,   357,   nil,   nil,   299,   301,   nil,
   nil,   364,   nil,   nil,   320,   311,   320,   nil,   323,   373,
   141,   nil,   nil,   nil,   nil,   145,   nil,   nil,   nil,   374,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   320,   329,   nil,
   nil,   nil,   nil,   nil,   188,   nil,   nil,   337,   338,   nil,
   nil,   362,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   320,   nil,   nil,   nil,   nil,   nil,   nil,   344,
   nil,   nil,   nil,   nil,   nil,   nil,   136,   nil,   nil,   nil,
   nil,   nil,   376,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   368,   367,   nil,   nil,
   nil,   nil,   nil,   183,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   116,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   367,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   390,
   nil,   392,   394 ]

racc_goto_check = [
     2,    39,     4,    81,    10,    10,    10,    64,    31,    51,
    88,    37,    44,    56,    66,    47,    13,    65,    46,    54,
     7,    55,    65,    57,    49,     8,     8,     8,     8,     6,
    72,    58,    72,    10,    10,    10,    10,    50,    54,    61,
    12,    12,    52,    10,    10,    10,    60,    60,    48,    44,
    10,    45,    68,    69,    71,    10,    43,    74,    76,    66,
    77,    55,    47,    46,    78,     3,    82,    83,    12,    85,
    86,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    51,    10,     6,    10,    10,    49,
    12,    87,     1,    10,    12,   nil,   nil,    10,   nil,   nil,
    38,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,
   nil,    56,   nil,   nil,   nil,     4,   nil,   nil,   nil,   nil,
     4,     4,   nil,    44,    38,    55,   nil,    55,   nil,    38,
    56,   nil,   nil,   nil,   nil,    10,    54,    54,   nil,   nil,
     2,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,    64,
   nil,    31,   nil,   nil,    37,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    38,   nil,   nil,   nil,    10,    56,
    39,    10,    10,    10,    38,   nil,    88,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    38,   nil,   nil,    31,    81,    31,
    37,   nil,    37,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,    10,    10,    10,    38,   nil,   nil,     2,     2,   nil,
   nil,    38,   nil,   nil,    10,     4,    10,   nil,    10,    51,
    10,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,    38,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,    10,   nil,
   nil,   nil,   nil,   nil,    10,   nil,   nil,    10,    10,   nil,
   nil,    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,
   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,     4,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   102,     0,    65,     2,   nil,    24,   -54,   -50,   nil,
    -8,   nil,   -11,   -85,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -41,   nil,   nil,   nil,   nil,   nil,   -38,   -83,   -38,
   nil,   nil,   nil,   -57,  -102,  -296,  -282,  -287,  -181,  -205,
  -266,   -92,  -144,   nil,   -84,  -171,   -90,  -249,  -157,   nil,
   -59,  -235,   nil,   nil,   -41,  -106,  -301,   nil,  -181,  -259,
   nil,   -75,  -208,   nil,  -239,   nil,  -190,   -89,   -85,   nil,
   nil,   -55,   -81,   -80,   nil,   -78,    10,    40,  -142 ]

racc_goto_default = [
   nil,   nil,   366,   nil,   214,     5,     6,     7,     8,     9,
    11,    10,   303,   nil,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,   nil,   nil,
    39,    40,   113,   nil,   nil,   117,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    44,   nil,   nil,   nil,   194,   nil,   104,
   nil,   195,   199,   197,   124,   nil,   nil,   123,   nil,   nil,
   129,   nil,   130,   131,   223,   142,   144,    54,    55,    56,
    58,   nil,   nil,   nil,   147,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 89, :_reduce_1,
  1, 89, :_reduce_2,
  1, 89, :_reduce_none,
  1, 90, :_reduce_4,
  1, 93, :_reduce_5,
  3, 93, :_reduce_6,
  2, 93, :_reduce_7,
  1, 94, :_reduce_8,
  3, 94, :_reduce_9,
  1, 95, :_reduce_none,
  1, 96, :_reduce_11,
  3, 96, :_reduce_12,
  3, 96, :_reduce_13,
  3, 96, :_reduce_14,
  3, 96, :_reduce_15,
  1, 98, :_reduce_none,
  4, 98, :_reduce_17,
  3, 98, :_reduce_18,
  3, 98, :_reduce_19,
  3, 98, :_reduce_20,
  3, 98, :_reduce_21,
  3, 98, :_reduce_22,
  3, 98, :_reduce_23,
  3, 98, :_reduce_24,
  3, 98, :_reduce_25,
  3, 98, :_reduce_26,
  3, 98, :_reduce_27,
  2, 98, :_reduce_28,
  3, 98, :_reduce_29,
  3, 98, :_reduce_30,
  3, 98, :_reduce_31,
  3, 98, :_reduce_32,
  3, 98, :_reduce_33,
  3, 98, :_reduce_34,
  2, 98, :_reduce_35,
  3, 98, :_reduce_36,
  3, 98, :_reduce_37,
  3, 98, :_reduce_38,
  3, 98, :_reduce_39,
  3, 98, :_reduce_40,
  3, 98, :_reduce_41,
  3, 98, :_reduce_42,
  1, 100, :_reduce_43,
  3, 100, :_reduce_44,
  1, 99, :_reduce_none,
  1, 99, :_reduce_46,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 120, :_reduce_67,
  1, 120, :_reduce_68,
  5, 102, :_reduce_69,
  3, 102, :_reduce_70,
  6, 102, :_reduce_71,
  4, 102, :_reduce_72,
  1, 106, :_reduce_73,
  2, 106, :_reduce_74,
  4, 128, :_reduce_75,
  3, 128, :_reduce_76,
  1, 128, :_reduce_77,
  3, 129, :_reduce_78,
  2, 127, :_reduce_79,
  3, 131, :_reduce_80,
  2, 131, :_reduce_81,
  2, 130, :_reduce_82,
  4, 130, :_reduce_83,
  2, 109, :_reduce_84,
  5, 133, :_reduce_85,
  4, 133, :_reduce_86,
  0, 134, :_reduce_none,
  2, 134, :_reduce_88,
  4, 134, :_reduce_89,
  3, 134, :_reduce_90,
  6, 110, :_reduce_91,
  5, 110, :_reduce_92,
  0, 135, :_reduce_none,
  4, 135, :_reduce_94,
  3, 135, :_reduce_95,
  5, 108, :_reduce_96,
  1, 136, :_reduce_97,
  2, 136, :_reduce_98,
  5, 137, :_reduce_99,
  4, 137, :_reduce_100,
  1, 138, :_reduce_101,
  1, 101, :_reduce_none,
  4, 101, :_reduce_103,
  1, 140, :_reduce_104,
  3, 140, :_reduce_105,
  3, 139, :_reduce_106,
  1, 97, :_reduce_107,
  6, 97, :_reduce_108,
  6, 97, :_reduce_109,
  5, 97, :_reduce_110,
  5, 97, :_reduce_111,
  6, 97, :_reduce_112,
  5, 97, :_reduce_113,
  4, 145, :_reduce_114,
  1, 146, :_reduce_115,
  1, 142, :_reduce_116,
  3, 142, :_reduce_117,
  1, 141, :_reduce_118,
  2, 141, :_reduce_119,
  1, 141, :_reduce_120,
  6, 107, :_reduce_121,
  2, 107, :_reduce_122,
  3, 147, :_reduce_123,
  3, 147, :_reduce_124,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  0, 144, :_reduce_127,
  1, 144, :_reduce_128,
  3, 144, :_reduce_129,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  3, 149, :_reduce_133,
  3, 149, :_reduce_134,
  6, 111, :_reduce_135,
  7, 112, :_reduce_136,
  1, 155, :_reduce_137,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 156, :_reduce_none,
  2, 156, :_reduce_141,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  6, 113, :_reduce_144,
  5, 113, :_reduce_145,
  1, 158, :_reduce_146,
  3, 158, :_reduce_147,
  1, 160, :_reduce_148,
  1, 160, :_reduce_149,
  1, 160, :_reduce_150,
  1, 160, :_reduce_none,
  1, 161, :_reduce_152,
  3, 161, :_reduce_153,
  1, 159, :_reduce_none,
  2, 159, :_reduce_155,
  1, 152, :_reduce_156,
  1, 152, :_reduce_157,
  1, 153, :_reduce_158,
  2, 153, :_reduce_159,
  4, 153, :_reduce_160,
  1, 132, :_reduce_161,
  3, 132, :_reduce_162,
  3, 162, :_reduce_163,
  1, 162, :_reduce_164,
  1, 105, :_reduce_165,
  3, 115, :_reduce_166,
  4, 115, :_reduce_167,
  2, 115, :_reduce_168,
  3, 115, :_reduce_169,
  4, 115, :_reduce_170,
  2, 115, :_reduce_171,
  3, 118, :_reduce_172,
  4, 118, :_reduce_173,
  2, 118, :_reduce_174,
  1, 163, :_reduce_175,
  3, 163, :_reduce_176,
  3, 164, :_reduce_177,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 165, :_reduce_181,
  2, 166, :_reduce_182,
  1, 168, :_reduce_183,
  1, 170, :_reduce_184,
  1, 171, :_reduce_185,
  2, 169, :_reduce_186,
  1, 172, :_reduce_187,
  1, 173, :_reduce_188,
  2, 173, :_reduce_189,
  2, 167, :_reduce_190,
  2, 174, :_reduce_191,
  2, 174, :_reduce_192,
  3, 91, :_reduce_193,
  0, 175, :_reduce_194,
  2, 175, :_reduce_195,
  4, 175, :_reduce_196,
  1, 114, :_reduce_197,
  3, 114, :_reduce_198,
  5, 114, :_reduce_199,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 121, :_reduce_202,
  1, 124, :_reduce_203,
  1, 122, :_reduce_204,
  1, 123, :_reduce_205,
  1, 117, :_reduce_206,
  1, 116, :_reduce_207,
  1, 119, :_reduce_208,
  0, 126, :_reduce_none,
  1, 126, :_reduce_210,
  0, 143, :_reduce_none,
  1, 143, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 92, :_reduce_227 ]

racc_reduce_n = 228

racc_shift_n = 400

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :DELETES => 17,
  :LESSEQUAL => 18,
  :NOTEQUAL => 19,
  :DOT => 20,
  :COLON => 21,
  :LLCOLLECT => 22,
  :RRCOLLECT => 23,
  :QMARK => 24,
  :LPAREN => 25,
  :RPAREN => 26,
  :ISEQUAL => 27,
  :GREATEREQUAL => 28,
  :GREATERTHAN => 29,
  :LESSTHAN => 30,
  :IF => 31,
  :ELSE => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :ATAT => 45,
  :LCOLLECT => 46,
  :RCOLLECT => 47,
  :CLASSREF => 48,
  :NOT => 49,
  :OR => 50,
  :AND => 51,
  :UNDEF => 52,
  :PARROW => 53,
  :PLUS => 54,
  :MINUS => 55,
  :TIMES => 56,
  :DIV => 57,
  :LSHIFT => 58,
  :RSHIFT => 59,
  :UMINUS => 60,
  :MATCH => 61,
  :NOMATCH => 62,
  :REGEX => 63,
  :IN_EDGE => 64,
  :OUT_EDGE => 65,
  :IN_EDGE_SUB => 66,
  :OUT_EDGE_SUB => 67,
  :IN => 68,
  :UNLESS => 69,
  :PIPE => 70,
  :LAMBDA => 71,
  :SELBRACE => 72,
  :NUMBER => 73,
  :HEREDOC => 74,
  :SUBLOCATE => 75,
  :RENDER_STRING => 76,
  :RENDER_EXPR => 77,
  :EPP_START => 78,
  :EPP_END => 79,
  :EPP_END_TRIM => 80,
  :LOW => 81,
  :HIGH => 82,
  :CALL => 83,
  :LISTSTART => 84,
  :MODULO => 85,
  :TITLE_COLON => 86,
  :CASE_COLON => 87 }

racc_nt_base = 88

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "LOW",
  "HIGH",
  "CALL",
  "LISTSTART",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "number",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 64)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 65)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 76)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 77)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 78)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 89)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 92)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_15(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_17(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_18(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_19(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_20(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_21(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_22(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_23(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_24(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_25(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_26(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_27(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_28(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_29(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_30(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_31(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_32(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_33(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_34(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_35(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 119)
  def _reduce_36(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 120)
  def _reduce_37(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 121)
  def _reduce_38(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 122)
  def _reduce_39(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 123)
  def _reduce_40(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 124)
  def _reduce_41(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_42(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 133)
  def _reduce_43(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 134)
  def _reduce_44(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 45 omitted

module_eval(<<'.,.,', 'egrammar.ra', 139)
  def _reduce_46(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'egrammar.ra', 167)
  def _reduce_67(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 168)
  def _reduce_68(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 176)
  def _reduce_69(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 180)
  def _reduce_70(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 184)
  def _reduce_71(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_72(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_73(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_74(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_75(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_76(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_77(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_78(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_79(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 225)
  def _reduce_80(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 226)
  def _reduce_81(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 230)
  def _reduce_82(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 231)
  def _reduce_83(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 241)
  def _reduce_84(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 248)
  def _reduce_85(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 252)
  def _reduce_86(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 87 omitted

module_eval(<<'.,.,', 'egrammar.ra', 260)
  def _reduce_88(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 264)
  def _reduce_89(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 268)
  def _reduce_90(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 277)
  def _reduce_91(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 281)
  def _reduce_92(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 93 omitted

module_eval(<<'.,.,', 'egrammar.ra', 291)
  def _reduce_94(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 295)
  def _reduce_95(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 303)
  def _reduce_96(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_97(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 310)
  def _reduce_98(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 315)
  def _reduce_99(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 319)
  def _reduce_100(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 323)
  def _reduce_101(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 102 omitted

module_eval(<<'.,.,', 'egrammar.ra', 334)
  def _reduce_103(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 339)
  def _reduce_104(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 340)
  def _reduce_105(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_106(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 357)
  def _reduce_107(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 360)
  def _reduce_108(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error val[1], "A resource default can not be virtual or exported"
      when :override
        error val[1], "A resource override can not be virtual or exported"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 375)
  def _reduce_109(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class, :defaults, :override
        error val[1], "Defaults are not virtualizable"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 383)
  def _reduce_110(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error val[1], "A resource default can not specify a resource name"
      when :override
        error val[1], "A resource override does not allow override of name of resource"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 396)
  def _reduce_111(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 417)
  def _reduce_112(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        result.form = val[0]
        loc result, val[1], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 422)
  def _reduce_113(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 427)
  def _reduce_114(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 429)
  def _reduce_115(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 432)
  def _reduce_116(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_117(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_118(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 439)
  def _reduce_119(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 440)
  def _reduce_120(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 452)
  def _reduce_121(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 456)
  def _reduce_122(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 461)
  def _reduce_123(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 462)
  def _reduce_124(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 125 omitted

# reduce 126 omitted

module_eval(<<'.,.,', 'egrammar.ra', 475)
  def _reduce_127(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 476)
  def _reduce_128(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 477)
  def _reduce_129(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

module_eval(<<'.,.,', 'egrammar.ra', 493)
  def _reduce_133(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 497)
  def _reduce_134(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 507)
  def _reduce_135(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 521)
  def _reduce_136(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 531)
  def _reduce_137(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

module_eval(<<'.,.,', 'egrammar.ra', 540)
  def _reduce_141(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'egrammar.ra', 557)
  def _reduce_144(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 561)
  def _reduce_145(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], nil))
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 571)
  def _reduce_146(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 572)
  def _reduce_147(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_148(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 578)
  def _reduce_149(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 579)
  def _reduce_150(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 151 omitted

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_152(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 584)
  def _reduce_153(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 154 omitted

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_155(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 595)
  def _reduce_156(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_157(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 600)
  def _reduce_158(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 601)
  def _reduce_159(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 602)
  def _reduce_160(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 606)
  def _reduce_161(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 607)
  def _reduce_162(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 611)
  def _reduce_163(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 612)
  def _reduce_164(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 625)
  def _reduce_165(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 631)
  def _reduce_166(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 632)
  def _reduce_167(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 633)
  def _reduce_168(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 634)
  def _reduce_169(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 635)
  def _reduce_170(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 636)
  def _reduce_171(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_172(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_173(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 641)
  def _reduce_174(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_175(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_176(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_177(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_181(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_182(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_183(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_184(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_185(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_186(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 661)
  def _reduce_187(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_188(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_189(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_190(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_191(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_192(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_193(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_194(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_195(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_196(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_197(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 684)
  def _reduce_198(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 685)
  def _reduce_199(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 200 omitted

# reduce 201 omitted

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_202(val, _values, result)
     result = Factory.NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 692)
  def _reduce_203(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 693)
  def _reduce_204(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_205(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_206(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 700)
  def _reduce_207(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 703)
  def _reduce_208(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 209 omitted

module_eval(<<'.,.,', 'egrammar.ra', 709)
  def _reduce_210(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

module_eval(<<'.,.,', 'egrammar.ra', 732)
  def _reduce_227(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
