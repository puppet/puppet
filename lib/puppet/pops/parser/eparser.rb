#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 779)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'63,66,273,-134,64,57,321,59,283,86,-132,-234,273,144,-225,234,306,82',
'84,83,85,362,234,109,15,113,234,108,255,134,43,256,50,133,52,47,372',
'51,76,72,135,45,75,48,49,-134,145,73,14,112,284,74,-132,-234,12,13,-225',
'231,130,93,92,266,77,134,88,89,241,133,44,272,337,87,71,67,273,69,70',
'68,258,257,53,54,56,55,63,66,134,58,64,57,133,59,405,94,134,253,251',
'86,133,134,252,250,134,133,304,134,133,280,15,133,357,109,356,113,43',
'108,50,340,52,47,282,51,76,72,342,45,75,48,49,63,66,73,14,64,357,74',
'356,112,12,13,268,269,296,344,63,66,77,297,64,57,249,59,44,248,282,245',
'71,67,349,69,70,350,351,234,53,54,56,55,15,245,354,58,326,358,43,360',
'50,323,52,47,230,51,76,72,79,45,75,48,49,280,282,73,14,280,368,74,369',
'305,12,13,304,320,292,216,291,217,77,289,219,293,287,286,44,288,290',
'377,71,67,221,69,70,220,215,294,53,54,56,55,63,66,197,58,64,57,81,59',
'403,86,379,218,295,280,164,381,161,282,159,298,384,122,81,109,15,113',
'122,108,123,388,43,360,50,390,52,47,391,51,76,72,392,45,75,48,49,393',
'394,73,14,112,122,74,396,397,12,13,119,304,81,93,92,78,77,406,88,89',
'407,408,44,409,410,87,71,67,,69,70,,,,53,54,56,55,63,66,,58,64,57,,59',
'401,94,,,,,,,,,,,,,,,15,,,,,,43,,50,,52,47,,51,76,72,,45,75,48,49,,',
'73,14,,,74,,86,12,13,,,,,,,77,,,,,109,44,113,,108,71,67,,69,70,,,,53',
'54,56,55,63,66,,58,64,57,,59,308,112,,,,,,,,,,,,,,,15,,,,,,43,87,50',
',52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64',
'57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51',
'76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71',
'67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,',
',,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,',
'53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74',
',,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15',
',,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,86,12,13,,,,',
',,77,,,,,109,44,113,,108,71,67,,69,70,,,,53,54,56,55,63,66,,58,64,57',
',59,399,112,,,,,,,,,,,,,,,15,,,,,,43,87,50,,52,47,,51,76,72,,45,75,48',
'49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,',
',,53,54,56,55,15,,,58,,,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73,14',
',,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56',
'55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13',
',,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,',
'43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77',
',64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115',
',51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,',
',,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45',
'75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70',
',,,53,54,56,55,15,,,58,,,43,,50,,52,129,,51,76,72,,45,75,,,,,73,14,',
',74,,86,12,13,,,,,,,77,,,,,109,44,113,,108,71,67,,69,70,,,,53,54,56',
'55,63,66,,58,64,57,,59,310,112,,,,86,,,,,,,,,,,15,,,109,,113,43,108',
'50,,52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,112,12,13,,,,,63,66,77',
',64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115',
',51,76,72,,45,75,,,,,73,14,,,74,,86,12,13,,,,,,,77,,,,,109,44,113,,108',
'71,67,,69,70,,,,53,54,56,55,63,66,,58,64,57,,59,302,112,,,,,,,,,,,,',
',,15,,,,,,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13',
',,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,',
'199,216,210,217,52,211,219,212,208,206,,201,214,,,,,73,14,220,215,213',
',,12,13,,,,,,,77,,,,,218,200,,,,71,67,,69,70,,,,53,54,56,55,63,66,,58',
'64,57,148,59,292,216,291,217,,289,219,293,287,286,,288,290,,,,15,,,220',
'215,294,43,,50,,52,115,,51,76,72,,45,75,,,218,295,73,14,,,74,,,12,13',
',,,,63,66,77,,64,57,150,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58',
',,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,292,216,291',
'217,77,289,219,293,287,286,44,288,290,,71,67,,69,70,220,215,294,53,54',
'56,55,63,66,,58,64,57,,59,153,,,218,295,,,,,,,,,,,,15,,,,,,43,,50,,52',
'115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59',
'44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72',
',45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69',
'70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14',
',,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56',
'55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13',
',,,,63,66,77,,64,57,,163,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,',
',43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77',
',64,57,330,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52',
'115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59',
'44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,47,,51,76,72',
',45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,331,59,44,,,,71',
'67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,',
',,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,',
'53,54,56,55,15,,,58,,,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73,14,',
',74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55',
'15,,,58,,,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13',
',,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,',
'43,,50,,52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66',
'77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52',
'47,,51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,',
'59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,47,,51,76',
'72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71',
'67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,',
',,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,',
'53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74',
',,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15',
',,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,',
',58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,',
',58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,',
',58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,',
',58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,196,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,',
'50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64',
'57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,199,216,210,217,52',
'211,219,212,208,206,,201,214,,,,,73,14,220,215,213,,,12,13,,,,,,,77',
',,,,218,200,,,,71,67,,69,70,,,,53,54,56,55,63,66,,58,64,57,,59,333,',
',,,,,,,,,,,,,,15,,,,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74',
',,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15',
',,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,47,,51,76,72,,45,75,48,49',
',,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,',
',58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,228,,58,,,43,,50,,52,115,,51',
'76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,,,77,,,,,,44,,,,71,67,,69,70',
',,,53,54,56,55,63,66,,58,64,57,,59,363,,,,,,,,,,,,,,,,15,,,,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,236,,58,,,43,,50,,52,115,,51,76,72,,45,75,',
',,,73,14,,,74,,,12,13,,,,,,,77,,,,,,44,,,,71,67,,69,70,,,,53,54,56,55',
'63,66,,58,64,57,,59,153,,,,,,,,,,,,,,,,15,,,,,,43,,50,,52,47,,51,76',
'72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71',
'67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,47,,51,76,72,,45,75,48',
'49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,',
',,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,',
'74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55',
'15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,',
',63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43',
',50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64',
'57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51',
'76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71',
'67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,',
',,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,',
'53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74',
',,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15',
',,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,,,77,,,,,,44,,,',
'71,67,,69,70,,,86,53,54,56,55,,,,58,105,106,107,102,97,109,,113,,108',
',,98,100,99,101,,,,,,,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86',
'88,89,,,,,,87,105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,,,',
'94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105',
'106,107,102,97,109,,113,,108,,,98,100,99,101,,,,,,94,,,,,,,,,,112,,',
',104,103,,,90,91,93,92,95,96,86,88,89,,,254,,,87,105,106,107,102,97',
'109,,113,,108,,,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91',
'93,92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109,,113,,108,,,98,100',
'99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89',
',,,,,87,105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,,,,94,,,',
',,,,,,112,,,,104,103,,,90,91,93,92,95,96,,88,89,86,,240,,,87,,,,105',
'106,107,102,97,109,,113,,108,,,98,100,99,101,,,94,,,,,,,,,,,,,112,,',
',104,103,,,90,91,93,92,95,96,,88,89,86,,239,,,87,,,,105,106,107,102',
'97,109,,113,,108,,,98,100,99,101,,,94,,,,,,,,,,,,,112,,,,104,103,,,90',
'91,93,92,95,96,,88,89,86,,238,,,87,,,,105,106,107,102,97,109,,113,,108',
',,98,100,99,101,,,94,,,,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96',
'86,88,89,,,,,,87,105,106,107,102,97,109,,113,,108,,,98,100,99,101,,',
',,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105',
'106,107,102,97,109,,113,,108,,,98,100,99,101,,,,,,94,,,,,,,,,,112,,',
',104,103,,86,90,91,93,92,95,96,,88,89,,,,,109,87,113,,108,,86,,237,',
',,268,269,,105,106,107,102,97,109,,113,94,108,,112,98,100,99,101,,,',
'90,91,93,92,,,,88,89,,,,112,,87,,104,103,,,90,91,93,92,95,96,,88,89',
',86,,110,,87,254,94,,,105,106,107,102,97,109,,113,,108,,,98,100,99,101',
',94,,,,,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87',
'105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,,,,94,,,,,,,,,,112',
',,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109',
',113,,108,,,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93',
'92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109,,113,,108,,,98,100',
'99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89',
',,,,,87,105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,,,,94,,,',
',,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105,106,107',
'102,97,109,278,113,,108,,,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104',
'103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109,,113',
',108,,226,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92',
'95,96,86,88,89,,,274,,,87,105,106,107,102,97,109,,113,86,108,,,98,100',
'99,101,,,,,,94,109,,113,,108,,,,,112,,,,104,103,,,90,91,93,92,95,96',
',88,89,112,,,86,,87,,,90,91,93,92,,,,88,89,109,,113,86,108,87,,,,,94',
',,,,,,109,,113,,108,,,,,112,94,,,,,,,90,91,93,92,95,96,,88,89,112,,',
',,87,,86,90,91,93,92,95,96,,88,89,,,,97,109,87,113,86,108,,94,98,,,',
',,,,,97,109,,113,,108,,94,98,,112,,,,,,,,90,91,93,92,95,96,,88,89,112',
',,,,87,,86,90,91,93,92,95,96,,88,89,,,,97,109,87,113,86,108,,94,98,',
',,,,,,,97,109,,113,,108,,94,98,,112,,,,,,,,90,91,93,92,95,96,,88,89',
'112,,,,,87,,86,90,91,93,92,95,96,,88,89,,,102,97,109,87,113,,108,,94',
'98,100,99,101,,,,,,,,,,,,,94,,,112,,,,,86,,,90,91,93,92,95,96,,88,89',
'102,97,109,,113,87,108,,86,98,100,99,101,,,,,105,106,107,102,97,109',
',113,,108,94,112,98,100,99,101,103,,,90,91,93,92,95,96,,88,89,,,,112',
',87,,104,103,,,90,91,93,92,95,96,,88,89,86,,,,,87,,94,,105,106,107,102',
'97,109,,113,,108,,,98,100,99,101,,,94,,,,,,,,,,,,,112,,,,104,103,,,90',
'91,93,92,95,96,,88,89,86,,110,,,87,,,,105,106,107,102,97,109,,113,,108',
',,98,100,99,101,63,66,94,,64,63,66,63,66,64,,64,63,66,,112,64,,,104',
'103,,,90,91,93,92,95,96,,88,89,,,,,,87,,144,,,141,,144,,144,141,,141',
'86,144,,,141,,,,,94,,,77,,109,,113,77,108,77,,,145,67,77,86,,145,67',
'145,67,,,86,145,67,,,,109,112,113,,108,,,,109,,113,,108,,,,88,89,,,',
',,87,,,112,,,,,,,,112,,,,,,,88,89,,,,,,87,88,89,,,,,,87' ]
        racc_action_table = arr = ::Array.new(6941, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,235,208,0,0,245,0,209,175,206,213,311,249,214,245,235,8,8,8,8,311',
'122,175,0,175,161,175,152,320,0,152,0,320,0,0,320,0,0,0,48,0,0,0,0,208',
'249,0,0,175,209,0,206,213,0,0,214,122,47,175,175,161,0,211,175,175,129',
'211,0,171,271,175,0,0,171,0,0,0,157,157,0,0,0,0,391,391,47,0,391,391',
'47,391,391,175,129,149,147,116,129,50,149,147,210,50,265,115,210,202',
'391,115,354,116,354,116,391,116,391,275,391,391,203,391,391,391,279',
'391,391,391,391,159,159,391,391,159,308,391,308,116,391,391,337,337',
'223,281,5,5,391,225,5,5,139,5,391,137,285,136,391,391,299,391,391,301',
'303,304,391,391,391,391,5,131,307,391,247,309,5,310,5,246,5,5,121,5',
'5,5,5,5,5,5,5,314,315,5,5,316,317,5,318,234,5,5,322,243,277,277,277',
'277,5,277,277,277,277,277,5,277,277,324,5,5,111,5,5,277,277,277,5,5',
'5,5,390,390,109,5,390,390,80,390,390,176,336,277,277,242,78,339,68,341',
'67,227,348,349,165,176,390,176,228,176,42,357,390,358,390,360,390,390',
'361,390,390,390,365,390,390,390,390,366,367,390,390,176,41,390,373,374',
'390,390,40,232,6,176,176,1,390,395,176,176,398,400,390,402,404,176,390',
'390,,390,390,,,,390,390,390,390,388,388,,390,388,388,,388,388,176,,',
',,,,,,,,,,,,388,,,,,,388,,388,,388,388,,388,388,388,,388,388,388,388',
',,388,388,,,388,,173,388,388,,,,,,,388,,,,,173,388,173,,173,388,388',
',388,388,,,,388,388,388,388,237,237,,388,237,237,,237,237,173,,,,,,',
',,,,,,,,237,,,,,,237,173,237,,237,237,,237,237,237,,237,237,237,237',
',,237,237,,,237,,,237,237,,,,,12,12,237,,12,12,,12,237,,,,237,237,,237',
'237,,,,237,237,237,237,12,,,237,,,12,,12,,12,12,,12,12,12,,12,12,,,',
',12,12,,,12,,,12,12,,,,,13,13,12,,13,13,,13,12,,,,12,12,,12,12,,,,12',
'12,12,12,13,,,12,,,13,,13,,13,13,,13,13,13,,13,13,,,,,13,13,,,13,,,13',
'13,,,,,14,14,13,,14,14,,14,13,,,,13,13,,13,13,,,,13,13,13,13,14,,,13',
',,14,,14,,14,14,,14,14,14,,14,14,,,,,14,14,,,14,,,14,14,,,,,15,15,14',
',15,15,,15,14,,,,14,14,,14,14,,,,14,14,14,14,15,,,14,,,15,,15,,15,15',
',15,15,15,,15,15,,,,,15,15,,,15,,174,15,15,,,,,,,15,,,,,174,15,174,',
'174,15,15,,15,15,,,,15,15,15,15,377,377,,15,377,377,,377,377,174,,,',
',,,,,,,,,,,377,,,,,,377,174,377,,377,377,,377,377,377,,377,377,377,377',
',,377,377,,,377,,,377,377,,,,,369,369,377,,369,369,,369,377,,,,377,377',
',377,377,,,,377,377,377,377,369,,,377,,,369,,369,,369,369,,369,369,369',
',369,369,369,369,,,369,369,,,369,,,369,369,,,,,356,356,369,,356,356',
',356,369,,,,369,369,,369,369,,,,369,369,369,369,356,,,369,,,356,,356',
',356,356,,356,356,356,,356,356,,,,,356,356,,,356,,,356,356,,,,,43,43',
'356,,43,43,,43,356,,,,356,356,,356,356,,,,356,356,356,356,43,,,356,',
',43,,43,,43,43,,43,43,43,,43,43,,,,,43,43,,,43,,,43,43,,,,,44,44,43',
',44,44,,44,43,,,,43,43,,43,43,,,,43,43,43,43,44,,,43,,,44,,44,,44,44',
',44,44,44,,44,44,,,,,44,44,,,44,,,44,44,,,,,45,45,44,,45,45,,45,44,',
',,44,44,,44,44,,,,44,44,44,44,45,,,44,,,45,,45,,45,45,,45,45,45,,45',
'45,,,,,45,45,,,45,,,45,45,,,,,46,46,45,,46,46,,46,45,,,,45,45,,45,45',
',,,45,45,45,45,46,,,45,,,46,,46,,46,46,,46,46,46,,46,46,,,,,46,46,,',
'46,,117,46,46,,,,,,,46,,,,,117,46,117,,117,46,46,,46,46,,,,46,46,46',
'46,238,238,,46,238,238,,238,238,117,,,,172,,,,,,,,,,,238,,,172,,172',
'238,172,238,,238,238,,238,238,238,,238,238,238,238,,,238,238,,,238,',
'172,238,238,,,,,239,239,238,,239,239,,239,238,,,,238,238,,238,238,,',
',238,238,238,238,239,,,238,,,239,,239,,239,239,,239,239,239,,239,239',
',,,,239,239,,,239,,114,239,239,,,,,,,239,,,,,114,239,114,,114,239,239',
',239,239,,,,239,239,239,239,230,230,,239,230,230,,230,230,114,,,,,,',
',,,,,,,,230,,,,,,230,,230,,230,230,,230,230,230,,230,230,230,230,,,230',
'230,,,230,,,230,230,,,,,240,240,230,,240,240,,240,230,,,,230,230,,230',
'230,,,,230,230,230,230,240,,,230,,,240,240,240,240,240,240,240,240,240',
'240,,240,240,,,,,240,240,240,240,240,,,240,240,,,,,,,240,,,,,240,240',
',,,240,240,,240,240,,,,240,240,240,240,57,57,,240,57,57,57,57,282,282',
'282,282,,282,282,282,282,282,,282,282,,,,57,,,282,282,282,57,,57,,57',
'57,,57,57,57,,57,57,,,282,282,57,57,,,57,,,57,57,,,,,58,58,57,,58,58',
'58,58,57,,,,57,57,,57,57,,,,57,57,57,57,58,,,57,,,58,,58,,58,58,,58',
'58,58,,58,58,,,,,58,58,,,58,,,58,58,,,221,221,221,221,58,221,221,221',
'221,221,58,221,221,,58,58,,58,58,221,221,221,58,58,58,58,59,59,,58,59',
'59,,59,59,,,221,221,,,,,,,,,,,,59,,,,,,59,,59,,59,59,,59,59,59,,59,59',
',,,,59,59,,,59,,,59,59,,,,,65,65,59,,65,65,,65,59,,,,59,59,,59,59,,',
',59,59,59,59,65,,,59,,,65,,65,,65,65,,65,65,65,,65,65,,,,,65,65,,,65',
',,65,65,,,,,241,241,65,,241,241,,241,65,,,,65,65,,65,65,,,,65,65,65',
'65,241,,,65,,,241,,241,,241,241,,241,241,241,,241,241,,,,,241,241,,',
'241,,,241,241,,,,,340,340,241,,340,340,,340,241,,,,241,241,,241,241',
',,,241,241,241,241,340,,,241,,,340,,340,,340,340,,340,340,340,,340,340',
',,,,340,340,,,340,,,340,340,,,,,70,70,340,,70,70,,70,340,,,,340,340',
',340,340,,,,340,340,340,340,70,,,340,,,70,,70,,70,70,,70,70,70,,70,70',
',,,,70,70,,,70,,,70,70,,,,,250,250,70,,250,250,250,250,70,,,,70,70,',
'70,70,,,,70,70,70,70,250,,,70,,,250,,250,,250,250,,250,250,250,,250',
'250,,,,,250,250,,,250,,,250,250,,,,,79,79,250,,79,79,,79,250,,,,250',
'250,,250,250,,,,250,250,250,250,79,,,250,,,79,,79,,79,79,,79,79,79,',
'79,79,79,79,,,79,79,,,79,,,79,79,,,,,252,252,79,,252,252,252,252,79',
',,,79,79,,79,79,,,,79,79,79,79,252,,,79,,,252,,252,,252,252,,252,252',
'252,,252,252,,,,,252,252,,,252,,,252,252,,,,,81,81,252,,81,81,,81,252',
',,,252,252,,252,252,,,,252,252,252,252,81,,,252,,,81,,81,,81,81,,81',
'81,81,,81,81,81,81,,,81,81,,,81,,,81,81,,,,,82,82,81,,82,82,,82,81,',
',,81,81,,81,81,,,,81,81,81,81,82,,,81,,,82,,82,,82,82,,82,82,82,,82',
'82,82,82,,,82,82,,,82,,,82,82,,,,,83,83,82,,83,83,,83,82,,,,82,82,,82',
'82,,,,82,82,82,82,83,,,82,,,83,,83,,83,83,,83,83,83,,83,83,83,83,,,83',
'83,,,83,,,83,83,,,,,84,84,83,,84,84,,84,83,,,,83,83,,83,83,,,,83,83',
'83,83,84,,,83,,,84,,84,,84,84,,84,84,84,,84,84,84,84,,,84,84,,,84,,',
'84,84,,,,,85,85,84,,85,85,,85,84,,,,84,84,,84,84,,,,84,84,84,84,85,',
',84,,,85,,85,,85,85,,85,85,85,,85,85,85,85,,,85,85,,,85,,,85,85,,,,',
'283,283,85,,283,283,,283,85,,,,85,85,,85,85,,,,85,85,85,85,283,,,85',
',,283,,283,,283,283,,283,283,283,,283,283,,,,,283,283,,,283,,,283,283',
',,,,87,87,283,,87,87,,87,283,,,,283,283,,283,283,,,,283,283,283,283',
'87,,,283,,,87,,87,,87,87,,87,87,87,,87,87,,,,,87,87,,,87,,,87,87,,,',
',88,88,87,,88,88,,88,87,,,,87,87,,87,87,,,,87,87,87,87,88,,,87,,,88',
',88,,88,88,,88,88,88,,88,88,,,,,88,88,,,88,,,88,88,,,,,89,89,88,,89',
'89,,89,88,,,,88,88,,88,88,,,,88,88,88,88,89,,,88,,,89,,89,,89,89,,89',
'89,89,,89,89,,,,,89,89,,,89,,,89,89,,,,,90,90,89,,90,90,,90,89,,,,89',
'89,,89,89,,,,89,89,89,89,90,,,89,,,90,,90,,90,90,,90,90,90,,90,90,,',
',,90,90,,,90,,,90,90,,,,,91,91,90,,91,91,,91,90,,,,90,90,,90,90,,,,90',
'90,90,90,91,,,90,,,91,,91,,91,91,,91,91,91,,91,91,,,,,91,91,,,91,,,91',
'91,,,,,92,92,91,,92,92,,92,91,,,,91,91,,91,91,,,,91,91,91,91,92,,,91',
',,92,,92,,92,92,,92,92,92,,92,92,,,,,92,92,,,92,,,92,92,,,,,93,93,92',
',93,93,,93,92,,,,92,92,,92,92,,,,92,92,92,92,93,,,92,,,93,,93,,93,93',
',93,93,93,,93,93,,,,,93,93,,,93,,,93,93,,,,,94,94,93,,94,94,,94,93,',
',,93,93,,93,93,,,,93,93,93,93,94,,,93,,,94,,94,,94,94,,94,94,94,,94',
'94,,,,,94,94,,,94,,,94,94,,,,,95,95,94,,95,95,,95,94,,,,94,94,,94,94',
',,,94,94,94,94,95,,,94,,,95,,95,,95,95,,95,95,95,,95,95,,,,,95,95,,',
'95,,,95,95,,,,,96,96,95,,96,96,,96,95,,,,95,95,,95,95,,,,95,95,95,95',
'96,,,95,,,96,,96,,96,96,,96,96,96,,96,96,,,,,96,96,,,96,,,96,96,,,,',
'97,97,96,,97,97,,97,96,,,,96,96,,96,96,,,,96,96,96,96,97,,,96,,,97,',
'97,,97,97,,97,97,97,,97,97,,,,,97,97,,,97,,,97,97,,,,,98,98,97,,98,98',
',98,97,,,,97,97,,97,97,,,,97,97,97,97,98,,,97,,,98,,98,,98,98,,98,98',
'98,,98,98,,,,,98,98,,,98,,,98,98,,,,,99,99,98,,99,99,,99,98,,,,98,98',
',98,98,,,,98,98,98,98,99,,,98,,,99,,99,,99,99,,99,99,99,,99,99,,,,,99',
'99,,,99,,,99,99,,,,,100,100,99,,100,100,,100,99,,,,99,99,,99,99,,,,99',
'99,99,99,100,,,99,,,100,,100,,100,100,,100,100,100,,100,100,,,,,100',
'100,,,100,,,100,100,,,,,101,101,100,,101,101,,101,100,,,,100,100,,100',
'100,,,,100,100,100,100,101,,,100,,,101,,101,,101,101,,101,101,101,,101',
'101,,,,,101,101,,,101,,,101,101,,,,,102,102,101,,102,102,,102,101,,',
',101,101,,101,101,,,,101,101,101,101,102,,,101,,,102,,102,,102,102,',
'102,102,102,,102,102,,,,,102,102,,,102,,,102,102,,,,,103,103,102,,103',
'103,,103,102,,,,102,102,,102,102,,,,102,102,102,102,103,,,102,,,103',
',103,,103,103,,103,103,103,,103,103,,,,,103,103,,,103,,,103,103,,,,',
'104,104,103,,104,104,,104,103,,,,103,103,,103,103,,,,103,103,103,103',
'104,,,103,,,104,,104,,104,104,,104,104,104,,104,104,,,,,104,104,,,104',
',,104,104,,,,,105,105,104,,105,105,,105,104,,,,104,104,,104,104,,,,104',
'104,104,104,105,,,104,,,105,,105,,105,105,,105,105,105,,105,105,,,,',
'105,105,,,105,,,105,105,,,,,106,106,105,,106,106,,106,105,,,,105,105',
',105,105,,,,105,105,105,105,106,,,105,,,106,,106,,106,106,,106,106,106',
',106,106,,,,,106,106,,,106,,,106,106,,,,,107,107,106,,107,107,,107,106',
',,,106,106,,106,106,,,,106,106,106,106,107,,,106,,,107,,107,,107,107',
',107,107,107,,107,107,,,,,107,107,,,107,,,107,107,,,,,108,108,107,,108',
'108,,108,107,,,,107,107,,107,107,,,,107,107,107,107,108,,,107,,,108',
',108,,108,108,,108,108,108,,108,108,,,,,108,108,,,108,,,108,108,,,,',
'254,254,108,,254,254,,254,108,,,108,108,108,,108,108,,,,108,108,108',
'108,254,,,108,,,254,,254,,254,254,,254,254,254,,254,254,,,,,254,254',
',,254,,,254,254,,,,,110,110,254,,110,110,,110,254,,,,254,254,,254,254',
',,,254,254,254,254,110,,,254,,,110,110,110,110,110,110,110,110,110,110',
',110,110,,,,,110,110,110,110,110,,,110,110,,,,,,,110,,,,,110,110,,,',
'110,110,,110,110,,,,110,110,110,110,256,256,,110,256,256,,256,256,,',
',,,,,,,,,,,,,256,,,,,,256,,256,,256,256,,256,256,256,,256,256,,,,,256',
'256,,,256,,,256,256,,,,,112,112,256,,112,112,,112,256,,,,256,256,,256',
'256,,,,256,256,256,256,112,,,256,,,112,,112,,112,112,,112,112,112,,112',
'112,,,,,112,112,,,112,,,112,112,,,,,113,113,112,,113,113,,113,112,,',
',112,112,,112,112,,,,112,112,112,112,113,,,112,,,113,,113,,113,113,',
'113,113,113,,113,113,,,,,113,113,,,113,,,113,113,,,,,201,201,113,,201',
'201,,201,113,,,,113,113,,113,113,,,,113,113,113,113,201,,,113,,,201',
',201,,201,201,,201,201,201,,201,201,,,,,201,201,,,201,,,201,201,,,,',
'323,323,201,,323,323,,323,201,,,,201,201,,201,201,,,,201,201,201,201',
'323,,,201,,,323,,323,,323,323,,323,323,323,,323,323,323,323,,,323,323',
',,323,,,323,323,,,,,200,200,323,,200,200,,200,323,,,,323,323,,323,323',
',,,323,323,323,323,200,,,323,,,200,,200,,200,200,,200,200,200,,200,200',
',,,,200,200,,,200,,,200,200,,,,,199,199,200,,199,199,,199,200,,,,200',
'200,,200,200,,,,200,200,200,200,199,,,200,,,199,,199,,199,199,,199,199',
'199,,199,199,,,,,199,199,,,199,,,199,199,,,,,196,196,199,,196,196,,196',
'199,,,,199,199,,199,199,,,,199,199,199,199,196,,,199,,,196,,196,,196',
'196,,196,196,196,,196,196,,,,,196,196,,,196,,,196,196,,,,,119,119,196',
',119,119,,119,196,,,,196,196,,196,196,,,,196,196,196,196,119,119,,196',
',,119,,119,,119,119,,119,119,119,,119,119,,,,,119,119,,,119,,,119,119',
',,,,,,119,,,,,,119,,,,119,119,,119,119,,,,119,119,119,119,312,312,,119',
'312,312,,312,312,,,,,,,,,,,,,,,,312,,,,,,312,,312,,312,312,,312,312',
'312,,312,312,,,,,312,312,,,312,,,312,312,,,,,261,261,312,,261,261,,261',
'312,,,,312,312,,312,312,,,,312,312,312,312,261,,,312,,,261,,261,,261',
'261,,261,261,261,,261,261,,,,,261,261,,,261,,,261,261,,,,,123,123,261',
',123,123,,123,261,,,,261,261,,261,261,,,,261,261,261,261,123,123,,261',
',,123,,123,,123,123,,123,123,123,,123,123,,,,,123,123,,,123,,,123,123',
',,,,,,123,,,,,,123,,,,123,123,,123,123,,,,123,123,123,123,163,163,,123',
'163,163,,163,163,,,,,,,,,,,,,,,,163,,,,,,163,,163,,163,163,,163,163',
'163,,163,163,163,163,,,163,163,,,163,,,163,163,,,,,160,160,163,,160',
'160,,160,163,,,,163,163,,163,163,,,,163,163,163,163,160,,,163,,,160',
',160,,160,160,,160,160,160,,160,160,160,160,,,160,160,,,160,,,160,160',
',,,,273,273,160,,273,273,,273,160,,,,160,160,,160,160,,,,160,160,160',
'160,273,,,160,,,273,,273,,273,273,,273,273,273,,273,273,,,,,273,273',
',,273,,,273,273,,,,,274,274,273,,274,274,,274,273,,,,273,273,,273,273',
',,,273,273,273,273,274,,,273,,,274,,274,,274,274,,274,274,274,,274,274',
',,,,274,274,,,274,,,274,274,,,,,280,280,274,,280,280,,280,274,,,,274',
'274,,274,274,,,,274,274,274,274,280,,,274,,,280,,280,,280,280,,280,280',
'280,,280,280,,,,,280,280,,,280,,,280,280,,,,,130,130,280,,130,130,,130',
'280,,,,280,280,,280,280,,,,280,280,280,280,130,,,280,,,130,,130,,130',
'130,,130,130,130,,130,130,,,,,130,130,,,130,,,130,130,,,,,305,305,130',
',305,305,,305,130,,,,130,130,,130,130,,,,130,130,130,130,305,,,130,',
',305,,305,,305,305,,305,305,305,,305,305,,,,,305,305,,,305,,,305,305',
',,,,298,298,305,,298,298,,298,305,,,,305,305,,305,305,,,,305,305,305',
'305,298,,,305,,,298,,298,,298,298,,298,298,298,,298,298,,,,,298,298',
',,298,,,298,298,,,,,284,284,298,,284,284,,284,298,,,,298,298,,298,298',
',,,298,298,298,298,284,,,298,,,284,,284,,284,284,,284,284,284,,284,284',
',,,,284,284,,,284,,,284,284,,,,,86,86,284,,86,86,,86,284,,,,284,284',
',284,284,,,,284,284,284,284,86,,,284,,,86,,86,,86,86,,86,86,86,,86,86',
',,,,86,86,,,86,,,86,86,,,,,,,86,,,,,,86,,,,86,86,,86,86,,,146,86,86',
'86,86,,,,86,146,146,146,146,146,146,,146,,146,,,146,146,146,146,,,,',
',,,,,,,,,,,146,,,,146,146,,,146,146,146,146,146,146,353,146,146,,,,',
',146,353,353,353,353,353,353,,353,,353,,,353,353,353,353,,,,,,146,,',
',,,,,,,353,,,,353,353,,,353,353,353,353,353,353,347,353,353,,,,,,353',
'347,347,347,347,347,347,,347,,347,,,347,347,347,347,,,,,,353,,,,,,,',
',,347,,,,347,347,,,347,347,347,347,347,347,151,347,347,,,151,,,347,151',
'151,151,151,151,151,,151,,151,,,151,151,151,151,,,,,,347,,,,,,,,,,151',
',,,151,151,,,151,151,151,151,151,151,346,151,151,,,,,,151,346,346,346',
'346,346,346,,346,,346,,,346,346,346,346,,,,,,151,,,,,,,,,,346,,,,346',
'346,,,346,346,346,346,346,346,155,346,346,,,,,,346,155,155,155,155,155',
'155,,155,,155,,,155,155,155,155,,,,,,346,,,,,,,,,,155,,,,155,155,,,155',
'155,155,155,155,155,,155,155,128,,128,,,155,,,,128,128,128,128,128,128',
',128,,128,,,128,128,128,128,,,155,,,,,,,,,,,,,128,,,,128,128,,,128,128',
'128,128,128,128,,128,128,127,,127,,,128,,,,127,127,127,127,127,127,',
'127,,127,,,127,127,127,127,,,128,,,,,,,,,,,,,127,,,,127,127,,,127,127',
'127,127,127,127,,127,127,126,,126,,,127,,,,126,126,126,126,126,126,',
'126,,126,,,126,126,126,126,,,127,,,,,,,,,,,,,126,,,,126,126,,,126,126',
'126,126,126,126,222,126,126,,,,,,126,222,222,222,222,222,222,,222,,222',
',,222,222,222,222,,,,,,126,,,,,,,,,,222,,,,222,222,,,222,222,222,222',
'222,222,162,222,222,,,,,,222,162,162,162,162,162,162,,162,,162,,,162',
'162,162,162,,,,,,222,,,,,,,,,,162,,,,162,162,,180,162,162,162,162,162',
'162,,162,162,,,,,180,162,180,,180,,124,,124,,,,162,162,,124,124,124',
'124,124,124,,124,162,124,,180,124,124,124,124,,,,180,180,180,180,,,',
'180,180,,,,124,,180,,124,124,,,124,124,124,124,124,124,,124,124,,270',
',270,,124,270,180,,,270,270,270,270,270,270,,270,,270,,,270,270,270',
'270,,124,,,,,,,,,,,,,,270,,,,270,270,,,270,270,270,270,270,270,338,270',
'270,,,,,,270,338,338,338,338,338,338,,338,,338,,,338,338,338,338,,,',
',,270,,,,,,,,,,338,,,,338,338,,,338,338,338,338,338,338,332,338,338',
',,,,,338,332,332,332,332,332,332,,332,,332,,,332,332,332,332,,,,,,338',
',,,,,,,,,332,,,,332,332,,,332,332,332,332,332,332,192,332,332,,,,,,332',
'192,192,192,192,192,192,,192,,192,,,192,192,192,192,,,,,,332,,,,,,,',
',,192,,,,192,192,,,192,192,192,192,192,192,329,192,192,,,,,,192,329',
'329,329,329,329,329,,329,,329,,,329,329,329,329,,,,,,192,,,,,,,,,,329',
',,,329,329,,,329,329,329,329,329,329,198,329,329,,,,,,329,198,198,198',
'198,198,198,198,198,,198,,,198,198,198,198,,,,,,329,,,,,,,,,,198,,,',
'198,198,,,198,198,198,198,198,198,118,198,198,,,,,,198,118,118,118,118',
'118,118,,118,,118,,118,118,118,118,118,,,,,,198,,,,,,,,,,118,,,,118',
'118,,,118,118,118,118,118,118,193,118,118,,,193,,,118,193,193,193,193',
'193,193,,193,181,193,,,193,193,193,193,,,,,,118,181,,181,,181,,,,,193',
',,,193,193,,,193,193,193,193,193,193,,193,193,181,,,182,,193,,,181,181',
'181,181,,,,181,181,182,,182,183,182,181,,,,,193,,,,,,,183,,183,,183',
',,,,182,181,,,,,,,182,182,182,182,182,182,,182,182,183,,,,,182,,184',
'183,183,183,183,183,183,,183,183,,,,184,184,183,184,185,184,,182,184',
',,,,,,,,185,185,,185,,185,,183,185,,184,,,,,,,,184,184,184,184,184,184',
',184,184,185,,,,,184,,186,185,185,185,185,185,185,,185,185,,,,186,186',
'185,186,187,186,,184,186,,,,,,,,,187,187,,187,,187,,185,187,,186,,,',
',,,,186,186,186,186,186,186,,186,186,187,,,,,186,,188,187,187,187,187',
'187,187,,187,187,,,188,188,188,187,188,,188,,186,188,188,188,188,,,',
',,,,,,,,,187,,,188,,,,,189,,,188,188,188,188,188,188,,188,188,189,189',
'189,,189,188,189,,190,189,189,189,189,,,,,190,190,190,190,190,190,,190',
',190,188,189,190,190,190,190,189,,,189,189,189,189,189,189,,189,189',
',,,190,,189,,190,190,,,190,190,190,190,190,190,,190,190,191,,,,,190',
',189,,191,191,191,191,191,191,,191,,191,,,191,191,191,191,,,190,,,,',
',,,,,,,,191,,,,191,191,,,191,191,191,191,191,191,,191,191,11,,11,,,191',
',,,11,11,11,11,11,11,,11,,11,,,11,11,11,11,212,212,191,,212,51,51,248',
'248,51,,248,326,326,,11,326,,,11,11,,,11,11,11,11,11,11,,11,11,,,,,',
'11,,212,,,212,,51,,248,51,,248,179,326,,,326,,,,,11,,,212,,179,,179',
'51,179,248,,,212,212,326,178,,51,51,248,248,,,177,326,326,,,,178,179',
'178,,178,,,,177,,177,,177,,,,179,179,,,,,,179,,,178,,,,,,,,177,,,,,',
',178,178,,,,,,178,177,177,,,,,,177' ]
        racc_action_check = arr = ::Array.new(6941, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   289,   nil,   nil,   nil,   142,   273,   nil,   -48,   nil,
   nil,  6763,   454,   514,   574,   634,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   258,   207,   230,   898,   958,  1018,  1078,    49,    -5,   nil,
    62,  6798,   nil,   nil,   nil,   nil,   nil,  1450,  1510,  1594,
   nil,   nil,   nil,   nil,   nil,  1654,   nil,   170,   173,   nil,
  1834,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   242,  1954,
   221,  2074,  2134,  2194,  2254,  2314,  5206,  2434,  2494,  2554,
  2614,  2674,  2734,  2794,  2854,  2914,  2974,  3034,  3094,  3154,
  3214,  3274,  3334,  3394,  3454,  3514,  3574,  3634,  3694,   189,
  3814,   209,  3958,  4018,  1270,    68,    90,  1126,  6278,  4378,
   nil,   171,   -14,  4582,  5896,   nil,  5721,  5664,  5607,    57,
  4966,   143,   nil,   nil,   nil,   nil,   129,   140,   nil,   129,
   nil,   nil,   nil,   nil,   nil,   nil,  5280,    88,   nil,    87,
   nil,  5442,    18,   nil,   nil,  5550,   nil,    74,   nil,   127,
  4726,   -10,  5829,  4666,   nil,   237,   nil,   nil,   nil,   nil,
   nil,    61,  1170,   358,   682,     2,   230,  6871,  6863,  6838,
  5876,  6349,  6392,  6409,  6456,  6473,  6520,  6537,  6584,  6629,
  6649,  6706,  6116,  6332,   nil,   nil,  4318,   nil,  6224,  4258,
  4198,  4078,    65,   107,   nil,   nil,    -2,   nil,    -9,    -4,
    65,    26,  6793,    -1,     2,   nil,   nil,   nil,   nil,   nil,
   nil,  1538,  5775,    94,   nil,   123,   nil,   234,   183,   nil,
  1306,   nil,   272,   nil,   181,   -11,   nil,   394,  1162,  1222,
  1366,  1714,   199,   163,   nil,   -21,   168,   134,  6800,   -28,
  1894,   nil,  2014,   nil,  3754,   nil,  3898,   nil,   nil,   nil,
   nil,  4522,   nil,   nil,   nil,    91,   nil,   nil,   nil,   nil,
  5954,    60,   nil,  4786,  4846,   104,   nil,   170,   nil,   114,
  4906,   133,  1428,  2374,  5146,   141,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  5086,   131,
   nil,   151,   nil,    91,   127,  5026,   nil,   160,   101,   163,
   142,    -1,  4462,   nil,   147,   177,   151,   184,   187,   nil,
    -8,   nil,   187,  4138,   206,   nil,  6805,   nil,   nil,  6170,
   nil,   nil,  6062,   nil,   nil,   nil,   167,    60,  6008,   233,
  1774,   232,   nil,   nil,   nil,   nil,  5496,  5388,   238,   178,
   nil,   nil,   nil,  5334,    77,   nil,   838,   248,   226,   nil,
   252,   255,   nil,   nil,   nil,   258,   263,   264,   nil,   778,
   nil,   nil,   nil,   253,   271,   nil,   nil,   718,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   310,   nil,
   226,    82,   nil,   nil,   nil,   281,   nil,   nil,   284,   nil,
   285,   nil,   287,   nil,   288,   nil,   nil,   nil,   nil,   nil,
   nil ]

racc_action_default = [
  -236,  -237,    -1,    -2,    -3,    -4,    -5,    -8,   -10,   -11,
   -16,  -109,  -237,  -237,  -237,  -237,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,
   -60,   -61,   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,
   -74,   -75,   -79,  -237,  -237,  -237,  -237,  -237,  -120,  -122,
  -237,  -237,  -169,  -170,  -171,  -172,  -173,  -237,  -237,  -237,
  -186,  -187,  -188,  -189,  -190,  -237,  -192,  -237,  -203,  -206,
  -237,  -211,  -212,  -213,  -214,  -215,  -216,  -217,  -237,  -237,
    -7,  -237,  -237,  -237,  -237,  -237,  -237,  -237,  -237,  -237,
  -237,  -237,  -237,  -237,  -237,  -237,  -237,  -237,  -237,  -237,
  -237,  -237,  -237,  -237,  -237,  -237,  -237,  -237,  -237,  -237,
  -129,  -124,  -236,  -236,   -28,  -237,   -29,   -36,  -237,  -237,
   -76,  -237,  -237,  -237,  -237,   -86,  -237,  -237,  -237,  -237,
  -237,  -236,  -139,  -160,  -161,  -121,  -236,  -218,  -148,  -150,
  -151,  -152,  -153,  -154,  -156,  -157,   -44,  -237,  -176,  -237,
  -179,  -237,  -237,  -182,  -183,  -196,  -191,  -237,  -199,  -237,
  -237,  -237,  -237,  -237,   411,    -6,    -9,   -12,   -13,   -14,
   -15,  -237,   -18,   -19,   -20,   -21,   -22,   -23,   -24,   -25,
   -26,   -27,   -30,   -31,   -32,   -33,   -34,   -35,   -37,   -38,
   -39,   -40,   -41,  -237,   -42,  -104,  -237,   -80,  -237,  -229,
  -235,  -223,  -220,  -218,  -118,  -130,  -212,  -133,  -216,  -237,
  -226,  -224,  -232,  -214,  -215,  -222,  -227,  -228,  -230,  -231,
  -233,  -129,  -128,  -237,  -127,  -237,   -43,  -218,   -71,   -81,
  -237,   -84,  -218,  -165,  -168,  -237,   -78,  -237,  -237,  -237,
  -129,  -237,  -220,  -236,  -162,  -237,  -237,  -236,  -219,  -237,
  -237,  -174,  -237,  -177,  -237,  -180,  -237,  -193,  -194,  -195,
  -197,  -237,  -200,  -201,  -202,  -218,  -204,  -207,  -209,  -210,
  -109,  -237,   -17,  -237,  -237,  -218,  -106,  -129,  -117,  -237,
  -221,  -237,  -219,  -237,  -237,  -218,  -132,  -134,  -223,  -224,
  -225,  -226,  -229,  -232,  -234,  -235,  -125,  -126,  -219,  -237,
   -73,  -237,   -83,  -237,  -219,  -237,   -77,  -237,   -89,  -237,
   -95,  -237,  -237,   -99,  -220,  -218,  -220,  -237,  -237,  -142,
  -237,  -163,  -218,  -236,  -237,  -158,  -237,  -149,  -155,   -45,
  -175,  -178,  -185,  -181,  -184,  -198,  -237,  -237,  -108,  -237,
  -219,  -218,  -112,  -119,  -113,  -131,  -135,  -136,  -237,   -70,
   -82,   -85,  -166,  -167,   -89,   -88,  -237,  -237,   -95,   -94,
  -237,  -237,  -103,   -98,  -100,  -237,  -237,  -237,  -115,  -236,
  -143,  -144,  -145,  -237,  -237,  -140,  -141,  -237,  -159,  -205,
  -208,  -105,  -107,  -116,  -123,   -72,   -87,   -90,  -237,   -93,
  -237,  -237,  -110,  -111,  -114,  -237,  -164,  -137,  -237,  -147,
  -237,   -92,  -237,   -97,  -237,  -102,  -138,  -146,   -91,   -96,
  -101 ]

racc_goto_table = [
     2,     4,   136,   120,   142,   114,   116,   117,   118,   140,
   267,   156,   359,   203,   195,   202,   232,   279,   374,   355,
   243,   167,   168,   169,   170,   246,   327,   223,   225,   229,
   166,   343,   277,    80,   194,   242,   124,   126,   127,   128,
   313,   345,   361,   275,   312,   318,   370,   324,   147,   149,
   146,   146,   151,   387,   328,   265,   352,   317,   155,   334,
   389,   262,   263,   162,   395,   386,     3,   260,   261,   259,
   158,   160,     1,   nil,   247,   nil,   nil,   171,   nil,   146,
   172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
   182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
   192,   193,   276,   198,   378,   222,   222,   165,   nil,   nil,
   227,   nil,   146,   364,   235,   nil,   146,   nil,   nil,   nil,
   nil,   nil,   nil,   198,   285,   nil,   nil,   nil,   nil,   365,
   nil,   367,   244,   nil,   nil,   nil,   nil,   244,   nil,   322,
   281,   nil,   nil,   315,   nil,   314,   316,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   270,   nil,   nil,   nil,
   264,   nil,   136,   271,   299,   142,   nil,   nil,   nil,   303,
   140,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   341,   nil,   nil,   nil,   nil,   380,   nil,   nil,   nil,   193,
   300,   nil,   124,   126,   127,   nil,   nil,   nil,   nil,   nil,
   nil,   142,   336,   nil,   nil,   nil,   140,   335,   nil,   nil,
   nil,   nil,   339,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   348,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   301,   nil,   146,   198,   198,   nil,   nil,   307,   309,   nil,
   nil,   nil,   nil,   329,   319,   329,   382,   332,   325,   151,
   nil,   nil,   366,   nil,   155,   nil,   nil,   nil,   nil,   373,
   nil,   nil,   nil,   nil,   nil,   nil,   329,   338,   nil,   nil,
   nil,   nil,   371,   198,   nil,   nil,   346,   347,   383,   142,
   nil,   nil,   nil,   nil,   140,   nil,   nil,   nil,   nil,   nil,
   nil,   329,   nil,   nil,   nil,   nil,   nil,   nil,   353,   nil,
   nil,   nil,   nil,   nil,   nil,   146,   nil,   nil,   nil,   nil,
   nil,   385,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   376,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   193,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   124,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   376,   nil,   nil,   nil,   nil,   nil,   nil,   398,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   400,   nil,
   402,   404 ]

racc_goto_check = [
     2,     4,    65,    40,    32,    10,    10,    10,    10,    38,
    90,    83,    48,    57,    52,    55,    45,    56,    67,    47,
    66,     8,     8,     8,     8,    66,    73,    61,    61,    44,
     7,    58,    59,     6,    13,    55,    10,    10,    10,    10,
    50,    62,    51,    53,    49,    69,    70,    72,    12,    12,
    10,    10,    10,    46,    75,    45,    76,    56,    10,    78,
    48,    79,    80,    10,    67,    47,     3,    84,    85,    87,
    88,    89,     1,   nil,    39,   nil,   nil,    12,   nil,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    52,    10,    73,    10,    10,     6,   nil,   nil,
    12,   nil,    10,    50,    12,   nil,    10,   nil,   nil,   nil,
   nil,   nil,   nil,    10,    57,   nil,   nil,   nil,   nil,    56,
   nil,    56,     4,   nil,   nil,   nil,   nil,     4,   nil,    45,
    39,   nil,   nil,    57,   nil,    55,    55,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,
     2,   nil,    65,     2,    39,    32,   nil,   nil,   nil,    39,
    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    57,   nil,   nil,   nil,   nil,    90,   nil,   nil,   nil,    10,
    40,   nil,    10,    10,    10,   nil,   nil,   nil,   nil,   nil,
   nil,    32,    39,   nil,   nil,   nil,    38,    83,   nil,   nil,
   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,   nil,    10,    10,    10,   nil,   nil,     2,     2,   nil,
   nil,   nil,   nil,    10,     4,    10,    52,    10,     4,    10,
   nil,   nil,    39,   nil,    10,   nil,   nil,   nil,   nil,    39,
   nil,   nil,   nil,   nil,   nil,   nil,    10,    10,   nil,   nil,
   nil,   nil,    65,    10,   nil,   nil,    10,    10,    39,    32,
   nil,   nil,   nil,   nil,    38,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     4,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
     2,     2 ]

racc_goto_pointer = [
   nil,    72,     0,    66,     1,   nil,    28,   -51,   -61,   nil,
    -7,   nil,    -9,   -74,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -47,   nil,   nil,   nil,   nil,   nil,   -42,   -63,
   -38,   nil,   nil,   nil,   -92,  -106,  -303,  -289,  -298,  -195,
  -199,  -269,   -94,  -153,   nil,   -95,  -185,   -97,  -249,  -166,
   nil,   -85,  -241,   nil,   nil,   -48,  -111,  -305,   nil,  -198,
  -274,   nil,  -200,  -222,   nil,  -195,  -248,   nil,  -197,   -98,
   -97,   nil,   nil,   -54,   -90,   -89,   nil,   -88,     3,     3,
  -152 ]

racc_goto_default = [
   nil,   nil,   375,   nil,   224,     5,     6,     7,     8,     9,
    11,    10,   311,   nil,    16,    40,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,   nil,
   nil,    41,    42,   121,   nil,   nil,   125,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,   204,   nil,
   111,   nil,   205,   209,   207,   132,   nil,   nil,   131,   nil,
   nil,   137,   nil,   138,   139,   143,   233,   152,   154,    60,
    61,    62,    65,   nil,   nil,   nil,   157,   nil,   nil,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 95, :_reduce_1,
  1, 95, :_reduce_2,
  1, 95, :_reduce_none,
  1, 96, :_reduce_4,
  1, 99, :_reduce_5,
  3, 99, :_reduce_6,
  2, 99, :_reduce_7,
  1, 100, :_reduce_8,
  3, 100, :_reduce_9,
  1, 101, :_reduce_none,
  1, 102, :_reduce_11,
  3, 102, :_reduce_12,
  3, 102, :_reduce_13,
  3, 102, :_reduce_14,
  3, 102, :_reduce_15,
  1, 104, :_reduce_none,
  4, 104, :_reduce_17,
  3, 104, :_reduce_18,
  3, 104, :_reduce_19,
  3, 104, :_reduce_20,
  3, 104, :_reduce_21,
  3, 104, :_reduce_22,
  3, 104, :_reduce_23,
  3, 104, :_reduce_24,
  3, 104, :_reduce_25,
  3, 104, :_reduce_26,
  3, 104, :_reduce_27,
  2, 104, :_reduce_28,
  2, 104, :_reduce_29,
  3, 104, :_reduce_30,
  3, 104, :_reduce_31,
  3, 104, :_reduce_32,
  3, 104, :_reduce_33,
  3, 104, :_reduce_34,
  3, 104, :_reduce_35,
  2, 104, :_reduce_36,
  3, 104, :_reduce_37,
  3, 104, :_reduce_38,
  3, 104, :_reduce_39,
  3, 104, :_reduce_40,
  3, 104, :_reduce_41,
  3, 104, :_reduce_42,
  3, 104, :_reduce_43,
  1, 106, :_reduce_44,
  3, 106, :_reduce_45,
  1, 105, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 127, :_reduce_68,
  1, 127, :_reduce_69,
  5, 108, :_reduce_70,
  3, 108, :_reduce_71,
  6, 108, :_reduce_72,
  4, 108, :_reduce_73,
  1, 108, :_reduce_74,
  1, 112, :_reduce_75,
  2, 112, :_reduce_76,
  4, 135, :_reduce_77,
  3, 135, :_reduce_78,
  1, 135, :_reduce_79,
  3, 136, :_reduce_80,
  2, 134, :_reduce_81,
  3, 138, :_reduce_82,
  2, 138, :_reduce_83,
  2, 137, :_reduce_84,
  4, 137, :_reduce_85,
  2, 115, :_reduce_86,
  5, 140, :_reduce_87,
  4, 140, :_reduce_88,
  0, 141, :_reduce_none,
  2, 141, :_reduce_90,
  4, 141, :_reduce_91,
  3, 141, :_reduce_92,
  6, 116, :_reduce_93,
  5, 116, :_reduce_94,
  0, 142, :_reduce_none,
  4, 142, :_reduce_96,
  3, 142, :_reduce_97,
  5, 114, :_reduce_98,
  1, 143, :_reduce_99,
  2, 143, :_reduce_100,
  5, 144, :_reduce_101,
  4, 144, :_reduce_102,
  1, 145, :_reduce_103,
  1, 107, :_reduce_none,
  4, 107, :_reduce_105,
  1, 147, :_reduce_106,
  3, 147, :_reduce_107,
  3, 146, :_reduce_108,
  1, 103, :_reduce_109,
  6, 103, :_reduce_110,
  6, 103, :_reduce_111,
  5, 103, :_reduce_112,
  5, 103, :_reduce_113,
  6, 103, :_reduce_114,
  5, 103, :_reduce_115,
  4, 152, :_reduce_116,
  1, 153, :_reduce_117,
  1, 149, :_reduce_118,
  3, 149, :_reduce_119,
  1, 148, :_reduce_120,
  2, 148, :_reduce_121,
  1, 148, :_reduce_122,
  6, 113, :_reduce_123,
  2, 113, :_reduce_124,
  3, 154, :_reduce_125,
  3, 154, :_reduce_126,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  0, 151, :_reduce_129,
  1, 151, :_reduce_130,
  3, 151, :_reduce_131,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  3, 156, :_reduce_135,
  3, 156, :_reduce_136,
  6, 117, :_reduce_137,
  7, 118, :_reduce_138,
  1, 162, :_reduce_139,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 163, :_reduce_none,
  2, 163, :_reduce_143,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  7, 119, :_reduce_146,
  6, 119, :_reduce_147,
  1, 165, :_reduce_148,
  3, 165, :_reduce_149,
  1, 167, :_reduce_150,
  1, 167, :_reduce_151,
  1, 167, :_reduce_152,
  1, 167, :_reduce_none,
  1, 168, :_reduce_154,
  3, 168, :_reduce_155,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 166, :_reduce_none,
  2, 166, :_reduce_159,
  1, 159, :_reduce_160,
  1, 159, :_reduce_161,
  1, 160, :_reduce_162,
  2, 160, :_reduce_163,
  4, 160, :_reduce_164,
  1, 139, :_reduce_165,
  3, 139, :_reduce_166,
  3, 170, :_reduce_167,
  1, 170, :_reduce_168,
  1, 111, :_reduce_169,
  1, 121, :_reduce_170,
  1, 121, :_reduce_171,
  1, 121, :_reduce_172,
  1, 121, :_reduce_173,
  3, 122, :_reduce_174,
  4, 122, :_reduce_175,
  2, 122, :_reduce_176,
  3, 122, :_reduce_177,
  4, 122, :_reduce_178,
  2, 122, :_reduce_179,
  3, 125, :_reduce_180,
  4, 125, :_reduce_181,
  2, 125, :_reduce_182,
  1, 171, :_reduce_183,
  3, 171, :_reduce_184,
  3, 172, :_reduce_185,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 173, :_reduce_189,
  1, 173, :_reduce_190,
  2, 174, :_reduce_191,
  1, 176, :_reduce_192,
  1, 178, :_reduce_193,
  1, 179, :_reduce_194,
  2, 177, :_reduce_195,
  1, 180, :_reduce_196,
  1, 181, :_reduce_197,
  2, 181, :_reduce_198,
  2, 175, :_reduce_199,
  2, 182, :_reduce_200,
  2, 182, :_reduce_201,
  3, 97, :_reduce_202,
  0, 183, :_reduce_203,
  2, 183, :_reduce_204,
  4, 183, :_reduce_205,
  1, 120, :_reduce_206,
  3, 120, :_reduce_207,
  5, 120, :_reduce_208,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 128, :_reduce_211,
  1, 131, :_reduce_212,
  1, 129, :_reduce_213,
  1, 130, :_reduce_214,
  1, 124, :_reduce_215,
  1, 123, :_reduce_216,
  1, 126, :_reduce_217,
  0, 133, :_reduce_none,
  1, 133, :_reduce_219,
  0, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  0, 98, :_reduce_236 ]

racc_reduce_n = 237

racc_shift_n = 411

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :LOW => 86,
  :HIGH => 87,
  :CALL => 88,
  :LISTSTART => 89,
  :SPLAT => 90,
  :MODULO => 91,
  :TITLE_COLON => 92,
  :CASE_COLON => 93 }

racc_nt_base = 94

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "LOW",
  "HIGH",
  "CALL",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "reserved_word",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "number",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 86)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 87)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_15(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_17(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_18(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_19(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_20(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_21(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_22(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_23(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_24(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_25(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_26(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_27(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_28(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_29(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_30(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_31(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 119)
  def _reduce_32(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 120)
  def _reduce_33(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 121)
  def _reduce_34(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 122)
  def _reduce_35(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 123)
  def _reduce_36(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 124)
  def _reduce_37(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_38(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_39(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_40(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 128)
  def _reduce_41(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 129)
  def _reduce_42(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 130)
  def _reduce_43(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 138)
  def _reduce_44(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 139)
  def _reduce_45(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

module_eval(<<'.,.,', 'egrammar.ra', 172)
  def _reduce_68(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 173)
  def _reduce_69(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_70(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 185)
  def _reduce_71(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_72(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_73(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_74(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_75(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_76(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_77(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_78(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_79(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_80(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 226)
  def _reduce_81(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 231)
  def _reduce_82(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 232)
  def _reduce_83(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 236)
  def _reduce_84(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 237)
  def _reduce_85(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 247)
  def _reduce_86(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 254)
  def _reduce_87(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 258)
  def _reduce_88(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'egrammar.ra', 266)
  def _reduce_90(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 270)
  def _reduce_91(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 274)
  def _reduce_92(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 283)
  def _reduce_93(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_94(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'egrammar.ra', 297)
  def _reduce_96(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 301)
  def _reduce_97(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_98(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 315)
  def _reduce_99(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 316)
  def _reduce_100(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 321)
  def _reduce_101(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 325)
  def _reduce_102(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 329)
  def _reduce_103(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 104 omitted

module_eval(<<'.,.,', 'egrammar.ra', 340)
  def _reduce_105(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_106(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 346)
  def _reduce_107(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 351)
  def _reduce_108(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 363)
  def _reduce_109(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 366)
  def _reduce_110(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error val[1], "A resource default can not be virtual or exported"
      when :override
        error val[1], "A resource override can not be virtual or exported"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 381)
  def _reduce_111(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class, :defaults, :override
        error val[1], "Defaults are not virtualizable"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 389)
  def _reduce_112(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error val[1], "A resource default can not specify a resource name"
      when :override
        error val[1], "A resource override does not allow override of name of resource"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 402)
  def _reduce_113(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 423)
  def _reduce_114(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        result.form = val[0]
        loc result, val[1], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 428)
  def _reduce_115(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_116(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 435)
  def _reduce_117(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_118(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 439)
  def _reduce_119(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_120(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 445)
  def _reduce_121(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 446)
  def _reduce_122(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 458)
  def _reduce_123(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 462)
  def _reduce_124(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_125(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 468)
  def _reduce_126(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'egrammar.ra', 481)
  def _reduce_129(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 482)
  def _reduce_130(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 483)
  def _reduce_131(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'egrammar.ra', 499)
  def _reduce_135(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 503)
  def _reduce_136(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 513)
  def _reduce_137(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 527)
  def _reduce_138(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 537)
  def _reduce_139(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'egrammar.ra', 546)
  def _reduce_143(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'egrammar.ra', 563)
  def _reduce_146(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 567)
  def _reduce_147(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_148(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 578)
  def _reduce_149(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_150(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 584)
  def _reduce_151(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 585)
  def _reduce_152(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 153 omitted

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_154(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 590)
  def _reduce_155(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'egrammar.ra', 599)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_160(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_161(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_162(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_163(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_164(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_165(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_166(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 631)
  def _reduce_167(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 632)
  def _reduce_168(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_169(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_170(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_171(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_172(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_173(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_174(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_175(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 661)
  def _reduce_176(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_177(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_178(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_179(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 667)
  def _reduce_180(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_181(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_182(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_183(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 673)
  def _reduce_184(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_185(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

module_eval(<<'.,.,', 'egrammar.ra', 684)
  def _reduce_189(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 685)
  def _reduce_190(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_191(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 688)
  def _reduce_192(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_193(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_194(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_195(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 692)
  def _reduce_196(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_197(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 696)
  def _reduce_198(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_199(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 702)
  def _reduce_200(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 703)
  def _reduce_201(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_202(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 709)
  def _reduce_203(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 710)
  def _reduce_204(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 711)
  def _reduce_205(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 714)
  def _reduce_206(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 715)
  def _reduce_207(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 716)
  def _reduce_208(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 209 omitted

# reduce 210 omitted

module_eval(<<'.,.,', 'egrammar.ra', 722)
  def _reduce_211(val, _values, result)
     result = Factory.NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 723)
  def _reduce_212(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 724)
  def _reduce_213(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 725)
  def _reduce_214(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 726)
  def _reduce_215(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 731)
  def _reduce_216(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 734)
  def _reduce_217(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 218 omitted

module_eval(<<'.,.,', 'egrammar.ra', 740)
  def _reduce_219(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

module_eval(<<'.,.,', 'egrammar.ra', 763)
  def _reduce_236(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
