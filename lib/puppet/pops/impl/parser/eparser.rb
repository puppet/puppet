#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/pops/impl/parser/lexer'
require 'puppet/pops/impl/model/factory'
#require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Impl
      module Parser
        class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 726)

# Require supporting logic mixed in to the generated Puppet::Pops::Impl::Parser::Parser class
require 'puppet/pops/impl/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'52,54,-194,68,48,217,49,111,277,200,52,54,238,231,-203,231,88,200,92',
'115,-126,120,13,311,-128,195,253,114,38,219,45,113,47,94,114,46,59,55',
'113,40,58,91,-194,197,56,12,292,55,57,52,54,11,239,48,-203,49,70,71',
'119,60,-126,121,114,69,-128,39,113,120,209,60,231,13,114,103,52,54,113',
'38,120,45,60,47,94,261,46,59,55,221,40,58,226,225,220,56,12,52,54,57',
'114,48,11,49,113,214,119,322,68,121,60,103,102,55,114,120,39,119,113',
'13,121,88,306,92,305,38,230,45,60,47,43,231,46,59,55,60,40,58,44,60',
'280,56,12,52,54,57,91,48,11,49,348,306,119,305,68,121,60,64,66,65,67',
'222,39,237,223,13,185,88,299,92,300,38,200,45,60,47,43,161,46,59,55',
'303,40,58,44,68,279,56,12,52,54,57,91,48,11,49,346,307,88,309,92,276',
'60,235,214,52,54,316,39,52,54,13,127,235,318,319,285,38,224,45,259,47',
'43,91,46,59,55,63,40,58,44,133,260,56,12,52,54,57,68,48,11,49,55,259',
'237,255,55,290,60,329,330,88,252,92,39,251,109,13,333,309,335,336,104',
'38,337,45,235,47,94,339,46,59,55,97,40,58,91,342,343,56,12,52,54,57',
'344,48,11,49,237,63,61,70,71,351,60,352,353,354,69,,39,,,13,,,,,,38',
',45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,',
',,39,,,13,,,,,,38,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48',
'11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,94,,46,59,55,,40,58,,,,56',
'12,52,54,57,,48,11,49,341,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,43,,46',
'59,55,,40,58,44,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,',
',,38,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60',
',,,,,39,,,13,,,,,,38,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,',
'48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,94,,46,59,55,,40,58,',
',,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,94',
',46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,',
',,,,38,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,',
',60,,,,,,39,,,13,,,,,,38,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54',
'57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,94,,46,59,55,,40',
'58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47',
'94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,257,,,,,,60,,,,,,39',
',,13,,,,,,38,,45,,47,43,,46,59,55,,40,58,44,,,56,12,52,54,57,,48,11',
'49,263,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,43,,46,59,55,,40,58,44,',
',56,12,52,54,57,,48,11,49,265,68,,,,,60,,,,,,39,,88,13,92,,,,,38,,45',
',47,43,,46,59,55,,40,58,44,,,56,12,91,,57,52,54,11,,48,125,49,75,74',
',60,,70,71,,,39,,,69,,,13,,,,,,38,,45,,47,94,,46,59,55,,40,58,,,,56',
'12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,94,,46,59',
'55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38',
',45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,327,,,,,,60',
',,,,,39,,,13,,,,,,38,,45,,47,43,,46,59,55,,40,58,44,,,56,12,52,54,57',
',48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,43,,46,59,55,,40,58',
'44,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47',
'43,,46,59,55,,40,58,44,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,',
',13,,,,,,38,,45,,47,43,,46,59,55,,40,58,44,,,56,12,52,54,57,,48,11,49',
',,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,43,,46,59,55,,40,58,44,,,56,12',
'52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,43,,46,59,55',
',40,58,44,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,',
'45,,47,43,,46,59,55,,40,58,44,,,56,12,52,54,57,,48,11,49,,,,,,,60,,',
',,,39,,,13,,,,,,38,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48',
'11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,94,,46,59,55,,40,58,,,,56',
'12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,94,,46,59',
'55,,40,58,,,,56,12,52,54,57,,48,11,49,312,,,,,,60,,,,,,39,,,13,,,,,',
'38,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60',
',,,,,39,,,13,,,,,,38,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,',
'48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,94,,46,59,55,,40,58,',
',,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,94',
',46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,',
',,,,38,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,',
',60,,,,,,39,,,13,,,,,,38,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54',
'57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,94,,46,59,55,,40',
'58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47',
'94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13',
',,,,,38,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,',
',,60,,,,,,39,,,13,,,,,,38,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54',
'57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,94,,46,59,55,,40',
'58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47',
'94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13',
',,,,,38,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,',
',,60,,,,,,39,,,13,,,,,,38,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54',
'57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,94,,46,59,55,,40',
'58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47',
'94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13',
',,,,,38,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,350',
',,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,43,,46,59,55,,40,58,44,,,56,12',
'52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,163,180,174,181,47,175',
'183,176,172,170,,165,178,,,,56,12,184,179,177,52,54,11,,48,,49,298,',
',60,,,,,182,164,,,,,,13,,,,,,38,,45,,47,43,,46,59,55,,40,58,44,,,56',
'12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,94,,46,59',
'55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38',
',45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,',
',,39,,,13,,,,,,38,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48',
'11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,94,,46,59,55,,40,58,,,,56',
'12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,94,,46,59',
'55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38',
',45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,',
',,39,,,13,192,,,,,38,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,',
'48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,94,,46,59,55,,40,58,',
',,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,94',
',46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,',
',,,,38,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,',
',60,,,,,,39,,,13,202,,,,,38,,45,,47,94,,46,59,55,,40,58,,,,56,12,52',
'54,57,,48,11,49,,68,,,,,60,,,,,,39,,88,13,92,,,,,38,,45,,47,94,,46,59',
'55,,40,58,,,,56,12,91,,57,52,54,11,,48,284,49,75,74,,60,,70,71,,,39',
',,69,,,13,,,,,,38,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48',
'11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,94,,46,59,55,,40,58,,,,56',
'12,52,54,57,,48,11,49,325,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,43,,46',
'59,55,,40,58,44,,,56,12,,,57,,,11,,,,,,,68,60,210,,,,,39,,86,87,83,78',
'88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77',
',70,71,68,,205,,,69,,,,86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,,,,',
',,,,91,,,,85,84,,,72,73,75,74,76,77,,70,71,68,,204,,,69,,,,86,87,83',
'78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76',
'77,,70,71,68,,203,,,69,,,,86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,',
',,,,,,,91,,,,85,84,,,72,73,75,74,76,77,68,70,71,,,,,,69,86,87,83,78',
'88,,92,,,,190,79,81,80,82,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76',
'77,68,70,71,,,,,,69,86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,',
',91,,,,85,84,,,72,73,75,74,76,77,68,70,71,,,269,,,69,86,87,83,78,88',
',92,,,,,79,81,80,82,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77,68',
'70,71,,,,,,69,86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,,91,,',
',85,84,,,72,73,75,74,76,77,68,70,71,,,,,,69,86,87,83,78,88,,92,,,,,79',
'81,80,82,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77,68,70,71,,,,',
',69,86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,,91,,,,85,84,,,72',
'73,75,74,76,77,68,70,71,,,,,,69,86,87,83,78,88,,92,,,,,79,81,80,82,',
',,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77,68,70,71,,,,,,69,86,87',
'83,78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74',
'76,77,68,70,71,,,,,,69,86,87,83,78,88,,92,,68,,,79,81,80,82,,,,,,,88',
',92,,,,,,91,,,,85,84,68,,72,73,75,74,76,77,,70,71,91,,88,,92,69,68,',
'72,73,75,74,,,,70,71,,,88,,92,69,,,,68,91,,,,,,,,72,73,75,74,88,,92',
'70,71,91,,,,,69,68,,72,73,75,74,76,77,,70,71,,78,88,91,92,69,,,68,79',
',72,73,75,74,76,77,,70,71,78,88,,92,,69,,91,79,,,,68,,,72,73,75,74,76',
'77,,70,71,78,88,91,92,,69,,68,79,,72,73,75,74,76,77,,70,71,78,88,,92',
',69,,91,79,,,,,,,72,73,75,74,76,77,,70,71,,,91,,,69,,,68,,72,73,75,74',
'76,77,,70,71,83,78,88,,92,69,,,68,79,81,80,82,,,,,,,83,78,88,,92,,,',
'91,79,81,80,82,,,,72,73,75,74,76,77,,70,71,,,91,,,69,,84,,,72,73,75',
'74,76,77,68,70,71,,,,,,69,86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,',
',,,,,,,91,,,,85,84,,,72,73,75,74,76,77,68,70,71,,,,,,69,86,87,83,78',
'88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77',
'68,70,71,,,,,,69,86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,,91',
',,,85,84,,,72,73,75,74,76,77,68,70,71,,,,,,69,86,87,83,78,88,,92,,,',
',79,81,80,82,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77,,70,71,68',
',89,,,69,,,,86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,,91,,,,85',
'84,,,72,73,75,74,76,77,68,70,71,,,,,,69,86,87,83,78,88,233,92,,,,,79',
'81,80,82,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77,,70,71,,247,180',
'246,181,69,244,183,248,242,241,,243,245,,,,,,184,179,249,247,180,246',
'181,,244,183,248,242,241,,243,245,,,182,250,,184,179,249,247,180,246',
'181,,244,183,248,242,241,,243,245,,,182,250,,184,179,249,,,,,,,,,,,',
',,,,182,250' ]
        racc_action_table = arr = ::Array.new(4512, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'109,109,178,147,109,117,109,43,214,103,70,70,173,191,177,266,147,214',
'147,44,170,46,109,266,172,101,191,45,109,117,109,45,109,109,43,109,109',
'109,43,109,109,147,178,103,109,109,236,70,109,260,260,109,173,260,177',
'260,147,147,46,109,170,46,175,147,172,109,175,217,109,70,201,260,94',
'102,71,71,94,260,176,260,46,260,260,201,260,260,260,124,260,260,132',
'132,124,260,260,4,4,260,276,4,260,4,276,112,217,276,140,217,260,36,36',
'71,174,219,260,176,174,4,176,140,303,140,303,4,139,4,217,4,4,139,4,4',
'4,71,4,4,4,176,216,4,4,335,335,4,140,335,4,335,335,263,219,263,95,219',
'4,8,8,8,8,126,4,240,126,335,90,95,256,95,258,335,259,335,219,335,335',
'88,335,335,335,262,335,335,335,93,215,335,335,333,333,335,95,333,335',
'333,333,264,93,265,93,212,335,211,116,49,49,270,335,223,223,333,49,272',
'273,274,223,333,129,333,278,333,333,93,333,333,333,62,333,333,333,61',
'200,333,333,164,164,333,148,164,333,164,49,198,289,193,223,234,333,296',
'297,148,189,148,333,187,41,164,306,307,309,310,37,164,315,164,166,164',
'164,317,164,164,164,35,164,164,148,323,324,164,164,11,11,164,326,11',
'164,11,167,5,1,148,148,340,164,345,347,349,148,,164,,,11,,,,,,11,,11',
',11,11,,11,11,11,,11,11,,,,11,11,12,12,11,,12,11,12,,,,,,,11,,,,,,11',
',,12,,,,,,12,,12,,12,12,,12,12,12,,12,12,,,,12,12,13,13,12,,13,12,13',
',,,,,,12,,,,,,12,,,13,,,,,,13,,13,,13,13,,13,13,13,,13,13,,,,13,13,319',
'319,13,,319,13,319,319,,,,,,13,,,,,,13,,,319,,,,,,319,,319,,319,319',
',319,319,319,,319,319,319,,,319,319,316,316,319,,316,319,316,,,,,,,319',
',,,,,319,,,316,,,,,,316,,316,,316,316,,316,316,316,,316,316,,,,316,316',
'163,163,316,,163,316,163,,,,,,,316,,,,,,316,,,163,,,,,,163,,163,,163',
'163,,163,163,163,,163,163,,,,163,163,38,38,163,,38,163,38,,,,,,,163',
',,,,,163,,,38,,,,,,38,,38,,38,38,,38,38,38,,38,38,,,,38,38,39,39,38',
',39,38,39,,,,,,,38,,,,,,38,,,39,,,,,,39,,39,,39,39,,39,39,39,,39,39',
',,,39,39,40,40,39,,40,39,40,,,,,,,39,,,,,,39,,,40,,,,,,40,,40,,40,40',
',40,40,40,,40,40,,,,40,40,305,305,40,,305,40,305,,,,,,,40,,,,,,40,,',
'305,,,,,,305,,305,,305,305,,305,305,305,,305,305,,,,305,305,42,42,305',
',42,305,42,,,,,,,305,,,,,,305,,,42,,,,,,42,,42,,42,42,,42,42,42,,42',
'42,,,,42,42,165,165,42,,165,42,165,,,,,,,42,,,,,,42,,,165,,,,,,165,',
'165,,165,165,,165,165,165,,165,165,,,,165,165,196,196,165,,196,165,196',
'196,,,,,,165,,,,,,165,,,196,,,,,,196,,196,,196,196,,196,196,196,,196',
'196,196,,,196,196,203,203,196,,203,196,203,203,,,,,,196,,,,,,196,,,203',
',,,,,203,,203,,203,203,,203,203,203,,203,203,203,,,203,203,204,204,203',
',204,203,204,204,145,,,,,203,,,,,,203,,145,204,145,,,,,204,,204,,204',
'204,,204,204,204,,204,204,204,,,204,204,145,,204,48,48,204,,48,48,48',
'145,145,,204,,145,145,,,204,,,145,,,48,,,,,,48,,48,,48,48,,48,48,48',
',48,48,,,,48,48,205,205,48,,205,48,205,,,,,,,48,,,,,,48,,,205,,,,,,205',
',205,,205,205,,205,205,205,,205,205,,,,205,205,53,53,205,,53,205,53',
',,,,,,205,,,,,,205,,,53,,,,,,53,,53,,53,53,,53,53,53,,53,53,,,,53,53',
'280,280,53,,280,53,280,280,,,,,,53,,,,,,53,,,280,,,,,,280,,280,,280',
'280,,280,280,280,,280,280,280,,,280,280,0,0,280,,0,280,0,,,,,,,280,',
',,,,280,,,0,,,,,,0,,0,,0,0,,0,0,0,,0,0,0,,,0,0,63,63,0,,63,0,63,,,,',
',,0,,,,,,0,,,63,,,,,,63,,63,,63,63,,63,63,63,,63,63,63,,,63,63,64,64',
'63,,64,63,64,,,,,,,63,,,,,,63,,,64,,,,,,64,,64,,64,64,,64,64,64,,64',
'64,64,,,64,64,65,65,64,,65,64,65,,,,,,,64,,,,,,64,,,65,,,,,,65,,65,',
'65,65,,65,65,65,,65,65,65,,,65,65,66,66,65,,66,65,66,,,,,,,65,,,,,,65',
',,66,,,,,,66,,66,,66,66,,66,66,66,,66,66,66,,,66,66,67,67,66,,67,66',
'67,,,,,,,66,,,,,,66,,,67,,,,,,67,,67,,67,67,,67,67,67,,67,67,67,,,67',
'67,68,68,67,,68,67,68,,,,,,,67,,,,,,67,,,68,,,,,,68,,68,,68,68,,68,68',
'68,,68,68,,,,68,68,69,69,68,,69,68,69,,,,,,,68,,,,,,68,,,69,,,,,,69',
',69,,69,69,,69,69,69,,69,69,,,,69,69,269,269,69,,269,69,269,,,,,,,69',
',,,,,69,,,269,,,,,,269,,269,,269,269,,269,269,269,,269,269,,,,269,269',
'267,267,269,,267,269,267,267,,,,,,269,,,,,,269,,,267,,,,,,267,,267,',
'267,267,,267,267,267,,267,267,,,,267,267,72,72,267,,72,267,72,,,,,,',
'267,,,,,,267,,,72,,,,,,72,,72,,72,72,,72,72,72,,72,72,,,,72,72,73,73',
'72,,73,72,73,,,,,,,72,,,,,,72,,,73,,,,,,73,,73,,73,73,,73,73,73,,73',
'73,,,,73,73,74,74,73,,74,73,74,,,,,,,73,,,,,,73,,,74,,,,,,74,,74,,74',
'74,,74,74,74,,74,74,,,,74,74,75,75,74,,75,74,75,,,,,,,74,,,,,,74,,,75',
',,,,,75,,75,,75,75,,75,75,75,,75,75,,,,75,75,76,76,75,,76,75,76,,,,',
',,75,,,,,,75,,,76,,,,,,76,,76,,76,76,,76,76,76,,76,76,,,,76,76,77,77',
'76,,77,76,77,,,,,,,76,,,,,,76,,,77,,,,,,77,,77,,77,77,,77,77,77,,77',
'77,,,,77,77,78,78,77,,78,77,78,,,,,,,77,,,,,,77,,,78,,,,,,78,,78,,78',
'78,,78,78,78,,78,78,,,,78,78,79,79,78,,79,78,79,,,,,,,78,,,,,,78,,,79',
',,,,,79,,79,,79,79,,79,79,79,,79,79,,,,79,79,80,80,79,,80,79,80,,,,',
',,79,,,,,,79,,,80,,,,,,80,,80,,80,80,,80,80,80,,80,80,,,,80,80,81,81',
'80,,81,80,81,,,,,,,80,,,,,,80,,,81,,,,,,81,,81,,81,81,,81,81,81,,81',
'81,,,,81,81,82,82,81,,82,81,82,,,,,,,81,,,,,,81,,,82,,,,,,82,,82,,82',
'82,,82,82,82,,82,82,,,,82,82,83,83,82,,83,82,83,,,,,,,82,,,,,,82,,,83',
',,,,,83,,83,,83,83,,83,83,83,,83,83,,,,83,83,84,84,83,,84,83,84,,,,',
',,83,,,,,,83,,,84,,,,,,84,,84,,84,84,,84,84,84,,84,84,,,,84,84,85,85',
'84,,85,84,85,,,,,,,84,,,,,,84,,,85,,,,,,85,,85,,85,85,,85,85,85,,85',
'85,,,,85,85,86,86,85,,86,85,86,,,,,,,85,,,,,,85,,,86,,,,,,86,,86,,86',
'86,,86,86,86,,86,86,,,,86,86,87,87,86,,87,86,87,,,,,,,86,,,,,,86,,,87',
',,,,,87,,87,,87,87,,87,87,87,,87,87,,,,87,87,336,336,87,,336,87,336',
'336,,,,,,87,,,,,,87,,,336,,,,,,336,,336,,336,336,,336,336,336,,336,336',
'336,,,336,336,89,89,336,,89,336,89,,,,,,,336,,,,,,336,,,89,,,,,,89,89',
'89,89,89,89,89,89,89,89,,89,89,,,,89,89,89,89,89,255,255,89,,255,,255',
'255,,,89,,,,,89,89,,,,,,255,,,,,,255,,255,,255,255,,255,255,255,,255',
'255,255,,,255,255,91,91,255,,91,255,91,,,,,,,255,,,,,,255,,,91,,,,,',
'91,,91,,91,91,,91,91,91,,91,91,,,,91,91,92,92,91,,92,91,92,,,,,,,91',
',,,,,91,,,92,,,,,,92,,92,,92,92,,92,92,92,,92,92,,,,92,92,239,239,92',
',239,92,239,,,,,,,92,,,,,,92,,,239,,,,,,239,,239,,239,239,,239,239,239',
',239,239,,,,239,239,238,238,239,,238,239,238,,,,,,,239,,,,,,239,,,238',
',,,,,238,,238,,238,238,,238,238,238,,238,238,,,,238,238,235,235,238',
',235,238,235,,,,,,,238,,,,,,238,,,235,,,,,,235,,235,,235,235,,235,235',
'235,,235,235,,,,235,235,209,209,235,,209,235,209,,,,,,,235,,,,,,235',
',,209,,,,,,209,,209,,209,209,,209,209,209,,209,209,,,,209,209,97,97',
'209,,97,209,97,,,,,,,209,,,,,,209,,,97,97,,,,,97,,97,,97,97,,97,97,97',
',97,97,,,,97,97,231,231,97,,231,97,231,,,,,,,97,,,,,,97,,,231,,,,,,231',
',231,,231,231,,231,231,231,,231,231,,,,231,231,229,229,231,,229,231',
'229,,,,,,,231,,,,,,231,,,229,,,,,,229,,229,,229,229,,229,229,229,,229',
'229,,,,229,229,224,224,229,,224,229,224,,,,,,,229,,,,,,229,,,224,,,',
',,224,,224,,224,224,,224,224,224,,224,224,,,,224,224,104,104,224,,104',
'224,104,,,,,,,224,,,,,,224,,,104,104,,,,,104,,104,,104,104,,104,104',
'104,,104,104,,,,104,104,210,210,104,,210,104,210,,146,,,,,104,,,,,,104',
',146,210,146,,,,,210,,210,,210,210,,210,210,210,,210,210,,,,210,210',
'146,,210,220,220,210,,220,220,220,146,146,,210,,146,146,,,210,,,146',
',,220,,,,,,220,,220,,220,220,,220,220,220,,220,220,,,,220,220,111,111',
'220,,111,220,111,,,,,,,220,,,,,,220,,,111,,,,,,111,,111,,111,111,,111',
'111,111,,111,111,,,,111,111,279,279,111,,279,111,279,279,,,,,,111,,',
',,,111,,,279,,,,,,279,,279,,279,279,,279,279,279,,279,279,279,,,279',
'279,,,279,,,279,,,,,,,110,279,110,,,,,279,,110,110,110,110,110,,110',
',,,,110,110,110,110,,,,,,,,,,,,,,,110,,,,110,110,,,110,110,110,110,110',
'110,,110,110,108,,108,,,110,,,,108,108,108,108,108,,108,,,,,108,108',
'108,108,,,,,,,,,,,,,,,108,,,,108,108,,,108,108,108,108,108,108,,108',
'108,107,,107,,,108,,,,107,107,107,107,107,,107,,,,,107,107,107,107,',
',,,,,,,,,,,,,107,,,,107,107,,,107,107,107,107,107,107,,107,107,105,',
'105,,,107,,,,105,105,105,105,105,,105,,,,,105,105,105,105,,,,,,,,,,',
',,,,105,,,,105,105,,,105,105,105,105,105,105,96,105,105,,,,,,105,96',
'96,96,96,96,,96,,,,96,96,96,96,96,,,,,,,,,,,,,,,96,,,,96,96,,,96,96',
'96,96,96,96,123,96,96,,,,,,96,123,123,123,123,123,,123,,,,,123,123,123',
'123,,,,,,,,,,,,,,,123,,,,123,123,,,123,123,123,123,123,123,206,123,123',
',,206,,,123,206,206,206,206,206,,206,,,,,206,206,206,206,,,,,,,,,,,',
',,,206,,,,206,206,,,206,206,206,206,206,206,283,206,206,,,,,,206,283',
'283,283,283,283,,283,,,,,283,283,283,283,,,,,,,,,,,,,,,283,,,,283,283',
',,283,283,283,283,283,283,287,283,283,,,,,,283,287,287,287,287,287,',
'287,,,,,287,287,287,287,,,,,,,,,,,,,,,287,,,,287,287,,,287,287,287,287',
'287,287,130,287,287,,,,,,287,130,130,130,130,130,,130,,,,,130,130,130',
'130,,,,,,,,,,,,,,,130,,,,130,130,,,130,130,130,130,130,130,294,130,130',
',,,,,130,294,294,294,294,294,,294,,,,,294,294,294,294,,,,,,,,,,,,,,',
'294,,,,294,294,,,294,294,294,294,294,294,295,294,294,,,,,,294,295,295',
'295,295,295,,295,,,,,295,295,295,295,,,,,,,,,,,,,,,295,,,,295,295,,',
'295,295,295,295,295,295,186,295,295,,,,,,295,186,186,186,186,186,,186',
',149,,,186,186,186,186,,,,,,,149,,149,,,,,,186,,,,186,186,150,,186,186',
'186,186,186,186,,186,186,149,,150,,150,186,151,,149,149,149,149,,,,149',
'149,,,151,,151,149,,,,152,150,,,,,,,,150,150,150,150,152,,152,150,150',
'151,,,,,150,153,,151,151,151,151,151,151,,151,151,,153,153,152,153,151',
',,154,153,,152,152,152,152,152,152,,152,152,154,154,,154,,152,,153,154',
',,,155,,,153,153,153,153,153,153,,153,153,155,155,154,155,,153,,156',
'155,,154,154,154,154,154,154,,154,154,156,156,,156,,154,,155,156,,,',
',,,155,155,155,155,155,155,,155,155,,,156,,,155,,,157,,156,156,156,156',
'156,156,,156,156,157,157,157,,157,156,,,158,157,157,157,157,,,,,,,158',
'158,158,,158,,,,157,158,158,158,158,,,,157,157,157,157,157,157,,157',
'157,,,158,,,157,,158,,,158,158,158,158,158,158,159,158,158,,,,,,158',
'159,159,159,159,159,,159,,,,,159,159,159,159,,,,,,,,,,,,,,,159,,,,159',
'159,,,159,159,159,159,159,159,160,159,159,,,,,,159,160,160,160,160,160',
',160,,,,,160,160,160,160,,,,,,,,,,,,,,,160,,,,160,160,,,160,160,160',
'160,160,160,302,160,160,,,,,,160,302,302,302,302,302,,302,,,,,302,302',
'302,302,,,,,,,,,,,,,,,302,,,,302,302,,,302,302,302,302,302,302,314,302',
'302,,,,,,302,314,314,314,314,314,,314,,,,,314,314,314,314,,,,,,,,,,',
',,,,314,,,,314,314,,,314,314,314,314,314,314,,314,314,10,,10,,,314,',
',,10,10,10,10,10,,10,,,,,10,10,10,10,,,,,,,,,,,,,,,10,,,,10,10,,,10',
'10,10,10,10,10,162,10,10,,,,,,10,162,162,162,162,162,162,162,,,,,162',
'162,162,162,,,,,,,,,,,,,,,162,,,,162,162,,,162,162,162,162,162,162,',
'162,162,,237,237,237,237,162,237,237,237,237,237,,237,237,,,,,,237,237',
'237,185,185,185,185,,185,185,185,185,185,,185,185,,,237,237,,185,185',
'185,232,232,232,232,,232,232,232,232,232,,232,232,,,185,185,,232,232',
'232,,,,,,,,,,,,,,,,232,232' ]
        racc_action_check = arr = ::Array.new(4512, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1154,   288,   nil,   nil,    93,   275,   nil,   nil,    93,   nil,
  4318,   277,   323,   369,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   247,    41,   236,   553,   599,
   645,   231,   737,    -1,   -24,    -8,    19,   nil,   970,   201,
   nil,   nil,   nil,  1062,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   229,   213,  1200,  1246,  1292,  1338,  1384,  1430,  1476,
     8,    72,  1614,  1660,  1706,  1752,  1798,  1844,  1890,  1936,
  1982,  2028,  2074,  2120,  2166,  2212,  2258,  2304,   136,  2396,
   156,  2491,  2537,   177,    37,   146,  3409,  2767,   nil,   nil,
   nil,    14,     5,   -25,  2951,  3357,   nil,  3302,  3247,    -2,
  3192,  3092,    79,   nil,   nil,   nil,   178,    -7,   nil,   nil,
   nil,   nil,   nil,  3461,    80,   nil,   150,   nil,   nil,   205,
  3669,   nil,    86,   nil,   nil,   nil,   nil,   nil,   nil,   117,
   100,   nil,   nil,   nil,   nil,   925,  3001,    -3,   230,  3842,
  3869,  3886,  3906,  3930,  3949,  3973,  3992,  4036,  4055,  4107,
  4159,   nil,  4370,   507,   231,   783,   224,   274,   nil,   nil,
     9,   nil,    13,     1,    77,    27,    76,     3,    -9,   nil,
   nil,   nil,   nil,   nil,   nil,  4423,  3825,   208,   nil,   228,
   nil,     1,   nil,   235,   nil,   nil,   829,   nil,   229,   nil,
   215,    58,   nil,   875,   921,  1016,  3513,   nil,   nil,  2721,
  2997,   161,   163,   nil,   -17,   176,   130,    65,   nil,   111,
  3046,   nil,   nil,   205,  2905,   nil,   nil,   nil,   nil,  2859,
   nil,  2813,  4444,   nil,   236,  2675,    37,  4402,  2629,  2583,
   149,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  2445,   157,   nil,   100,   136,
    47,   nil,   170,   118,   186,   166,     3,  1568,   nil,  1522,
   193,   nil,   171,   203,   205,   nil,    63,   nil,   206,  3138,
  1108,   nil,   nil,  3565,   nil,   nil,   nil,  3617,   nil,   230,
   nil,   nil,   nil,   nil,  3721,  3773,   238,   239,   nil,   nil,
   nil,   nil,  4211,    89,   nil,   691,   248,   226,   nil,   250,
   251,   nil,   nil,   nil,  4263,   253,   461,   258,   nil,   415,
   nil,   nil,   nil,   250,   267,   nil,   273,   nil,   nil,   nil,
   nil,   nil,   nil,   185,   nil,   139,  2350,   nil,   nil,   nil,
   282,   nil,   nil,   nil,   nil,   284,   nil,   285,   nil,   286,
   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -205,  -206,    -1,    -2,    -3,    -4,    -6,    -8,    -9,   -14,
  -106,  -206,  -206,  -206,   -40,   -41,   -42,   -43,   -44,   -45,
   -46,   -47,   -48,   -49,   -50,   -51,   -52,   -53,   -54,   -55,
   -56,   -57,   -58,   -59,   -60,   -63,   -64,   -68,  -206,  -206,
  -206,   -99,  -206,  -206,  -115,  -206,  -206,  -160,  -206,  -206,
  -170,  -171,  -172,  -206,  -174,  -181,  -182,  -183,  -184,  -185,
  -186,  -206,    -5,  -206,  -206,  -206,  -206,  -206,  -206,  -206,
  -206,  -206,  -206,  -206,  -206,  -206,  -206,  -206,  -206,  -206,
  -206,  -206,  -206,  -206,  -206,  -206,  -206,  -206,  -206,  -123,
  -118,  -205,  -205,   -25,  -206,   -32,  -206,  -206,   -65,   -70,
   -71,  -205,  -206,  -206,  -206,  -206,   -81,  -206,  -206,  -206,
  -206,  -206,  -205,  -149,  -150,  -116,  -205,  -205,  -141,  -143,
  -144,  -145,  -146,   -38,  -206,  -163,  -206,  -166,  -167,  -206,
  -178,  -173,  -206,   355,    -7,   -10,   -11,   -12,   -13,  -206,
   -16,   -17,  -158,  -159,   -18,   -19,   -20,   -21,   -22,   -23,
   -24,   -26,   -27,   -28,   -29,   -30,   -31,   -33,   -34,   -35,
   -36,   -69,  -206,  -198,  -204,  -192,  -189,  -187,  -113,  -124,
  -181,  -127,  -185,  -206,  -195,  -193,  -201,  -183,  -184,  -191,
  -196,  -197,  -199,  -200,  -202,  -123,  -122,  -206,  -121,  -206,
   -37,  -206,   -62,  -206,   -75,   -76,  -206,   -79,  -187,  -154,
  -157,  -206,   -67,  -206,  -206,  -206,  -206,  -100,  -101,  -206,
  -206,  -189,  -205,  -151,  -206,  -206,  -206,  -206,  -147,  -206,
  -206,  -161,  -164,  -206,  -206,  -175,  -176,  -177,  -179,  -206,
   -15,  -206,  -123,  -112,  -206,  -190,  -206,  -188,  -206,  -206,
  -187,  -126,  -128,  -192,  -193,  -194,  -195,  -198,  -201,  -203,
  -204,  -119,  -120,   -61,   -72,  -206,  -206,   -78,  -206,  -188,
  -206,   -66,  -206,   -84,  -206,   -90,  -206,  -206,   -94,  -206,
  -187,  -103,  -189,  -206,  -206,  -135,  -206,  -152,  -187,  -206,
  -206,  -142,  -148,   -39,  -162,  -165,  -168,  -169,  -180,  -187,
  -108,  -114,  -109,  -125,  -129,  -130,  -206,  -206,   -74,   -77,
   -80,  -155,  -156,   -84,   -83,  -206,  -206,   -90,   -89,  -206,
  -206,   -98,   -93,   -95,  -105,  -206,  -188,  -206,  -110,  -206,
  -136,  -137,  -138,  -206,  -206,  -132,  -206,  -140,  -111,  -117,
   -73,   -82,   -85,  -206,   -88,  -206,  -206,  -102,  -104,  -107,
  -206,  -134,  -153,  -131,  -139,  -206,   -87,  -206,   -92,  -206,
   -97,  -133,   -86,   -91,   -96 ]

racc_goto_table = [
     2,    93,    95,    96,   116,     3,   131,   128,   208,   167,
   308,   304,   129,   236,   198,   166,   122,   101,   281,   212,
   282,   310,   268,   215,   135,   136,   137,   138,   105,   107,
   108,   207,   110,   143,   143,   234,   124,   211,   123,   267,
   142,   142,   270,   130,   258,   141,   144,   187,   189,   332,
   254,   331,   334,   193,   291,   232,   139,   100,   123,   140,
   293,    99,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    98,   162,
   273,   186,   186,   196,   313,   191,   296,   123,   274,   320,
   216,   134,   201,   301,   123,   126,    62,     1,   228,   206,
   229,   162,   227,   nil,   nil,   240,   194,   nil,   271,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   315,   213,   nil,   nil,
   nil,   213,   218,   nil,   323,   278,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   116,   nil,   328,   272,   nil,   nil,   nil,
   nil,   317,   nil,   nil,   nil,   nil,   122,   nil,   nil,   nil,
   nil,   nil,   289,   105,   107,   108,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   286,   288,   nil,   nil,   nil,   129,   122,   nil,   122,
   nil,   nil,   nil,   nil,   nil,   123,   256,   nil,   nil,   206,
   162,   nil,   nil,   262,   264,   nil,   nil,   nil,   nil,   nil,
   283,   nil,   nil,   nil,   287,   338,   nil,   275,   nil,   130,
   nil,   283,   nil,   nil,   nil,   162,   nil,   nil,   294,   295,
   nil,   nil,   nil,   nil,   nil,   321,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   302,   nil,   nil,   nil,   nil,   297,   nil,   123,   nil,   314,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   324,
   326,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   105,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   206,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   340,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   345,   nil,   347,   349 ]

racc_goto_check = [
     2,     9,     9,     9,    66,     3,    79,    75,    53,    58,
    48,    47,    30,    45,    44,    56,    29,    41,    72,    67,
    72,    51,    50,    67,     8,     8,     8,     8,     9,     9,
     9,    52,     9,    30,    30,    57,    11,    56,     9,    49,
    29,    29,    54,     9,    45,    12,    12,    62,    62,    46,
    43,    47,    48,    42,    59,    60,    11,    40,     9,     9,
    63,    39,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,    37,     9,
    57,     9,     9,    41,    50,    11,    45,     9,    68,    69,
    71,     6,    11,    73,     9,    74,     5,     1,    80,     9,
    81,     9,    83,   nil,   nil,    58,     3,   nil,    53,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    45,     3,   nil,   nil,
   nil,     3,     3,   nil,    45,    44,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    66,   nil,    45,    56,   nil,   nil,   nil,
   nil,    57,   nil,   nil,   nil,   nil,    29,   nil,   nil,   nil,
   nil,   nil,    58,     9,     9,     9,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    75,    79,   nil,   nil,   nil,    30,    29,   nil,    29,
   nil,   nil,   nil,   nil,   nil,     9,     2,   nil,   nil,     9,
     9,   nil,   nil,     2,     2,   nil,   nil,   nil,   nil,   nil,
     9,   nil,   nil,   nil,     9,    53,   nil,     3,   nil,     9,
   nil,     9,   nil,   nil,   nil,     9,   nil,   nil,     9,     9,
   nil,   nil,   nil,   nil,   nil,    66,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     9,   nil,   nil,   nil,   nil,     2,   nil,     9,   nil,     9,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    97,     0,     5,   nil,    92,    28,   nil,   -40,   -10,
   nil,   -12,   -25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -30,
   -37,   nil,   nil,   nil,   nil,   nil,   nil,    42,   nil,    25,
    21,   -19,   -48,  -143,   -89,  -154,  -256,  -252,  -255,  -166,
  -183,  -245,   -78,  -101,  -167,   nil,   -74,  -131,   -80,  -181,
  -107,   nil,   -44,  -177,   nil,   nil,   -41,   -93,  -124,  -187,
   nil,   -27,  -199,  -166,    46,   -42,   nil,   nil,   nil,   -47,
   -34,   -32,   nil,   -30 ]

racc_goto_default = [
   nil,   nil,   nil,   188,     4,     5,     6,     7,     8,    10,
     9,   266,   nil,    14,    35,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    41,    36,   nil,    37,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   106,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    42,   nil,   nil,   nil,   168,
   nil,    90,   nil,   169,   173,   171,   112,   nil,   nil,   nil,
   117,   nil,   118,   199,   nil,   nil,    50,    51,    53,   nil,
   nil,   nil,   132,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 77, :_reduce_1,
  1, 77, :_reduce_none,
  1, 78, :_reduce_3,
  1, 80, :_reduce_4,
  2, 80, :_reduce_5,
  1, 81, :_reduce_6,
  3, 81, :_reduce_7,
  1, 82, :_reduce_none,
  1, 83, :_reduce_9,
  3, 83, :_reduce_10,
  3, 83, :_reduce_11,
  3, 83, :_reduce_12,
  3, 83, :_reduce_13,
  1, 85, :_reduce_none,
  4, 85, :_reduce_15,
  3, 85, :_reduce_16,
  3, 85, :_reduce_17,
  3, 85, :_reduce_18,
  3, 85, :_reduce_19,
  3, 85, :_reduce_20,
  3, 85, :_reduce_21,
  3, 85, :_reduce_22,
  3, 85, :_reduce_23,
  3, 85, :_reduce_24,
  2, 85, :_reduce_25,
  3, 85, :_reduce_26,
  3, 85, :_reduce_27,
  3, 85, :_reduce_28,
  3, 85, :_reduce_29,
  3, 85, :_reduce_30,
  3, 85, :_reduce_31,
  2, 85, :_reduce_32,
  3, 85, :_reduce_33,
  3, 85, :_reduce_34,
  3, 85, :_reduce_35,
  3, 85, :_reduce_36,
  3, 85, :_reduce_37,
  1, 87, :_reduce_38,
  3, 87, :_reduce_39,
  1, 86, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 106, :_reduce_59,
  1, 106, :_reduce_60,
  4, 111, :_reduce_61,
  3, 111, :_reduce_62,
  1, 111, :_reduce_63,
  1, 93, :_reduce_64,
  2, 93, :_reduce_65,
  4, 112, :_reduce_66,
  3, 112, :_reduce_67,
  1, 112, :_reduce_68,
  3, 114, :_reduce_69,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  3, 115, :_reduce_72,
  3, 119, :_reduce_73,
  2, 119, :_reduce_74,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  4, 116, :_reduce_77,
  3, 116, :_reduce_78,
  2, 117, :_reduce_79,
  4, 117, :_reduce_80,
  2, 96, :_reduce_81,
  5, 122, :_reduce_82,
  4, 122, :_reduce_83,
  0, 123, :_reduce_none,
  2, 123, :_reduce_85,
  4, 123, :_reduce_86,
  3, 123, :_reduce_87,
  6, 97, :_reduce_88,
  5, 97, :_reduce_89,
  0, 124, :_reduce_none,
  4, 124, :_reduce_91,
  3, 124, :_reduce_92,
  5, 95, :_reduce_93,
  1, 125, :_reduce_94,
  2, 125, :_reduce_95,
  5, 126, :_reduce_96,
  4, 126, :_reduce_97,
  1, 127, :_reduce_98,
  1, 89, :_reduce_none,
  3, 89, :_reduce_100,
  1, 128, :_reduce_none,
  4, 128, :_reduce_102,
  1, 130, :_reduce_103,
  3, 130, :_reduce_104,
  3, 129, :_reduce_105,
  1, 84, :_reduce_106,
  6, 84, :_reduce_107,
  5, 84, :_reduce_108,
  5, 84, :_reduce_109,
  5, 84, :_reduce_110,
  4, 135, :_reduce_111,
  1, 136, :_reduce_112,
  1, 132, :_reduce_113,
  3, 132, :_reduce_114,
  1, 131, :_reduce_115,
  2, 131, :_reduce_116,
  6, 94, :_reduce_117,
  2, 94, :_reduce_118,
  3, 137, :_reduce_119,
  3, 137, :_reduce_120,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  0, 134, :_reduce_123,
  1, 134, :_reduce_124,
  3, 134, :_reduce_125,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  3, 139, :_reduce_129,
  3, 139, :_reduce_130,
  6, 98, :_reduce_131,
  5, 98, :_reduce_132,
  7, 99, :_reduce_133,
  6, 99, :_reduce_134,
  1, 144, :_reduce_none,
  2, 144, :_reduce_136,
  1, 145, :_reduce_none,
  1, 145, :_reduce_none,
  6, 100, :_reduce_139,
  5, 100, :_reduce_140,
  1, 146, :_reduce_141,
  3, 146, :_reduce_142,
  1, 148, :_reduce_143,
  1, 148, :_reduce_144,
  1, 148, :_reduce_145,
  1, 148, :_reduce_none,
  1, 147, :_reduce_none,
  2, 147, :_reduce_148,
  1, 142, :_reduce_149,
  1, 142, :_reduce_150,
  1, 143, :_reduce_151,
  2, 143, :_reduce_152,
  4, 143, :_reduce_153,
  1, 120, :_reduce_154,
  3, 120, :_reduce_155,
  3, 149, :_reduce_156,
  1, 149, :_reduce_157,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  1, 92, :_reduce_160,
  3, 101, :_reduce_161,
  4, 101, :_reduce_162,
  2, 101, :_reduce_163,
  3, 104, :_reduce_164,
  4, 104, :_reduce_165,
  2, 104, :_reduce_166,
  1, 150, :_reduce_167,
  3, 150, :_reduce_168,
  3, 151, :_reduce_169,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 152, :_reduce_172,
  2, 153, :_reduce_173,
  1, 154, :_reduce_174,
  1, 156, :_reduce_175,
  1, 157, :_reduce_176,
  2, 155, :_reduce_177,
  1, 158, :_reduce_178,
  1, 159, :_reduce_179,
  2, 159, :_reduce_180,
  1, 109, :_reduce_181,
  1, 107, :_reduce_182,
  1, 108, :_reduce_183,
  1, 103, :_reduce_184,
  1, 102, :_reduce_185,
  1, 105, :_reduce_186,
  0, 121, :_reduce_none,
  1, 121, :_reduce_188,
  0, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 79, :_reduce_205 ]

racc_reduce_n = 206

racc_shift_n = 355

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :DEFINE => 32,
  :ELSIF => 33,
  :VARIABLE => 34,
  :CLASS => 35,
  :INHERITS => 36,
  :NODE => 37,
  :BOOLEAN => 38,
  :NAME => 39,
  :SEMIC => 40,
  :CASE => 41,
  :DEFAULT => 42,
  :AT => 43,
  :LCOLLECT => 44,
  :RCOLLECT => 45,
  :CLASSREF => 46,
  :NOT => 47,
  :OR => 48,
  :AND => 49,
  :UNDEF => 50,
  :PARROW => 51,
  :PLUS => 52,
  :MINUS => 53,
  :TIMES => 54,
  :DIV => 55,
  :LSHIFT => 56,
  :RSHIFT => 57,
  :UMINUS => 58,
  :MATCH => 59,
  :NOMATCH => 60,
  :REGEX => 61,
  :IN_EDGE => 62,
  :OUT_EDGE => 63,
  :IN_EDGE_SUB => 64,
  :OUT_EDGE_SUB => 65,
  :IN => 66,
  :UNLESS => 67,
  :PIPE => 68,
  :LAMBDA => 69,
  :SELBRACE => 70,
  :LOW => 71,
  :HIGH => 72,
  :CALL => 73,
  :TITLE_COLON => 74,
  :CASE_COLON => 75 }

racc_nt_base = 76

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "LOW",
  "HIGH",
  "CALL",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "match_rvalue",
  "selector_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "type",
  "undef",
  "name",
  "quotedtext",
  "call_function_expression",
  "call_method_expression",
  "lambda",
  "named_access",
  "lambda_j8",
  "lambda_ruby",
  "lambda_parameter_list",
  "optional_farrow",
  "lambda_rest",
  "parameters",
  "endcomma",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entries",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 56)
  def _reduce_1(val, _values, result)
     result = Factory.block_or_expression(*val[0]) 
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'egrammar.ra', 62)
  def _reduce_3(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_4(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_5(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 73)
  def _reduce_6(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_7(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_10(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_11(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 84)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_15(val, _values, result)
     result = val[0][*val[2]]; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 92)
  def _reduce_16(val, _values, result)
     result = val[0].in val[2]  ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_17(val, _values, result)
     result = val[0] =~  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_18(val, _values, result)
     result = val[0].mne val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_19(val, _values, result)
     result = val[0] +   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_20(val, _values, result)
     result = val[0] -   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_21(val, _values, result)
     result = val[0] /   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_22(val, _values, result)
     result = val[0] *   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_23(val, _values, result)
     result = val[0] <<  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_24(val, _values, result)
     result = val[0] >>  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_25(val, _values, result)
     result = val[1].minus()    ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_26(val, _values, result)
     result = val[0].ne  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_27(val, _values, result)
     result = val[0] ==  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_28(val, _values, result)
     result = val[0] >   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_29(val, _values, result)
     result = val[0] >=  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_30(val, _values, result)
     result = val[0] <   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_31(val, _values, result)
     result = val[0] <=  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_32(val, _values, result)
     result = val[1].not        ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_33(val, _values, result)
     result = val[0].and val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_34(val, _values, result)
     result = val[0].or  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_35(val, _values, result)
     result = val[0].set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_36(val, _values, result)
     result = val[0].plus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_37(val, _values, result)
     result = val[1].paren()    ;                    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 121)
  def _reduce_38(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 122)
  def _reduce_39(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

module_eval(<<'.,.,', 'egrammar.ra', 152)
  def _reduce_59(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 153)
  def _reduce_60(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 160)
  def _reduce_61(val, _values, result)
     result = Factory.CALL_NAMED(val[0], true, val[2]) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 161)
  def _reduce_62(val, _values, result)
     result = Factory.CALL_NAMED(val[0], true, []) ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 162)
  def _reduce_63(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 168)
  def _reduce_64(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 169)
  def _reduce_65(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 172)
  def _reduce_66(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 173)
  def _reduce_67(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 174)
  def _reduce_68(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 179)
  def _reduce_69(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

# reduce 70 omitted

# reduce 71 omitted

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_72(val, _values, result)
          result = Factory.LAMBDA(val[0], val[2])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_73(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_74(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 75 omitted

# reduce 76 omitted

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_77(val, _values, result)
          result = Factory.LAMBDA(val[1], val[2])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_78(val, _values, result)
          result = Factory.LAMBDA(val[1], nil)
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_79(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 221)
  def _reduce_80(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 231)
  def _reduce_81(val, _values, result)
          result = val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 237)
  def _reduce_82(val, _values, result)
            @lexer.commentpop
        result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 242)
  def _reduce_83(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 84 omitted

module_eval(<<'.,.,', 'egrammar.ra', 249)
  def _reduce_85(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 251)
  def _reduce_86(val, _values, result)
            @lexer.commentpop
        result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 256)
  def _reduce_87(val, _values, result)
            @lexer.commentpop
  	    result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 266)
  def _reduce_88(val, _values, result)
          @lexer.commentpop
      result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 271)
  def _reduce_89(val, _values, result)
          @lexer.commentpop
      result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 90 omitted

module_eval(<<'.,.,', 'egrammar.ra', 282)
  def _reduce_91(val, _values, result)
            @lexer.commentpop
        result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_92(val, _values, result)
            @lexer.commentpop
    	  result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 296)
  def _reduce_93(val, _values, result)
          @lexer.commentpop
      result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 303)
  def _reduce_94(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 304)
  def _reduce_95(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_96(val, _values, result)
            @lexer.commentpop
        result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 314)
  def _reduce_97(val, _values, result)
            @lexer.commentpop
        result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 319)
  def _reduce_98(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 99 omitted

module_eval(<<'.,.,', 'egrammar.ra', 328)
  def _reduce_100(val, _values, result)
     result = val[0].select(*val[2]) ; loc result, val[0] 
    result
  end
.,.,

# reduce 101 omitted

module_eval(<<'.,.,', 'egrammar.ra', 339)
  def _reduce_102(val, _values, result)
            @lexer.commentpop
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_103(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 346)
  def _reduce_104(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 351)
  def _reduce_105(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 367)
  def _reduce_106(val, _values, result)
      	  result = val[0]
  	
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 370)
  def _reduce_107(val, _values, result)
      	  result = case Factory.resource_shape(val[1])
  	  when :resource, :class
  	    tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
  	    tmp.form = val[0]
  	    tmp
	  when :defaults
        error "A resource default can not be virtual or exported"
  	  when :override
        error "A resource override can not be virtual or exported"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 385)
  def _reduce_108(val, _values, result)
      	  result = case Factory.resource_shape(val[0])
  	  when :resource, :class
  	    Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
	  when :defaults
        error "A resource default can not specify a resource name"
  	  when :override
        error "A resource override does not allow override of name of resource"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 398)
  def _reduce_109(val, _values, result)
      	  result = case Factory.resource_shape(val[0])
  	  when :resource, :class
	    # This catches deprecated syntax.
	    error "All resource specifications require names"
	  when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
  	  when :override
  	    # This was only done for override in original - TODO shuld it be here at all
        @lexer.commentpop
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]  	  
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 414)
  def _reduce_110(val, _values, result)
      	    result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
  	    loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 419)
  def _reduce_111(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 421)
  def _reduce_112(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 424)
  def _reduce_113(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 425)
  def _reduce_114(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 430)
  def _reduce_115(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 431)
  def _reduce_116(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 443)
  def _reduce_117(val, _values, result)
          @lexer.commentpop
      result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 448)
  def _reduce_118(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 453)
  def _reduce_119(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 454)
  def _reduce_120(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 121 omitted

# reduce 122 omitted

module_eval(<<'.,.,', 'egrammar.ra', 469)
  def _reduce_123(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 470)
  def _reduce_124(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 471)
  def _reduce_125(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'egrammar.ra', 487)
  def _reduce_129(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 491)
  def _reduce_130(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 501)
  def _reduce_131(val, _values, result)
          @lexer.commentpop
      result = Factory.DEFINITION(classname(val[1][:value]), val[2], val[4])
      loc result, val[0], val[5]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 507)
  def _reduce_132(val, _values, result)
          @lexer.commentpop
      result = Factory.DEFINITION(classname(val[1][:value]), val[2], nil)
      loc result, val[0], val[4]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 523)
  def _reduce_133(val, _values, result)
          @lexer.commentpop
      @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5])
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 529)
  def _reduce_134(val, _values, result)
          @lexer.commentpop
      @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), nil)
      loc result, val[0], val[5]
      
    result
  end
.,.,

# reduce 135 omitted

module_eval(<<'.,.,', 'egrammar.ra', 538)
  def _reduce_136(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 137 omitted

# reduce 138 omitted

module_eval(<<'.,.,', 'egrammar.ra', 555)
  def _reduce_139(val, _values, result)
          @lexer.commentpop
      result = Factory.NODE(val[1], val[2], val[4])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 560)
  def _reduce_140(val, _values, result)
          @lexer.commentpop
      result = Factory.NODE(val[1], val[2], nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 571)
  def _reduce_141(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 572)
  def _reduce_142(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 576)
  def _reduce_143(val, _values, result)
     result = Factory.fqn(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_144(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 578)
  def _reduce_145(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 146 omitted

# reduce 147 omitted

module_eval(<<'.,.,', 'egrammar.ra', 584)
  def _reduce_148(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 590)
  def _reduce_149(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 591)
  def _reduce_150(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_151(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 597)
  def _reduce_152(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 598)
  def _reduce_153(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 602)
  def _reduce_154(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 603)
  def _reduce_155(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 607)
  def _reduce_156(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 608)
  def _reduce_157(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 158 omitted

# reduce 159 omitted

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_160(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 628)
  def _reduce_161(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 629)
  def _reduce_162(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 630)
  def _reduce_163(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 633)
  def _reduce_164(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 634)
  def _reduce_165(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 635)
  def _reduce_166(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_167(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_168(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_169(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 170 omitted

# reduce 171 omitted

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_172(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_173(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_174(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_175(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_176(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_177(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_178(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_179(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_180(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_181(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 661)
  def _reduce_182(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_183(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_184(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_185(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_186(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 187 omitted

module_eval(<<'.,.,', 'egrammar.ra', 684)
  def _reduce_188(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

module_eval(<<'.,.,', 'egrammar.ra', 707)
  def _reduce_205(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

        end   # class Parser
        end   # module Parser
      end   # module Impl
    end   # module Pops
  end   # module Puppet
