#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/pops/impl/parser/lexer'
require 'puppet/pops/impl/model/factory'
#require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Impl
      module Parser
        class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 738)

# Require supporting logic mixed in to the generated Puppet::Pops::Impl::Parser::Parser class
require 'puppet/pops/impl/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'52,54,240,69,48,219,49,112,280,202,52,54,-131,233,-129,233,89,202,93',
'116,-206,121,13,315,-197,197,264,115,38,221,45,114,47,95,115,46,59,55',
'114,40,58,92,241,199,56,12,295,55,57,52,54,11,-131,48,-129,49,71,72',
'120,60,-206,122,233,70,-197,39,115,121,211,60,114,13,115,326,104,255',
'114,38,121,45,60,47,95,216,46,59,55,223,40,58,104,103,222,56,12,52,54',
'57,232,48,11,49,115,233,120,115,114,122,60,114,310,283,309,121,39,120',
'224,13,122,225,52,54,310,38,309,45,60,47,43,239,46,59,55,62,40,58,44',
'60,282,56,12,52,54,57,187,48,11,49,352,303,120,304,69,122,60,104,103',
'55,104,103,39,228,227,13,202,89,163,93,307,38,279,45,60,47,43,311,46',
'59,55,60,40,58,44,69,313,56,12,52,54,57,92,48,11,49,350,237,89,216,93',
'226,60,320,237,69,322,323,39,52,54,13,65,67,66,68,288,38,89,45,93,47',
'43,92,46,59,55,263,40,58,44,262,64,56,12,52,54,57,69,48,11,49,134,92',
'262,64,55,239,60,258,293,89,333,93,39,334,254,13,253,52,54,110,337,38',
'313,45,128,47,95,339,46,59,55,340,40,58,92,105,341,56,12,52,54,57,239',
'48,11,49,343,98,346,71,72,347,60,348,55,237,70,64,39,61,355,13,356,357',
'358,,,38,,45,,47,95,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,',
',,,60,,,,,,39,,,13,,,,,,38,,45,,47,95,,46,59,55,,40,58,,,,56,12,52,54',
'57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,95,,46,59,55,,40',
'58,,,,56,12,52,54,57,,48,11,49,345,,,,,,60,,,,,,39,,,13,,,,,,38,,45',
',47,43,,46,59,55,,40,58,44,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,',
'39,,,13,,,,,,38,,45,,47,95,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11',
'49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,95,,46,59,55,,40,58,,,,56,12',
'52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,95,,46,59,55',
',40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45',
',47,95,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39',
',,13,,,,,,38,,45,,47,95,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49',
',,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,95,,46,59,55,,40,58,,,,56,12,52',
'54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,95,,46,59,55,',
'40,58,,,,56,12,52,54,57,,48,11,49,260,,,,,,60,,,,,,39,,,13,,,,,,38,',
'45,,47,43,,46,59,55,,40,58,44,,,56,12,52,54,57,,48,11,49,266,,,,,,60',
',,,,,39,,,13,,,,,,38,,45,,47,43,,46,59,55,,40,58,44,,,56,12,52,54,57',
',48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,95,,46,59,55,,40,58',
',,,56,12,52,54,57,,48,11,49,268,69,,,,,60,,,,,,39,,89,13,93,,,,,38,',
'45,,47,43,,46,59,55,,40,58,44,,,56,12,92,,57,52,54,11,,48,126,49,76',
'75,,60,,71,72,,,39,,,70,,,13,,,,,,38,,45,,47,95,,46,59,55,,40,58,,,',
'56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,95,,46',
'59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,',
'38,,45,,47,95,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,331,,,,,',
'60,,,,,,39,,,13,,,,,,38,,45,,47,43,,46,59,55,,40,58,44,,,56,12,52,54',
'57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,43,,46,59,55,,40',
'58,44,,,56,12,52,54,57,,48,11,49,329,,,,,,60,,,,,,39,,,13,,,,,,38,,45',
',47,43,,46,59,55,,40,58,44,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,',
'39,,,13,,,,,,38,,45,,47,43,,46,59,55,,40,58,44,,,56,12,52,54,57,,48',
'11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,43,,46,59,55,,40,58,44,',
',56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,43,',
'46,59,55,,40,58,44,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13',
',,,,,38,,45,,47,43,,46,59,55,,40,58,44,,,56,12,52,54,57,,48,11,49,,',
',,,,60,,,,,,39,,,13,,,,,,38,,45,,47,43,,46,59,55,,40,58,44,,,56,12,52',
'54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,95,,46,59,55,',
'40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45',
',47,95,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39',
',,13,,,,,,38,,45,,47,95,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49',
'316,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,95,,46,59,55,,40,58,,,,56,12',
'52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,95,,46,59,55',
',40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45',
',47,95,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39',
',,13,,,,,,38,,45,,47,95,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49',
',,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,95,,46,59,55,,40,58,,,,56,12,52',
'54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,95,,46,59,55,',
'40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45',
',47,95,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39',
',,13,,,,,,38,,45,,47,95,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49',
',,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,95,,46,59,55,,40,58,,,,56,12,52',
'54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,95,,46,59,55,',
'40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45',
',47,95,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39',
',,13,,,,,,38,,45,,47,95,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49',
',,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,95,,46,59,55,,40,58,,,,56,12,52',
'54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,95,,46,59,55,',
'40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45',
',47,95,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39',
',,13,,,,,,38,,45,,47,95,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49',
'354,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,43,,46,59,55,,40,58,44,,,56',
'12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,95,,46,59',
'55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,165',
'182,176,183,47,177,185,178,174,172,,167,180,,,,56,12,186,181,179,52',
'54,11,,48,,49,302,,,60,,,,,184,166,,,,,,13,,,,,,38,,45,,47,43,,46,59',
'55,,40,58,44,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38',
',45,,47,95,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,',
',,39,,,13,,,,,,38,,45,,47,95,,46,59,55,,40,58,,,,56,12,52,54,57,,48',
'11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,95,,46,59,55,,40,58,,,,56',
'12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,95,,46,59',
'55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38',
',45,,47,95,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,',
',,39,,,13,,,,,,38,,45,,47,95,,46,59,55,,40,58,,,,56,12,52,54,57,,48',
'11,49,,,,,,,60,,,,,,39,,,13,194,,,,,38,,45,,47,95,,46,59,55,,40,58,',
',,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,95',
',46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,',
',,,,38,,45,,47,95,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,',
',60,,,,,,39,,,13,,,,,,38,,45,,47,95,,46,59,55,,40,58,,,,56,12,52,54',
'57,,48,11,49,,,,,,,60,,,,,,39,,,13,204,,,,,38,,45,,47,95,,46,59,55,',
'40,58,,,,56,12,52,54,57,,48,11,49,,69,,,,,60,,,,,,39,,89,13,93,,,,,38',
',45,,47,95,,46,59,55,,40,58,,,,56,12,92,,57,52,54,11,,48,287,49,76,75',
',60,,71,72,,,39,,,70,,,13,,,,,,38,,45,,47,95,,46,59,55,,40,58,,,,56',
'12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,45,,47,95,,46,59',
'55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38',
',45,,47,43,,46,59,55,,40,58,44,,,56,12,,,57,,,11,,,,,,,69,60,212,,,',
',39,,87,88,84,79,89,,93,,,,,80,82,81,83,,,,,,,,,,,,,,,92,,,,86,85,,',
'73,74,76,75,77,78,,71,72,69,,207,,,70,,,,87,88,84,79,89,,93,,,,,80,82',
'81,83,,,,,,,,,,,,,,,92,,,,86,85,,,73,74,76,75,77,78,,71,72,69,,206,',
',70,,,,87,88,84,79,89,,93,,,,,80,82,81,83,,,,,,,,,,,,,,,92,,,,86,85',
',,73,74,76,75,77,78,,71,72,69,,205,,,70,,,,87,88,84,79,89,,93,,,,,80',
'82,81,83,,,,,,,,,,,,,,,92,,,,86,85,,,73,74,76,75,77,78,69,71,72,,,,',
',70,87,88,84,79,89,,93,,,,192,80,82,81,83,,,,,,,,,,,,,,,92,,,,86,85',
',,73,74,76,75,77,78,69,71,72,,,,,,70,87,88,84,79,89,,93,,,,,80,82,81',
'83,,,,,,,,,,,,,,,92,,,,86,85,,,73,74,76,75,77,78,69,71,72,,,272,,,70',
'87,88,84,79,89,,93,,,,,80,82,81,83,,,,,,,,,,,,,,,92,,,,86,85,,,73,74',
'76,75,77,78,69,71,72,,,,,,70,87,88,84,79,89,,93,,,,,80,82,81,83,,,,',
',,,,,,,,,,92,,,,86,85,,,73,74,76,75,77,78,69,71,72,,,,,,70,87,88,84',
'79,89,,93,,,,,80,82,81,83,,,,,,,,,,,,,,,92,,,,86,85,,,73,74,76,75,77',
'78,69,71,72,,,,,,70,87,88,84,79,89,,93,,,,,80,82,81,83,,,,,,,,,,,,,',
',92,,,,86,85,,,73,74,76,75,77,78,69,71,72,,,,,,70,87,88,84,79,89,,93',
',,,,80,82,81,83,,,,,,,,,,,,,,,92,,,,86,85,,,73,74,76,75,77,78,69,71',
'72,,,,,,70,87,88,84,79,89,,93,,,,,80,82,81,83,,,,,,,,,,,,,,,92,,,,86',
'85,,,73,74,76,75,77,78,69,71,72,,,,,,70,87,88,84,79,89,,93,,,,,80,82',
'81,83,,,,,,,,,,,,,,,92,,,,86,85,,,73,74,76,75,77,78,69,71,72,,,,,,70',
'87,88,84,79,89,,93,,69,,,80,82,81,83,,,,,,,89,,93,,,,,,92,,,,86,85,69',
',73,74,76,75,77,78,,71,72,92,,89,,93,70,69,,73,74,76,75,,,,71,72,,,89',
',93,70,,,,69,92,,,,,,,,73,74,76,75,89,,93,71,72,92,,,,,70,69,,73,74',
'76,75,77,78,,71,72,,79,89,92,93,70,,,69,80,,73,74,76,75,77,78,,71,72',
'79,89,,93,,70,,92,80,,,,69,,,73,74,76,75,77,78,,71,72,79,89,92,93,,70',
',69,80,,73,74,76,75,77,78,,71,72,79,89,,93,,70,,92,80,,,,,,,73,74,76',
'75,77,78,,71,72,,,92,,,70,,,69,,73,74,76,75,77,78,,71,72,84,79,89,,93',
'70,,,69,80,82,81,83,,,,,,,84,79,89,,93,,,,92,80,82,81,83,,,,73,74,76',
'75,77,78,,71,72,,,92,,,70,,85,,,73,74,76,75,77,78,69,71,72,,,,,,70,87',
'88,84,79,89,,93,,,,,80,82,81,83,,,,,,,,,,,,,,,92,,,,86,85,,,73,74,76',
'75,77,78,69,71,72,,,,,,70,87,88,84,79,89,,93,,,,,80,82,81,83,,,,,,,',
',,,,,,,92,,,,86,85,,,73,74,76,75,77,78,69,71,72,,,,,,70,87,88,84,79',
'89,235,93,,,,,80,82,81,83,,,,,,,,,,,,,,,92,,,,86,85,,,73,74,76,75,77',
'78,,71,72,69,,90,,,70,,,,87,88,84,79,89,,93,,,,,80,82,81,83,,,,,,,,',
',,,,,,92,,,,86,85,,,73,74,76,75,77,78,69,71,72,,,,,,70,87,88,84,79,89',
',93,,,,,80,82,81,83,,,,,,,,,,,,,,,92,,,,86,85,,,73,74,76,75,77,78,,71',
'72,,249,182,248,183,70,246,185,250,244,243,,245,247,,,,,,186,181,251',
'249,182,248,183,,246,185,250,244,243,,245,247,,,184,252,,186,181,251',
'249,182,248,183,,246,185,250,244,243,,245,247,,,184,252,,186,181,251',
',,,,,,,,,,,,,,,184,252' ]
        racc_action_table = arr = ::Array.new(4558, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'110,110,175,149,110,118,110,43,216,104,71,71,174,203,172,269,149,216',
'149,44,179,46,110,269,180,102,203,177,110,118,110,177,110,110,43,110',
'110,110,43,110,110,149,175,104,110,110,238,71,110,88,88,110,174,88,172',
'88,149,149,46,110,179,46,193,149,180,110,279,219,110,71,279,88,45,279',
'103,193,45,88,178,88,46,88,88,113,88,88,88,125,88,88,194,194,125,88',
'88,4,4,88,141,4,88,4,176,141,219,95,176,219,88,95,266,218,266,221,88',
'178,127,4,178,127,72,72,307,4,307,4,219,4,4,242,4,4,4,4,4,4,4,178,217',
'4,4,339,339,4,91,339,4,339,339,259,221,261,142,221,4,36,36,72,255,255',
'4,133,133,339,262,142,89,142,265,339,214,339,221,339,339,267,339,339',
'339,72,339,339,339,94,268,339,339,337,337,339,142,337,339,337,337,213',
'94,117,94,130,339,273,275,96,276,277,339,225,225,337,8,8,8,8,225,337',
'96,337,96,337,337,94,337,337,337,202,337,337,337,281,63,337,337,165',
'165,337,150,165,337,165,61,96,200,135,225,292,337,195,236,150,299,150',
'337,301,191,165,189,49,49,41,310,165,311,165,49,165,165,313,165,165',
'165,314,165,165,150,37,319,165,165,11,11,165,169,11,165,11,321,35,327',
'150,150,328,165,330,49,168,150,5,165,1,344,11,349,351,353,,,11,,11,',
'11,11,,11,11,11,,11,11,,,,11,11,12,12,11,,12,11,12,,,,,,,11,,,,,,11',
',,12,,,,,,12,,12,,12,12,,12,12,12,,12,12,,,,12,12,13,13,12,,13,12,13',
',,,,,,12,,,,,,12,,,13,,,,,,13,,13,,13,13,,13,13,13,,13,13,,,,13,13,323',
'323,13,,323,13,323,323,,,,,,13,,,,,,13,,,323,,,,,,323,,323,,323,323',
',323,323,323,,323,323,323,,,323,323,320,320,323,,320,323,320,,,,,,,323',
',,,,,323,,,320,,,,,,320,,320,,320,320,,320,320,320,,320,320,,,,320,320',
'167,167,320,,167,320,167,,,,,,,320,,,,,,320,,,167,,,,,,167,,167,,167',
'167,,167,167,167,,167,167,,,,167,167,38,38,167,,38,167,38,,,,,,,167',
',,,,,167,,,38,,,,,,38,,38,,38,38,,38,38,38,,38,38,,,,38,38,39,39,38',
',39,38,39,,,,,,,38,,,,,,38,,,39,,,,,,39,,39,,39,39,,39,39,39,,39,39',
',,,39,39,40,40,39,,40,39,40,,,,,,,39,,,,,,39,,,40,,,,,,40,,40,,40,40',
',40,40,40,,40,40,,,,40,40,309,309,40,,309,40,309,,,,,,,40,,,,,,40,,',
'309,,,,,,309,,309,,309,309,,309,309,309,,309,309,,,,309,309,42,42,309',
',42,309,42,,,,,,,309,,,,,,309,,,42,,,,,,42,,42,,42,42,,42,42,42,,42',
'42,,,,42,42,198,198,42,,198,42,198,198,,,,,,42,,,,,,42,,,198,,,,,,198',
',198,,198,198,,198,198,198,,198,198,198,,,198,198,205,205,198,,205,198',
'205,205,,,,,,198,,,,,,198,,,205,,,,,,205,,205,,205,205,,205,205,205',
',205,205,205,,,205,205,166,166,205,,166,205,166,,,,,,,205,,,,,,205,',
',166,,,,,,166,,166,,166,166,,166,166,166,,166,166,,,,166,166,206,206',
'166,,206,166,206,206,147,,,,,166,,,,,,166,,147,206,147,,,,,206,,206',
',206,206,,206,206,206,,206,206,206,,,206,206,147,,206,48,48,206,,48',
'48,48,147,147,,206,,147,147,,,206,,,147,,,48,,,,,,48,,48,,48,48,,48',
'48,48,,48,48,,,,48,48,207,207,48,,207,48,207,,,,,,,48,,,,,,48,,,207',
',,,,,207,,207,,207,207,,207,207,207,,207,207,,,,207,207,53,53,207,,53',
'207,53,,,,,,,207,,,,,,207,,,53,,,,,,53,,53,,53,53,,53,53,53,,53,53,',
',,53,53,283,283,53,,283,53,283,283,,,,,,53,,,,,,53,,,283,,,,,,283,,283',
',283,283,,283,283,283,,283,283,283,,,283,283,0,0,283,,0,283,0,,,,,,',
'283,,,,,,283,,,0,,,,,,0,,0,,0,0,,0,0,0,,0,0,0,,,0,0,282,282,0,,282,0',
'282,282,,,,,,0,,,,,,0,,,282,,,,,,282,,282,,282,282,,282,282,282,,282',
'282,282,,,282,282,64,64,282,,64,282,64,,,,,,,282,,,,,,282,,,64,,,,,',
'64,,64,,64,64,,64,64,64,,64,64,64,,,64,64,65,65,64,,65,64,65,,,,,,,64',
',,,,,64,,,65,,,,,,65,,65,,65,65,,65,65,65,,65,65,65,,,65,65,66,66,65',
',66,65,66,,,,,,,65,,,,,,65,,,66,,,,,,66,,66,,66,66,,66,66,66,,66,66',
'66,,,66,66,67,67,66,,67,66,67,,,,,,,66,,,,,,66,,,67,,,,,,67,,67,,67',
'67,,67,67,67,,67,67,67,,,67,67,68,68,67,,68,67,68,,,,,,,67,,,,,,67,',
',68,,,,,,68,,68,,68,68,,68,68,68,,68,68,68,,,68,68,69,69,68,,69,68,69',
',,,,,,68,,,,,,68,,,69,,,,,,69,,69,,69,69,,69,69,69,,69,69,,,,69,69,70',
'70,69,,70,69,70,,,,,,,69,,,,,,69,,,70,,,,,,70,,70,,70,70,,70,70,70,',
'70,70,,,,70,70,272,272,70,,272,70,272,,,,,,,70,,,,,,70,,,272,,,,,,272',
',272,,272,272,,272,272,272,,272,272,,,,272,272,270,270,272,,270,272',
'270,270,,,,,,272,,,,,,272,,,270,,,,,,270,,270,,270,270,,270,270,270',
',270,270,,,,270,270,73,73,270,,73,270,73,,,,,,,270,,,,,,270,,,73,,,',
',,73,,73,,73,73,,73,73,73,,73,73,,,,73,73,74,74,73,,74,73,74,,,,,,,73',
',,,,,73,,,74,,,,,,74,,74,,74,74,,74,74,74,,74,74,,,,74,74,75,75,74,',
'75,74,75,,,,,,,74,,,,,,74,,,75,,,,,,75,,75,,75,75,,75,75,75,,75,75,',
',,75,75,76,76,75,,76,75,76,,,,,,,75,,,,,,75,,,76,,,,,,76,,76,,76,76',
',76,76,76,,76,76,,,,76,76,77,77,76,,77,76,77,,,,,,,76,,,,,,76,,,77,',
',,,,77,,77,,77,77,,77,77,77,,77,77,,,,77,77,78,78,77,,78,77,78,,,,,',
',77,,,,,,77,,,78,,,,,,78,,78,,78,78,,78,78,78,,78,78,,,,78,78,79,79',
'78,,79,78,79,,,,,,,78,,,,,,78,,,79,,,,,,79,,79,,79,79,,79,79,79,,79',
'79,,,,79,79,80,80,79,,80,79,80,,,,,,,79,,,,,,79,,,80,,,,,,80,,80,,80',
'80,,80,80,80,,80,80,,,,80,80,81,81,80,,81,80,81,,,,,,,80,,,,,,80,,,81',
',,,,,81,,81,,81,81,,81,81,81,,81,81,,,,81,81,82,82,81,,82,81,82,,,,',
',,81,,,,,,81,,,82,,,,,,82,,82,,82,82,,82,82,82,,82,82,,,,82,82,83,83',
'82,,83,82,83,,,,,,,82,,,,,,82,,,83,,,,,,83,,83,,83,83,,83,83,83,,83',
'83,,,,83,83,84,84,83,,84,83,84,,,,,,,83,,,,,,83,,,84,,,,,,84,,84,,84',
'84,,84,84,84,,84,84,,,,84,84,85,85,84,,85,84,85,,,,,,,84,,,,,,84,,,85',
',,,,,85,,85,,85,85,,85,85,85,,85,85,,,,85,85,86,86,85,,86,85,86,,,,',
',,85,,,,,,85,,,86,,,,,,86,,86,,86,86,,86,86,86,,86,86,,,,86,86,87,87',
'86,,87,86,87,,,,,,,86,,,,,,86,,,87,,,,,,87,,87,,87,87,,87,87,87,,87',
'87,,,,87,87,340,340,87,,340,87,340,340,,,,,,87,,,,,,87,,,340,,,,,,340',
',340,,340,340,,340,340,340,,340,340,340,,,340,340,263,263,340,,263,340',
'263,,,,,,,340,,,,,,340,,,263,,,,,,263,,263,,263,263,,263,263,263,,263',
'263,,,,263,263,90,90,263,,90,263,90,,,,,,,263,,,,,,263,,,90,,,,,,90',
'90,90,90,90,90,90,90,90,90,,90,90,,,,90,90,90,90,90,258,258,90,,258',
',258,258,,,90,,,,,90,90,,,,,,258,,,,,,258,,258,,258,258,,258,258,258',
',258,258,258,,,258,258,92,92,258,,92,258,92,,,,,,,258,,,,,,258,,,92',
',,,,,92,,92,,92,92,,92,92,92,,92,92,,,,92,92,93,93,92,,93,92,93,,,,',
',,92,,,,,,92,,,93,,,,,,93,,93,,93,93,,93,93,93,,93,93,,,,93,93,241,241',
'93,,241,93,241,,,,,,,93,,,,,,93,,,241,,,,,,241,,241,,241,241,,241,241',
'241,,241,241,,,,241,241,240,240,241,,240,241,240,,,,,,,241,,,,,,241',
',,240,,,,,,240,,240,,240,240,,240,240,240,,240,240,,,,240,240,237,237',
'240,,237,240,237,,,,,,,240,,,,,,240,,,237,,,,,,237,,237,,237,237,,237',
'237,237,,237,237,,,,237,237,211,211,237,,211,237,211,,,,,,,237,,,,,',
'237,,,211,,,,,,211,,211,,211,211,,211,211,211,,211,211,,,,211,211,98',
'98,211,,98,211,98,,,,,,,211,,,,,,211,,,98,98,,,,,98,,98,,98,98,,98,98',
'98,,98,98,,,,98,98,233,233,98,,233,98,233,,,,,,,98,,,,,,98,,,233,,,',
',,233,,233,,233,233,,233,233,233,,233,233,,,,233,233,231,231,233,,231',
'233,231,,,,,,,233,,,,,,233,,,231,,,,,,231,,231,,231,231,,231,231,231',
',231,231,,,,231,231,226,226,231,,226,231,226,,,,,,,231,,,,,,231,,,226',
',,,,,226,,226,,226,226,,226,226,226,,226,226,,,,226,226,105,105,226',
',105,226,105,,,,,,,226,,,,,,226,,,105,105,,,,,105,,105,,105,105,,105',
'105,105,,105,105,,,,105,105,212,212,105,,212,105,212,,148,,,,,105,,',
',,,105,,148,212,148,,,,,212,,212,,212,212,,212,212,212,,212,212,,,,212',
'212,148,,212,222,222,212,,222,222,222,148,148,,212,,148,148,,,212,,',
'148,,,222,,,,,,222,,222,,222,222,,222,222,222,,222,222,,,,222,222,112',
'112,222,,112,222,112,,,,,,,222,,,,,,222,,,112,,,,,,112,,112,,112,112',
',112,112,112,,112,112,,,,112,112,62,62,112,,62,112,62,,,,,,,112,,,,',
',112,,,62,,,,,,62,,62,,62,62,,62,62,62,,62,62,62,,,62,62,,,62,,,62,',
',,,,,111,62,111,,,,,62,,111,111,111,111,111,,111,,,,,111,111,111,111',
',,,,,,,,,,,,,,111,,,,111,111,,,111,111,111,111,111,111,,111,111,109',
',109,,,111,,,,109,109,109,109,109,,109,,,,,109,109,109,109,,,,,,,,,',
',,,,,109,,,,109,109,,,109,109,109,109,109,109,,109,109,108,,108,,,109',
',,,108,108,108,108,108,,108,,,,,108,108,108,108,,,,,,,,,,,,,,,108,,',
',108,108,,,108,108,108,108,108,108,,108,108,106,,106,,,108,,,,106,106',
'106,106,106,,106,,,,,106,106,106,106,,,,,,,,,,,,,,,106,,,,106,106,,',
'106,106,106,106,106,106,97,106,106,,,,,,106,97,97,97,97,97,,97,,,,97',
'97,97,97,97,,,,,,,,,,,,,,,97,,,,97,97,,,97,97,97,97,97,97,124,97,97',
',,,,,97,124,124,124,124,124,,124,,,,,124,124,124,124,,,,,,,,,,,,,,,124',
',,,124,124,,,124,124,124,124,124,124,208,124,124,,,208,,,124,208,208',
'208,208,208,,208,,,,,208,208,208,208,,,,,,,,,,,,,,,208,,,,208,208,,',
'208,208,208,208,208,208,286,208,208,,,,,,208,286,286,286,286,286,,286',
',,,,286,286,286,286,,,,,,,,,,,,,,,286,,,,286,286,,,286,286,286,286,286',
'286,290,286,286,,,,,,286,290,290,290,290,290,,290,,,,,290,290,290,290',
',,,,,,,,,,,,,,290,,,,290,290,,,290,290,290,290,290,290,131,290,290,',
',,,,290,131,131,131,131,131,,131,,,,,131,131,131,131,,,,,,,,,,,,,,,131',
',,,131,131,,,131,131,131,131,131,131,298,131,131,,,,,,131,298,298,298',
'298,298,,298,,,,,298,298,298,298,,,,,,,,,,,,,,,298,,,,298,298,,,298',
'298,298,298,298,298,306,298,298,,,,,,298,306,306,306,306,306,,306,,',
',,306,306,306,306,,,,,,,,,,,,,,,306,,,,306,306,,,306,306,306,306,306',
'306,188,306,306,,,,,,306,188,188,188,188,188,,188,,,,,188,188,188,188',
',,,,,,,,,,,,,,188,,,,188,188,,,188,188,188,188,188,188,318,188,188,',
',,,,188,318,318,318,318,318,,318,,151,,,318,318,318,318,,,,,,,151,,151',
',,,,,318,,,,318,318,152,,318,318,318,318,318,318,,318,318,151,,152,',
'152,318,153,,151,151,151,151,,,,151,151,,,153,,153,151,,,,154,152,,',
',,,,,152,152,152,152,154,,154,152,152,153,,,,,152,155,,153,153,153,153',
'153,153,,153,153,,155,155,154,155,153,,,156,155,,154,154,154,154,154',
'154,,154,154,156,156,,156,,154,,155,156,,,,157,,,155,155,155,155,155',
'155,,155,155,157,157,156,157,,155,,158,157,,156,156,156,156,156,156',
',156,156,158,158,,158,,156,,157,158,,,,,,,157,157,157,157,157,157,,157',
'157,,,158,,,157,,,159,,158,158,158,158,158,158,,158,158,159,159,159',
',159,158,,,160,159,159,159,159,,,,,,,160,160,160,,160,,,,159,160,160',
'160,160,,,,159,159,159,159,159,159,,159,159,,,160,,,159,,160,,,160,160',
'160,160,160,160,161,160,160,,,,,,160,161,161,161,161,161,,161,,,,,161',
'161,161,161,,,,,,,,,,,,,,,161,,,,161,161,,,161,161,161,161,161,161,162',
'161,161,,,,,,161,162,162,162,162,162,,162,,,,,162,162,162,162,,,,,,',
',,,,,,,,162,,,,162,162,,,162,162,162,162,162,162,164,162,162,,,,,,162',
'164,164,164,164,164,164,164,,,,,164,164,164,164,,,,,,,,,,,,,,,164,,',
',164,164,,,164,164,164,164,164,164,,164,164,10,,10,,,164,,,,10,10,10',
'10,10,,10,,,,,10,10,10,10,,,,,,,,,,,,,,,10,,,,10,10,,,10,10,10,10,10',
'10,297,10,10,,,,,,10,297,297,297,297,297,,297,,,,,297,297,297,297,,',
',,,,,,,,,,,,297,,,,297,297,,,297,297,297,297,297,297,,297,297,,239,239',
'239,239,297,239,239,239,239,239,,239,239,,,,,,239,239,239,187,187,187',
'187,,187,187,187,187,187,,187,187,,,239,239,,187,187,187,234,234,234',
'234,,234,234,234,234,234,,234,234,,,187,187,,234,234,234,,,,,,,,,,,',
',,,,234,234' ]
        racc_action_check = arr = ::Array.new(4558, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1154,   299,   nil,   nil,    93,   285,   nil,   nil,   148,   nil,
  4364,   277,   323,   369,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   263,    87,   251,   553,   599,
   645,   236,   737,    -1,   -24,    37,    19,   nil,   970,   255,
   nil,   nil,   nil,  1062,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   240,  3184,   218,  1246,  1292,  1338,  1384,  1430,  1476,
  1522,     8,   118,  1660,  1706,  1752,  1798,  1844,  1890,  1936,
  1982,  2028,  2074,  2120,  2166,  2212,  2258,  2304,    47,   127,
  2442,   136,  2537,  2583,   177,    70,   197,  3455,  2813,   nil,
   nil,   nil,    14,     6,   -25,  2997,  3403,   nil,  3348,  3293,
    -2,  3238,  3138,    59,   nil,   nil,   nil,   173,    -7,   nil,
   nil,   nil,   nil,   nil,  3507,    80,   nil,   107,   nil,   nil,
   188,  3715,   nil,   157,   nil,   231,   nil,   nil,   nil,   nil,
   nil,    91,   146,   nil,   nil,   nil,   nil,   925,  3047,    -3,
   230,  3940,  3967,  3984,  4004,  4028,  4047,  4071,  4090,  4134,
  4153,  4205,  4257,   nil,  4309,   231,   875,   507,   255,   270,
   nil,   nil,     3,   nil,     1,    -9,    67,    -8,    76,     9,
    13,   nil,   nil,   nil,   nil,   nil,   nil,  4469,  3871,   211,
   nil,   232,   nil,    50,    22,   239,   nil,   nil,   783,   nil,
   230,   nil,   210,     1,   nil,   829,   921,  1016,  3559,   nil,
   nil,  2767,  3043,   155,   134,   nil,   -17,   130,   103,    65,
   nil,   111,  3092,   nil,   nil,   205,  2951,   nil,   nil,   nil,
   nil,  2905,   nil,  2859,  4490,   nil,   239,  2721,    37,  4448,
  2675,  2629,   117,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    90,   nil,   nil,  2491,   140,
   nil,    83,   130,  2396,   nil,   159,    79,   166,   153,     3,
  1614,   nil,  1568,   189,   nil,   162,   195,   197,   nil,    31,
   nil,   217,  1200,  1108,   nil,   nil,  3611,   nil,   nil,   nil,
  3663,   nil,   233,   nil,   nil,   nil,   nil,  4416,  3767,   241,
   nil,   244,   nil,   nil,   nil,   nil,  3819,    91,   nil,   691,
   252,   231,   nil,   259,   263,   nil,   nil,   nil,  3923,   267,
   461,   277,   nil,   415,   nil,   nil,   nil,   263,   282,   nil,
   284,   nil,   nil,   nil,   nil,   nil,   nil,   185,   nil,   139,
  2350,   nil,   nil,   nil,   291,   nil,   nil,   nil,   nil,   293,
   nil,   294,   nil,   295,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -208,  -209,    -1,    -2,    -3,    -4,    -7,    -9,   -10,   -15,
  -109,  -209,  -209,  -209,   -41,   -42,   -43,   -44,   -45,   -46,
   -47,   -48,   -49,   -50,   -51,   -52,   -53,   -54,   -55,   -56,
   -57,   -58,   -59,   -60,   -61,   -66,   -67,   -71,  -209,  -209,
  -209,  -102,  -209,  -209,  -118,  -209,  -209,  -163,  -209,  -209,
  -173,  -174,  -175,  -209,  -177,  -184,  -185,  -186,  -187,  -188,
  -189,  -209,  -209,    -6,  -209,  -209,  -209,  -209,  -209,  -209,
  -209,  -209,  -209,  -209,  -209,  -209,  -209,  -209,  -209,  -209,
  -209,  -209,  -209,  -209,  -209,  -209,  -209,  -209,  -209,  -209,
  -126,  -121,  -208,  -208,   -26,  -209,   -33,  -209,  -209,   -68,
   -73,   -74,  -208,  -209,  -209,  -209,  -209,   -84,  -209,  -209,
  -209,  -209,  -209,  -208,  -152,  -153,  -119,  -208,  -208,  -144,
  -146,  -147,  -148,  -149,   -39,  -209,  -166,  -209,  -169,  -170,
  -209,  -181,  -176,  -209,   359,    -5,    -8,   -11,   -12,   -13,
   -14,  -209,   -17,   -18,  -161,  -162,   -19,   -20,   -21,   -22,
   -23,   -24,   -25,   -27,   -28,   -29,   -30,   -31,   -32,   -34,
   -35,   -36,   -37,   -72,  -209,  -201,  -207,  -195,  -192,  -190,
  -116,  -127,  -184,  -130,  -188,  -209,  -198,  -196,  -204,  -186,
  -187,  -194,  -199,  -200,  -202,  -203,  -205,  -126,  -125,  -209,
  -124,  -209,   -38,  -209,   -63,  -209,   -78,   -79,  -209,   -82,
  -190,  -157,  -160,  -209,   -70,  -209,  -209,  -209,  -209,  -103,
  -104,  -209,  -209,  -192,  -208,  -154,  -209,  -209,  -209,  -209,
  -150,  -209,  -209,  -164,  -167,  -209,  -209,  -178,  -179,  -180,
  -182,  -209,   -16,  -209,  -126,  -115,  -209,  -193,  -209,  -191,
  -209,  -209,  -190,  -129,  -131,  -195,  -196,  -197,  -198,  -201,
  -204,  -206,  -207,  -122,  -123,   -62,   -65,   -75,  -209,  -209,
   -81,  -209,  -191,  -209,   -69,  -209,   -87,  -209,   -93,  -209,
  -209,   -97,  -209,  -190,  -106,  -192,  -209,  -209,  -138,  -209,
  -155,  -190,  -209,  -209,  -145,  -151,   -40,  -165,  -168,  -171,
  -172,  -183,  -190,  -111,  -117,  -112,  -128,  -132,  -133,  -209,
   -64,  -209,   -77,   -80,   -83,  -158,  -159,   -87,   -86,  -209,
  -209,   -93,   -92,  -209,  -209,  -101,   -96,   -98,  -108,  -209,
  -191,  -209,  -113,  -209,  -139,  -140,  -141,  -209,  -209,  -135,
  -209,  -143,  -114,  -120,   -76,   -85,   -88,  -209,   -91,  -209,
  -209,  -105,  -107,  -110,  -209,  -137,  -156,  -134,  -142,  -209,
   -90,  -209,   -95,  -209,  -100,  -136,   -89,   -94,   -99 ]

racc_goto_table = [
     2,    94,    96,    97,   117,    99,     3,   132,   210,   169,
   129,   130,   312,   238,   200,   123,   271,   168,   214,   284,
   308,   285,   217,   143,   146,   209,    63,   273,   106,   108,
   109,   314,   111,   145,   145,   125,   236,   270,   124,   213,
   144,   144,   294,   131,   261,   137,   138,   139,   140,   189,
   191,   234,   336,   296,   257,   338,   141,   195,   277,   124,
   142,   335,   324,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   317,
   164,   276,   188,   188,   135,   193,   299,   218,   124,   198,
   305,   127,   203,   136,     1,   124,   230,   231,   229,   nil,
   208,   nil,   164,   nil,   nil,   nil,   242,   nil,   196,   274,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   319,   nil,   215,
   nil,   nil,   nil,   215,   220,   327,   281,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   117,   332,   nil,   nil,   275,
   nil,   nil,   nil,   321,   nil,   nil,   nil,   123,   nil,   nil,
   nil,   nil,   nil,   292,   nil,   106,   108,   109,   nil,   nil,
   nil,   nil,   nil,   256,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   291,   289,   130,   123,   nil,
   123,   nil,   nil,   nil,   nil,   nil,   nil,   124,   259,   nil,
   nil,   208,   164,   nil,   nil,   265,   267,   nil,   nil,   nil,
   nil,   nil,   286,   nil,   nil,   nil,   290,   nil,   342,   nil,
   278,   131,   nil,   286,   300,   nil,   nil,   164,   nil,   nil,
   297,   298,   nil,   nil,   nil,   nil,   nil,   nil,   325,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   306,   nil,   nil,   nil,   nil,   301,   nil,
   124,   nil,   318,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   328,   330,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   106,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   208,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   344,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   349,   nil,   351,
   353 ]

racc_goto_check = [
     2,     9,     9,     9,    66,    36,     3,    79,    53,    58,
    75,    30,    48,    45,    44,    29,    50,    56,    67,    72,
    47,    72,    67,    12,    12,    52,     5,    54,     9,     9,
     9,    51,     9,    30,    30,    11,    57,    49,     9,    56,
    29,    29,    59,     9,    45,     8,     8,     8,     8,    62,
    62,    60,    46,    63,    43,    48,    11,    42,    68,     9,
     9,    47,    69,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,    50,
     9,    57,     9,     9,     5,    11,    45,    71,     9,    41,
    73,    74,    11,     6,     1,     9,    80,    81,    83,   nil,
     9,   nil,     9,   nil,   nil,   nil,    58,   nil,     3,    53,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,   nil,     3,
   nil,   nil,   nil,     3,     3,    45,    44,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    66,    45,   nil,   nil,    56,
   nil,   nil,   nil,    57,   nil,   nil,   nil,    29,   nil,   nil,
   nil,   nil,   nil,    58,   nil,     9,     9,     9,   nil,   nil,
   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    79,    75,    30,    29,   nil,
    29,   nil,   nil,   nil,   nil,   nil,   nil,     9,     2,   nil,
   nil,     9,     9,   nil,   nil,     2,     2,   nil,   nil,   nil,
   nil,   nil,     9,   nil,   nil,   nil,     9,   nil,    53,   nil,
     3,     9,   nil,     9,    36,   nil,   nil,     9,   nil,   nil,
     9,     9,   nil,   nil,   nil,   nil,   nil,   nil,    66,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,     2,   nil,
     9,   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,     2,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     9,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,     2,
     2 ]

racc_goto_pointer = [
   nil,    94,     0,     6,   nil,    22,    29,   nil,   -20,   -10,
   nil,   -13,   -48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -31,
   -38,   nil,   nil,   nil,   nil,   nil,   -31,   nil,   nil,   nil,
   nil,   -14,   -45,  -141,   -90,  -156,  -257,  -246,  -256,  -170,
  -191,  -238,   -85,  -102,  -184,   nil,   -73,  -132,   -81,  -195,
  -113,   nil,   -43,  -186,   nil,   nil,   -41,   -95,  -156,  -217,
   nil,   -31,  -200,  -172,    42,   -39,   nil,   nil,   nil,   -46,
   -37,   -36,   nil,   -35 ]

racc_goto_default = [
   nil,   nil,   nil,   190,     4,     5,     6,     7,     8,    10,
     9,   269,   nil,    14,    35,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    41,   nil,    36,    37,   100,
   101,   102,   nil,   nil,   nil,   nil,   107,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    42,   nil,   nil,   nil,   170,
   nil,    91,   nil,   171,   175,   173,   113,   nil,   nil,   nil,
   118,   nil,   119,   201,   nil,   nil,    50,    51,    53,   nil,
   nil,   nil,   133,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 77, :_reduce_1,
  1, 77, :_reduce_none,
  1, 78, :_reduce_3,
  1, 80, :_reduce_4,
  3, 80, :_reduce_5,
  2, 80, :_reduce_6,
  1, 81, :_reduce_7,
  3, 81, :_reduce_8,
  1, 82, :_reduce_none,
  1, 83, :_reduce_10,
  3, 83, :_reduce_11,
  3, 83, :_reduce_12,
  3, 83, :_reduce_13,
  3, 83, :_reduce_14,
  1, 85, :_reduce_none,
  4, 85, :_reduce_16,
  3, 85, :_reduce_17,
  3, 85, :_reduce_18,
  3, 85, :_reduce_19,
  3, 85, :_reduce_20,
  3, 85, :_reduce_21,
  3, 85, :_reduce_22,
  3, 85, :_reduce_23,
  3, 85, :_reduce_24,
  3, 85, :_reduce_25,
  2, 85, :_reduce_26,
  3, 85, :_reduce_27,
  3, 85, :_reduce_28,
  3, 85, :_reduce_29,
  3, 85, :_reduce_30,
  3, 85, :_reduce_31,
  3, 85, :_reduce_32,
  2, 85, :_reduce_33,
  3, 85, :_reduce_34,
  3, 85, :_reduce_35,
  3, 85, :_reduce_36,
  3, 85, :_reduce_37,
  3, 85, :_reduce_38,
  1, 87, :_reduce_39,
  3, 87, :_reduce_40,
  1, 86, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 106, :_reduce_60,
  1, 106, :_reduce_61,
  4, 111, :_reduce_62,
  3, 111, :_reduce_63,
  5, 111, :_reduce_64,
  4, 111, :_reduce_65,
  1, 111, :_reduce_66,
  1, 93, :_reduce_67,
  2, 93, :_reduce_68,
  4, 113, :_reduce_69,
  3, 113, :_reduce_70,
  1, 113, :_reduce_71,
  3, 114, :_reduce_72,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  3, 115, :_reduce_75,
  3, 119, :_reduce_76,
  2, 119, :_reduce_77,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  4, 116, :_reduce_80,
  3, 116, :_reduce_81,
  2, 117, :_reduce_82,
  4, 117, :_reduce_83,
  2, 96, :_reduce_84,
  5, 122, :_reduce_85,
  4, 122, :_reduce_86,
  0, 123, :_reduce_none,
  2, 123, :_reduce_88,
  4, 123, :_reduce_89,
  3, 123, :_reduce_90,
  6, 97, :_reduce_91,
  5, 97, :_reduce_92,
  0, 124, :_reduce_none,
  4, 124, :_reduce_94,
  3, 124, :_reduce_95,
  5, 95, :_reduce_96,
  1, 125, :_reduce_97,
  2, 125, :_reduce_98,
  5, 126, :_reduce_99,
  4, 126, :_reduce_100,
  1, 127, :_reduce_101,
  1, 89, :_reduce_none,
  3, 89, :_reduce_103,
  1, 128, :_reduce_none,
  4, 128, :_reduce_105,
  1, 130, :_reduce_106,
  3, 130, :_reduce_107,
  3, 129, :_reduce_108,
  1, 84, :_reduce_109,
  6, 84, :_reduce_110,
  5, 84, :_reduce_111,
  5, 84, :_reduce_112,
  5, 84, :_reduce_113,
  4, 135, :_reduce_114,
  1, 136, :_reduce_115,
  1, 132, :_reduce_116,
  3, 132, :_reduce_117,
  1, 131, :_reduce_118,
  2, 131, :_reduce_119,
  6, 94, :_reduce_120,
  2, 94, :_reduce_121,
  3, 137, :_reduce_122,
  3, 137, :_reduce_123,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  0, 134, :_reduce_126,
  1, 134, :_reduce_127,
  3, 134, :_reduce_128,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  3, 139, :_reduce_132,
  3, 139, :_reduce_133,
  6, 98, :_reduce_134,
  5, 98, :_reduce_135,
  7, 99, :_reduce_136,
  6, 99, :_reduce_137,
  1, 144, :_reduce_none,
  2, 144, :_reduce_139,
  1, 145, :_reduce_none,
  1, 145, :_reduce_none,
  6, 100, :_reduce_142,
  5, 100, :_reduce_143,
  1, 146, :_reduce_144,
  3, 146, :_reduce_145,
  1, 148, :_reduce_146,
  1, 148, :_reduce_147,
  1, 148, :_reduce_148,
  1, 148, :_reduce_none,
  1, 147, :_reduce_none,
  2, 147, :_reduce_151,
  1, 142, :_reduce_152,
  1, 142, :_reduce_153,
  1, 143, :_reduce_154,
  2, 143, :_reduce_155,
  4, 143, :_reduce_156,
  1, 120, :_reduce_157,
  3, 120, :_reduce_158,
  3, 149, :_reduce_159,
  1, 149, :_reduce_160,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  1, 92, :_reduce_163,
  3, 101, :_reduce_164,
  4, 101, :_reduce_165,
  2, 101, :_reduce_166,
  3, 104, :_reduce_167,
  4, 104, :_reduce_168,
  2, 104, :_reduce_169,
  1, 150, :_reduce_170,
  3, 150, :_reduce_171,
  3, 151, :_reduce_172,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 152, :_reduce_175,
  2, 153, :_reduce_176,
  1, 154, :_reduce_177,
  1, 156, :_reduce_178,
  1, 157, :_reduce_179,
  2, 155, :_reduce_180,
  1, 158, :_reduce_181,
  1, 159, :_reduce_182,
  2, 159, :_reduce_183,
  1, 109, :_reduce_184,
  1, 107, :_reduce_185,
  1, 108, :_reduce_186,
  1, 103, :_reduce_187,
  1, 102, :_reduce_188,
  1, 105, :_reduce_189,
  0, 121, :_reduce_none,
  1, 121, :_reduce_191,
  0, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 79, :_reduce_208 ]

racc_reduce_n = 209

racc_shift_n = 359

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :DEFINE => 32,
  :ELSIF => 33,
  :VARIABLE => 34,
  :CLASS => 35,
  :INHERITS => 36,
  :NODE => 37,
  :BOOLEAN => 38,
  :NAME => 39,
  :SEMIC => 40,
  :CASE => 41,
  :DEFAULT => 42,
  :AT => 43,
  :LCOLLECT => 44,
  :RCOLLECT => 45,
  :CLASSREF => 46,
  :NOT => 47,
  :OR => 48,
  :AND => 49,
  :UNDEF => 50,
  :PARROW => 51,
  :PLUS => 52,
  :MINUS => 53,
  :TIMES => 54,
  :DIV => 55,
  :LSHIFT => 56,
  :RSHIFT => 57,
  :UMINUS => 58,
  :MATCH => 59,
  :NOMATCH => 60,
  :REGEX => 61,
  :IN_EDGE => 62,
  :OUT_EDGE => 63,
  :IN_EDGE_SUB => 64,
  :OUT_EDGE_SUB => 65,
  :IN => 66,
  :UNLESS => 67,
  :PIPE => 68,
  :LAMBDA => 69,
  :SELBRACE => 70,
  :LOW => 71,
  :HIGH => 72,
  :CALL => 73,
  :TITLE_COLON => 74,
  :CASE_COLON => 75 }

racc_nt_base = 76

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "LOW",
  "HIGH",
  "CALL",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "match_rvalue",
  "selector_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "type",
  "undef",
  "name",
  "quotedtext",
  "call_function_expression",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_j8",
  "lambda_ruby",
  "lambda_parameter_list",
  "optional_farrow",
  "lambda_rest",
  "parameters",
  "endcomma",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entries",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 57)
  def _reduce_1(val, _values, result)
     result = Factory.block_or_expression(*val[0]) 
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'egrammar.ra', 63)
  def _reduce_3(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_4(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_5(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 71)
  def _reduce_6(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 75)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 76)
  def _reduce_8(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_11(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 84)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 85)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 86)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_16(val, _values, result)
     result = val[0][*val[2]]; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_17(val, _values, result)
     result = val[0].in val[2]  ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_18(val, _values, result)
     result = val[0] =~  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_19(val, _values, result)
     result = val[0].mne val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_20(val, _values, result)
     result = val[0] +   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_21(val, _values, result)
     result = val[0] -   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_22(val, _values, result)
     result = val[0] /   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_23(val, _values, result)
     result = val[0] *   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_24(val, _values, result)
     result = val[0] <<  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_25(val, _values, result)
     result = val[0] >>  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_26(val, _values, result)
     result = val[1].minus()    ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_27(val, _values, result)
     result = val[0].ne  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_28(val, _values, result)
     result = val[0] ==  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_29(val, _values, result)
     result = val[0] >   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_30(val, _values, result)
     result = val[0] >=  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_31(val, _values, result)
     result = val[0] <   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_32(val, _values, result)
     result = val[0] <=  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_33(val, _values, result)
     result = val[1].not        ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_34(val, _values, result)
     result = val[0].and val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_35(val, _values, result)
     result = val[0].or  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_36(val, _values, result)
     result = val[0].set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_37(val, _values, result)
     result = val[0].plus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_38(val, _values, result)
     result = val[1].paren()    ;                    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 123)
  def _reduce_39(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 124)
  def _reduce_40(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

module_eval(<<'.,.,', 'egrammar.ra', 154)
  def _reduce_60(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 155)
  def _reduce_61(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 163)
  def _reduce_62(val, _values, result)
     result = Factory.CALL_NAMED(val[0], true, val[2]) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 164)
  def _reduce_63(val, _values, result)
     result = Factory.CALL_NAMED(val[0], true, [])     ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 166)
  def _reduce_64(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[3]
      result.lambda = val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 171)
  def _reduce_65(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 175)
  def _reduce_66(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 180)
  def _reduce_67(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_68(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 184)
  def _reduce_69(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 185)
  def _reduce_70(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 186)
  def _reduce_71(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 191)
  def _reduce_72(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

# reduce 73 omitted

# reduce 74 omitted

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_75(val, _values, result)
          result = Factory.LAMBDA(val[0], val[2])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_76(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_77(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 78 omitted

# reduce 79 omitted

module_eval(<<'.,.,', 'egrammar.ra', 222)
  def _reduce_80(val, _values, result)
          result = Factory.LAMBDA(val[1], val[2])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 226)
  def _reduce_81(val, _values, result)
          result = Factory.LAMBDA(val[1], nil)
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 232)
  def _reduce_82(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 233)
  def _reduce_83(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 243)
  def _reduce_84(val, _values, result)
          result = val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 249)
  def _reduce_85(val, _values, result)
            @lexer.commentpop
        result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 254)
  def _reduce_86(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 87 omitted

module_eval(<<'.,.,', 'egrammar.ra', 261)
  def _reduce_88(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 263)
  def _reduce_89(val, _values, result)
            @lexer.commentpop
        result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 268)
  def _reduce_90(val, _values, result)
            @lexer.commentpop
  	    result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 278)
  def _reduce_91(val, _values, result)
          @lexer.commentpop
      result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 283)
  def _reduce_92(val, _values, result)
          @lexer.commentpop
      result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 93 omitted

module_eval(<<'.,.,', 'egrammar.ra', 294)
  def _reduce_94(val, _values, result)
            @lexer.commentpop
        result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 299)
  def _reduce_95(val, _values, result)
            @lexer.commentpop
    	  result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 308)
  def _reduce_96(val, _values, result)
          @lexer.commentpop
      result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 315)
  def _reduce_97(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 316)
  def _reduce_98(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 321)
  def _reduce_99(val, _values, result)
            @lexer.commentpop
        result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 326)
  def _reduce_100(val, _values, result)
            @lexer.commentpop
        result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 331)
  def _reduce_101(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 102 omitted

module_eval(<<'.,.,', 'egrammar.ra', 340)
  def _reduce_103(val, _values, result)
     result = val[0].select(*val[2]) ; loc result, val[0] 
    result
  end
.,.,

# reduce 104 omitted

module_eval(<<'.,.,', 'egrammar.ra', 351)
  def _reduce_105(val, _values, result)
            @lexer.commentpop
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 357)
  def _reduce_106(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 358)
  def _reduce_107(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 363)
  def _reduce_108(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 379)
  def _reduce_109(val, _values, result)
      	  result = val[0]
  	
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 382)
  def _reduce_110(val, _values, result)
      	  result = case Factory.resource_shape(val[1])
  	  when :resource, :class
  	    tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
  	    tmp.form = val[0]
  	    tmp
	  when :defaults
        error "A resource default can not be virtual or exported"
  	  when :override
        error "A resource override can not be virtual or exported"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 397)
  def _reduce_111(val, _values, result)
      	  result = case Factory.resource_shape(val[0])
  	  when :resource, :class
  	    Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
	  when :defaults
        error "A resource default can not specify a resource name"
  	  when :override
        error "A resource override does not allow override of name of resource"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 410)
  def _reduce_112(val, _values, result)
      	  result = case Factory.resource_shape(val[0])
  	  when :resource, :class
	    # This catches deprecated syntax.
	    error "All resource specifications require names"
	  when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
  	  when :override
  	    # This was only done for override in original - TODO shuld it be here at all
        @lexer.commentpop
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]  	  
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 426)
  def _reduce_113(val, _values, result)
      	    result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
  	    loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 431)
  def _reduce_114(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_115(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 436)
  def _reduce_116(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 437)
  def _reduce_117(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 442)
  def _reduce_118(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 443)
  def _reduce_119(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 455)
  def _reduce_120(val, _values, result)
          @lexer.commentpop
      result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 460)
  def _reduce_121(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 465)
  def _reduce_122(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 466)
  def _reduce_123(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'egrammar.ra', 481)
  def _reduce_126(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 482)
  def _reduce_127(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 483)
  def _reduce_128(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

module_eval(<<'.,.,', 'egrammar.ra', 499)
  def _reduce_132(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 503)
  def _reduce_133(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 513)
  def _reduce_134(val, _values, result)
          @lexer.commentpop
      result = Factory.DEFINITION(classname(val[1][:value]), val[2], val[4])
      loc result, val[0], val[5]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 519)
  def _reduce_135(val, _values, result)
          @lexer.commentpop
      result = Factory.DEFINITION(classname(val[1][:value]), val[2], nil)
      loc result, val[0], val[4]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 535)
  def _reduce_136(val, _values, result)
          @lexer.commentpop
      @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5])
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 541)
  def _reduce_137(val, _values, result)
          @lexer.commentpop
      @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), nil)
      loc result, val[0], val[5]
      
    result
  end
.,.,

# reduce 138 omitted

module_eval(<<'.,.,', 'egrammar.ra', 550)
  def _reduce_139(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

module_eval(<<'.,.,', 'egrammar.ra', 567)
  def _reduce_142(val, _values, result)
          @lexer.commentpop
      result = Factory.NODE(val[1], val[2], val[4])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 572)
  def _reduce_143(val, _values, result)
          @lexer.commentpop
      result = Factory.NODE(val[1], val[2], nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_144(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 584)
  def _reduce_145(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 588)
  def _reduce_146(val, _values, result)
     result = Factory.fqn(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_147(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 590)
  def _reduce_148(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 149 omitted

# reduce 150 omitted

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_151(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 602)
  def _reduce_152(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 603)
  def _reduce_153(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 608)
  def _reduce_154(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 609)
  def _reduce_155(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 610)
  def _reduce_156(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 614)
  def _reduce_157(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_158(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 619)
  def _reduce_159(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_160(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 161 omitted

# reduce 162 omitted

module_eval(<<'.,.,', 'egrammar.ra', 634)
  def _reduce_163(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_164(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 641)
  def _reduce_165(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_166(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_167(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_168(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_169(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_170(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_171(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_172(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 173 omitted

# reduce 174 omitted

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_175(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 661)
  def _reduce_176(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_177(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_178(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_179(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_180(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_181(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_182(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_183(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_184(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 673)
  def _reduce_185(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_186(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_187(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_188(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_189(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 190 omitted

module_eval(<<'.,.,', 'egrammar.ra', 696)
  def _reduce_191(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

module_eval(<<'.,.,', 'egrammar.ra', 719)
  def _reduce_208(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

        end   # class Parser
        end   # module Parser
      end   # module Impl
    end   # module Pops
  end   # module Puppet
