#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/pops/impl/parser/lexer'
require 'puppet/pops/impl/model/factory'
#require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Impl
      module Parser
        class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 743)

# Require supporting logic mixed in to the generated Puppet::Pops::Impl::Parser::Parser class
require 'puppet/pops/impl/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'52,54,-119,68,48,250,49,-197,68,267,208,222,-187,222,229,111,88,222',
'92,250,-121,88,13,92,251,299,244,212,38,116,280,45,211,47,94,210,46',
'59,55,247,40,58,91,-119,116,56,12,91,-197,57,52,54,11,-187,48,230,49',
'70,71,191,60,-121,52,54,69,182,39,115,221,200,117,110,13,222,228,109',
'116,107,38,287,116,45,115,47,94,117,46,59,55,60,40,58,289,68,290,56',
'12,52,54,57,55,48,11,49,60,110,88,110,92,109,60,109,294,291,115,293',
'39,117,115,13,205,117,60,52,54,38,213,295,45,214,47,43,91,46,59,55,60',
'40,58,44,60,297,56,12,52,54,57,205,48,11,49,338,110,157,110,68,109,60',
'109,310,270,55,304,39,52,54,13,226,88,110,92,123,38,109,306,45,294,47',
'43,293,46,59,55,60,40,58,44,217,216,56,12,52,54,57,91,48,11,49,336,307',
'269,289,55,266,60,63,129,52,54,226,39,228,215,13,275,64,66,65,67,38',
'243,317,45,318,47,43,250,46,59,55,282,40,58,44,242,226,56,12,52,54,57',
'68,48,11,49,55,323,297,325,326,105,60,327,100,88,329,92,39,99,332,13',
'333,334,97,228,63,38,61,341,45,342,47,94,343,46,59,55,344,40,58,91,',
',56,12,52,54,57,,48,11,49,,,,70,71,,60,,,,69,,39,,,13,,,,,,38,,,45,',
'47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39',
',,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49',
',,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12',
'52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59',
'55,,40,58,,,,56,12,52,54,57,,48,11,49,331,,,,,,60,,,,,,39,,,13,,,,,',
'38,,,45,,47,43,,46,59,55,,40,58,44,,,56,12,52,54,57,,48,11,49,,,,,,',
'60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54',
'57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40',
'58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47',
'94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13',
',,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,',
',,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52',
'54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55',
',40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45',
',47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39',
',,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49',
'246,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,43,,46,59,55,,40,58,44,,,56',
'12,52,54,57,,48,11,49,253,68,,,,,60,,,,,,39,,88,13,92,,,,,38,,,45,,47',
'43,,46,59,55,,40,58,44,,,56,12,91,,57,52,54,11,,48,121,49,75,74,,60',
',70,71,,,39,,,69,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12',
'52,54,57,,48,11,49,255,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,43,,46',
'59,55,,40,58,44,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,',
',,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,',
'60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54',
'57,,48,11,49,315,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,43,,46,59,55',
',40,58,44,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,',
',45,,47,43,,46,59,55,,40,58,44,,,56,12,52,54,57,,48,11,49,,,,,,,60,',
',,,,39,,,13,,,,,,38,,,45,,47,43,,46,59,55,,40,58,44,,,56,12,52,54,57',
',48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,43,,46,59,55,,40,58',
'44,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47',
'43,,46,59,55,,40,58,44,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,',
',13,,,,,,38,,,45,,47,43,,46,59,55,,40,58,44,,,56,12,52,54,57,,48,11',
'49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56',
'12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46',
'59,55,,40,58,,,,56,12,52,54,57,,48,11,49,313,,,,,,60,,,,,,39,,,13,,',
',,,38,,,45,,47,43,,46,59,55,,40,58,44,,,56,12,52,54,57,,48,11,49,,,',
',,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52',
'54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55',
',40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45',
',47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39',
',,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49',
',,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12',
'52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59',
'55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38',
',,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,',
',,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48',
'11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,',
'56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,',
'46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,',
',,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,',
',60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54',
'57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40',
'58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47',
'94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13',
',,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,340',
',,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,43,,46,59,55,,40,58,44,,,56,12',
'52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59',
'55,,40,58,,,,56,12,52,54,57,,48,11,49,300,,,,,,60,,,,,,39,,,13,,,,,',
'38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60',
',,,,,39,,,13,,,,,,159,176,179,170,177,47,171,180,172,168,166,,161,174',
',,,56,12,181,175,173,52,54,11,,48,,49,,,,60,,,,,178,160,,,,,,13,,,,',
',38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60',
',,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57',
',48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58',
',,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94',
',46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,',
',,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,',
',,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54',
'57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40',
'58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,189,,,,,38,,,45',
',47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39',
',,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49',
',,,,,,60,,,,,,39,,,13,193,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56',
'12,52,54,57,,48,11,49,,68,,,,,60,,,,,,39,,88,13,92,,,,,38,,,45,,47,94',
',46,59,55,,40,58,,,,56,12,91,,57,52,54,11,,48,274,49,75,74,,60,,70,71',
',,39,,,69,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57',
',48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58',
',,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,43',
',46,59,55,,40,58,44,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13',
',,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,,,57,,,11,,,,,,,68,60',
'201,,,,,39,,86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,,,91,,,',
'85,84,,,72,73,75,74,76,77,,70,71,68,,196,,,69,,,,86,87,83,78,88,,92',
',,,,79,81,80,82,,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77,,70,71',
'68,,195,,,69,,,,86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,,,91',
',,,85,84,,,72,73,75,74,76,77,,70,71,68,,194,,,69,,,,86,87,83,78,88,',
'92,,,,,79,81,80,82,,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77,68',
'70,71,,,,,,69,86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,,,91,',
',,85,84,,,72,73,75,74,76,77,68,70,71,,,,,,69,86,87,83,78,88,,92,,,,187',
'79,81,80,82,,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77,68,70,71',
',,259,,,69,86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,,,91,,,,85',
'84,,,72,73,75,74,76,77,68,70,71,,,,,,69,86,87,83,78,88,,92,,,,,79,81',
'80,82,,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77,68,70,71,,,,,,69',
'86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,,,91,,,,85,84,,,72,73',
'75,74,76,77,68,70,71,,,,,,69,86,87,83,78,88,,92,,,,,79,81,80,82,,,,',
',,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77,68,70,71,,,,,,69,86,87,83',
'78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76',
'77,68,70,71,,,,,,69,86,87,83,78,88,,92,,68,,,79,81,80,82,,,,,,,88,,92',
',,,,,,91,,,,85,84,68,,72,73,75,74,76,77,,70,71,91,,88,,92,69,68,,72',
'73,75,74,,,,70,71,,,88,,92,69,,,,,68,91,,,,,,,,72,73,75,74,88,,92,70',
'71,91,,,,,69,,,72,73,75,74,76,77,,70,71,,,,,91,69,,,,68,,,72,73,75,74',
'76,77,,70,71,78,88,,92,,69,68,,79,,,,,,,,,,78,88,,92,,,,,79,91,,,,,',
',,72,73,75,74,76,77,,70,71,,91,,,,69,68,,,72,73,75,74,76,77,,70,71,78',
'88,,92,,69,68,,79,,,,,,,,,,78,88,,92,,,,,79,91,,,,,,,,72,73,75,74,76',
'77,,70,71,,91,,,,69,,68,,72,73,75,74,76,77,,70,71,83,78,88,,92,69,,',
',79,81,80,82,,,,,,,,,,,,,,,,91,,,,,,68,,72,73,75,74,76,77,,70,71,83',
'78,88,,92,69,,,,79,81,80,82,,,,,,,,,,,,,,,,91,,,,,84,,,72,73,75,74,76',
'77,68,70,71,,,,,,69,86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,',
',,91,,,,85,84,,,72,73,75,74,76,77,68,70,71,,,,,,69,86,87,83,78,88,,92',
',,,,79,81,80,82,,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77,68,70',
'71,,,,,,69,86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,,,91,,,,85',
'84,,,72,73,75,74,76,77,68,70,71,,,,,,69,86,87,83,78,88,,92,,,,,79,81',
'80,82,,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77,68,70,71,,,,,,69',
'86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,,,91,,,,85,84,,,72,73',
'75,74,76,77,,70,71,68,,89,,,69,,,,86,87,83,78,88,,92,,,,,79,81,80,82',
',,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77,68,70,71,,,,,,69,86,87',
'83,78,88,224,92,,,,,79,81,80,82,,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75',
'74,76,77,,70,71,238,176,179,237,177,69,235,180,239,233,232,,234,236',
',,,,,181,175,240,238,176,179,237,177,,235,180,239,233,232,,234,236,',
'178,241,,,181,175,240,238,176,179,237,177,,235,180,239,233,232,,234',
'236,,178,241,,,181,175,240,,,,,,,,,,,,,,,,178,241' ]
        racc_action_table = arr = ::Array.new(4622, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'105,105,166,143,105,191,105,173,93,205,113,192,174,188,169,44,143,256',
'143,205,168,93,105,93,192,256,188,120,105,46,225,105,120,105,105,113',
'105,105,105,191,105,105,143,166,210,105,105,93,173,105,86,86,105,174',
'86,169,86,143,143,99,105,168,71,71,143,90,105,46,135,105,46,171,86,135',
'231,171,208,43,86,245,172,86,210,86,86,210,86,86,86,46,86,86,248,95',
'250,86,86,4,4,86,71,4,86,4,210,43,95,45,95,43,86,45,253,252,208,253',
'86,208,172,4,108,172,71,70,70,4,122,254,4,122,4,4,95,4,4,4,208,4,4,4',
'172,255,4,4,325,325,4,112,325,4,325,325,266,88,94,136,266,4,94,266,207',
'70,260,4,49,49,325,262,136,170,136,49,325,170,263,325,291,325,325,291',
'325,325,325,70,325,325,325,128,128,325,325,323,323,325,136,323,325,323',
'323,264,206,268,49,203,325,62,61,214,214,202,325,279,125,323,214,8,8',
'8,8,323,186,286,323,288,323,323,289,323,323,323,227,323,323,323,184',
'162,323,323,161,161,323,144,161,323,161,214,294,295,297,298,41,323,303',
'37,144,305,144,323,36,311,161,312,314,35,163,5,161,1,330,161,335,161',
'161,337,161,161,161,339,161,161,144,,,161,161,11,11,161,,11,161,11,',
',,144,144,,161,,,,144,,161,,,11,,,,,,11,,,11,,11,11,,11,11,11,,11,11',
',,,11,11,12,12,11,,12,11,12,,,,,,,11,,,,,,11,,,12,,,,,,12,,,12,,12,12',
',12,12,12,,12,12,,,,12,12,13,13,12,,13,12,13,,,,,,,12,,,,,,12,,,13,',
',,,,13,,,13,,13,13,,13,13,13,,13,13,,,,13,13,160,160,13,,160,13,160',
',,,,,,13,,,,,,13,,,160,,,,,,160,,,160,,160,160,,160,160,160,,160,160',
',,,160,160,307,307,160,,307,160,307,307,,,,,,160,,,,,,160,,,307,,,,',
',307,,,307,,307,307,,307,307,307,,307,307,307,,,307,307,304,304,307',
',304,307,304,,,,,,,307,,,,,,307,,,304,,,,,,304,,,304,,304,304,,304,304',
'304,,304,304,,,,304,304,38,38,304,,38,304,38,,,,,,,304,,,,,,304,,,38',
',,,,,38,,,38,,38,38,,38,38,38,,38,38,,,,38,38,39,39,38,,39,38,39,,,',
',,,38,,,,,,38,,,39,,,,,,39,,,39,,39,39,,39,39,39,,39,39,,,,39,39,40',
'40,39,,40,39,40,,,,,,,39,,,,,,39,,,40,,,,,,40,,,40,,40,40,,40,40,40',
',40,40,,,,40,40,159,159,40,,159,40,159,,,,,,,40,,,,,,40,,,159,,,,,,159',
',,159,,159,159,,159,159,159,,159,159,,,,159,159,42,42,159,,42,159,42',
',,,,,,159,,,,,,159,,,42,,,,,,42,,,42,,42,42,,42,42,42,,42,42,,,,42,42',
'293,293,42,,293,42,293,,,,,,,42,,,,,,42,,,293,,,,,,293,,,293,,293,293',
',293,293,293,,293,293,,,,293,293,290,290,293,,290,293,290,,,,,,,293',
',,,,,293,,,290,,,,,,290,,,290,,290,290,,290,290,290,,290,290,,,,290',
'290,190,190,290,,190,290,190,190,,,,,,290,,,,,,290,,,190,,,,,,190,,',
'190,,190,190,,190,190,190,,190,190,190,,,190,190,194,194,190,,194,190',
'194,194,141,,,,,190,,,,,,190,,141,194,141,,,,,194,,,194,,194,194,,194',
'194,194,,194,194,194,,,194,194,141,,194,48,48,194,,48,48,48,141,141',
',194,,141,141,,,194,,,141,,,48,,,,,,48,,,48,,48,48,,48,48,48,,48,48',
',,,48,48,195,195,48,,195,48,195,195,,,,,,48,,,,,,48,,,195,,,,,,195,',
',195,,195,195,,195,195,195,,195,195,195,,,195,195,53,53,195,,53,195',
'53,,,,,,,195,,,,,,195,,,53,,,,,,53,,,53,,53,53,,53,53,53,,53,53,,,,53',
'53,107,107,53,,107,53,107,,,,,,,53,,,,,,53,,,107,,,,,,107,,,107,,107',
'107,,107,107,107,,107,107,,,,107,107,270,270,107,,270,107,270,270,,',
',,,107,,,,,,107,,,270,,,,,,270,,,270,,270,270,,270,270,270,,270,270',
'270,,,270,270,63,63,270,,63,270,63,,,,,,,270,,,,,,270,,,63,,,,,,63,',
',63,,63,63,,63,63,63,,63,63,63,,,63,63,64,64,63,,64,63,64,,,,,,,63,',
',,,,63,,,64,,,,,,64,,,64,,64,64,,64,64,64,,64,64,64,,,64,64,65,65,64',
',65,64,65,,,,,,,64,,,,,,64,,,65,,,,,,65,,,65,,65,65,,65,65,65,,65,65',
'65,,,65,65,66,66,65,,66,65,66,,,,,,,65,,,,,,65,,,66,,,,,,66,,,66,,66',
'66,,66,66,66,,66,66,66,,,66,66,67,67,66,,67,66,67,,,,,,,66,,,,,,66,',
',67,,,,,,67,,,67,,67,67,,67,67,67,,67,67,67,,,67,67,68,68,67,,68,67',
'68,,,,,,,67,,,,,,67,,,68,,,,,,68,,,68,,68,68,,68,68,68,,68,68,,,,68',
'68,69,69,68,,69,68,69,,,,,,,68,,,,,,68,,,69,,,,,,69,,,69,,69,69,,69',
'69,69,,69,69,,,,69,69,269,269,69,,269,69,269,269,,,,,,69,,,,,,69,,,269',
',,,,,269,,,269,,269,269,,269,269,269,,269,269,269,,,269,269,259,259',
'269,,259,269,259,,,,,,,269,,,,,,269,,,259,,,,,,259,,,259,,259,259,,259',
'259,259,,259,259,,,,259,259,72,72,259,,72,259,72,,,,,,,259,,,,,,259',
',,72,,,,,,72,,,72,,72,72,,72,72,72,,72,72,,,,72,72,73,73,72,,73,72,73',
',,,,,,72,,,,,,72,,,73,,,,,,73,,,73,,73,73,,73,73,73,,73,73,,,,73,73',
'74,74,73,,74,73,74,,,,,,,73,,,,,,73,,,74,,,,,,74,,,74,,74,74,,74,74',
'74,,74,74,,,,74,74,75,75,74,,75,74,75,,,,,,,74,,,,,,74,,,75,,,,,,75',
',,75,,75,75,,75,75,75,,75,75,,,,75,75,76,76,75,,76,75,76,,,,,,,75,,',
',,,75,,,76,,,,,,76,,,76,,76,76,,76,76,76,,76,76,,,,76,76,77,77,76,,77',
'76,77,,,,,,,76,,,,,,76,,,77,,,,,,77,,,77,,77,77,,77,77,77,,77,77,,,',
'77,77,78,78,77,,78,77,78,,,,,,,77,,,,,,77,,,78,,,,,,78,,,78,,78,78,',
'78,78,78,,78,78,,,,78,78,79,79,78,,79,78,79,,,,,,,78,,,,,,78,,,79,,',
',,,79,,,79,,79,79,,79,79,79,,79,79,,,,79,79,80,80,79,,80,79,80,,,,,',
',79,,,,,,79,,,80,,,,,,80,,,80,,80,80,,80,80,80,,80,80,,,,80,80,81,81',
'80,,81,80,81,,,,,,,80,,,,,,80,,,81,,,,,,81,,,81,,81,81,,81,81,81,,81',
'81,,,,81,81,82,82,81,,82,81,82,,,,,,,81,,,,,,81,,,82,,,,,,82,,,82,,82',
'82,,82,82,82,,82,82,,,,82,82,83,83,82,,83,82,83,,,,,,,82,,,,,,82,,,83',
',,,,,83,,,83,,83,83,,83,83,83,,83,83,,,,83,83,84,84,83,,84,83,84,,,',
',,,83,,,,,,83,,,84,,,,,,84,,,84,,84,84,,84,84,84,,84,84,,,,84,84,85',
'85,84,,85,84,85,,,,,,,84,,,,,,84,,,85,,,,,,85,,,85,,85,85,,85,85,85',
',85,85,,,,85,85,326,326,85,,326,85,326,326,,,,,,85,,,,,,85,,,326,,,',
',,326,,,326,,326,326,,326,326,326,,326,326,326,,,326,326,87,87,326,',
'87,326,87,,,,,,,326,,,,,,326,,,87,,,,,,87,,,87,,87,87,,87,87,87,,87',
'87,,,,87,87,257,257,87,,257,87,257,257,,,,,,87,,,,,,87,,,257,,,,,,257',
',,257,,257,257,,257,257,257,,257,257,,,,257,257,89,89,257,,89,257,89',
',,,,,,257,,,,,,257,,,89,,,,,,89,89,89,89,89,89,89,89,89,89,89,,89,89',
',,,89,89,89,89,89,230,230,89,,230,,230,,,,89,,,,,89,89,,,,,,230,,,,',
',230,,,230,,230,230,,230,230,230,,230,230,,,,230,230,91,91,230,,91,230',
'91,,,,,,,230,,,,,,230,,,91,,,,,,91,,,91,,91,91,,91,91,91,,91,91,,,,91',
'91,92,92,91,,92,91,92,,,,,,,91,,,,,,91,,,92,,,,,,92,,,92,,92,92,,92',
'92,92,,92,92,,,,92,92,229,229,92,,229,92,229,,,,,,,92,,,,,,92,,,229',
',,,,,229,,,229,,229,229,,229,229,229,,229,229,,,,229,229,226,226,229',
',226,229,226,,,,,,,229,,,,,,229,,,226,,,,,,226,,,226,,226,226,,226,226',
'226,,226,226,,,,226,226,222,222,226,,222,226,222,,,,,,,226,,,,,,226',
',,222,,,,,,222,,,222,,222,222,,222,222,222,,222,222,,,,222,222,200,200',
'222,,200,222,200,,,,,,,222,,,,,,222,,,200,,,,,,200,,,200,,200,200,,200',
'200,200,,200,200,,,,200,200,97,97,200,,97,200,97,,,,,,,200,,,,,,200',
',,97,97,,,,,97,,,97,,97,97,,97,97,97,,97,97,,,,97,97,220,220,97,,220',
'97,220,,,,,,,97,,,,,,97,,,220,,,,,,220,,,220,,220,220,,220,220,220,',
'220,220,,,,220,220,100,100,220,,100,220,100,,,,,,,220,,,,,,220,,,100',
'100,,,,,100,,,100,,100,100,,100,100,100,,100,100,,,,100,100,201,201',
'100,,201,100,201,,142,,,,,100,,,,,,100,,142,201,142,,,,,201,,,201,,201',
'201,,201,201,201,,201,201,,,,201,201,142,,201,211,211,201,,211,211,211',
'142,142,,201,,142,142,,,201,,,142,,,211,,,,,,211,,,211,,211,211,,211',
'211,211,,211,211,,,,211,211,215,215,211,,215,211,215,,,,,,,211,,,,,',
'211,,,215,,,,,,215,,,215,,215,215,,215,215,215,,215,215,,,,215,215,0',
'0,215,,0,215,0,,,,,,,215,,,,,,215,,,0,,,,,,0,,,0,,0,0,,0,0,0,,0,0,0',
',,0,0,196,196,0,,196,0,196,,,,,,,0,,,,,,0,,,196,,,,,,196,,,196,,196',
'196,,196,196,196,,196,196,,,,196,196,,,196,,,196,,,,,,,106,196,106,',
',,,196,,106,106,106,106,106,,106,,,,,106,106,106,106,,,,,,,,,,,,,,,',
'106,,,,106,106,,,106,106,106,106,106,106,,106,106,104,,104,,,106,,,',
'104,104,104,104,104,,104,,,,,104,104,104,104,,,,,,,,,,,,,,,,104,,,,104',
'104,,,104,104,104,104,104,104,,104,104,103,,103,,,104,,,,103,103,103',
'103,103,,103,,,,,103,103,103,103,,,,,,,,,,,,,,,,103,,,,103,103,,,103',
'103,103,103,103,103,,103,103,101,,101,,,103,,,,101,101,101,101,101,',
'101,,,,,101,101,101,101,,,,,,,,,,,,,,,,101,,,,101,101,,,101,101,101',
'101,101,101,119,101,101,,,,,,101,119,119,119,119,119,,119,,,,,119,119',
'119,119,,,,,,,,,,,,,,,,119,,,,119,119,,,119,119,119,119,119,119,96,119',
'119,,,,,,119,96,96,96,96,96,,96,,,,96,96,96,96,96,,,,,,,,,,,,,,,,96',
',,,96,96,,,96,96,96,96,96,96,197,96,96,,,197,,,96,197,197,197,197,197',
',197,,,,,197,197,197,197,,,,,,,,,,,,,,,,197,,,,197,197,,,197,197,197',
'197,197,197,273,197,197,,,,,,197,273,273,273,273,273,,273,,,,,273,273',
'273,273,,,,,,,,,,,,,,,,273,,,,273,273,,,273,273,273,273,273,273,126',
'273,273,,,,,,273,126,126,126,126,126,,126,,,,,126,126,126,126,,,,,,',
',,,,,,,,,126,,,,126,126,,,126,126,126,126,126,126,277,126,126,,,,,,126',
'277,277,277,277,277,,277,,,,,277,277,277,277,,,,,,,,,,,,,,,,277,,,,277',
'277,,,277,277,277,277,277,277,284,277,277,,,,,,277,284,284,284,284,284',
',284,,,,,284,284,284,284,,,,,,,,,,,,,,,,284,,,,284,284,,,284,284,284',
'284,284,284,285,284,284,,,,,,284,285,285,285,285,285,,285,,145,,,285',
'285,285,285,,,,,,,145,,145,,,,,,,285,,,,285,285,146,,285,285,285,285',
'285,285,,285,285,145,,146,,146,285,147,,145,145,145,145,,,,145,145,',
',147,,147,145,,,,,148,146,,,,,,,,146,146,146,146,148,,148,146,146,147',
',,,,146,,,147,147,147,147,147,147,,147,147,,,,,148,147,,,,149,,,148',
'148,148,148,148,148,,148,148,149,149,,149,,148,150,,149,,,,,,,,,,150',
'150,,150,,,,,150,149,,,,,,,,149,149,149,149,149,149,,149,149,,150,,',
',149,151,,,150,150,150,150,150,150,,150,150,151,151,,151,,150,152,,151',
',,,,,,,,,152,152,,152,,,,,152,151,,,,,,,,151,151,151,151,151,151,,151',
'151,,152,,,,151,,153,,152,152,152,152,152,152,,152,152,153,153,153,',
'153,152,,,,153,153,153,153,,,,,,,,,,,,,,,,153,,,,,,154,,153,153,153',
'153,153,153,,153,153,154,154,154,,154,153,,,,154,154,154,154,,,,,,,',
',,,,,,,,154,,,,,154,,,154,154,154,154,154,154,155,154,154,,,,,,154,155',
'155,155,155,155,,155,,,,,155,155,155,155,,,,,,,,,,,,,,,,155,,,,155,155',
',,155,155,155,155,155,155,156,155,155,,,,,,155,156,156,156,156,156,',
'156,,,,,156,156,156,156,,,,,,,,,,,,,,,,156,,,,156,156,,,156,156,156',
'156,156,156,183,156,156,,,,,,156,183,183,183,183,183,,183,,,,,183,183',
'183,183,,,,,,,,,,,,,,,,183,,,,183,183,,,183,183,183,183,183,183,302',
'183,183,,,,,,183,302,302,302,302,302,,302,,,,,302,302,302,302,,,,,,',
',,,,,,,,,302,,,,302,302,,,302,302,302,302,302,302,320,302,302,,,,,,302',
'320,320,320,320,320,,320,,,,,320,320,320,320,,,,,,,,,,,,,,,,320,,,,320',
'320,,,320,320,320,320,320,320,,320,320,10,,10,,,320,,,,10,10,10,10,10',
',10,,,,,10,10,10,10,,,,,,,,,,,,,,,,10,,,,10,10,,,10,10,10,10,10,10,158',
'10,10,,,,,,10,158,158,158,158,158,158,158,,,,,158,158,158,158,,,,,,',
',,,,,,,,,158,,,,158,158,,,158,158,158,158,158,158,,158,158,223,223,223',
'223,223,158,223,223,223,223,223,,223,223,,,,,,223,223,223,228,228,228',
'228,228,,228,228,228,228,228,,228,228,,223,223,,,228,228,228,182,182',
'182,182,182,,182,182,182,182,182,,182,182,,228,228,,,182,182,182,,,',
',,,,,,,,,,,,182,182' ]
        racc_action_check = arr = ::Array.new(4622, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  3112,   267,   nil,   nil,    95,   253,   nil,   nil,   152,   nil,
  4424,   283,   330,   377,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   239,   188,   229,   565,   612,
   659,   227,   753,    69,   -29,    71,    27,   nil,   991,   162,
   nil,   nil,   nil,  1085,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   206,   193,  1226,  1273,  1320,  1367,  1414,  1461,  1508,
   121,    60,  1649,  1696,  1743,  1790,  1837,  1884,  1931,  1978,
  2025,  2072,  2119,  2166,  2213,  2260,    48,  2354,   113,  2448,
    57,  2545,  2592,     2,   118,    87,  3488,  2827,   nil,   -10,
  2921,  3382,   nil,  3326,  3270,    -2,  3214,  1132,    96,   nil,
   nil,   nil,   123,    -2,   nil,   nil,   nil,   nil,   nil,  3435,
    20,   nil,   117,   nil,   nil,   201,  3647,   nil,   183,   nil,
   nil,   nil,   nil,   nil,   nil,    61,   149,   nil,   nil,   nil,
   nil,   945,  2972,    -3,   235,  3823,  3851,  3868,  3889,  3933,
  3951,  3995,  4013,  4058,  4103,  4156,  4209,   nil,  4477,   706,
   424,   236,   194,   252,   nil,   nil,    -9,   nil,     9,     3,
   133,    35,    78,    -4,     1,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  4553,  4262,   188,   nil,   198,   nil,     1,   nil,
   894,   -30,    -1,   nil,   941,  1038,  3159,  3541,   nil,   nil,
  2780,  2968,   168,   166,   nil,   -16,   192,   152,    74,   nil,
    42,  3018,   nil,   nil,   205,  3065,   nil,   nil,   nil,   nil,
  2874,   nil,  2733,  4509,   nil,    21,  2686,   221,  4531,  2639,
  2498,    62,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    70,   nil,   nil,    80,   nil,
    79,   nil,   104,    81,   118,   110,     5,  2401,   nil,  1602,
   150,   nil,   126,   165,   191,   nil,   116,   nil,   189,  1555,
  1179,   nil,   nil,  3594,   nil,   nil,   nil,  3700,   nil,   199,
   nil,   nil,   nil,   nil,  3753,  3806,   212,   nil,   154,   191,
   847,   145,   nil,   800,   238,   216,   nil,   240,   241,   nil,
   nil,   nil,  4315,   243,   518,   246,   nil,   471,   nil,   nil,
   nil,   234,   252,   nil,   253,   nil,   nil,   nil,   nil,   nil,
  4368,   nil,   nil,   189,   nil,   142,  2307,   nil,   nil,   nil,
   259,   nil,   nil,   nil,   nil,   261,   nil,   264,   nil,   268,
   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -199,  -200,    -1,    -2,    -3,    -4,    -6,    -8,    -9,   -14,
   -99,  -200,  -200,  -200,   -40,   -41,   -42,   -43,   -44,   -45,
   -46,   -47,   -48,   -49,   -50,   -51,   -52,   -53,   -54,   -55,
   -56,   -57,   -58,   -59,   -60,   -63,   -64,   -68,  -200,  -200,
  -200,   -92,  -200,  -200,  -108,  -200,  -200,  -153,  -200,  -200,
  -163,  -164,  -165,  -200,  -167,  -174,  -175,  -176,  -177,  -178,
  -179,  -200,    -5,  -200,  -200,  -200,  -200,  -200,  -200,  -200,
  -200,  -200,  -200,  -200,  -200,  -200,  -200,  -200,  -200,  -200,
  -200,  -200,  -200,  -200,  -200,  -200,  -200,  -200,  -200,  -116,
  -111,  -199,  -199,   -25,  -200,   -32,  -200,  -200,   -65,  -200,
  -200,  -200,   -74,  -200,  -200,  -200,  -200,  -200,  -199,  -142,
  -143,  -109,  -199,  -199,  -134,  -136,  -137,  -138,  -139,   -38,
  -200,  -156,  -200,  -159,  -160,  -200,  -171,  -166,  -200,   345,
    -7,   -10,   -11,   -12,   -13,  -200,   -16,   -17,  -151,  -152,
   -18,   -19,   -20,   -21,   -22,   -23,   -24,   -26,   -27,   -28,
   -29,   -30,   -31,   -33,   -34,   -35,   -36,   -69,  -200,  -191,
  -198,  -185,  -182,  -180,  -106,  -117,  -174,  -120,  -178,  -200,
  -188,  -186,  -195,  -176,  -177,  -184,  -189,  -190,  -192,  -193,
  -194,  -196,  -116,  -115,  -200,  -114,  -200,   -37,  -200,   -62,
  -200,  -200,  -200,   -67,  -200,  -200,  -200,  -200,   -93,   -94,
  -200,  -200,  -182,  -199,  -144,  -200,  -200,  -200,  -200,  -140,
  -200,  -200,  -154,  -157,  -200,  -200,  -168,  -169,  -170,  -172,
  -200,   -15,  -200,  -116,  -105,  -200,  -183,  -200,  -181,  -200,
  -200,  -180,  -119,  -121,  -185,  -186,  -187,  -188,  -191,  -195,
  -197,  -198,  -112,  -113,   -61,  -200,   -71,   -72,  -180,  -147,
  -150,   -66,  -200,   -77,  -200,   -83,  -200,  -200,   -87,  -200,
  -180,   -96,  -182,  -200,  -200,  -128,  -200,  -145,  -180,  -200,
  -200,  -135,  -141,   -39,  -155,  -158,  -161,  -162,  -173,  -180,
  -101,  -107,  -102,  -118,  -122,  -123,  -200,   -70,  -200,  -181,
  -200,   -77,   -76,  -200,  -200,   -83,   -82,  -200,  -200,   -91,
   -86,   -88,   -98,  -200,  -181,  -200,  -103,  -200,  -129,  -130,
  -131,  -200,  -200,  -125,  -200,  -133,  -104,  -110,   -73,  -148,
  -149,   -75,   -78,  -200,   -81,  -200,  -200,   -95,   -97,  -100,
  -200,  -127,  -146,  -124,  -132,  -200,   -80,  -200,   -85,  -200,
   -90,  -126,   -79,   -84,   -89 ]

racc_goto_table = [
     2,   112,    93,    95,    96,     3,   199,   127,   124,   162,
   163,   225,   292,   125,   296,     1,   203,   118,   258,   227,
   206,   260,   248,   131,   132,   133,   134,   202,   198,   101,
   103,   104,   120,   106,   139,   139,   268,   298,   271,   119,
   272,   138,   138,   281,   126,   137,   140,   184,   186,   223,
   321,   263,   135,   257,   324,   283,   322,   190,   264,   119,
   136,   308,   207,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   301,
   158,   188,   183,   183,   192,    98,   319,   286,   119,   122,
   130,   119,    62,   219,   220,   218,   197,   nil,   158,   nil,
   nil,   261,   nil,   231,   288,   nil,   nil,   nil,   nil,   nil,
   nil,   305,   nil,   204,   nil,   nil,   303,   204,   209,   nil,
   nil,   262,   nil,   nil,   311,   nil,   112,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   316,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   118,   279,   nil,   nil,   nil,   nil,   nil,
   101,   103,   104,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   276,   278,   nil,   nil,   nil,   125,   118,
   nil,   118,   nil,   nil,   nil,   nil,   nil,   119,   nil,   nil,
   245,   197,   158,   nil,   252,   254,   nil,   nil,   nil,   nil,
   nil,   nil,   273,   nil,   nil,   328,   277,   nil,   265,   nil,
   nil,   126,   nil,   273,   nil,   nil,   nil,   158,   nil,   nil,
   284,   285,   309,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   119,   nil,
   302,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   312,
   314,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   320,   nil,   nil,   101,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   197,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   330,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   335,   nil,   337,   339 ]

racc_goto_check = [
     2,    62,     9,     9,     9,     3,    49,    75,    71,    52,
    54,    53,    43,    30,    44,     1,    63,    29,    46,    41,
    63,    50,    40,     8,     8,     8,     8,    52,    48,     9,
     9,     9,    11,     9,    30,    30,    40,    47,    68,     9,
    68,    29,    29,    55,     9,    12,    12,    58,    58,    56,
    43,    53,    11,    45,    44,    59,    42,    39,    64,     9,
     9,    65,    67,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,    46,
     9,    11,     9,     9,    11,    37,    69,    41,     9,    70,
     6,     9,     5,    76,    77,    79,     9,   nil,     9,   nil,
   nil,    49,   nil,    54,    41,   nil,   nil,   nil,   nil,   nil,
   nil,    53,   nil,     3,   nil,   nil,    41,     3,     3,   nil,
   nil,    52,   nil,   nil,    41,   nil,    62,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    41,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    29,    54,   nil,   nil,   nil,   nil,   nil,
     9,     9,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    71,    75,   nil,   nil,   nil,    30,    29,
   nil,    29,   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,
     2,     9,     9,   nil,     2,     2,   nil,   nil,   nil,   nil,
   nil,   nil,     9,   nil,   nil,    49,     9,   nil,     3,   nil,
   nil,     9,   nil,     9,   nil,   nil,   nil,     9,   nil,   nil,
     9,     9,    62,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,
     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     9,   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    15,     0,     5,   nil,    88,    27,   nil,   -41,    -9,
   nil,   -16,   -25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -29,
   -36,   nil,   nil,   nil,   nil,   nil,   nil,    49,   nil,   -42,
  -169,  -144,  -237,  -241,  -241,  -143,  -178,  -219,   -77,   -99,
  -179,   nil,   -80,  -151,   -79,  -183,  -109,   nil,   -44,  -173,
   nil,   nil,   -44,   -92,  -145,  -205,   nil,   -51,  -170,  -203,
    40,   -41,   nil,   nil,   nil,   -46,   -35,   -34,   nil,   -33 ]

racc_goto_default = [
   nil,   nil,   nil,   185,     4,     5,     6,     7,     8,    10,
     9,   256,   nil,    14,    35,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    41,    36,   nil,    37,   nil,
   nil,   nil,   102,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    42,   nil,   nil,   nil,   164,   nil,    90,   nil,   165,
   169,   167,   108,   nil,   nil,   nil,   113,   nil,   114,   249,
   nil,   nil,    50,    51,    53,   nil,   nil,   nil,   128,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 78, :_reduce_1,
  1, 78, :_reduce_none,
  1, 79, :_reduce_3,
  1, 81, :_reduce_4,
  2, 81, :_reduce_5,
  1, 82, :_reduce_6,
  3, 82, :_reduce_7,
  1, 83, :_reduce_none,
  1, 84, :_reduce_9,
  3, 84, :_reduce_10,
  3, 84, :_reduce_11,
  3, 84, :_reduce_12,
  3, 84, :_reduce_13,
  1, 86, :_reduce_none,
  4, 86, :_reduce_15,
  3, 86, :_reduce_16,
  3, 86, :_reduce_17,
  3, 86, :_reduce_18,
  3, 86, :_reduce_19,
  3, 86, :_reduce_20,
  3, 86, :_reduce_21,
  3, 86, :_reduce_22,
  3, 86, :_reduce_23,
  3, 86, :_reduce_24,
  2, 86, :_reduce_25,
  3, 86, :_reduce_26,
  3, 86, :_reduce_27,
  3, 86, :_reduce_28,
  3, 86, :_reduce_29,
  3, 86, :_reduce_30,
  3, 86, :_reduce_31,
  2, 86, :_reduce_32,
  3, 86, :_reduce_33,
  3, 86, :_reduce_34,
  3, 86, :_reduce_35,
  3, 86, :_reduce_36,
  3, 86, :_reduce_37,
  1, 88, :_reduce_38,
  3, 88, :_reduce_39,
  1, 87, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 107, :_reduce_59,
  1, 107, :_reduce_60,
  4, 112, :_reduce_61,
  3, 112, :_reduce_62,
  1, 112, :_reduce_63,
  1, 94, :_reduce_64,
  2, 94, :_reduce_65,
  4, 113, :_reduce_66,
  3, 113, :_reduce_67,
  1, 113, :_reduce_68,
  3, 115, :_reduce_69,
  4, 114, :_reduce_70,
  3, 114, :_reduce_71,
  2, 116, :_reduce_72,
  4, 116, :_reduce_73,
  2, 97, :_reduce_74,
  5, 119, :_reduce_75,
  4, 119, :_reduce_76,
  0, 120, :_reduce_none,
  2, 120, :_reduce_78,
  4, 120, :_reduce_79,
  3, 120, :_reduce_80,
  6, 98, :_reduce_81,
  5, 98, :_reduce_82,
  0, 121, :_reduce_none,
  4, 121, :_reduce_84,
  3, 121, :_reduce_85,
  5, 96, :_reduce_86,
  1, 122, :_reduce_87,
  2, 122, :_reduce_88,
  5, 123, :_reduce_89,
  4, 123, :_reduce_90,
  1, 124, :_reduce_91,
  1, 90, :_reduce_none,
  3, 90, :_reduce_93,
  1, 125, :_reduce_none,
  4, 125, :_reduce_95,
  1, 127, :_reduce_96,
  3, 127, :_reduce_97,
  3, 126, :_reduce_98,
  1, 85, :_reduce_99,
  6, 85, :_reduce_100,
  5, 85, :_reduce_101,
  5, 85, :_reduce_102,
  5, 85, :_reduce_103,
  4, 132, :_reduce_104,
  1, 133, :_reduce_105,
  1, 129, :_reduce_106,
  3, 129, :_reduce_107,
  1, 128, :_reduce_108,
  2, 128, :_reduce_109,
  6, 95, :_reduce_110,
  2, 95, :_reduce_111,
  3, 134, :_reduce_112,
  3, 134, :_reduce_113,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  0, 131, :_reduce_116,
  1, 131, :_reduce_117,
  3, 131, :_reduce_118,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  3, 136, :_reduce_122,
  3, 136, :_reduce_123,
  6, 99, :_reduce_124,
  5, 99, :_reduce_125,
  7, 100, :_reduce_126,
  6, 100, :_reduce_127,
  1, 141, :_reduce_none,
  2, 141, :_reduce_129,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  6, 101, :_reduce_132,
  5, 101, :_reduce_133,
  1, 143, :_reduce_134,
  3, 143, :_reduce_135,
  1, 145, :_reduce_136,
  1, 145, :_reduce_137,
  1, 145, :_reduce_138,
  1, 145, :_reduce_none,
  1, 144, :_reduce_none,
  2, 144, :_reduce_141,
  1, 139, :_reduce_142,
  1, 139, :_reduce_143,
  1, 140, :_reduce_144,
  2, 140, :_reduce_145,
  4, 140, :_reduce_146,
  1, 117, :_reduce_147,
  3, 117, :_reduce_148,
  3, 146, :_reduce_149,
  1, 146, :_reduce_150,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 93, :_reduce_153,
  3, 102, :_reduce_154,
  4, 102, :_reduce_155,
  2, 102, :_reduce_156,
  3, 105, :_reduce_157,
  4, 105, :_reduce_158,
  2, 105, :_reduce_159,
  1, 147, :_reduce_160,
  3, 147, :_reduce_161,
  3, 148, :_reduce_162,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 149, :_reduce_165,
  2, 150, :_reduce_166,
  1, 151, :_reduce_167,
  1, 153, :_reduce_168,
  1, 154, :_reduce_169,
  2, 152, :_reduce_170,
  1, 155, :_reduce_171,
  1, 156, :_reduce_172,
  2, 156, :_reduce_173,
  1, 110, :_reduce_174,
  1, 108, :_reduce_175,
  1, 109, :_reduce_176,
  1, 104, :_reduce_177,
  1, 103, :_reduce_178,
  1, 106, :_reduce_179,
  0, 118, :_reduce_none,
  1, 118, :_reduce_181,
  0, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  0, 80, :_reduce_199 ]

racc_reduce_n = 200

racc_shift_n = 345

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68,
  :PIPE => 69,
  :LAMBDA => 70,
  :SELBRACE => 71,
  :LOW => 72,
  :HIGH => 73,
  :CALL => 74,
  :TITLE_COLON => 75,
  :CASE_COLON => 76 }

racc_nt_base = 77

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "LOW",
  "HIGH",
  "CALL",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "match_rvalue",
  "selector_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "type",
  "undef",
  "name",
  "quotedtext",
  "call_function_expression",
  "call_method_expression",
  "lambda",
  "named_access",
  "lambda_parameter_list",
  "parameters",
  "endcomma",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entries",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 54)
  def _reduce_1(val, _values, result)
     result = Factory.block_or_expression(*val[0]) 
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'egrammar.ra', 60)
  def _reduce_3(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 66)
  def _reduce_4(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_5(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 71)
  def _reduce_6(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 72)
  def _reduce_7(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'egrammar.ra', 78)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 79)
  def _reduce_10(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_11(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'egrammar.ra', 89)
  def _reduce_15(val, _values, result)
     result = val[0][*val[2]]; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_16(val, _values, result)
     result = val[0].in val[2]  ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_17(val, _values, result)
     result = val[0] =~  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 92)
  def _reduce_18(val, _values, result)
     result = val[0].mne val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_19(val, _values, result)
     result = val[0] +   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_20(val, _values, result)
     result = val[0] -   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_21(val, _values, result)
     result = val[0] /   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_22(val, _values, result)
     result = val[0] *   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_23(val, _values, result)
     result = val[0] <<  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_24(val, _values, result)
     result = val[0] >>  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_25(val, _values, result)
     result = val[1].minus()    ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_26(val, _values, result)
     result = val[0].ne  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_27(val, _values, result)
     result = val[0] ==  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_28(val, _values, result)
     result = val[0] >   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_29(val, _values, result)
     result = val[0] >=  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_30(val, _values, result)
     result = val[0] <   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_31(val, _values, result)
     result = val[0] <=  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_32(val, _values, result)
     result = val[1].not        ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_33(val, _values, result)
     result = val[0].and val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_34(val, _values, result)
     result = val[0].or  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_35(val, _values, result)
     result = val[0].set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_36(val, _values, result)
     result = val[0].plus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_37(val, _values, result)
     result = val[1]            ;                    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 119)
  def _reduce_38(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 120)
  def _reduce_39(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

module_eval(<<'.,.,', 'egrammar.ra', 152)
  def _reduce_59(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 153)
  def _reduce_60(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 160)
  def _reduce_61(val, _values, result)
     result = Factory.CALL_NAMED(val[0], true, val[2]) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 161)
  def _reduce_62(val, _values, result)
     result = Factory.CALL_NAMED(val[0], true, []) ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 162)
  def _reduce_63(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 168)
  def _reduce_64(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 169)
  def _reduce_65(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 172)
  def _reduce_66(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 173)
  def _reduce_67(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 174)
  def _reduce_68(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 178)
  def _reduce_69(val, _values, result)
          result = val[0].dot(Factory.fqn(val[2][:value]))
      loc result, val[1], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 186)
  def _reduce_70(val, _values, result)
          result = Factory.LAMBDA(val[1], val[2])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 190)
  def _reduce_71(val, _values, result)
          result = Factory.LAMBDA(val[1], nil)
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_72(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_73(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_74(val, _values, result)
          result = val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_75(val, _values, result)
          @lexer.commentpop
      result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
      loc(result, val[0], (val[4] ? val[4] : val[3]))
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_76(val, _values, result)
          result = Factory.IF(val[0], nil, val[3])
      loc(result, val[0], (val[3] ? val[3] : val[2]))
    
    result
  end
.,.,

# reduce 77 omitted

module_eval(<<'.,.,', 'egrammar.ra', 225)
  def _reduce_78(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 227)
  def _reduce_79(val, _values, result)
          @lexer.commentpop
      result = Factory.block_or_expression(*val[2])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 232)
  def _reduce_80(val, _values, result)
          @lexer.commentpop
  	  result = nil # don't think a nop is needed here either
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 242)
  def _reduce_81(val, _values, result)
          @lexer.commentpop
      result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 247)
  def _reduce_82(val, _values, result)
          @lexer.commentpop
      result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 83 omitted

module_eval(<<'.,.,', 'egrammar.ra', 258)
  def _reduce_84(val, _values, result)
          @lexer.commentpop
      result = Factory.block_or_expression(*val[2])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 263)
  def _reduce_85(val, _values, result)
          @lexer.commentpop
  	  result = nil # don't think a nop is needed here either
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 272)
  def _reduce_86(val, _values, result)
          @lexer.commentpop
      result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 279)
  def _reduce_87(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 280)
  def _reduce_88(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 285)
  def _reduce_89(val, _values, result)
          @lexer.commentpop
      result = Factory.WHEN(val[0], val[3])
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 290)
  def _reduce_90(val, _values, result)
          @lexer.commentpop
      result = Factory.WHEN(val[0], nil)
      loc result, val[1], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 295)
  def _reduce_91(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 92 omitted

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_93(val, _values, result)
     result = val[0].select(*val[2]) ; loc result, val[0] 
    result
  end
.,.,

# reduce 94 omitted

module_eval(<<'.,.,', 'egrammar.ra', 320)
  def _reduce_95(val, _values, result)
            @lexer.commentpop
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 326)
  def _reduce_96(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 327)
  def _reduce_97(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 332)
  def _reduce_98(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 364)
  def _reduce_99(val, _values, result)
      	  result = val[0]
  	
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 367)
  def _reduce_100(val, _values, result)
      	  result = case Factory.resource_shape(val[1])
  	  when :resource, :class
  	    tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
  	    tmp.form = val[0]
  	    tmp
	  when :defaults
        error "A resource default can not be virtual or exported"
  	  when :override
        error "A resource override can not be virtual or exported"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 382)
  def _reduce_101(val, _values, result)
      	  result = case Factory.resource_shape(val[0])
  	  when :resource, :class
  	    Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
	  when :defaults
        error "A resource default can not specify a resource name"
  	  when :override
        error "A resource override does not allow override of name of resource"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 395)
  def _reduce_102(val, _values, result)
      	  result = case Factory.resource_shape(val[0])
  	  when :resource, :class
	    # This catches deprecated syntax.
	    error "All resource specifications require names"
	  when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
  	  when :override
  	    # This was only done for override in original - TODO shuld it be here at all
        @lexer.commentpop
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]  	  
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 411)
  def _reduce_103(val, _values, result)
      	    result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
  	    loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 416)
  def _reduce_104(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 418)
  def _reduce_105(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 421)
  def _reduce_106(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 422)
  def _reduce_107(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_108(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 445)
  def _reduce_109(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 457)
  def _reduce_110(val, _values, result)
          @lexer.commentpop
      result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 462)
  def _reduce_111(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_112(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 468)
  def _reduce_113(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 114 omitted

# reduce 115 omitted

module_eval(<<'.,.,', 'egrammar.ra', 483)
  def _reduce_116(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 484)
  def _reduce_117(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 485)
  def _reduce_118(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

module_eval(<<'.,.,', 'egrammar.ra', 501)
  def _reduce_122(val, _values, result)
          result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 505)
  def _reduce_123(val, _values, result)
          result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 515)
  def _reduce_124(val, _values, result)
          @lexer.commentpop
      result = Factory.DEFINITION(classname(val[1][:value]), val[2], val[4])
      loc result, val[0], val[5]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 521)
  def _reduce_125(val, _values, result)
          @lexer.commentpop
      result = Factory.DEFINITION(classname(val[1][:value]), val[2], nil)
      loc result, val[0], val[4]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 537)
  def _reduce_126(val, _values, result)
          @lexer.commentpop
      @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5])
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 543)
  def _reduce_127(val, _values, result)
          @lexer.commentpop
      @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), nil)
      loc result, val[0], val[5]
      
    result
  end
.,.,

# reduce 128 omitted

module_eval(<<'.,.,', 'egrammar.ra', 552)
  def _reduce_129(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

module_eval(<<'.,.,', 'egrammar.ra', 569)
  def _reduce_132(val, _values, result)
          @lexer.commentpop
      result = Factory.NODE(val[1], val[2], val[4])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 574)
  def _reduce_133(val, _values, result)
          @lexer.commentpop
      result = Factory.NODE(val[1], val[2], nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 585)
  def _reduce_134(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 586)
  def _reduce_135(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 590)
  def _reduce_136(val, _values, result)
     result = Factory.fqn(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 591)
  def _reduce_137(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 592)
  def _reduce_138(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 139 omitted

# reduce 140 omitted

module_eval(<<'.,.,', 'egrammar.ra', 598)
  def _reduce_141(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 604)
  def _reduce_142(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 605)
  def _reduce_143(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 610)
  def _reduce_144(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 611)
  def _reduce_145(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 612)
  def _reduce_146(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_147(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 617)
  def _reduce_148(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_149(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_150(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 151 omitted

# reduce 152 omitted

module_eval(<<'.,.,', 'egrammar.ra', 636)
  def _reduce_153(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_154(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_155(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_156(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_157(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_158(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_159(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_160(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_161(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_162(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 163 omitted

# reduce 164 omitted

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_165(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 667)
  def _reduce_166(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_167(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_168(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_169(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_170(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_171(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_172(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_173(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_174(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_175(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_176(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_177(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 684)
  def _reduce_178(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_179(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 180 omitted

module_eval(<<'.,.,', 'egrammar.ra', 700)
  def _reduce_181(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

module_eval(<<'.,.,', 'egrammar.ra', 724)
  def _reduce_199(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

        end   # class Parser
        end   # module Parser
      end   # module Impl
    end   # module Pops
  end   # module Puppet
