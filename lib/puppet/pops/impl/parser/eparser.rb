#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/pops/impl/parser/lexer'
require 'puppet/pops/impl/model/factory'
#require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Impl
      module Parser
        class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 749)

# Require supporting logic mixed in to the generated Puppet::Pops::Impl::Parser::Parser class
require 'puppet/pops/impl/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'51,53,-207,244,47,220,48,112,234,316,283,315,51,53,-132,234,121,-130',
'121,207,-198,269,13,321,51,53,105,104,38,222,44,291,46,96,115,45,58',
'54,114,40,57,116,-207,245,55,12,51,53,56,54,47,11,48,120,-132,120,122',
'-130,122,59,-198,54,121,299,121,39,51,53,13,167,217,59,207,128,38,59',
'44,59,46,96,115,45,58,54,114,40,57,330,105,104,55,12,51,53,56,224,47',
'11,48,120,223,120,122,54,122,59,115,204,233,301,114,39,115,234,13,115',
'114,51,53,114,38,59,44,59,46,42,217,45,58,54,61,40,57,43,105,104,55',
'12,51,53,56,105,47,11,48,358,115,229,228,225,114,59,226,316,54,315,202',
'39,243,286,13,64,66,65,67,306,38,192,44,309,46,42,310,45,58,54,59,40',
'57,43,207,168,55,12,51,53,56,313,47,11,48,356,285,317,319,282,241,59',
'241,243,326,327,227,39,267,63,13,63,134,268,267,336,38,241,44,243,46',
'42,297,45,58,54,263,40,57,43,339,259,55,12,51,53,56,341,47,11,48,265',
'106,258,257,344,319,59,346,347,348,349,99,39,352,353,13,354,243,63,60',
'361,38,362,44,363,46,42,364,45,58,54,,40,57,43,,,55,12,51,53,56,,47',
'11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55',
'12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58',
'54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38',
',44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,351,,,,,,59',
',,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56',
',47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57',
',,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96',
',45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,',
',,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,',
',59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53',
'56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40',
'57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46',
'96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13',
',,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,',
',,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53',
'56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40',
'57,,,,55,12,51,53,56,,47,11,48,,68,,,,,59,68,,,,,39,,90,13,94,,89,,90',
'38,94,44,89,46,96,,45,58,54,,40,57,,,,55,12,93,,56,51,53,11,93,47,126',
'48,,,,59,,,,,,39,,,,,76,13,,,,,76,38,,44,,46,96,,45,58,54,,40,57,,,',
'55,12,51,53,56,,47,11,48,271,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42',
',45,58,54,,40,57,43,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13',
',,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,',
',,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53',
'56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40',
'57,43,,,55,12,51,53,56,,47,11,48,335,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,',
'39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47',
'11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,',
',55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,',
'45,58,54,,40,57,43,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13',
',,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47,11,48,,',
',,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51',
'53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,',
'40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,333,,,,,,59,,,,',
',39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47',
'11,48,322,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,',
',,55,12,51,53,56,,47,11,48,360,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46',
'42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,',
',13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48',
',,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51',
'53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,',
'40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39',
',,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48',
',,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51',
'53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,',
'40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39',
',,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48',
',,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51',
'53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,',
'40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39',
',,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48',
',,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51',
'53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,',
'40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39',
',,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47,11',
'48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12',
'51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,170,187,181,188,46,182',
'190,183,179,177,,172,185,,,,55,12,191,186,184,51,53,11,,47,,48,308,',
',59,,,,,189,171,,,,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55',
'12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58',
'54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38',
',44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,',
',,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47',
'11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55',
'12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,170,187,181,188,46',
'182,190,183,179,177,,172,185,,,,55,12,191,186,184,51,53,11,,47,290,48',
',,,59,,,,,189,171,,,,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55',
'12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,199,,,,,38,,44,,46,96,,45',
'58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,',
'38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59',
',,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,',
'47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,',
',,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,209,,,,,38,,44,,46',
'96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13',
',,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,',
',,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53',
'56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40',
'57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46',
'96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,273,,,,,68,59,,,,,,39',
',,13,,,90,,94,38,89,44,,46,42,,45,58,54,,40,57,43,,,55,12,,,56,,93,11',
',,,,,,68,59,213,,,,,39,,87,88,84,79,90,,94,76,89,,,80,82,81,83,,,,,',
',,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70,71,68,,212,,,69,,76,,87',
'88,84,79,90,,94,,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73',
'75,74,77,78,,70,71,68,,211,,,69,,76,,87,88,84,79,90,,94,,89,,,80,82',
'81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70,71,68,,,,,69',
',76,,87,88,84,79,90,,94,,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85',
',,72,73,75,74,77,78,,70,71,68,,210,,,69,,76,,87,88,84,79,90,,94,,89',
',,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70,71,68',
',,,,69,,76,,87,88,84,79,90,,94,,89,,197,80,82,81,83,,,,,,,,,,,,,,,93',
',,,86,85,,,72,73,75,74,77,78,,70,71,68,,,,,69,,76,,87,88,84,79,90,,94',
',89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70',
'71,68,,,,,69,,76,,87,88,84,79,90,,94,,89,,,80,82,81,83,,,,,,,,,,,,,',
',93,,,,86,85,,,72,73,75,74,77,78,,70,71,68,,,,,69,,76,,87,88,84,79,90',
',94,,89,68,,80,82,81,83,,,,,,,,90,,94,,89,,,93,,,,86,85,68,,72,73,75',
'74,77,78,,70,71,,93,90,,94,69,89,76,,68,,75,74,,,,70,71,,68,,,90,69',
'94,76,89,93,,,,,90,,94,,89,75,74,,,,70,71,,,,93,,69,,76,,,,,,93,,,,',
'70,71,,68,,,,69,,76,70,71,87,88,84,79,90,69,94,76,89,68,,80,82,81,83',
',,,,,,,90,,94,,89,,,93,,,,86,85,68,,72,73,75,74,77,78,,70,71,,93,90',
',94,69,89,76,,72,73,75,74,,,68,70,71,,,,,,69,,76,,93,90,,94,,89,68,',
'72,73,75,74,,,,70,71,,,90,,94,69,89,76,,93,,,,,,,,72,73,75,74,77,78',
',70,71,,93,,,,69,,76,,72,73,75,74,77,78,68,70,71,,,,,,69,,76,,79,90',
',94,,89,,68,80,,,,,,,,,,,79,90,,94,,89,,93,80,,,,,,,72,73,75,74,77,78',
',70,71,,,93,,,69,,76,68,,72,73,75,74,77,78,,70,71,,79,90,,94,69,89,76',
'68,80,,,,,,,,,,,79,90,,94,,89,,93,80,,,,,,,72,73,75,74,77,78,,70,71',
',,93,,,69,,76,68,,72,73,75,74,77,78,,70,71,84,79,90,,94,69,89,76,,80',
'82,81,83,,,,,,,,,,,,,,,93,,,,,,68,,72,73,75,74,77,78,,70,71,84,79,90',
',94,69,89,76,,80,82,81,83,,,,,,,,,,,,,,,93,,,,,85,,,72,73,75,74,77,78',
',70,71,68,,,,,69,,76,,87,88,84,79,90,,94,,89,,,80,82,81,83,,,,,,,,,',
',,,,,93,,,,86,85,,,72,73,75,74,77,78,,70,71,68,,,,,69,,76,,87,88,84',
'79,90,,94,,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74',
'77,78,,70,71,,68,,,,69,235,76,,,87,88,84,79,90,,94,,89,,,80,82,81,83',
',,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70,71,68,,,,,69,,76,',
'87,88,84,79,90,,94,,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72',
'73,75,74,77,78,,70,71,68,,,,,69,,76,,87,88,84,79,90,239,94,,89,,,80',
'82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70,71,68,,,',
',69,,76,,87,88,84,79,90,,94,,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86',
'85,,,72,73,75,74,77,78,,70,71,68,,,,,69,,76,,87,88,84,79,90,,94,,89',
',,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70,71,68',
',,,,69,,76,,87,88,84,79,90,,94,,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,',
',86,85,,,72,73,75,74,77,78,,70,71,68,,91,,,69,,76,,87,88,84,79,90,,94',
',89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70',
'71,68,,,,,69,,76,,87,88,84,79,90,,94,,89,,,80,82,81,83,,,,,,,,,,,,,',
',93,,,,86,85,,,72,73,75,74,77,78,,70,71,,,,,,69,,76,253,187,252,188',
',250,190,254,248,247,,249,251,,,,,,191,186,255,253,187,252,188,,250',
'190,254,248,247,,249,251,,,189,256,,191,186,255,253,187,252,188,,250',
'190,254,248,247,,249,251,,,189,256,,191,186,255,,,,,,,,,,,,,,,,189,256' ]
        racc_action_table = arr = ::Array.new(4897, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'89,89,184,180,89,118,89,42,208,313,217,313,71,71,179,274,222,177,220',
'217,185,208,89,274,226,226,36,36,89,118,89,226,89,89,42,89,89,89,42',
'89,89,43,184,180,89,89,72,72,89,71,72,89,72,222,179,220,222,177,220',
'89,185,226,45,240,183,89,48,48,72,89,113,71,105,48,72,222,72,220,72',
'72,282,72,72,72,282,72,72,282,306,306,72,72,4,4,72,125,4,72,4,45,125',
'183,45,48,183,72,181,105,141,242,181,72,182,141,4,96,182,70,70,96,4',
'45,4,183,4,4,117,4,4,4,4,4,4,4,199,199,4,4,346,346,4,104,346,4,346,346',
'44,133,133,127,44,4,127,271,70,271,103,4,246,219,346,7,7,7,7,260,346',
'92,346,264,346,346,266,346,346,346,70,346,346,346,267,90,346,346,344',
'344,346,270,344,346,344,344,218,272,273,215,214,346,277,278,279,280',
'130,346,284,135,344,62,60,207,205,296,344,173,344,298,344,344,236,344',
'344,344,200,344,344,344,305,198,344,344,203,203,344,307,203,344,203',
'203,37,196,194,316,317,344,319,320,324,325,35,344,331,332,203,334,174',
'5,1,350,203,355,203,357,203,203,359,203,203,203,,203,203,203,,,203,203',
'11,11,203,,11,203,11,,,,,,,203,,,,,,203,,,11,,,,,,11,,11,,11,11,,11',
'11,11,,11,11,,,,11,11,12,12,11,,12,11,12,,,,,,,11,,,,,,11,,,12,,,,,',
'12,,12,,12,12,,12,12,12,,12,12,,,,12,12,13,13,12,,13,12,13,,,,,,,12',
',,,,,12,,,13,,,,,,13,,13,,13,13,,13,13,13,,13,13,,,,13,13,327,327,13',
',327,13,327,327,,,,,,13,,,,,,13,,,327,,,,,,327,,327,,327,327,,327,327',
'327,,327,327,327,,,327,327,315,315,327,,315,327,315,,,,,,,327,,,,,,327',
',,315,,,,,,315,,315,,315,315,,315,315,315,,315,315,,,,315,315,172,172',
'315,,172,315,172,,,,,,,315,,,,,,315,,,172,,,,,,172,,172,,172,172,,172',
'172,172,,172,172,,,,172,172,38,38,172,,38,172,38,,,,,,,172,,,,,,172',
',,38,,,,,,38,,38,,38,38,,38,38,38,,38,38,,,,38,38,39,39,38,,39,38,39',
',,,,,,38,,,,,,38,,,39,,,,,,39,,39,,39,39,,39,39,39,,39,39,,,,39,39,40',
'40,39,,40,39,40,,,,,,,39,,,,,,39,,,40,,,,,,40,,40,,40,40,,40,40,40,',
'40,40,,,,40,40,41,41,40,,41,40,41,,,,,,,40,,,,,,40,,,41,,,,,,41,,41',
',41,41,,41,41,41,,41,41,,,,41,41,171,171,41,,171,41,171,,,,,,,41,,,',
',,41,,,171,,,,,,171,,171,,171,171,,171,171,171,,171,171,,,,171,171,170',
'170,171,,170,171,170,,,,,,,171,,,,,,171,,,170,,,,,,170,,170,,170,170',
',170,170,170,,170,170,,,,170,170,297,297,170,,297,170,297,,,,,,,170',
',,,,,170,,,297,,,,,,297,,297,,297,297,,297,297,297,,297,297,,,,297,297',
'167,167,297,,167,297,167,,97,,,,,297,95,,,,,297,,97,167,97,,97,,95,167',
'95,167,95,167,167,,167,167,167,,167,167,,,,167,167,97,,167,47,47,167',
'95,47,47,47,,,,167,,,,,,167,,,,,97,47,,,,,95,47,,47,,47,47,,47,47,47',
',47,47,,,,47,47,210,210,47,,210,47,210,210,,,,,,47,,,,,,47,,,210,,,',
',,210,,210,,210,210,,210,210,210,,210,210,210,,,210,210,52,52,210,,52',
'210,52,,,,,,,210,,,,,,210,,,52,,,,,,52,,52,,52,52,,52,52,52,,52,52,',
',,52,52,112,112,52,,112,52,112,,,,,,,52,,,,,,52,,,112,,,,,,112,,112',
',112,112,,112,112,112,,112,112,,,,112,112,61,61,112,,61,112,61,,,,,',
',112,,,,,,112,,,61,,,,,,61,,61,,61,61,,61,61,61,,61,61,61,,,61,61,286',
'286,61,,286,61,286,286,,,,,,61,,,,,,61,,,286,,,,,,286,,286,,286,286',
',286,286,286,,286,286,286,,,286,286,63,63,286,,63,286,63,,,,,,,286,',
',,,,286,,,63,,,,,,63,,63,,63,63,,63,63,63,,63,63,63,,,63,63,64,64,63',
',64,63,64,,,,,,,63,,,,,,63,,,64,,,,,,64,,64,,64,64,,64,64,64,,64,64',
'64,,,64,64,65,65,64,,65,64,65,,,,,,,64,,,,,,64,,,65,,,,,,65,,65,,65',
'65,,65,65,65,,65,65,65,,,65,65,66,66,65,,66,65,66,,,,,,,65,,,,,,65,',
',66,,,,,,66,,66,,66,66,,66,66,66,,66,66,66,,,66,66,67,67,66,,67,66,67',
',,,,,,66,,,,,,66,,,67,,,,,,67,,67,,67,67,,67,67,67,,67,67,67,,,67,67',
'68,68,67,,68,67,68,,,,,,,67,,,,,,67,,,68,,,,,,68,,68,,68,68,,68,68,68',
',68,68,,,,68,68,69,69,68,,69,68,69,,,,,,,68,,,,,,68,,,69,,,,,,69,,69',
',69,69,,69,69,69,,69,69,,,,69,69,285,285,69,,285,69,285,285,,,,,,69',
',,,,,69,,,285,,,,,,285,,285,,285,285,,285,285,285,,285,285,285,,,285',
'285,275,275,285,,275,285,275,275,,,,,,285,,,,,,285,,,275,,,,,,275,,275',
',275,275,,275,275,275,,275,275,,,,275,275,347,347,275,,347,275,347,347',
',,,,,275,,,,,,275,,,347,,,,,,347,,347,,347,347,,347,347,347,,347,347',
'347,,,347,347,73,73,347,,73,347,73,,,,,,,347,,,,,,347,,,73,,,,,,73,',
'73,,73,73,,73,73,73,,73,73,,,,73,73,74,74,73,,74,73,74,,,,,,,73,,,,',
',73,,,74,,,,,,74,,74,,74,74,,74,74,74,,74,74,,,,74,74,75,75,74,,75,74',
'75,,,,,,,74,,,,,,74,,,75,,,,,,75,,75,,75,75,,75,75,75,,75,75,,,,75,75',
'76,76,75,,76,75,76,,,,,,,75,,,,,,75,,,76,,,,,,76,,76,,76,76,,76,76,76',
',76,76,,,,76,76,77,77,76,,77,76,77,,,,,,,76,,,,,,76,,,77,,,,,,77,,77',
',77,77,,77,77,77,,77,77,,,,77,77,78,78,77,,78,77,78,,,,,,,77,,,,,,77',
',,78,,,,,,78,,78,,78,78,,78,78,78,,78,78,,,,78,78,79,79,78,,79,78,79',
',,,,,,78,,,,,,78,,,79,,,,,,79,,79,,79,79,,79,79,79,,79,79,,,,79,79,80',
'80,79,,80,79,80,,,,,,,79,,,,,,79,,,80,,,,,,80,,80,,80,80,,80,80,80,',
'80,80,,,,80,80,81,81,80,,81,80,81,,,,,,,80,,,,,,80,,,81,,,,,,81,,81',
',81,81,,81,81,81,,81,81,,,,81,81,82,82,81,,82,81,82,,,,,,,81,,,,,,81',
',,82,,,,,,82,,82,,82,82,,82,82,82,,82,82,,,,82,82,83,83,82,,83,82,83',
',,,,,,82,,,,,,82,,,83,,,,,,83,,83,,83,83,,83,83,83,,83,83,,,,83,83,84',
'84,83,,84,83,84,,,,,,,83,,,,,,83,,,84,,,,,,84,,84,,84,84,,84,84,84,',
'84,84,,,,84,84,85,85,84,,85,84,85,,,,,,,84,,,,,,84,,,85,,,,,,85,,85',
',85,85,,85,85,85,,85,85,,,,85,85,86,86,85,,86,85,86,,,,,,,85,,,,,,85',
',,86,,,,,,86,,86,,86,86,,86,86,86,,86,86,,,,86,86,87,87,86,,87,86,87',
',,,,,,86,,,,,,86,,,87,,,,,,87,,87,,87,87,,87,87,87,,87,87,,,,87,87,88',
'88,87,,88,87,88,,,,,,,87,,,,,,87,,,88,,,,,,88,,88,,88,88,,88,88,88,',
'88,88,,,,88,88,0,0,88,,0,88,0,,,,,,,88,,,,,,88,,,0,,,,,,0,,0,,0,0,,0',
'0,0,,0,0,0,,,0,0,268,268,0,,268,0,268,,,,,,,0,,,,,,0,,,268,,,,,,268',
',268,,268,268,,268,268,268,,268,268,,,,268,268,91,91,268,,91,268,91',
',,,,,,268,,,,,,268,,,91,,,,,,91,91,91,91,91,91,91,91,91,91,,91,91,,',
',91,91,91,91,91,263,263,91,,263,,263,263,,,91,,,,,91,91,,,,,,263,,,',
',,263,,263,,263,263,,263,263,263,,263,263,263,,,263,263,93,93,263,,93',
'263,93,,,,,,,263,,,,,,263,,,93,,,,,,93,,93,,93,93,,93,93,93,,93,93,',
',,93,93,94,94,93,,94,93,94,,,,,,,93,,,,,,93,,,94,,,,,,94,,94,,94,94',
',94,94,94,,94,94,,,,94,94,212,212,94,,212,94,212,,,,,,,94,,,,,,94,,',
'212,,,,,,212,,212,,212,212,,212,212,212,,212,212,,,,212,212,259,259',
'212,,259,212,259,,,,,,,212,,,,,,212,,,259,,,,,,259,,259,,259,259,,259',
'259,259,,259,259,,,,259,259,213,213,259,,213,259,213,,,,,,,259,,,,,',
'259,,,213,,,,,,213,213,213,213,213,213,213,213,213,213,,213,213,,,,213',
'213,213,213,213,223,223,213,,223,223,223,,,,213,,,,,213,213,,,,,,223',
',,,,,223,,223,,223,223,,223,223,223,,223,223,,,,223,223,99,99,223,,99',
'223,99,,,,,,,223,,,,,,223,,,99,99,,,,,99,,99,,99,99,,99,99,99,,99,99',
',,,99,99,245,245,99,,245,99,245,,,,,,,99,,,,,,99,,,245,,,,,,245,,245',
',245,245,,245,245,245,,245,245,,,,245,245,244,244,245,,244,245,244,',
',,,,,245,,,,,,245,,,244,,,,,,244,,244,,244,244,,244,244,244,,244,244',
',,,244,244,241,241,244,,241,244,241,,,,,,,244,,,,,,244,,,241,,,,,,241',
',241,,241,241,,241,241,241,,241,241,,,,241,241,106,106,241,,106,241',
'106,,,,,,,241,,,,,,241,,,106,106,,,,,106,,106,,106,106,,106,106,106',
',106,106,,,,106,106,227,227,106,,227,106,227,,,,,,,106,,,,,,106,,,227',
',,,,,227,,227,,227,227,,227,227,227,,227,227,,,,227,227,232,232,227',
',232,227,232,,,,,,,227,,,,,,227,,,232,,,,,,232,,232,,232,232,,232,232',
'232,,232,232,,,,232,232,234,234,232,,234,232,234,,,,,,,232,,,,,,232',
',,234,,,,,,234,,234,,234,234,,234,234,234,,234,234,,,,234,234,235,235',
'234,,235,234,235,,,,,,,234,,,,,,234,,,235,,,,,,235,,235,,235,235,,235',
'235,235,,235,235,,,,235,235,211,211,235,,211,235,211,211,,,,,142,235',
',,,,,235,,,211,,,142,,142,211,142,211,,211,211,,211,211,211,,211,211',
'211,,,211,211,,,211,,142,211,,,,,,,111,211,111,,,,,211,,111,111,111',
'111,111,,111,142,111,,,111,111,111,111,,,,,,,,,,,,,,,111,,,,111,111',
',,111,111,111,111,111,111,,111,111,110,,110,,,111,,111,,110,110,110',
'110,110,,110,,110,,,110,110,110,110,,,,,,,,,,,,,,,110,,,,110,110,,,110',
'110,110,110,110,110,,110,110,109,,109,,,110,,110,,109,109,109,109,109',
',109,,109,,,109,109,109,109,,,,,,,,,,,,,,,109,,,,109,109,,,109,109,109',
'109,109,109,,109,109,193,,,,,109,,109,,193,193,193,193,193,,193,,193',
',,193,193,193,193,,,,,,,,,,,,,,,193,,,,193,193,,,193,193,193,193,193',
'193,,193,193,107,,107,,,193,,193,,107,107,107,107,107,,107,,107,,,107',
'107,107,107,,,,,,,,,,,,,,,107,,,,107,107,,,107,107,107,107,107,107,',
'107,107,98,,,,,107,,107,,98,98,98,98,98,,98,,98,,98,98,98,98,98,,,,',
',,,,,,,,,,98,,,,98,98,,,98,98,98,98,98,98,,98,98,131,,,,,98,,98,,131',
'131,131,131,131,,131,,131,,,131,131,131,131,,,,,,,,,,,,,,,131,,,,131',
'131,,,131,131,131,131,131,131,,131,131,289,,,,,131,,131,,289,289,289',
'289,289,,289,,289,,,289,289,289,289,,,,,,,,,,,,,,,289,,,,289,289,,,289',
'289,289,289,289,289,,289,289,293,,,,,289,,289,,293,293,293,293,293,',
'293,,293,147,,293,293,293,293,,,,,,,,147,,147,,147,,,293,,,,293,293',
'148,,293,293,293,293,293,293,,293,293,,147,148,,148,293,148,293,,149',
',147,147,,,,147,147,,150,,,149,147,149,147,149,148,,,,,150,,150,,150',
'148,148,,,,148,148,,,,149,,148,,148,,,,,,150,,,,,149,149,,151,,,,149',
',149,150,150,151,151,151,151,151,150,151,150,151,152,,151,151,151,151',
',,,,,,,152,,152,,152,,,151,,,,151,151,153,,151,151,151,151,151,151,',
'151,151,,152,153,,153,151,153,151,,152,152,152,152,,,154,152,152,,,',
',,152,,152,,153,154,,154,,154,155,,153,153,153,153,,,,153,153,,,155',
',155,153,155,153,,154,,,,,,,,154,154,154,154,154,154,,154,154,,155,',
',,154,,154,,155,155,155,155,155,155,156,155,155,,,,,,155,,155,,156,156',
',156,,156,,157,156,,,,,,,,,,,157,157,,157,,157,,156,157,,,,,,,156,156',
'156,156,156,156,,156,156,,,157,,,156,,156,158,,157,157,157,157,157,157',
',157,157,,158,158,,158,157,158,157,159,158,,,,,,,,,,,159,159,,159,,159',
',158,159,,,,,,,158,158,158,158,158,158,,158,158,,,159,,,158,,158,160',
',159,159,159,159,159,159,,159,159,160,160,160,,160,159,160,159,,160',
'160,160,160,,,,,,,,,,,,,,,160,,,,,,161,,160,160,160,160,160,160,,160',
'160,161,161,161,,161,160,161,160,,161,161,161,161,,,,,,,,,,,,,,,161',
',,,,161,,,161,161,161,161,161,161,,161,161,162,,,,,161,,161,,162,162',
'162,162,162,,162,,162,,,162,162,162,162,,,,,,,,,,,,,,,162,,,,162,162',
',,162,162,162,162,162,162,,162,162,163,,,,,162,,162,,163,163,163,163',
'163,,163,,163,,,163,163,163,163,,,,,,,,,,,,,,,163,,,,163,163,,,163,163',
'163,163,163,163,,163,163,,164,,,,163,164,163,,,164,164,164,164,164,',
'164,,164,,,164,164,164,164,,,,,,,,,,,,,,,164,,,,164,164,,,164,164,164',
'164,164,164,,164,164,295,,,,,164,,164,,295,295,295,295,295,,295,,295',
',,295,295,295,295,,,,,,,,,,,,,,,295,,,,295,295,,,295,295,295,295,295',
'295,,295,295,169,,,,,295,,295,,169,169,169,169,169,169,169,,169,,,169',
'169,169,169,,,,,,,,,,,,,,,169,,,,169,169,,,169,169,169,169,169,169,',
'169,169,303,,,,,169,,169,,303,303,303,303,303,,303,,303,,,303,303,303',
'303,,,,,,,,,,,,,,,303,,,,303,303,,,303,303,303,303,303,303,,303,303',
'304,,,,,303,,303,,304,304,304,304,304,,304,,304,,,304,304,304,304,,',
',,,,,,,,,,,,304,,,,304,304,,,304,304,304,304,304,304,,304,304,312,,',
',,304,,304,,312,312,312,312,312,,312,,312,,,312,312,312,312,,,,,,,,',
',,,,,,312,,,,312,312,,,312,312,312,312,312,312,,312,312,10,,10,,,312',
',312,,10,10,10,10,10,,10,,10,,,10,10,10,10,,,,,,,,,,,,,,,10,,,,10,10',
',,10,10,10,10,10,10,,10,10,124,,,,,10,,10,,124,124,124,124,124,,124',
',124,,,124,124,124,124,,,,,,,,,,,,,,,124,,,,124,124,,,124,124,124,124',
'124,124,,124,124,,,,,,124,,124,192,192,192,192,,192,192,192,192,192',
',192,192,,,,,,192,192,192,243,243,243,243,,243,243,243,243,243,,243',
'243,,,192,192,,243,243,243,238,238,238,238,,238,238,238,238,238,,238',
'238,,,243,243,,238,238,238,,,,,,,,,,,,,,,,238,238' ]
        racc_action_check = arr = ::Array.new(4897, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  2393,   256,   nil,   nil,    90,   243,   nil,    99,   nil,   nil,
  4693,   274,   320,   366,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   224,   -43,   214,   550,   596,
   642,   688,    -1,    -2,   111,    60,   nil,   921,    64,   nil,
   nil,   nil,  1013,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   208,  1105,   195,  1197,  1243,  1289,  1335,  1381,  1427,  1473,
   115,    10,    44,  1657,  1703,  1749,  1795,  1841,  1887,  1933,
  1979,  2025,  2071,  2117,  2163,  2209,  2255,  2301,  2347,    -2,
   142,  2485,   159,  2580,  2626,   882,    80,   876,  3602,  2859,
   nil,   nil,   nil,   145,    72,    38,  3043,  3547,   nil,  3437,
  3382,  3327,  1059,    46,   nil,   nil,   nil,   102,    -7,   nil,
   nil,   nil,   nil,   nil,  4748,    88,   nil,   140,   nil,   nil,
   191,  3657,   nil,   143,   nil,   193,   nil,   nil,   nil,   nil,
   nil,   101,  3281,   nil,   nil,   nil,   nil,  3785,  3811,  3831,
  3841,  3887,  3905,  3931,  3957,  3975,  4027,  4046,  4090,  4109,
  4153,  4197,  4252,  4307,  4363,   nil,   nil,   872,   nil,  4473,
   780,   734,   504,   173,   242,   nil,   nil,     6,   nil,     3,
    -8,    71,    77,    62,    -9,     9,   nil,   nil,   nil,   nil,
   nil,   nil,  4787,  3492,   195,   nil,   217,   nil,   215,    65,
   214,   nil,   nil,   228,   nil,   198,   nil,   194,    -4,   nil,
   967,  3273,  2672,  2764,   156,   159,   nil,   -15,   184,   151,
    16,   nil,    14,  2813,   nil,   nil,    22,  3089,   nil,   nil,
   nil,   nil,  3135,   nil,  3181,  3227,   206,   nil,  4829,   nil,
    54,  2997,   100,  4808,  2951,  2905,   146,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  2718,
   140,   nil,   nil,  2534,   160,   nil,   103,   146,  2439,   nil,
   178,   122,   184,   163,     3,  1565,   nil,   158,   187,   191,
   193,   nil,    45,   nil,   192,  1519,  1151,   nil,   nil,  3712,
   nil,   nil,   nil,  3767,   nil,  4418,   202,   826,   203,   nil,
   nil,   nil,   nil,  4528,  4583,   217,    19,   224,   nil,   nil,
   nil,   nil,  4638,   -22,   nil,   458,   233,   211,   nil,   236,
   237,   nil,   nil,   nil,   237,   238,   nil,   412,   nil,   nil,
   nil,   225,   242,   nil,   244,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   182,   nil,   136,  1611,   nil,   nil,
   248,   nil,   nil,   nil,   nil,   250,   nil,   252,   nil,   255,
   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -209,  -210,    -1,    -2,    -3,    -4,    -7,    -9,   -10,   -15,
  -109,  -210,  -210,  -210,   -43,   -44,   -45,   -46,   -47,   -48,
   -49,   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,
   -59,   -60,   -61,   -62,   -63,   -68,   -69,   -73,  -210,  -210,
  -210,  -210,  -210,  -119,  -210,  -210,  -164,  -210,  -210,  -174,
  -175,  -176,  -210,  -178,  -185,  -186,  -187,  -188,  -189,  -190,
  -210,  -210,    -6,  -210,  -210,  -210,  -210,  -210,  -210,  -210,
  -210,  -210,  -210,  -210,  -210,  -210,  -210,  -210,  -210,  -210,
  -210,  -210,  -210,  -210,  -210,  -210,  -210,  -210,  -210,  -210,
  -210,  -127,  -122,  -209,  -209,   -27,  -210,   -34,  -210,  -210,
   -70,   -75,   -76,  -209,  -210,  -210,  -210,  -210,   -86,  -210,
  -210,  -210,  -210,  -209,  -153,  -154,  -120,  -209,  -209,  -145,
  -147,  -148,  -149,  -150,   -41,  -210,  -167,  -210,  -170,  -171,
  -210,  -182,  -177,  -210,   365,    -5,    -8,   -11,   -12,   -13,
   -14,  -210,   -17,   -18,  -162,  -163,   -19,   -20,   -21,   -22,
   -23,   -24,   -25,   -26,   -28,   -29,   -30,   -31,   -32,   -33,
   -35,   -36,   -37,   -38,  -210,   -39,  -104,  -210,   -74,  -210,
  -202,  -208,  -196,  -193,  -191,  -117,  -128,  -185,  -131,  -189,
  -210,  -199,  -197,  -205,  -187,  -188,  -195,  -200,  -201,  -203,
  -204,  -206,  -127,  -126,  -210,  -125,  -210,   -40,  -191,   -65,
  -210,   -80,   -81,  -210,   -84,  -191,  -158,  -161,  -210,   -72,
  -210,  -210,  -210,  -127,  -193,  -209,  -155,  -210,  -210,  -210,
  -210,  -151,  -210,  -210,  -165,  -168,  -210,  -210,  -179,  -180,
  -181,  -183,  -210,   -16,  -210,  -210,  -191,  -106,  -127,  -116,
  -210,  -194,  -210,  -192,  -210,  -210,  -191,  -130,  -132,  -196,
  -197,  -198,  -199,  -202,  -205,  -207,  -208,  -123,  -124,  -192,
  -210,   -67,   -77,  -210,  -210,   -83,  -210,  -192,  -210,   -71,
  -210,   -89,  -210,   -95,  -210,  -210,   -99,  -193,  -191,  -210,
  -210,  -139,  -210,  -156,  -191,  -210,  -210,  -146,  -152,   -42,
  -166,  -169,  -172,  -173,  -184,  -108,  -210,  -192,  -191,  -112,
  -118,  -113,  -129,  -133,  -134,  -210,   -64,  -210,   -79,   -82,
   -85,  -159,  -160,   -89,   -88,  -210,  -210,   -95,   -94,  -210,
  -210,  -103,   -98,  -100,  -210,  -210,  -114,  -210,  -140,  -141,
  -142,  -210,  -210,  -136,  -210,  -144,  -105,  -107,  -115,  -121,
   -66,   -78,   -87,   -90,  -210,   -93,  -210,  -210,  -110,  -111,
  -210,  -138,  -157,  -135,  -143,  -210,   -92,  -210,   -97,  -210,
  -102,  -137,   -91,   -96,  -101 ]

racc_goto_table = [
     2,   117,   100,    95,    97,    98,     3,   132,   129,   166,
   174,   240,   130,   205,   314,   318,   123,   173,   215,   276,
   143,   146,   218,   137,   138,   139,   140,   242,   194,   196,
   107,   109,   110,   111,   145,   145,   125,    62,   214,   124,
   320,   144,   144,   287,   131,   288,   236,   275,   343,   300,
   238,   260,   279,   262,   302,   200,   342,   141,   266,   345,
   124,   142,   203,   280,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   323,   169,   328,   193,   193,   237,   198,   296,
   219,   124,   165,   311,   135,   208,   127,   136,   124,   305,
     1,   231,   232,   230,   169,   nil,   nil,   nil,   nil,   201,
   nil,   246,   nil,   nil,   nil,   324,   nil,   nil,   nil,   216,
   nil,   nil,   nil,   216,   221,   284,   nil,   nil,   nil,   nil,
   nil,   325,   278,   nil,   nil,   nil,   nil,   331,   117,   277,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   338,   nil,   nil,   123,   nil,   nil,   298,   nil,   164,
   nil,   nil,   107,   109,   110,   261,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   292,   294,   nil,   nil,
   130,   123,   nil,   123,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   264,   124,   169,   nil,   nil,   nil,   nil,
   270,   272,   nil,   nil,   nil,   289,   nil,   337,   nil,   293,
   nil,   281,   nil,   nil,   131,   nil,   289,   295,   nil,   nil,
   nil,   nil,   nil,   169,   nil,   nil,   303,   304,   nil,   329,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   289,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   312,   nil,   nil,   307,   nil,   nil,   nil,   124,   nil,   nil,
   nil,   nil,   340,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   332,   334,   nil,   nil,   164,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   107,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   350,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   355,   nil,   357,   359 ]

racc_goto_check = [
     2,    65,    37,     9,     9,     9,     3,    78,    74,    52,
    57,    56,    31,    45,    47,    48,    30,    55,    66,    50,
    12,    12,    66,     7,     7,     7,     7,    36,    61,    61,
     9,     9,     9,     9,    31,    31,    11,     5,    55,     9,
    51,    30,    30,    71,     9,    71,    53,    49,    46,    58,
    59,    36,    56,    44,    62,    43,    47,    11,    36,    48,
     9,     9,    42,    67,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,    50,     9,    68,     9,     9,    52,    11,    36,
    70,     9,    13,    72,     5,    11,    73,     6,     9,    36,
     1,    79,    80,    82,     9,   nil,   nil,   nil,   nil,     3,
   nil,    57,   nil,   nil,   nil,    56,   nil,   nil,   nil,     3,
   nil,   nil,   nil,     3,     3,    45,   nil,   nil,   nil,   nil,
   nil,    36,    57,   nil,   nil,   nil,   nil,    36,    65,    55,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    36,   nil,   nil,    30,   nil,   nil,    57,   nil,     9,
   nil,   nil,     9,     9,     9,    37,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    74,    78,   nil,   nil,
    31,    30,   nil,    30,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,     9,     9,   nil,   nil,   nil,   nil,
     2,     2,   nil,   nil,   nil,     9,   nil,    52,   nil,     9,
   nil,     3,   nil,   nil,     9,   nil,     9,     9,   nil,   nil,
   nil,   nil,   nil,     9,   nil,   nil,     9,     9,   nil,    65,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     9,   nil,   nil,     2,   nil,   nil,   nil,     9,   nil,   nil,
   nil,   nil,    37,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,     2,   nil,   nil,     9,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   100,     0,     6,   nil,    33,    34,   -41,   nil,    -8,
   nil,   -11,   -50,     3,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -29,   -36,   nil,   nil,   nil,   nil,  -147,   -34,   nil,   nil,
   nil,   nil,   -42,   -48,  -147,   -92,  -267,  -257,  -258,  -165,
  -193,  -234,   -80,  -121,   nil,   -74,  -162,   -81,  -192,  -119,
   nil,   -65,  -189,   nil,   nil,   -43,   -95,  -152,  -198,   nil,
   -28,  -177,  -174,    48,   -40,   nil,   nil,   nil,   -45,   -32,
   -31,   nil,   -30 ]

racc_goto_default = [
   nil,   nil,   nil,   195,     4,     5,     6,     7,     8,    10,
     9,   274,   nil,   nil,    14,    35,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,   nil,   nil,    36,    37,
   101,   102,   103,   nil,   nil,   nil,   108,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    41,   nil,   nil,   nil,   175,   nil,
    92,   nil,   176,   180,   178,   113,   nil,   nil,   nil,   118,
   nil,   119,   206,   nil,   nil,    49,    50,    52,   nil,   nil,
   nil,   133,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 78, :_reduce_1,
  1, 78, :_reduce_none,
  1, 79, :_reduce_3,
  1, 81, :_reduce_4,
  3, 81, :_reduce_5,
  2, 81, :_reduce_6,
  1, 82, :_reduce_7,
  3, 82, :_reduce_8,
  1, 83, :_reduce_none,
  1, 84, :_reduce_10,
  3, 84, :_reduce_11,
  3, 84, :_reduce_12,
  3, 84, :_reduce_13,
  3, 84, :_reduce_14,
  1, 86, :_reduce_none,
  4, 86, :_reduce_16,
  3, 86, :_reduce_17,
  3, 86, :_reduce_18,
  3, 86, :_reduce_19,
  3, 86, :_reduce_20,
  3, 86, :_reduce_21,
  3, 86, :_reduce_22,
  3, 86, :_reduce_23,
  3, 86, :_reduce_24,
  3, 86, :_reduce_25,
  3, 86, :_reduce_26,
  2, 86, :_reduce_27,
  3, 86, :_reduce_28,
  3, 86, :_reduce_29,
  3, 86, :_reduce_30,
  3, 86, :_reduce_31,
  3, 86, :_reduce_32,
  3, 86, :_reduce_33,
  2, 86, :_reduce_34,
  3, 86, :_reduce_35,
  3, 86, :_reduce_36,
  3, 86, :_reduce_37,
  3, 86, :_reduce_38,
  3, 86, :_reduce_39,
  3, 86, :_reduce_40,
  1, 88, :_reduce_41,
  3, 88, :_reduce_42,
  1, 87, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 108, :_reduce_62,
  1, 108, :_reduce_63,
  5, 91, :_reduce_64,
  3, 91, :_reduce_65,
  6, 91, :_reduce_66,
  4, 91, :_reduce_67,
  1, 91, :_reduce_68,
  1, 95, :_reduce_69,
  2, 95, :_reduce_70,
  4, 115, :_reduce_71,
  3, 115, :_reduce_72,
  1, 115, :_reduce_73,
  3, 116, :_reduce_74,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  3, 117, :_reduce_77,
  3, 121, :_reduce_78,
  2, 121, :_reduce_79,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  4, 118, :_reduce_82,
  3, 118, :_reduce_83,
  2, 119, :_reduce_84,
  4, 119, :_reduce_85,
  2, 98, :_reduce_86,
  5, 123, :_reduce_87,
  4, 123, :_reduce_88,
  0, 124, :_reduce_none,
  2, 124, :_reduce_90,
  4, 124, :_reduce_91,
  3, 124, :_reduce_92,
  6, 99, :_reduce_93,
  5, 99, :_reduce_94,
  0, 125, :_reduce_none,
  4, 125, :_reduce_96,
  3, 125, :_reduce_97,
  5, 97, :_reduce_98,
  1, 126, :_reduce_99,
  2, 126, :_reduce_100,
  5, 127, :_reduce_101,
  4, 127, :_reduce_102,
  1, 128, :_reduce_103,
  1, 90, :_reduce_none,
  4, 90, :_reduce_105,
  1, 130, :_reduce_106,
  3, 130, :_reduce_107,
  3, 129, :_reduce_108,
  1, 85, :_reduce_109,
  6, 85, :_reduce_110,
  6, 85, :_reduce_111,
  5, 85, :_reduce_112,
  5, 85, :_reduce_113,
  5, 85, :_reduce_114,
  4, 135, :_reduce_115,
  1, 136, :_reduce_116,
  1, 132, :_reduce_117,
  3, 132, :_reduce_118,
  1, 131, :_reduce_119,
  2, 131, :_reduce_120,
  6, 96, :_reduce_121,
  2, 96, :_reduce_122,
  3, 137, :_reduce_123,
  3, 137, :_reduce_124,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  0, 134, :_reduce_127,
  1, 134, :_reduce_128,
  3, 134, :_reduce_129,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  3, 139, :_reduce_133,
  3, 139, :_reduce_134,
  6, 100, :_reduce_135,
  5, 100, :_reduce_136,
  7, 101, :_reduce_137,
  6, 101, :_reduce_138,
  1, 144, :_reduce_none,
  2, 144, :_reduce_140,
  1, 145, :_reduce_none,
  1, 145, :_reduce_none,
  6, 102, :_reduce_143,
  5, 102, :_reduce_144,
  1, 146, :_reduce_145,
  3, 146, :_reduce_146,
  1, 148, :_reduce_147,
  1, 148, :_reduce_148,
  1, 148, :_reduce_149,
  1, 148, :_reduce_none,
  1, 147, :_reduce_none,
  2, 147, :_reduce_152,
  1, 142, :_reduce_153,
  1, 142, :_reduce_154,
  1, 143, :_reduce_155,
  2, 143, :_reduce_156,
  4, 143, :_reduce_157,
  1, 122, :_reduce_158,
  3, 122, :_reduce_159,
  3, 149, :_reduce_160,
  1, 149, :_reduce_161,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 94, :_reduce_164,
  3, 103, :_reduce_165,
  4, 103, :_reduce_166,
  2, 103, :_reduce_167,
  3, 106, :_reduce_168,
  4, 106, :_reduce_169,
  2, 106, :_reduce_170,
  1, 150, :_reduce_171,
  3, 150, :_reduce_172,
  3, 151, :_reduce_173,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 152, :_reduce_176,
  2, 153, :_reduce_177,
  1, 154, :_reduce_178,
  1, 156, :_reduce_179,
  1, 157, :_reduce_180,
  2, 155, :_reduce_181,
  1, 158, :_reduce_182,
  1, 159, :_reduce_183,
  2, 159, :_reduce_184,
  1, 111, :_reduce_185,
  1, 109, :_reduce_186,
  1, 110, :_reduce_187,
  1, 105, :_reduce_188,
  1, 104, :_reduce_189,
  1, 107, :_reduce_190,
  0, 113, :_reduce_none,
  1, 113, :_reduce_192,
  0, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 80, :_reduce_209 ]

racc_reduce_n = 210

racc_shift_n = 365

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :DEFINE => 32,
  :ELSIF => 33,
  :VARIABLE => 34,
  :CLASS => 35,
  :INHERITS => 36,
  :NODE => 37,
  :BOOLEAN => 38,
  :NAME => 39,
  :SEMIC => 40,
  :CASE => 41,
  :DEFAULT => 42,
  :AT => 43,
  :LCOLLECT => 44,
  :RCOLLECT => 45,
  :CLASSREF => 46,
  :NOT => 47,
  :OR => 48,
  :AND => 49,
  :UNDEF => 50,
  :PARROW => 51,
  :PLUS => 52,
  :MINUS => 53,
  :TIMES => 54,
  :DIV => 55,
  :LSHIFT => 56,
  :RSHIFT => 57,
  :UMINUS => 58,
  :MATCH => 59,
  :NOMATCH => 60,
  :REGEX => 61,
  :IN_EDGE => 62,
  :OUT_EDGE => 63,
  :IN_EDGE_SUB => 64,
  :OUT_EDGE_SUB => 65,
  :IN => 66,
  :UNLESS => 67,
  :MODULO => 68,
  :PIPE => 69,
  :LAMBDA => 70,
  :SELBRACE => 71,
  :LOW => 72,
  :HIGH => 73,
  :CALL => 74,
  :TITLE_COLON => 75,
  :CASE_COLON => 76 }

racc_nt_base = 77

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "MODULO",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "LOW",
  "HIGH",
  "CALL",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "match_rvalue",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_j8",
  "lambda_ruby",
  "lambda_parameter_list",
  "optional_farrow",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 57)
  def _reduce_1(val, _values, result)
     result = Factory.block_or_expression(*val[0]) 
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'egrammar.ra', 63)
  def _reduce_3(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_4(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_5(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 71)
  def _reduce_6(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 75)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 76)
  def _reduce_8(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_11(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 84)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 85)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 86)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_16(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_17(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_18(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_19(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_20(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_21(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_22(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_23(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_24(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_25(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_26(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_27(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_28(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_29(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_30(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_31(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_32(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_33(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_34(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_35(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_36(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_37(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_38(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_39(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_40(val, _values, result)
     result = val[1].paren()          ;                    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_41(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_42(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

module_eval(<<'.,.,', 'egrammar.ra', 156)
  def _reduce_62(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 157)
  def _reduce_63(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 166)
  def _reduce_64(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 170)
  def _reduce_65(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 174)
  def _reduce_66(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 179)
  def _reduce_67(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 183)
  def _reduce_68(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_69(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_70(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 192)
  def _reduce_71(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 193)
  def _reduce_72(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_73(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_74(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

# reduce 75 omitted

# reduce 76 omitted

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_77(val, _values, result)
          result = Factory.LAMBDA(val[0], val[2])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_78(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_79(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 80 omitted

# reduce 81 omitted

module_eval(<<'.,.,', 'egrammar.ra', 230)
  def _reduce_82(val, _values, result)
          result = Factory.LAMBDA(val[1], val[2])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 234)
  def _reduce_83(val, _values, result)
          result = Factory.LAMBDA(val[1], nil)
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 240)
  def _reduce_84(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 241)
  def _reduce_85(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 251)
  def _reduce_86(val, _values, result)
          result = val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 257)
  def _reduce_87(val, _values, result)
            @lexer.commentpop
        result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 262)
  def _reduce_88(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'egrammar.ra', 269)
  def _reduce_90(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 271)
  def _reduce_91(val, _values, result)
            @lexer.commentpop
        result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 276)
  def _reduce_92(val, _values, result)
            @lexer.commentpop
  	    result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 286)
  def _reduce_93(val, _values, result)
          @lexer.commentpop
      result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 291)
  def _reduce_94(val, _values, result)
          @lexer.commentpop
      result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'egrammar.ra', 302)
  def _reduce_96(val, _values, result)
            @lexer.commentpop
        result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 307)
  def _reduce_97(val, _values, result)
            @lexer.commentpop
    	  result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 316)
  def _reduce_98(val, _values, result)
          @lexer.commentpop
      result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 323)
  def _reduce_99(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 324)
  def _reduce_100(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 329)
  def _reduce_101(val, _values, result)
            @lexer.commentpop
        result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 334)
  def _reduce_102(val, _values, result)
            @lexer.commentpop
        result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 339)
  def _reduce_103(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 104 omitted

module_eval(<<'.,.,', 'egrammar.ra', 350)
  def _reduce_105(val, _values, result)
            @lexer.commentpop
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 356)
  def _reduce_106(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 357)
  def _reduce_107(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 362)
  def _reduce_108(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 378)
  def _reduce_109(val, _values, result)
      	  result = val[0]
  	
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 381)
  def _reduce_110(val, _values, result)
      	  result = case Factory.resource_shape(val[1])
  	  when :resource, :class
  	    tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
  	    tmp.form = val[0]
  	    tmp
	  when :defaults
        error "A resource default can not be virtual or exported"
  	  when :override
        error "A resource override can not be virtual or exported"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 396)
  def _reduce_111(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        error "Defaults are not virtualizable"
      when :defaults
        error "Defaults are not virtualizable"
      when :override
        error "Defaults are not virtualizable"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 408)
  def _reduce_112(val, _values, result)
      	  result = case Factory.resource_shape(val[0])
  	  when :resource, :class
  	    Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
	  when :defaults
        error "A resource default can not specify a resource name"
  	  when :override
        error "A resource override does not allow override of name of resource"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 421)
  def _reduce_113(val, _values, result)
      	  result = case Factory.resource_shape(val[0])
  	  when :resource, :class
	    # This catches deprecated syntax.
	    error "All resource specifications require names"
	  when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
  	  when :override
  	    # This was only done for override in original - TODO shuld it be here at all
        @lexer.commentpop
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]  	  
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 437)
  def _reduce_114(val, _values, result)
      	    result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
  	    loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 442)
  def _reduce_115(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_116(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 447)
  def _reduce_117(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 448)
  def _reduce_118(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 453)
  def _reduce_119(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 454)
  def _reduce_120(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 466)
  def _reduce_121(val, _values, result)
          @lexer.commentpop
      result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 471)
  def _reduce_122(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 476)
  def _reduce_123(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 477)
  def _reduce_124(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 125 omitted

# reduce 126 omitted

module_eval(<<'.,.,', 'egrammar.ra', 492)
  def _reduce_127(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 493)
  def _reduce_128(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 494)
  def _reduce_129(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

module_eval(<<'.,.,', 'egrammar.ra', 510)
  def _reduce_133(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 514)
  def _reduce_134(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 524)
  def _reduce_135(val, _values, result)
          @lexer.commentpop
      result = Factory.DEFINITION(classname(val[1][:value]), val[2], val[4])
      loc result, val[0], val[5]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 530)
  def _reduce_136(val, _values, result)
          @lexer.commentpop
      result = Factory.DEFINITION(classname(val[1][:value]), val[2], nil)
      loc result, val[0], val[4]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 546)
  def _reduce_137(val, _values, result)
          @lexer.commentpop
      @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5])
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 552)
  def _reduce_138(val, _values, result)
          @lexer.commentpop
      @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), nil)
      loc result, val[0], val[5]
      
    result
  end
.,.,

# reduce 139 omitted

module_eval(<<'.,.,', 'egrammar.ra', 561)
  def _reduce_140(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'egrammar.ra', 578)
  def _reduce_143(val, _values, result)
          @lexer.commentpop
      result = Factory.NODE(val[1], val[2], val[4])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_144(val, _values, result)
          @lexer.commentpop
      result = Factory.NODE(val[1], val[2], nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 594)
  def _reduce_145(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 595)
  def _reduce_146(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 599)
  def _reduce_147(val, _values, result)
     result = Factory.fqn(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 600)
  def _reduce_148(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 601)
  def _reduce_149(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 150 omitted

# reduce 151 omitted

module_eval(<<'.,.,', 'egrammar.ra', 607)
  def _reduce_152(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 613)
  def _reduce_153(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 614)
  def _reduce_154(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 619)
  def _reduce_155(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_156(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_157(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 625)
  def _reduce_158(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_159(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 630)
  def _reduce_160(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 631)
  def _reduce_161(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 162 omitted

# reduce 163 omitted

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_164(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_165(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_166(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_167(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_168(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_169(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_170(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 661)
  def _reduce_171(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_172(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_173(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 174 omitted

# reduce 175 omitted

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_176(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_177(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 673)
  def _reduce_178(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_179(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_180(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_181(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_182(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_183(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_184(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_185(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 684)
  def _reduce_186(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 685)
  def _reduce_187(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 686)
  def _reduce_188(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_189(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_190(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 191 omitted

module_eval(<<'.,.,', 'egrammar.ra', 707)
  def _reduce_192(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

module_eval(<<'.,.,', 'egrammar.ra', 730)
  def _reduce_209(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

        end   # class Parser
        end   # module Parser
      end   # module Impl
    end   # module Pops
  end   # module Puppet
