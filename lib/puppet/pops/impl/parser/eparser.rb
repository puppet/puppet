#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/pops/impl/parser/lexer'
require 'puppet/pops/impl/model/factory'
#require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Impl
      module Parser
        class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 743)

# Require supporting logic mixed in to the generated Puppet::Pops::Impl::Parser::Parser class
require 'puppet/pops/impl/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'51,53,244,-132,47,220,48,112,234,116,234,234,51,53,-198,298,121,-130',
'121,320,-207,268,13,259,51,53,105,104,38,222,44,290,46,96,115,45,58',
'54,114,40,57,105,245,-132,55,12,51,53,56,54,47,11,48,120,-198,120,122',
'-130,122,59,-207,54,121,300,121,39,51,53,13,167,217,59,207,128,38,59',
'44,59,46,96,282,45,58,54,115,40,57,202,114,207,55,12,51,53,56,224,47',
'11,48,120,223,120,122,54,122,59,115,204,115,217,114,39,114,329,13,115',
'243,51,53,114,38,59,44,59,46,42,285,45,58,54,61,40,57,43,229,228,55',
'12,51,53,56,233,47,11,48,356,234,225,115,192,226,59,114,315,54,314,315',
'39,314,308,13,64,66,65,67,309,38,207,44,168,46,42,312,45,58,54,59,40',
'57,43,105,104,55,12,51,53,56,284,47,11,48,354,105,104,316,318,281,59',
'241,241,243,325,326,39,227,266,13,63,63,134,267,266,38,335,44,262,46',
'42,243,45,58,54,296,40,57,43,258,338,55,12,51,53,56,339,47,11,48,106',
'257,241,342,318,344,59,345,346,347,99,350,39,351,352,13,243,63,60,359',
'360,38,361,44,362,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48',
',,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51',
'53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,',
'40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,349,,,,,,59,,,,',
',39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47',
'11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55',
'12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58',
'54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38',
',44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,',
',,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47',
'11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55',
'12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58',
'54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38',
',44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,',
',,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47',
'11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55',
'12,51,53,56,,47,11,48,264,68,,,,,59,68,,,,,39,,90,13,94,,89,,90,38,94',
'44,89,46,42,,45,58,54,,40,57,43,,,55,12,93,,56,51,53,11,93,47,126,48',
',,,59,,,,,,39,,,,,76,13,,,,,76,38,,44,,46,96,,45,58,54,,40,57,,,,55',
'12,51,53,56,,47,11,48,270,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45',
'58,54,,40,57,43,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,',
',,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,272,,,',
',,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51',
'53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,',
'40,57,43,,,55,12,51,53,56,,47,11,48,334,,,,,,59,,,,,,39,,,13,,,,,,38',
',44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47,11,48,,,,,,,59,',
',,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47',
'11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,',
',55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,',
'45,58,54,,40,57,43,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13',
',,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47,11,48,,',
',,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51',
'53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,',
'40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,332,,,,,,59,,,,',
',39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47',
'11,48,321,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,',
',,55,12,51,53,56,,47,11,48,358,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46',
'42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,',
',13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48',
',,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51',
'53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,',
'40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39',
',,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48',
',,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51',
'53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,',
'40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39',
',,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48',
',,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51',
'53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,',
'40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39',
',,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48',
',,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51',
'53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,',
'40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39',
',,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47,11',
'48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12',
'51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,170,187,181,188,46,182',
'190,183,179,177,,172,185,,,,55,12,191,186,184,51,53,11,,47,,48,307,',
',59,,,,,189,171,,,,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55',
'12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58',
'54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38',
',44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,',
',,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47',
'11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55',
'12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,170,187,181,188,46',
'182,190,183,179,177,,172,185,,,,55,12,191,186,184,51,53,11,,47,289,48',
',,,59,,,,,189,171,,,,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55',
'12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,199,,,,,38,,44,,46,96,,45',
'58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,',
'38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59',
',,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,',
'47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,',
',,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,209,,,,,38,,44,,46',
'96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13',
',,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,',
',,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53',
'56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40',
'57,,,,55,12,51,53,56,,47,11,48,,,,,,68,59,,,,,,39,,,13,,,90,,94,38,89',
'44,,46,42,,45,58,54,,40,57,43,,,55,12,,,56,,93,11,,,,,,,68,59,213,,',
',,39,,87,88,84,79,90,,94,76,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86',
'85,,,72,73,75,74,77,78,,70,71,68,,212,,,69,,76,,87,88,84,79,90,,94,',
'89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70,71',
'68,,211,,,69,,76,,87,88,84,79,90,,94,,89,,,80,82,81,83,,,,,,,,,,,,,',
',93,,,,86,85,,,72,73,75,74,77,78,,70,71,68,,210,,,69,,76,,87,88,84,79',
'90,,94,,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77',
'78,,70,71,68,,,,,69,,76,,87,88,84,79,90,,94,,89,,,80,82,81,83,,,,,,',
',,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70,71,68,,,,,69,,76,,87,88',
'84,79,90,,94,,89,,197,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73',
'75,74,77,78,,70,71,68,,,,,69,,76,,87,88,84,79,90,,94,,89,,,80,82,81',
'83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70,71,68,,,,,69,,76',
',87,88,84,79,90,,94,,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72',
'73,75,74,77,78,,70,71,68,,,,,69,,76,,87,88,84,79,90,,94,,89,,,80,82',
'81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70,71,68,,,,,69',
',76,,87,88,84,79,90,,94,,89,68,,80,82,81,83,,,,,,,,90,,94,,89,,,93,',
',,86,85,68,,72,73,75,74,77,78,,70,71,,93,90,,94,69,89,76,,68,,75,74',
',,,70,71,,68,,,90,69,94,76,89,93,,,,,90,,94,,89,75,74,,,,70,71,,,,93',
',69,,76,,,,,,93,,,,,70,71,,68,,,,69,,76,70,71,87,88,84,79,90,69,94,76',
'89,68,,80,82,81,83,,,,,,,,90,,94,,89,,,93,,,,86,85,68,,72,73,75,74,77',
'78,,70,71,,93,90,,94,69,89,76,,72,73,75,74,,,68,70,71,,,,,,69,,76,,93',
'90,,94,,89,68,,72,73,75,74,,,,70,71,,,90,,94,69,89,76,,93,,,,,,,,72',
'73,75,74,77,78,,70,71,,93,,,,69,,76,,72,73,75,74,77,78,68,70,71,,,,',
',69,,76,,79,90,,94,,89,,68,80,,,,,,,,,,,79,90,,94,,89,,93,80,,,,,,,72',
'73,75,74,77,78,,70,71,,,93,,,69,,76,68,,72,73,75,74,77,78,,70,71,,79',
'90,,94,69,89,76,68,80,,,,,,,,,,,79,90,,94,,89,,93,80,,,,,,,72,73,75',
'74,77,78,,70,71,,,93,,,69,,76,68,,72,73,75,74,77,78,,70,71,84,79,90',
',94,69,89,76,,80,82,81,83,,,,,,,,,,,,,,,93,,,,,,68,,72,73,75,74,77,78',
',70,71,84,79,90,,94,69,89,76,,80,82,81,83,,,,,,,,,,,,,,,93,,,,,85,,',
'72,73,75,74,77,78,,70,71,68,,,,,69,,76,,87,88,84,79,90,,94,,89,,,80',
'82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70,71,68,,,',
',69,,76,,87,88,84,79,90,,94,,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86',
'85,,,72,73,75,74,77,78,,70,71,,68,,,,69,235,76,,,87,88,84,79,90,,94',
',89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70',
'71,68,,,,,69,,76,,87,88,84,79,90,,94,,89,,,80,82,81,83,,,,,,,,,,,,,',
',93,,,,86,85,,,72,73,75,74,77,78,,70,71,68,,,,,69,,76,,87,88,84,79,90',
'239,94,,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77',
'78,,70,71,68,,,,,69,,76,,87,88,84,79,90,,94,,89,,,80,82,81,83,,,,,,',
',,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70,71,68,,,,,69,,76,,87,88',
'84,79,90,,94,,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75',
'74,77,78,,70,71,68,,91,,,69,,76,,87,88,84,79,90,,94,,89,,,80,82,81,83',
',,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70,71,68,,,,,69,,76,',
'87,88,84,79,90,,94,,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72',
'73,75,74,77,78,,70,71,,,,,,69,,76,253,187,252,188,,250,190,254,248,247',
',249,251,,,,,,191,186,255,253,187,252,188,,250,190,254,248,247,,249',
'251,,,189,256,,191,186,255,253,187,252,188,,250,190,254,248,247,,249',
'251,,,189,256,,191,186,255,,,,,,,,,,,,,,,,189,256' ]
        racc_action_table = arr = ::Array.new(4851, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'89,89,180,179,89,118,89,42,208,43,198,273,71,71,185,240,45,177,220,273',
'184,208,89,198,226,226,36,36,89,118,89,226,89,89,42,89,89,89,42,89,89',
'104,180,179,89,89,72,72,89,71,72,89,72,45,185,220,45,177,220,89,184',
'226,183,242,222,89,48,48,72,89,113,71,105,48,72,45,72,220,72,72,217',
'72,72,72,181,72,72,103,181,217,72,72,4,4,72,125,4,72,4,183,125,222,183',
'48,222,72,281,105,182,117,281,72,182,281,4,44,246,70,70,44,4,183,4,222',
'4,4,219,4,4,4,4,4,4,4,133,133,4,4,344,344,4,141,344,4,344,344,141,127',
'96,92,127,4,96,312,70,312,270,4,270,263,344,7,7,7,7,265,344,266,344',
'90,344,344,269,344,344,344,70,344,344,344,259,259,344,344,342,342,344',
'218,342,344,342,342,199,199,271,272,215,344,214,276,277,278,279,344',
'130,283,342,135,62,60,207,205,342,295,342,200,342,342,297,342,342,342',
'236,342,342,342,196,304,342,342,172,172,342,306,172,342,172,37,194,173',
'315,316,318,342,319,323,324,35,330,342,331,333,172,174,5,1,348,353,172',
'355,172,357,172,172,,172,172,172,,172,172,,,,172,172,11,11,172,,11,172',
'11,,,,,,,172,,,,,,172,,,11,,,,,,11,,11,,11,11,,11,11,11,,11,11,,,,11',
'11,12,12,11,,12,11,12,,,,,,,11,,,,,,11,,,12,,,,,,12,,12,,12,12,,12,12',
'12,,12,12,,,,12,12,13,13,12,,13,12,13,,,,,,,12,,,,,,12,,,13,,,,,,13',
',13,,13,13,,13,13,13,,13,13,,,,13,13,326,326,13,,326,13,326,326,,,,',
',13,,,,,,13,,,326,,,,,,326,,326,,326,326,,326,326,326,,326,326,326,',
',326,326,314,314,326,,314,326,314,,,,,,,326,,,,,,326,,,314,,,,,,314',
',314,,314,314,,314,314,314,,314,314,,,,314,314,171,171,314,,171,314',
'171,,,,,,,314,,,,,,314,,,171,,,,,,171,,171,,171,171,,171,171,171,,171',
'171,,,,171,171,38,38,171,,38,171,38,,,,,,,171,,,,,,171,,,38,,,,,,38',
',38,,38,38,,38,38,38,,38,38,,,,38,38,39,39,38,,39,38,39,,,,,,,38,,,',
',,38,,,39,,,,,,39,,39,,39,39,,39,39,39,,39,39,,,,39,39,40,40,39,,40',
'39,40,,,,,,,39,,,,,,39,,,40,,,,,,40,,40,,40,40,,40,40,40,,40,40,,,,40',
'40,41,41,40,,41,40,41,,,,,,,40,,,,,,40,,,41,,,,,,41,,41,,41,41,,41,41',
'41,,41,41,,,,41,41,170,170,41,,170,41,170,,,,,,,41,,,,,,41,,,170,,,',
',,170,,170,,170,170,,170,170,170,,170,170,,,,170,170,167,167,170,,167',
'170,167,,,,,,,170,,,,,,170,,,167,,,,,,167,,167,,167,167,,167,167,167',
',167,167,,,,167,167,296,296,167,,296,167,296,,,,,,,167,,,,,,167,,,296',
',,,,,296,,296,,296,296,,296,296,296,,296,296,,,,296,296,203,203,296',
',203,296,203,203,97,,,,,296,95,,,,,296,,97,203,97,,97,,95,203,95,203',
'95,203,203,,203,203,203,,203,203,203,,,203,203,97,,203,47,47,203,95',
'47,47,47,,,,203,,,,,,203,,,,,97,47,,,,,95,47,,47,,47,47,,47,47,47,,47',
'47,,,,47,47,210,210,47,,210,47,210,210,,,,,,47,,,,,,47,,,210,,,,,,210',
',210,,210,210,,210,210,210,,210,210,210,,,210,210,52,52,210,,52,210',
'52,,,,,,,210,,,,,,210,,,52,,,,,,52,,52,,52,52,,52,52,52,,52,52,,,,52',
'52,211,211,52,,211,52,211,211,,,,,,52,,,,,,52,,,211,,,,,,211,,211,,211',
'211,,211,211,211,,211,211,211,,,211,211,61,61,211,,61,211,61,,,,,,,211',
',,,,,211,,,61,,,,,,61,,61,,61,61,,61,61,61,,61,61,61,,,61,61,285,285',
'61,,285,61,285,285,,,,,,61,,,,,,61,,,285,,,,,,285,,285,,285,285,,285',
'285,285,,285,285,285,,,285,285,112,112,285,,112,285,112,,,,,,,285,,',
',,,285,,,112,,,,,,112,,112,,112,112,,112,112,112,,112,112,,,,112,112',
'64,64,112,,64,112,64,,,,,,,112,,,,,,112,,,64,,,,,,64,,64,,64,64,,64',
'64,64,,64,64,64,,,64,64,65,65,64,,65,64,65,,,,,,,64,,,,,,64,,,65,,,',
',,65,,65,,65,65,,65,65,65,,65,65,65,,,65,65,66,66,65,,66,65,66,,,,,',
',65,,,,,,65,,,66,,,,,,66,,66,,66,66,,66,66,66,,66,66,66,,,66,66,67,67',
'66,,67,66,67,,,,,,,66,,,,,,66,,,67,,,,,,67,,67,,67,67,,67,67,67,,67',
'67,67,,,67,67,68,68,67,,68,67,68,,,,,,,67,,,,,,67,,,68,,,,,,68,,68,',
'68,68,,68,68,68,,68,68,,,,68,68,69,69,68,,69,68,69,,,,,,,68,,,,,,68',
',,69,,,,,,69,,69,,69,69,,69,69,69,,69,69,,,,69,69,284,284,69,,284,69',
'284,284,,,,,,69,,,,,,69,,,284,,,,,,284,,284,,284,284,,284,284,284,,284',
'284,284,,,284,284,274,274,284,,274,284,274,274,,,,,,284,,,,,,284,,,274',
',,,,,274,,274,,274,274,,274,274,274,,274,274,,,,274,274,345,345,274',
',345,274,345,345,,,,,,274,,,,,,274,,,345,,,,,,345,,345,,345,345,,345',
'345,345,,345,345,345,,,345,345,73,73,345,,73,345,73,,,,,,,345,,,,,,345',
',,73,,,,,,73,,73,,73,73,,73,73,73,,73,73,,,,73,73,74,74,73,,74,73,74',
',,,,,,73,,,,,,73,,,74,,,,,,74,,74,,74,74,,74,74,74,,74,74,,,,74,74,75',
'75,74,,75,74,75,,,,,,,74,,,,,,74,,,75,,,,,,75,,75,,75,75,,75,75,75,',
'75,75,,,,75,75,76,76,75,,76,75,76,,,,,,,75,,,,,,75,,,76,,,,,,76,,76',
',76,76,,76,76,76,,76,76,,,,76,76,77,77,76,,77,76,77,,,,,,,76,,,,,,76',
',,77,,,,,,77,,77,,77,77,,77,77,77,,77,77,,,,77,77,78,78,77,,78,77,78',
',,,,,,77,,,,,,77,,,78,,,,,,78,,78,,78,78,,78,78,78,,78,78,,,,78,78,79',
'79,78,,79,78,79,,,,,,,78,,,,,,78,,,79,,,,,,79,,79,,79,79,,79,79,79,',
'79,79,,,,79,79,80,80,79,,80,79,80,,,,,,,79,,,,,,79,,,80,,,,,,80,,80',
',80,80,,80,80,80,,80,80,,,,80,80,81,81,80,,81,80,81,,,,,,,80,,,,,,80',
',,81,,,,,,81,,81,,81,81,,81,81,81,,81,81,,,,81,81,82,82,81,,82,81,82',
',,,,,,81,,,,,,81,,,82,,,,,,82,,82,,82,82,,82,82,82,,82,82,,,,82,82,83',
'83,82,,83,82,83,,,,,,,82,,,,,,82,,,83,,,,,,83,,83,,83,83,,83,83,83,',
'83,83,,,,83,83,84,84,83,,84,83,84,,,,,,,83,,,,,,83,,,84,,,,,,84,,84',
',84,84,,84,84,84,,84,84,,,,84,84,85,85,84,,85,84,85,,,,,,,84,,,,,,84',
',,85,,,,,,85,,85,,85,85,,85,85,85,,85,85,,,,85,85,86,86,85,,86,85,86',
',,,,,,85,,,,,,85,,,86,,,,,,86,,86,,86,86,,86,86,86,,86,86,,,,86,86,87',
'87,86,,87,86,87,,,,,,,86,,,,,,86,,,87,,,,,,87,,87,,87,87,,87,87,87,',
'87,87,,,,87,87,88,88,87,,88,87,88,,,,,,,87,,,,,,87,,,88,,,,,,88,,88',
',88,88,,88,88,88,,88,88,,,,88,88,0,0,88,,0,88,0,,,,,,,88,,,,,,88,,,0',
',,,,,0,,0,,0,0,,0,0,0,,0,0,0,,,0,0,267,267,0,,267,0,267,,,,,,,0,,,,',
',0,,,267,,,,,,267,,267,,267,267,,267,267,267,,267,267,,,,267,267,91',
'91,267,,91,267,91,,,,,,,267,,,,,,267,,,91,,,,,,91,91,91,91,91,91,91',
'91,91,91,,91,91,,,,91,91,91,91,91,262,262,91,,262,,262,262,,,91,,,,',
'91,91,,,,,,262,,,,,,262,,262,,262,262,,262,262,262,,262,262,262,,,262',
'262,93,93,262,,93,262,93,,,,,,,262,,,,,,262,,,93,,,,,,93,,93,,93,93',
',93,93,93,,93,93,,,,93,93,94,94,93,,94,93,94,,,,,,,93,,,,,,93,,,94,',
',,,,94,,94,,94,94,,94,94,94,,94,94,,,,94,94,212,212,94,,212,94,212,',
',,,,,94,,,,,,94,,,212,,,,,,212,,212,,212,212,,212,212,212,,212,212,',
',,212,212,245,245,212,,245,212,245,,,,,,,212,,,,,,212,,,245,,,,,,245',
',245,,245,245,,245,245,245,,245,245,,,,245,245,213,213,245,,213,245',
'213,,,,,,,245,,,,,,245,,,213,,,,,,213,213,213,213,213,213,213,213,213',
'213,,213,213,,,,213,213,213,213,213,223,223,213,,223,223,223,,,,213',
',,,,213,213,,,,,,223,,,,,,223,,223,,223,223,,223,223,223,,223,223,,',
',223,223,99,99,223,,99,223,99,,,,,,,223,,,,,,223,,,99,99,,,,,99,,99',
',99,99,,99,99,99,,99,99,,,,99,99,244,244,99,,244,99,244,,,,,,,99,,,',
',,99,,,244,,,,,,244,,244,,244,244,,244,244,244,,244,244,,,,244,244,241',
'241,244,,241,244,241,,,,,,,244,,,,,,244,,,241,,,,,,241,,241,,241,241',
',241,241,241,,241,241,,,,241,241,235,235,241,,235,241,235,,,,,,,241',
',,,,,241,,,235,,,,,,235,,235,,235,235,,235,235,235,,235,235,,,,235,235',
'106,106,235,,106,235,106,,,,,,,235,,,,,,235,,,106,106,,,,,106,,106,',
'106,106,,106,106,106,,106,106,,,,106,106,227,227,106,,227,106,227,,',
',,,,106,,,,,,106,,,227,,,,,,227,,227,,227,227,,227,227,227,,227,227',
',,,227,227,232,232,227,,232,227,232,,,,,,,227,,,,,,227,,,232,,,,,,232',
',232,,232,232,,232,232,232,,232,232,,,,232,232,234,234,232,,234,232',
'234,,,,,,,232,,,,,,232,,,234,,,,,,234,,234,,234,234,,234,234,234,,234',
'234,,,,234,234,63,63,234,,63,234,63,,,,,,142,234,,,,,,234,,,63,,,142',
',142,63,142,63,,63,63,,63,63,63,,63,63,63,,,63,63,,,63,,142,63,,,,,',
',111,63,111,,,,,63,,111,111,111,111,111,,111,142,111,,,111,111,111,111',
',,,,,,,,,,,,,,111,,,,111,111,,,111,111,111,111,111,111,,111,111,110',
',110,,,111,,111,,110,110,110,110,110,,110,,110,,,110,110,110,110,,,',
',,,,,,,,,,,110,,,,110,110,,,110,110,110,110,110,110,,110,110,109,,109',
',,110,,110,,109,109,109,109,109,,109,,109,,,109,109,109,109,,,,,,,,',
',,,,,,109,,,,109,109,,,109,109,109,109,109,109,,109,109,107,,107,,,109',
',109,,107,107,107,107,107,,107,,107,,,107,107,107,107,,,,,,,,,,,,,,',
'107,,,,107,107,,,107,107,107,107,107,107,,107,107,193,,,,,107,,107,',
'193,193,193,193,193,,193,,193,,,193,193,193,193,,,,,,,,,,,,,,,193,,',
',193,193,,,193,193,193,193,193,193,,193,193,98,,,,,193,,193,,98,98,98',
'98,98,,98,,98,,98,98,98,98,98,,,,,,,,,,,,,,,98,,,,98,98,,,98,98,98,98',
'98,98,,98,98,131,,,,,98,,98,,131,131,131,131,131,,131,,131,,,131,131',
'131,131,,,,,,,,,,,,,,,131,,,,131,131,,,131,131,131,131,131,131,,131',
'131,288,,,,,131,,131,,288,288,288,288,288,,288,,288,,,288,288,288,288',
',,,,,,,,,,,,,,288,,,,288,288,,,288,288,288,288,288,288,,288,288,292',
',,,,288,,288,,292,292,292,292,292,,292,,292,,,292,292,292,292,,,,,,',
',,,,,,,,292,,,,292,292,,,292,292,292,292,292,292,,292,292,294,,,,,292',
',292,,294,294,294,294,294,,294,,294,147,,294,294,294,294,,,,,,,,147',
',147,,147,,,294,,,,294,294,148,,294,294,294,294,294,294,,294,294,,147',
'148,,148,294,148,294,,149,,147,147,,,,147,147,,150,,,149,147,149,147',
'149,148,,,,,150,,150,,150,148,148,,,,148,148,,,,149,,148,,148,,,,,,150',
',,,,149,149,,151,,,,149,,149,150,150,151,151,151,151,151,150,151,150',
'151,152,,151,151,151,151,,,,,,,,152,,152,,152,,,151,,,,151,151,153,',
'151,151,151,151,151,151,,151,151,,152,153,,153,151,153,151,,152,152',
'152,152,,,154,152,152,,,,,,152,,152,,153,154,,154,,154,155,,153,153',
'153,153,,,,153,153,,,155,,155,153,155,153,,154,,,,,,,,154,154,154,154',
'154,154,,154,154,,155,,,,154,,154,,155,155,155,155,155,155,156,155,155',
',,,,,155,,155,,156,156,,156,,156,,157,156,,,,,,,,,,,157,157,,157,,157',
',156,157,,,,,,,156,156,156,156,156,156,,156,156,,,157,,,156,,156,158',
',157,157,157,157,157,157,,157,157,,158,158,,158,157,158,157,159,158',
',,,,,,,,,,159,159,,159,,159,,158,159,,,,,,,158,158,158,158,158,158,',
'158,158,,,159,,,158,,158,160,,159,159,159,159,159,159,,159,159,160,160',
'160,,160,159,160,159,,160,160,160,160,,,,,,,,,,,,,,,160,,,,,,161,,160',
'160,160,160,160,160,,160,160,161,161,161,,161,160,161,160,,161,161,161',
'161,,,,,,,,,,,,,,,161,,,,,161,,,161,161,161,161,161,161,,161,161,162',
',,,,161,,161,,162,162,162,162,162,,162,,162,,,162,162,162,162,,,,,,',
',,,,,,,,162,,,,162,162,,,162,162,162,162,162,162,,162,162,163,,,,,162',
',162,,163,163,163,163,163,,163,,163,,,163,163,163,163,,,,,,,,,,,,,,',
'163,,,,163,163,,,163,163,163,163,163,163,,163,163,,164,,,,163,164,163',
',,164,164,164,164,164,,164,,164,,,164,164,164,164,,,,,,,,,,,,,,,164',
',,,164,164,,,164,164,164,164,164,164,,164,164,302,,,,,164,,164,,302',
'302,302,302,302,,302,,302,,,302,302,302,302,,,,,,,,,,,,,,,302,,,,302',
'302,,,302,302,302,302,302,302,,302,302,169,,,,,302,,302,,169,169,169',
'169,169,169,169,,169,,,169,169,169,169,,,,,,,,,,,,,,,169,,,,169,169',
',,169,169,169,169,169,169,,169,169,303,,,,,169,,169,,303,303,303,303',
'303,,303,,303,,,303,303,303,303,,,,,,,,,,,,,,,303,,,,303,303,,,303,303',
'303,303,303,303,,303,303,311,,,,,303,,303,,311,311,311,311,311,,311',
',311,,,311,311,311,311,,,,,,,,,,,,,,,311,,,,311,311,,,311,311,311,311',
'311,311,,311,311,10,,10,,,311,,311,,10,10,10,10,10,,10,,10,,,10,10,10',
'10,,,,,,,,,,,,,,,10,,,,10,10,,,10,10,10,10,10,10,,10,10,124,,,,,10,',
'10,,124,124,124,124,124,,124,,124,,,124,124,124,124,,,,,,,,,,,,,,,124',
',,,124,124,,,124,124,124,124,124,124,,124,124,,,,,,124,,124,192,192',
'192,192,,192,192,192,192,192,,192,192,,,,,,192,192,192,243,243,243,243',
',243,243,243,243,243,,243,243,,,192,192,,243,243,243,238,238,238,238',
',238,238,238,238,238,,238,238,,,243,243,,238,238,238,,,,,,,,,,,,,,,',
'238,238' ]
        racc_action_check = arr = ::Array.new(4851, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  2393,   255,   nil,   nil,    90,   242,   nil,    99,   nil,   nil,
  4647,   274,   320,   366,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   223,   -43,   213,   550,   596,
   642,   688,    -1,   -34,    80,    14,   nil,   921,    64,   nil,
   nil,   nil,  1013,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   209,  1105,   196,  3227,  1243,  1289,  1335,  1381,  1427,  1473,
   115,    10,    44,  1657,  1703,  1749,  1795,  1841,  1887,  1933,
  1979,  2025,  2071,  2117,  2163,  2209,  2255,  2301,  2347,    -2,
   130,  2485,   141,  2580,  2626,   882,   113,   876,  3556,  2859,
   nil,   nil,   nil,    76,   -28,    38,  3043,  3446,   nil,  3391,
  3336,  3281,  1197,    46,   nil,   nil,   nil,    85,    -7,   nil,
   nil,   nil,   nil,   nil,  4702,    88,   nil,   138,   nil,   nil,
   193,  3611,   nil,   130,   nil,   195,   nil,   nil,   nil,   nil,
   nil,   134,  3235,   nil,   nil,   nil,   nil,  3794,  3820,  3840,
  3850,  3896,  3914,  3940,  3966,  3984,  4036,  4055,  4099,  4118,
  4162,  4206,  4261,  4316,  4372,   nil,   nil,   780,   nil,  4482,
   734,   504,   228,   199,   241,   nil,   nil,     6,   nil,    -8,
    -9,    49,    73,    60,     9,     3,   nil,   nil,   nil,   nil,
   nil,   nil,  4741,  3501,   193,   nil,   204,   nil,    -2,   123,
   207,   nil,   nil,   872,   nil,   199,   nil,   195,    -4,   nil,
   967,  1059,  2672,  2764,   158,   160,   nil,    55,   179,   118,
    16,   nil,    62,  2813,   nil,   nil,    22,  3089,   nil,   nil,
   nil,   nil,  3135,   nil,  3181,  2997,   210,   nil,  4783,   nil,
     6,  2951,    54,  4762,  2905,  2718,   104,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   111,
   nil,   nil,  2534,   150,   nil,    96,   133,  2439,   nil,   163,
   125,   185,   164,    -1,  1565,   nil,   159,   188,   192,   194,
   nil,    71,   nil,   193,  1519,  1151,   nil,   nil,  3666,   nil,
   nil,   nil,  3721,   nil,  3776,   204,   826,   206,   nil,   nil,
   nil,   nil,  4427,  4537,   218,   nil,   224,   nil,   nil,   nil,
   nil,  4592,   122,   nil,   458,   232,   210,   nil,   234,   236,
   nil,   nil,   nil,   236,   237,   nil,   412,   nil,   nil,   nil,
   223,   241,   nil,   242,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   182,   nil,   136,  1611,   nil,   nil,   247,   nil,
   nil,   nil,   nil,   248,   nil,   250,   nil,   252,   nil,   nil,
   nil,   nil,   nil ]

racc_action_default = [
  -209,  -210,    -1,    -2,    -3,    -4,    -7,    -9,   -10,   -15,
  -109,  -210,  -210,  -210,   -43,   -44,   -45,   -46,   -47,   -48,
   -49,   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,
   -59,   -60,   -61,   -62,   -63,   -68,   -69,   -73,  -210,  -210,
  -210,  -210,  -210,  -119,  -210,  -210,  -164,  -210,  -210,  -174,
  -175,  -176,  -210,  -178,  -185,  -186,  -187,  -188,  -189,  -190,
  -210,  -210,    -6,  -210,  -210,  -210,  -210,  -210,  -210,  -210,
  -210,  -210,  -210,  -210,  -210,  -210,  -210,  -210,  -210,  -210,
  -210,  -210,  -210,  -210,  -210,  -210,  -210,  -210,  -210,  -210,
  -210,  -127,  -122,  -209,  -209,   -27,  -210,   -34,  -210,  -210,
   -70,   -75,   -76,  -209,  -210,  -210,  -210,  -210,   -86,  -210,
  -210,  -210,  -210,  -209,  -153,  -154,  -120,  -209,  -209,  -145,
  -147,  -148,  -149,  -150,   -41,  -210,  -167,  -210,  -170,  -171,
  -210,  -182,  -177,  -210,   363,    -5,    -8,   -11,   -12,   -13,
   -14,  -210,   -17,   -18,  -162,  -163,   -19,   -20,   -21,   -22,
   -23,   -24,   -25,   -26,   -28,   -29,   -30,   -31,   -32,   -33,
   -35,   -36,   -37,   -38,  -210,   -39,  -104,  -210,   -74,  -210,
  -202,  -208,  -196,  -193,  -191,  -117,  -128,  -185,  -131,  -189,
  -210,  -199,  -197,  -205,  -187,  -188,  -195,  -200,  -201,  -203,
  -204,  -206,  -127,  -126,  -210,  -125,  -210,   -40,  -210,   -65,
  -210,   -80,   -81,  -210,   -84,  -191,  -158,  -161,  -210,   -72,
  -210,  -210,  -210,  -127,  -193,  -209,  -155,  -210,  -210,  -210,
  -210,  -151,  -210,  -210,  -165,  -168,  -210,  -210,  -179,  -180,
  -181,  -183,  -210,   -16,  -210,  -210,  -191,  -106,  -127,  -116,
  -210,  -194,  -210,  -192,  -210,  -210,  -191,  -130,  -132,  -196,
  -197,  -198,  -199,  -202,  -205,  -207,  -208,  -123,  -124,   -64,
   -67,   -77,  -210,  -210,   -83,  -210,  -192,  -210,   -71,  -210,
   -89,  -210,   -95,  -210,  -210,   -99,  -193,  -191,  -210,  -210,
  -139,  -210,  -156,  -191,  -210,  -210,  -146,  -152,   -42,  -166,
  -169,  -172,  -173,  -184,  -108,  -210,  -192,  -191,  -112,  -118,
  -113,  -129,  -133,  -134,  -210,   -66,  -210,   -79,   -82,   -85,
  -159,  -160,   -89,   -88,  -210,  -210,   -95,   -94,  -210,  -210,
  -103,   -98,  -100,  -210,  -210,  -114,  -210,  -140,  -141,  -142,
  -210,  -210,  -136,  -210,  -144,  -105,  -107,  -115,  -121,   -78,
   -87,   -90,  -210,   -93,  -210,  -210,  -110,  -111,  -210,  -138,
  -157,  -135,  -143,  -210,   -92,  -210,   -97,  -210,  -102,  -137,
   -91,   -96,  -101 ]

racc_goto_table = [
     2,   117,   100,    95,    97,    98,     3,   132,   129,   166,
   174,   240,   130,   317,   205,   173,   123,   313,   319,   215,
   275,   236,   242,   218,   137,   138,   139,   140,   143,   146,
   107,   109,   110,   111,   145,   145,   214,   125,    62,   124,
   274,   144,   144,   286,   131,   287,   194,   196,   341,   299,
   238,   261,   278,   265,   301,   200,   203,   343,   141,   340,
   124,   142,   279,   327,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   322,   169,   295,   193,   193,   237,   219,   198,
   165,   124,   310,   127,   304,   135,   208,   136,   124,     1,
   231,   232,   230,   nil,   169,   nil,   nil,   nil,   nil,   201,
   nil,   246,   nil,   nil,   323,   nil,   nil,   nil,   nil,   216,
   nil,   nil,   nil,   216,   221,   324,   283,   nil,   nil,   nil,
   nil,   330,   277,   nil,   nil,   nil,   nil,   276,   117,   nil,
   nil,   nil,   nil,   nil,   nil,   337,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   123,   nil,   nil,   297,   nil,   164,
   nil,   nil,   107,   109,   110,   260,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   291,   293,   nil,   nil,
   130,   123,   nil,   123,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   263,   124,   169,   nil,   nil,   nil,   nil,
   269,   271,   nil,   nil,   nil,   288,   336,   nil,   nil,   292,
   nil,   280,   nil,   nil,   131,   305,   288,   294,   nil,   nil,
   nil,   nil,   nil,   169,   nil,   nil,   302,   303,   328,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   311,
   nil,   nil,   306,   nil,   nil,   nil,   124,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   331,   333,   nil,   nil,   164,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   107,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   348,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   353,   nil,   355,   357 ]

racc_goto_check = [
     2,    65,    36,     9,     9,     9,     3,    78,    74,    52,
    57,    56,    31,    48,    44,    55,    30,    47,    51,    66,
    50,    53,    45,    66,     7,     7,     7,     7,    12,    12,
     9,     9,     9,     9,    31,    31,    55,    11,     5,     9,
    49,    30,    30,    71,     9,    71,    61,    61,    46,    58,
    59,    43,    56,    45,    62,    42,    41,    48,    11,    47,
     9,     9,    67,    68,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,    50,     9,    45,     9,     9,    52,    70,    11,
    13,     9,    72,    73,    45,     5,    11,     6,     9,     1,
    79,    80,    82,   nil,     9,   nil,   nil,   nil,   nil,     3,
   nil,    57,   nil,   nil,    56,   nil,   nil,   nil,   nil,     3,
   nil,   nil,   nil,     3,     3,    45,    44,   nil,   nil,   nil,
   nil,    45,    57,   nil,   nil,   nil,   nil,    55,    65,   nil,
   nil,   nil,   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    30,   nil,   nil,    57,   nil,     9,
   nil,   nil,     9,     9,     9,    36,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    74,    78,   nil,   nil,
    31,    30,   nil,    30,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,     9,     9,   nil,   nil,   nil,   nil,
     2,     2,   nil,   nil,   nil,     9,    52,   nil,   nil,     9,
   nil,     3,   nil,   nil,     9,    36,     9,     9,   nil,   nil,
   nil,   nil,   nil,     9,   nil,   nil,     9,     9,    65,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     9,
   nil,   nil,     2,   nil,   nil,   nil,     9,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,     2,   nil,   nil,     9,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    99,     0,     6,   nil,    34,    34,   -40,   nil,    -8,
   nil,   -10,   -42,     1,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -29,   -36,   nil,   nil,   nil,   nil,   -34,   nil,   nil,   nil,
   nil,   -48,   -48,  -149,   -91,  -152,  -266,  -253,  -259,  -172,
  -192,  -255,   -80,  -146,   nil,   -76,  -162,   -81,  -192,  -119,
   nil,   -47,  -189,   nil,   nil,   -43,   -94,  -153,  -218,   nil,
   -30,  -177,  -174,    45,   -40,   nil,   nil,   nil,   -45,   -33,
   -32,   nil,   -31 ]

racc_goto_default = [
   nil,   nil,   nil,   195,     4,     5,     6,     7,     8,    10,
     9,   273,   nil,   nil,    14,    35,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,   nil,    36,    37,   101,
   102,   103,   nil,   nil,   nil,   nil,   108,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    41,   nil,   nil,   nil,   175,   nil,
    92,   nil,   176,   180,   178,   113,   nil,   nil,   nil,   118,
   nil,   119,   206,   nil,   nil,    49,    50,    52,   nil,   nil,
   nil,   133,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 78, :_reduce_1,
  1, 78, :_reduce_none,
  1, 79, :_reduce_3,
  1, 81, :_reduce_4,
  3, 81, :_reduce_5,
  2, 81, :_reduce_6,
  1, 82, :_reduce_7,
  3, 82, :_reduce_8,
  1, 83, :_reduce_none,
  1, 84, :_reduce_10,
  3, 84, :_reduce_11,
  3, 84, :_reduce_12,
  3, 84, :_reduce_13,
  3, 84, :_reduce_14,
  1, 86, :_reduce_none,
  4, 86, :_reduce_16,
  3, 86, :_reduce_17,
  3, 86, :_reduce_18,
  3, 86, :_reduce_19,
  3, 86, :_reduce_20,
  3, 86, :_reduce_21,
  3, 86, :_reduce_22,
  3, 86, :_reduce_23,
  3, 86, :_reduce_24,
  3, 86, :_reduce_25,
  3, 86, :_reduce_26,
  2, 86, :_reduce_27,
  3, 86, :_reduce_28,
  3, 86, :_reduce_29,
  3, 86, :_reduce_30,
  3, 86, :_reduce_31,
  3, 86, :_reduce_32,
  3, 86, :_reduce_33,
  2, 86, :_reduce_34,
  3, 86, :_reduce_35,
  3, 86, :_reduce_36,
  3, 86, :_reduce_37,
  3, 86, :_reduce_38,
  3, 86, :_reduce_39,
  3, 86, :_reduce_40,
  1, 88, :_reduce_41,
  3, 88, :_reduce_42,
  1, 87, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 108, :_reduce_62,
  1, 108, :_reduce_63,
  4, 91, :_reduce_64,
  3, 91, :_reduce_65,
  5, 91, :_reduce_66,
  4, 91, :_reduce_67,
  1, 91, :_reduce_68,
  1, 95, :_reduce_69,
  2, 95, :_reduce_70,
  4, 114, :_reduce_71,
  3, 114, :_reduce_72,
  1, 114, :_reduce_73,
  3, 115, :_reduce_74,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  3, 116, :_reduce_77,
  3, 120, :_reduce_78,
  2, 120, :_reduce_79,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  4, 117, :_reduce_82,
  3, 117, :_reduce_83,
  2, 118, :_reduce_84,
  4, 118, :_reduce_85,
  2, 98, :_reduce_86,
  5, 123, :_reduce_87,
  4, 123, :_reduce_88,
  0, 124, :_reduce_none,
  2, 124, :_reduce_90,
  4, 124, :_reduce_91,
  3, 124, :_reduce_92,
  6, 99, :_reduce_93,
  5, 99, :_reduce_94,
  0, 125, :_reduce_none,
  4, 125, :_reduce_96,
  3, 125, :_reduce_97,
  5, 97, :_reduce_98,
  1, 126, :_reduce_99,
  2, 126, :_reduce_100,
  5, 127, :_reduce_101,
  4, 127, :_reduce_102,
  1, 128, :_reduce_103,
  1, 90, :_reduce_none,
  4, 90, :_reduce_105,
  1, 130, :_reduce_106,
  3, 130, :_reduce_107,
  3, 129, :_reduce_108,
  1, 85, :_reduce_109,
  6, 85, :_reduce_110,
  6, 85, :_reduce_111,
  5, 85, :_reduce_112,
  5, 85, :_reduce_113,
  5, 85, :_reduce_114,
  4, 135, :_reduce_115,
  1, 136, :_reduce_116,
  1, 132, :_reduce_117,
  3, 132, :_reduce_118,
  1, 131, :_reduce_119,
  2, 131, :_reduce_120,
  6, 96, :_reduce_121,
  2, 96, :_reduce_122,
  3, 137, :_reduce_123,
  3, 137, :_reduce_124,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  0, 134, :_reduce_127,
  1, 134, :_reduce_128,
  3, 134, :_reduce_129,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  3, 139, :_reduce_133,
  3, 139, :_reduce_134,
  6, 100, :_reduce_135,
  5, 100, :_reduce_136,
  7, 101, :_reduce_137,
  6, 101, :_reduce_138,
  1, 144, :_reduce_none,
  2, 144, :_reduce_140,
  1, 145, :_reduce_none,
  1, 145, :_reduce_none,
  6, 102, :_reduce_143,
  5, 102, :_reduce_144,
  1, 146, :_reduce_145,
  3, 146, :_reduce_146,
  1, 148, :_reduce_147,
  1, 148, :_reduce_148,
  1, 148, :_reduce_149,
  1, 148, :_reduce_none,
  1, 147, :_reduce_none,
  2, 147, :_reduce_152,
  1, 142, :_reduce_153,
  1, 142, :_reduce_154,
  1, 143, :_reduce_155,
  2, 143, :_reduce_156,
  4, 143, :_reduce_157,
  1, 121, :_reduce_158,
  3, 121, :_reduce_159,
  3, 149, :_reduce_160,
  1, 149, :_reduce_161,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 94, :_reduce_164,
  3, 103, :_reduce_165,
  4, 103, :_reduce_166,
  2, 103, :_reduce_167,
  3, 106, :_reduce_168,
  4, 106, :_reduce_169,
  2, 106, :_reduce_170,
  1, 150, :_reduce_171,
  3, 150, :_reduce_172,
  3, 151, :_reduce_173,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 152, :_reduce_176,
  2, 153, :_reduce_177,
  1, 154, :_reduce_178,
  1, 156, :_reduce_179,
  1, 157, :_reduce_180,
  2, 155, :_reduce_181,
  1, 158, :_reduce_182,
  1, 159, :_reduce_183,
  2, 159, :_reduce_184,
  1, 111, :_reduce_185,
  1, 109, :_reduce_186,
  1, 110, :_reduce_187,
  1, 105, :_reduce_188,
  1, 104, :_reduce_189,
  1, 107, :_reduce_190,
  0, 122, :_reduce_none,
  1, 122, :_reduce_192,
  0, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 80, :_reduce_209 ]

racc_reduce_n = 210

racc_shift_n = 363

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :DEFINE => 32,
  :ELSIF => 33,
  :VARIABLE => 34,
  :CLASS => 35,
  :INHERITS => 36,
  :NODE => 37,
  :BOOLEAN => 38,
  :NAME => 39,
  :SEMIC => 40,
  :CASE => 41,
  :DEFAULT => 42,
  :AT => 43,
  :LCOLLECT => 44,
  :RCOLLECT => 45,
  :CLASSREF => 46,
  :NOT => 47,
  :OR => 48,
  :AND => 49,
  :UNDEF => 50,
  :PARROW => 51,
  :PLUS => 52,
  :MINUS => 53,
  :TIMES => 54,
  :DIV => 55,
  :LSHIFT => 56,
  :RSHIFT => 57,
  :UMINUS => 58,
  :MATCH => 59,
  :NOMATCH => 60,
  :REGEX => 61,
  :IN_EDGE => 62,
  :OUT_EDGE => 63,
  :IN_EDGE_SUB => 64,
  :OUT_EDGE_SUB => 65,
  :IN => 66,
  :UNLESS => 67,
  :MODULO => 68,
  :PIPE => 69,
  :LAMBDA => 70,
  :SELBRACE => 71,
  :LOW => 72,
  :HIGH => 73,
  :CALL => 74,
  :TITLE_COLON => 75,
  :CASE_COLON => 76 }

racc_nt_base = 77

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "MODULO",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "LOW",
  "HIGH",
  "CALL",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "match_rvalue",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "type",
  "undef",
  "name",
  "quotedtext",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_j8",
  "lambda_ruby",
  "lambda_parameter_list",
  "optional_farrow",
  "lambda_rest",
  "parameters",
  "endcomma",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 57)
  def _reduce_1(val, _values, result)
     result = Factory.block_or_expression(*val[0]) 
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'egrammar.ra', 63)
  def _reduce_3(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_4(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_5(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 71)
  def _reduce_6(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 75)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 76)
  def _reduce_8(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_11(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 84)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 85)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 86)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_16(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_17(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_18(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_19(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_20(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_21(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_22(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_23(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_24(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_25(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_26(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_27(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_28(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_29(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_30(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_31(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_32(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_33(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_34(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_35(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_36(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_37(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_38(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_39(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_40(val, _values, result)
     result = val[1].paren()          ;                    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_41(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_42(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

module_eval(<<'.,.,', 'egrammar.ra', 156)
  def _reduce_62(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 157)
  def _reduce_63(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 165)
  def _reduce_64(val, _values, result)
     result = Factory.CALL_NAMED(val[0], true, val[2]) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 166)
  def _reduce_65(val, _values, result)
     result = Factory.CALL_NAMED(val[0], true, [])     ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 168)
  def _reduce_66(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[3]
      result.lambda = val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 173)
  def _reduce_67(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 177)
  def _reduce_68(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 182)
  def _reduce_69(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 183)
  def _reduce_70(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 186)
  def _reduce_71(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_72(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_73(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 193)
  def _reduce_74(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

# reduce 75 omitted

# reduce 76 omitted

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_77(val, _values, result)
          result = Factory.LAMBDA(val[0], val[2])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_78(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_79(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 80 omitted

# reduce 81 omitted

module_eval(<<'.,.,', 'egrammar.ra', 224)
  def _reduce_82(val, _values, result)
          result = Factory.LAMBDA(val[1], val[2])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 228)
  def _reduce_83(val, _values, result)
          result = Factory.LAMBDA(val[1], nil)
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 234)
  def _reduce_84(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 235)
  def _reduce_85(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 245)
  def _reduce_86(val, _values, result)
          result = val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 251)
  def _reduce_87(val, _values, result)
            @lexer.commentpop
        result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 256)
  def _reduce_88(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'egrammar.ra', 263)
  def _reduce_90(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 265)
  def _reduce_91(val, _values, result)
            @lexer.commentpop
        result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 270)
  def _reduce_92(val, _values, result)
            @lexer.commentpop
  	    result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 280)
  def _reduce_93(val, _values, result)
          @lexer.commentpop
      result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 285)
  def _reduce_94(val, _values, result)
          @lexer.commentpop
      result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'egrammar.ra', 296)
  def _reduce_96(val, _values, result)
            @lexer.commentpop
        result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 301)
  def _reduce_97(val, _values, result)
            @lexer.commentpop
    	  result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 310)
  def _reduce_98(val, _values, result)
          @lexer.commentpop
      result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 317)
  def _reduce_99(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 318)
  def _reduce_100(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 323)
  def _reduce_101(val, _values, result)
            @lexer.commentpop
        result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 328)
  def _reduce_102(val, _values, result)
            @lexer.commentpop
        result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 333)
  def _reduce_103(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 104 omitted

module_eval(<<'.,.,', 'egrammar.ra', 344)
  def _reduce_105(val, _values, result)
            @lexer.commentpop
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 350)
  def _reduce_106(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 351)
  def _reduce_107(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 356)
  def _reduce_108(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 372)
  def _reduce_109(val, _values, result)
      	  result = val[0]
  	
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 375)
  def _reduce_110(val, _values, result)
      	  result = case Factory.resource_shape(val[1])
  	  when :resource, :class
  	    tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
  	    tmp.form = val[0]
  	    tmp
	  when :defaults
        error "A resource default can not be virtual or exported"
  	  when :override
        error "A resource override can not be virtual or exported"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 390)
  def _reduce_111(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        error "Defaults are not virtualizable"
      when :defaults
        error "Defaults are not virtualizable"
      when :override
        error "Defaults are not virtualizable"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 402)
  def _reduce_112(val, _values, result)
      	  result = case Factory.resource_shape(val[0])
  	  when :resource, :class
  	    Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
	  when :defaults
        error "A resource default can not specify a resource name"
  	  when :override
        error "A resource override does not allow override of name of resource"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 415)
  def _reduce_113(val, _values, result)
      	  result = case Factory.resource_shape(val[0])
  	  when :resource, :class
	    # This catches deprecated syntax.
	    error "All resource specifications require names"
	  when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
  	  when :override
  	    # This was only done for override in original - TODO shuld it be here at all
        @lexer.commentpop
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]  	  
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 431)
  def _reduce_114(val, _values, result)
      	    result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
  	    loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 436)
  def _reduce_115(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_116(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 441)
  def _reduce_117(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 442)
  def _reduce_118(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 447)
  def _reduce_119(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 448)
  def _reduce_120(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 460)
  def _reduce_121(val, _values, result)
          @lexer.commentpop
      result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 465)
  def _reduce_122(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 470)
  def _reduce_123(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 471)
  def _reduce_124(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 125 omitted

# reduce 126 omitted

module_eval(<<'.,.,', 'egrammar.ra', 486)
  def _reduce_127(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 487)
  def _reduce_128(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 488)
  def _reduce_129(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

module_eval(<<'.,.,', 'egrammar.ra', 504)
  def _reduce_133(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 508)
  def _reduce_134(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 518)
  def _reduce_135(val, _values, result)
          @lexer.commentpop
      result = Factory.DEFINITION(classname(val[1][:value]), val[2], val[4])
      loc result, val[0], val[5]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 524)
  def _reduce_136(val, _values, result)
          @lexer.commentpop
      result = Factory.DEFINITION(classname(val[1][:value]), val[2], nil)
      loc result, val[0], val[4]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 540)
  def _reduce_137(val, _values, result)
          @lexer.commentpop
      @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5])
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 546)
  def _reduce_138(val, _values, result)
          @lexer.commentpop
      @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), nil)
      loc result, val[0], val[5]
      
    result
  end
.,.,

# reduce 139 omitted

module_eval(<<'.,.,', 'egrammar.ra', 555)
  def _reduce_140(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'egrammar.ra', 572)
  def _reduce_143(val, _values, result)
          @lexer.commentpop
      result = Factory.NODE(val[1], val[2], val[4])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_144(val, _values, result)
          @lexer.commentpop
      result = Factory.NODE(val[1], val[2], nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 588)
  def _reduce_145(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_146(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 593)
  def _reduce_147(val, _values, result)
     result = Factory.fqn(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 594)
  def _reduce_148(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 595)
  def _reduce_149(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 150 omitted

# reduce 151 omitted

module_eval(<<'.,.,', 'egrammar.ra', 601)
  def _reduce_152(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 607)
  def _reduce_153(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 608)
  def _reduce_154(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 613)
  def _reduce_155(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 614)
  def _reduce_156(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_157(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 619)
  def _reduce_158(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_159(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 624)
  def _reduce_160(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 625)
  def _reduce_161(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 162 omitted

# reduce 163 omitted

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_164(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_165(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_166(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_167(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_168(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_169(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_170(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_171(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_172(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_173(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 174 omitted

# reduce 175 omitted

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_176(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_177(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 667)
  def _reduce_178(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_179(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_180(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_181(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_182(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_183(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_184(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_185(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_186(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_187(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_188(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 685)
  def _reduce_189(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 688)
  def _reduce_190(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 191 omitted

module_eval(<<'.,.,', 'egrammar.ra', 701)
  def _reduce_192(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

module_eval(<<'.,.,', 'egrammar.ra', 724)
  def _reduce_209(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

        end   # class Parser
        end   # module Parser
      end   # module Impl
    end   # module Pops
  end   # module Puppet
