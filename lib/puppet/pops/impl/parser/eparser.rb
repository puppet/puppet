#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/pops/impl/parser/lexer'
require 'puppet/pops/impl/model/factory'
#require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Impl
      module Parser
        class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 744)

# Require supporting logic mixed in to the generated Puppet::Pops::Impl::Parser::Parser class
require 'puppet/pops/impl/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'52,54,-194,68,48,201,49,239,68,278,218,232,-204,115,-126,196,88,232',
'92,201,-128,88,13,92,254,52,54,222,38,120,262,45,221,47,94,220,46,59',
'55,198,40,58,91,-194,293,56,12,91,240,57,52,54,11,-204,48,-126,49,70',
'71,307,60,-128,306,55,69,232,39,119,103,210,121,114,13,312,215,113,52',
'54,38,111,120,45,281,47,94,60,46,59,55,60,40,58,238,68,186,56,12,52',
'54,57,114,48,11,49,113,114,88,114,92,113,60,113,323,114,55,231,39,113',
'119,13,232,121,114,120,300,38,113,120,45,301,47,43,91,46,59,55,60,40',
'58,44,60,201,56,12,52,54,57,161,48,11,49,349,223,307,304,224,306,60',
'227,226,280,119,308,39,121,119,13,310,121,52,54,277,38,103,102,45,127',
'47,43,236,46,59,55,60,40,58,44,60,215,56,12,52,54,57,317,48,11,49,347',
'64,66,65,67,236,60,319,320,55,68,225,39,52,54,13,260,63,133,261,286',
'38,260,88,45,92,47,43,238,46,59,55,256,40,58,44,291,330,56,12,52,54',
'57,68,48,11,49,331,253,91,252,55,109,60,334,310,88,336,92,39,337,104',
'13,338,236,340,97,343,38,344,345,45,238,47,94,63,46,59,55,61,40,58,91',
'352,353,56,12,52,54,57,354,48,11,49,355,,,70,71,,60,,,,69,,39,,,13,',
',,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,',
',,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54',
'57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40',
'58,,,,56,12,52,54,57,,48,11,49,342,,,,,,60,,,,,,39,,,13,,,,,,38,,,45',
',47,43,,46,59,55,,40,58,44,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,',
'39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11',
'49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56',
'12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46',
'59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,',
'38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60',
',,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57',
',48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58',
',,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94',
',46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,',
',,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,258',
',,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,43,,46,59,55,,40,58,44,,,56,12',
'52,54,57,,48,11,49,264,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,43,,46',
'59,55,,40,58,44,,,56,12,52,54,57,,48,11,49,266,68,,,,,60,,,,,,39,,88',
'13,92,,,,,38,,,45,,47,43,,46,59,55,,40,58,44,,,56,12,91,,57,52,54,11',
',48,125,49,75,74,,60,,70,71,,,39,,,69,,,13,,,,,,38,,,45,,47,94,,46,59',
'55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38',
',,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,',
',,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48',
'11,49,328,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,43,,46,59,55,,40,58',
'44,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47',
'43,,46,59,55,,40,58,44,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,',
',13,,,,,,38,,,45,,47,43,,46,59,55,,40,58,44,,,56,12,52,54,57,,48,11',
'49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,43,,46,59,55,,40,58,44,,,56',
'12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,43,,46',
'59,55,,40,58,44,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,',
',,38,,,45,,47,43,,46,59,55,,40,58,44,,,56,12,52,54,57,,48,11,49,,,,',
',,60,,,,,,39,,,13,,,,,,38,,,45,,47,43,,46,59,55,,40,58,44,,,56,12,52',
'54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55',
',40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45',
',47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39',
',,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49',
'313,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56',
'12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46',
'59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,',
'38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60',
',,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57',
',48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58',
',,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94',
',46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,',
',,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,',
',,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54',
'57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40',
'58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47',
'94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13',
',,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,',
',,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52',
'54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55',
',40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45',
',47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39',
',,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49',
',,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12',
'52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59',
'55,,40,58,,,,56,12,52,54,57,,48,11,49,351,,,,,,60,,,,,,39,,,13,,,,,',
'38,,,45,,47,43,,46,59,55,,40,58,44,,,56,12,52,54,57,,48,11,49,,,,,,',
'60,,,,,,39,,,13,,,,,,163,180,183,174,181,47,175,184,176,172,170,,165',
'178,,,,56,12,185,179,177,52,54,11,,48,,49,299,,,60,,,,,182,164,,,,,',
'13,,,,,,38,,,45,,47,43,,46,59,55,,40,58,44,,,56,12,52,54,57,,48,11,49',
',,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12',
'52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59',
'55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38',
',,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,',
',,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48',
'11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,',
'56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,',
'46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,193',
',,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,',
',,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54',
'57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40',
'58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47',
'94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,,60,,,,,,39,,,13',
'203,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49',
',68,,,,,60,,,,,,39,,88,13,92,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,',
'56,12,91,,57,52,54,11,,48,285,49,75,74,,60,,70,71,,,39,,,69,,,13,,,',
',,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54,57,,48,11,49,,,,,,',
'60,,,,,,39,,,13,,,,,,38,,,45,,47,94,,46,59,55,,40,58,,,,56,12,52,54',
'57,,48,11,49,326,,,,,,60,,,,,,39,,,13,,,,,,38,,,45,,47,43,,46,59,55',
',40,58,44,,,56,12,,,57,,,11,,,,,,,68,60,211,,,,,39,,86,87,83,78,88,',
'92,,,,,79,81,80,82,,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77,,70',
'71,68,,206,,,69,,,,86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,',
',91,,,,85,84,,,72,73,75,74,76,77,,70,71,68,,205,,,69,,,,86,87,83,78',
'88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77',
',70,71,68,,204,,,69,,,,86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,,,,',
',,,,,91,,,,85,84,,,72,73,75,74,76,77,68,70,71,,,,,,69,86,87,83,78,88',
',92,,,,191,79,81,80,82,,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77',
'68,70,71,,,,,,69,86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,,,91',
',,,85,84,,,72,73,75,74,76,77,68,70,71,,,270,,,69,86,87,83,78,88,,92',
',,,,79,81,80,82,,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77,68,70',
'71,,,,,,69,86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,,,91,,,,85',
'84,,,72,73,75,74,76,77,68,70,71,,,,,,69,86,87,83,78,88,,92,,,,,79,81',
'80,82,,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77,68,70,71,,,,,,69',
'86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,,,91,,,,85,84,,,72,73',
'75,74,76,77,68,70,71,,,,,,69,86,87,83,78,88,,92,,,,,79,81,80,82,,,,',
',,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77,68,70,71,,,,,,69,86,87,83',
'78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76',
'77,68,70,71,,,,,,69,86,87,83,78,88,,92,,68,,,79,81,80,82,,,,,,,88,,92',
',,,,,,91,,,,85,84,68,,72,73,75,74,76,77,,70,71,91,,88,,92,69,68,,72',
'73,75,74,,,,70,71,,,88,,92,69,,,,,68,91,,,,,,,,72,73,75,74,88,,92,70',
'71,91,,,,,69,,,72,73,75,74,76,77,,70,71,,,,,91,69,,,,68,,,72,73,75,74',
'76,77,,70,71,78,88,,92,,69,68,,79,,,,,,,,,,78,88,,92,,,,,79,91,,,,,',
',,72,73,75,74,76,77,,70,71,,91,,,,69,68,,,72,73,75,74,76,77,,70,71,78',
'88,,92,,69,68,,79,,,,,,,,,,78,88,,92,,,,,79,91,,,,,,,,72,73,75,74,76',
'77,,70,71,,91,,,,69,,68,,72,73,75,74,76,77,,70,71,83,78,88,,92,69,,',
',79,81,80,82,,,,,,,,,,,,,,,,91,,,,,,68,,72,73,75,74,76,77,,70,71,83',
'78,88,,92,69,,,,79,81,80,82,,,,,,,,,,,,,,,,91,,,,,84,,,72,73,75,74,76',
'77,68,70,71,,,,,,69,86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,',
',,91,,,,85,84,,,72,73,75,74,76,77,68,70,71,,,,,,69,86,87,83,78,88,,92',
',,,,79,81,80,82,,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77,68,70',
'71,,,,,,69,86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,,,91,,,,85',
'84,,,72,73,75,74,76,77,68,70,71,,,,,,69,86,87,83,78,88,,92,,,,,79,81',
'80,82,,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77,,70,71,68,,89,',
',69,,,,86,87,83,78,88,,92,,,,,79,81,80,82,,,,,,,,,,,,,,,,91,,,,85,84',
',,72,73,75,74,76,77,68,70,71,,,,,,69,86,87,83,78,88,234,92,,,,,79,81',
'80,82,,,,,,,,,,,,,,,,91,,,,85,84,,,72,73,75,74,76,77,,70,71,248,180',
'183,247,181,69,245,184,249,243,242,,244,246,,,,,,185,179,250,248,180',
'183,247,181,,245,184,249,243,242,,244,246,,182,251,,,185,179,250,248',
'180,183,247,181,,245,184,249,243,242,,244,246,,182,251,,,185,179,250',
',,,,,,,,,,,,,,,182,251' ]
        racc_action_table = arr = ::Array.new(4669, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'109,109,178,147,109,103,109,173,140,215,117,192,177,44,170,101,147,202',
'147,215,172,140,109,140,192,70,70,124,109,46,202,109,124,109,109,117',
'109,109,109,103,109,109,147,178,237,109,109,140,173,109,261,261,109',
'177,261,170,261,147,147,304,109,172,304,70,147,267,109,46,102,109,46',
'45,261,267,112,45,71,71,261,43,218,261,217,261,261,70,261,261,261,46',
'261,261,241,95,90,261,261,4,4,261,175,4,261,4,175,277,95,43,95,277,261',
'43,277,94,71,139,261,94,218,4,139,218,174,176,257,4,174,220,4,259,4',
'4,95,4,4,4,71,4,4,4,218,260,4,4,336,336,4,88,336,4,336,336,126,264,263',
'126,264,4,132,132,216,176,265,4,176,220,336,266,220,49,49,213,336,36',
'36,336,49,336,336,212,336,336,336,176,336,336,336,220,116,336,336,334',
'334,336,271,334,336,334,334,8,8,8,8,273,336,274,275,49,93,129,336,224',
'224,334,279,62,61,201,224,334,199,93,334,93,334,334,290,334,334,334',
'194,334,334,334,235,297,334,334,164,164,334,148,164,334,164,298,190',
'93,188,224,41,334,307,308,148,310,148,334,311,37,164,316,166,318,35',
'324,164,325,327,164,167,164,164,5,164,164,164,1,164,164,148,341,346',
'164,164,11,11,164,348,11,164,11,350,,,148,148,,164,,,,148,,164,,,11',
',,,,,11,,,11,,11,11,,11,11,11,,11,11,,,,11,11,12,12,11,,12,11,12,,,',
',,,11,,,,,,11,,,12,,,,,,12,,,12,,12,12,,12,12,12,,12,12,,,,12,12,13',
'13,12,,13,12,13,,,,,,,12,,,,,,12,,,13,,,,,,13,,,13,,13,13,,13,13,13',
',13,13,,,,13,13,320,320,13,,320,13,320,320,,,,,,13,,,,,,13,,,320,,,',
',,320,,,320,,320,320,,320,320,320,,320,320,320,,,320,320,317,317,320',
',317,320,317,,,,,,,320,,,,,,320,,,317,,,,,,317,,,317,,317,317,,317,317',
'317,,317,317,,,,317,317,163,163,317,,163,317,163,,,,,,,317,,,,,,317',
',,163,,,,,,163,,,163,,163,163,,163,163,163,,163,163,,,,163,163,38,38',
'163,,38,163,38,,,,,,,163,,,,,,163,,,38,,,,,,38,,,38,,38,38,,38,38,38',
',38,38,,,,38,38,39,39,38,,39,38,39,,,,,,,38,,,,,,38,,,39,,,,,,39,,,39',
',39,39,,39,39,39,,39,39,,,,39,39,40,40,39,,40,39,40,,,,,,,39,,,,,,39',
',,40,,,,,,40,,,40,,40,40,,40,40,40,,40,40,,,,40,40,306,306,40,,306,40',
'306,,,,,,,40,,,,,,40,,,306,,,,,,306,,,306,,306,306,,306,306,306,,306',
'306,,,,306,306,42,42,306,,42,306,42,,,,,,,306,,,,,,306,,,42,,,,,,42',
',,42,,42,42,,42,42,42,,42,42,,,,42,42,165,165,42,,165,42,165,,,,,,,42',
',,,,,42,,,165,,,,,,165,,,165,,165,165,,165,165,165,,165,165,,,,165,165',
'197,197,165,,197,165,197,197,,,,,,165,,,,,,165,,,197,,,,,,197,,,197',
',197,197,,197,197,197,,197,197,197,,,197,197,204,204,197,,204,197,204',
'204,,,,,,197,,,,,,197,,,204,,,,,,204,,,204,,204,204,,204,204,204,,204',
'204,204,,,204,204,205,205,204,,205,204,205,205,145,,,,,204,,,,,,204',
',145,205,145,,,,,205,,,205,,205,205,,205,205,205,,205,205,205,,,205',
'205,145,,205,48,48,205,,48,48,48,145,145,,205,,145,145,,,205,,,145,',
',48,,,,,,48,,,48,,48,48,,48,48,48,,48,48,,,,48,48,206,206,48,,206,48',
'206,,,,,,,48,,,,,,48,,,206,,,,,,206,,,206,,206,206,,206,206,206,,206',
'206,,,,206,206,53,53,206,,53,206,53,,,,,,,206,,,,,,206,,,53,,,,,,53',
',,53,,53,53,,53,53,53,,53,53,,,,53,53,281,281,53,,281,53,281,281,,,',
',,53,,,,,,53,,,281,,,,,,281,,,281,,281,281,,281,281,281,,281,281,281',
',,281,281,0,0,281,,0,281,0,,,,,,,281,,,,,,281,,,0,,,,,,0,,,0,,0,0,,0',
'0,0,,0,0,0,,,0,0,63,63,0,,63,0,63,,,,,,,0,,,,,,0,,,63,,,,,,63,,,63,',
'63,63,,63,63,63,,63,63,63,,,63,63,64,64,63,,64,63,64,,,,,,,63,,,,,,63',
',,64,,,,,,64,,,64,,64,64,,64,64,64,,64,64,64,,,64,64,65,65,64,,65,64',
'65,,,,,,,64,,,,,,64,,,65,,,,,,65,,,65,,65,65,,65,65,65,,65,65,65,,,65',
'65,66,66,65,,66,65,66,,,,,,,65,,,,,,65,,,66,,,,,,66,,,66,,66,66,,66',
'66,66,,66,66,66,,,66,66,67,67,66,,67,66,67,,,,,,,66,,,,,,66,,,67,,,',
',,67,,,67,,67,67,,67,67,67,,67,67,67,,,67,67,68,68,67,,68,67,68,,,,',
',,67,,,,,,67,,,68,,,,,,68,,,68,,68,68,,68,68,68,,68,68,,,,68,68,69,69',
'68,,69,68,69,,,,,,,68,,,,,,68,,,69,,,,,,69,,,69,,69,69,,69,69,69,,69',
'69,,,,69,69,270,270,69,,270,69,270,,,,,,,69,,,,,,69,,,270,,,,,,270,',
',270,,270,270,,270,270,270,,270,270,,,,270,270,268,268,270,,268,270',
'268,268,,,,,,270,,,,,,270,,,268,,,,,,268,,,268,,268,268,,268,268,268',
',268,268,,,,268,268,72,72,268,,72,268,72,,,,,,,268,,,,,,268,,,72,,,',
',,72,,,72,,72,72,,72,72,72,,72,72,,,,72,72,73,73,72,,73,72,73,,,,,,',
'72,,,,,,72,,,73,,,,,,73,,,73,,73,73,,73,73,73,,73,73,,,,73,73,74,74',
'73,,74,73,74,,,,,,,73,,,,,,73,,,74,,,,,,74,,,74,,74,74,,74,74,74,,74',
'74,,,,74,74,75,75,74,,75,74,75,,,,,,,74,,,,,,74,,,75,,,,,,75,,,75,,75',
'75,,75,75,75,,75,75,,,,75,75,76,76,75,,76,75,76,,,,,,,75,,,,,,75,,,76',
',,,,,76,,,76,,76,76,,76,76,76,,76,76,,,,76,76,77,77,76,,77,76,77,,,',
',,,76,,,,,,76,,,77,,,,,,77,,,77,,77,77,,77,77,77,,77,77,,,,77,77,78',
'78,77,,78,77,78,,,,,,,77,,,,,,77,,,78,,,,,,78,,,78,,78,78,,78,78,78',
',78,78,,,,78,78,79,79,78,,79,78,79,,,,,,,78,,,,,,78,,,79,,,,,,79,,,79',
',79,79,,79,79,79,,79,79,,,,79,79,80,80,79,,80,79,80,,,,,,,79,,,,,,79',
',,80,,,,,,80,,,80,,80,80,,80,80,80,,80,80,,,,80,80,81,81,80,,81,80,81',
',,,,,,80,,,,,,80,,,81,,,,,,81,,,81,,81,81,,81,81,81,,81,81,,,,81,81',
'82,82,81,,82,81,82,,,,,,,81,,,,,,81,,,82,,,,,,82,,,82,,82,82,,82,82',
'82,,82,82,,,,82,82,83,83,82,,83,82,83,,,,,,,82,,,,,,82,,,83,,,,,,83',
',,83,,83,83,,83,83,83,,83,83,,,,83,83,84,84,83,,84,83,84,,,,,,,83,,',
',,,83,,,84,,,,,,84,,,84,,84,84,,84,84,84,,84,84,,,,84,84,85,85,84,,85',
'84,85,,,,,,,84,,,,,,84,,,85,,,,,,85,,,85,,85,85,,85,85,85,,85,85,,,',
'85,85,86,86,85,,86,85,86,,,,,,,85,,,,,,85,,,86,,,,,,86,,,86,,86,86,',
'86,86,86,,86,86,,,,86,86,87,87,86,,87,86,87,,,,,,,86,,,,,,86,,,87,,',
',,,87,,,87,,87,87,,87,87,87,,87,87,,,,87,87,337,337,87,,337,87,337,337',
',,,,,87,,,,,,87,,,337,,,,,,337,,,337,,337,337,,337,337,337,,337,337',
'337,,,337,337,89,89,337,,89,337,89,,,,,,,337,,,,,,337,,,89,,,,,,89,89',
'89,89,89,89,89,89,89,89,89,,89,89,,,,89,89,89,89,89,256,256,89,,256',
',256,256,,,89,,,,,89,89,,,,,,256,,,,,,256,,,256,,256,256,,256,256,256',
',256,256,256,,,256,256,91,91,256,,91,256,91,,,,,,,256,,,,,,256,,,91',
',,,,,91,,,91,,91,91,,91,91,91,,91,91,,,,91,91,92,92,91,,92,91,92,,,',
',,,91,,,,,,91,,,92,,,,,,92,,,92,,92,92,,92,92,92,,92,92,,,,92,92,240',
'240,92,,240,92,240,,,,,,,92,,,,,,92,,,240,,,,,,240,,,240,,240,240,,240',
'240,240,,240,240,,,,240,240,239,239,240,,239,240,239,,,,,,,240,,,,,',
'240,,,239,,,,,,239,,,239,,239,239,,239,239,239,,239,239,,,,239,239,236',
'236,239,,236,239,236,,,,,,,239,,,,,,239,,,236,,,,,,236,,,236,,236,236',
',236,236,236,,236,236,,,,236,236,210,210,236,,210,236,210,,,,,,,236',
',,,,,236,,,210,,,,,,210,,,210,,210,210,,210,210,210,,210,210,,,,210',
'210,97,97,210,,97,210,97,,,,,,,210,,,,,,210,,,97,97,,,,,97,,,97,,97',
'97,,97,97,97,,97,97,,,,97,97,232,232,97,,232,97,232,,,,,,,97,,,,,,97',
',,232,,,,,,232,,,232,,232,232,,232,232,232,,232,232,,,,232,232,230,230',
'232,,230,232,230,,,,,,,232,,,,,,232,,,230,,,,,,230,,,230,,230,230,,230',
'230,230,,230,230,,,,230,230,225,225,230,,225,230,225,,,,,,,230,,,,,',
'230,,,225,,,,,,225,,,225,,225,225,,225,225,225,,225,225,,,,225,225,104',
'104,225,,104,225,104,,,,,,,225,,,,,,225,,,104,104,,,,,104,,,104,,104',
'104,,104,104,104,,104,104,,,,104,104,211,211,104,,211,104,211,,146,',
',,,104,,,,,,104,,146,211,146,,,,,211,,,211,,211,211,,211,211,211,,211',
'211,,,,211,211,146,,211,221,221,211,,221,221,221,146,146,,211,,146,146',
',,211,,,146,,,221,,,,,,221,,,221,,221,221,,221,221,221,,221,221,,,,221',
'221,111,111,221,,111,221,111,,,,,,,221,,,,,,221,,,111,,,,,,111,,,111',
',111,111,,111,111,111,,111,111,,,,111,111,280,280,111,,280,111,280,280',
',,,,,111,,,,,,111,,,280,,,,,,280,,,280,,280,280,,280,280,280,,280,280',
'280,,,280,280,,,280,,,280,,,,,,,110,280,110,,,,,280,,110,110,110,110',
'110,,110,,,,,110,110,110,110,,,,,,,,,,,,,,,,110,,,,110,110,,,110,110',
'110,110,110,110,,110,110,108,,108,,,110,,,,108,108,108,108,108,,108',
',,,,108,108,108,108,,,,,,,,,,,,,,,,108,,,,108,108,,,108,108,108,108',
'108,108,,108,108,107,,107,,,108,,,,107,107,107,107,107,,107,,,,,107',
'107,107,107,,,,,,,,,,,,,,,,107,,,,107,107,,,107,107,107,107,107,107',
',107,107,105,,105,,,107,,,,105,105,105,105,105,,105,,,,,105,105,105',
'105,,,,,,,,,,,,,,,,105,,,,105,105,,,105,105,105,105,105,105,96,105,105',
',,,,,105,96,96,96,96,96,,96,,,,96,96,96,96,96,,,,,,,,,,,,,,,,96,,,,96',
'96,,,96,96,96,96,96,96,123,96,96,,,,,,96,123,123,123,123,123,,123,,',
',,123,123,123,123,,,,,,,,,,,,,,,,123,,,,123,123,,,123,123,123,123,123',
'123,207,123,123,,,207,,,123,207,207,207,207,207,,207,,,,,207,207,207',
'207,,,,,,,,,,,,,,,,207,,,,207,207,,,207,207,207,207,207,207,284,207',
'207,,,,,,207,284,284,284,284,284,,284,,,,,284,284,284,284,,,,,,,,,,',
',,,,,284,,,,284,284,,,284,284,284,284,284,284,288,284,284,,,,,,284,288',
'288,288,288,288,,288,,,,,288,288,288,288,,,,,,,,,,,,,,,,288,,,,288,288',
',,288,288,288,288,288,288,130,288,288,,,,,,288,130,130,130,130,130,',
'130,,,,,130,130,130,130,,,,,,,,,,,,,,,,130,,,,130,130,,,130,130,130',
'130,130,130,295,130,130,,,,,,130,295,295,295,295,295,,295,,,,,295,295',
'295,295,,,,,,,,,,,,,,,,295,,,,295,295,,,295,295,295,295,295,295,296',
'295,295,,,,,,295,296,296,296,296,296,,296,,,,,296,296,296,296,,,,,,',
',,,,,,,,,296,,,,296,296,,,296,296,296,296,296,296,187,296,296,,,,,,296',
'187,187,187,187,187,,187,,149,,,187,187,187,187,,,,,,,149,,149,,,,,',
',187,,,,187,187,150,,187,187,187,187,187,187,,187,187,149,,150,,150',
'187,151,,149,149,149,149,,,,149,149,,,151,,151,149,,,,,152,150,,,,,',
',,150,150,150,150,152,,152,150,150,151,,,,,150,,,151,151,151,151,151',
'151,,151,151,,,,,152,151,,,,153,,,152,152,152,152,152,152,,152,152,153',
'153,,153,,152,154,,153,,,,,,,,,,154,154,,154,,,,,154,153,,,,,,,,153',
'153,153,153,153,153,,153,153,,154,,,,153,155,,,154,154,154,154,154,154',
',154,154,155,155,,155,,154,156,,155,,,,,,,,,,156,156,,156,,,,,156,155',
',,,,,,,155,155,155,155,155,155,,155,155,,156,,,,155,,157,,156,156,156',
'156,156,156,,156,156,157,157,157,,157,156,,,,157,157,157,157,,,,,,,',
',,,,,,,,157,,,,,,158,,157,157,157,157,157,157,,157,157,158,158,158,',
'158,157,,,,158,158,158,158,,,,,,,,,,,,,,,,158,,,,,158,,,158,158,158',
'158,158,158,159,158,158,,,,,,158,159,159,159,159,159,,159,,,,,159,159',
'159,159,,,,,,,,,,,,,,,,159,,,,159,159,,,159,159,159,159,159,159,160',
'159,159,,,,,,159,160,160,160,160,160,,160,,,,,160,160,160,160,,,,,,',
',,,,,,,,,160,,,,160,160,,,160,160,160,160,160,160,303,160,160,,,,,,160',
'303,303,303,303,303,,303,,,,,303,303,303,303,,,,,,,,,,,,,,,,303,,,,303',
'303,,,303,303,303,303,303,303,315,303,303,,,,,,303,315,315,315,315,315',
',315,,,,,315,315,315,315,,,,,,,,,,,,,,,,315,,,,315,315,,,315,315,315',
'315,315,315,,315,315,10,,10,,,315,,,,10,10,10,10,10,,10,,,,,10,10,10',
'10,,,,,,,,,,,,,,,,10,,,,10,10,,,10,10,10,10,10,10,162,10,10,,,,,,10',
'162,162,162,162,162,162,162,,,,,162,162,162,162,,,,,,,,,,,,,,,,162,',
',,162,162,,,162,162,162,162,162,162,,162,162,238,238,238,238,238,162',
'238,238,238,238,238,,238,238,,,,,,238,238,238,186,186,186,186,186,,186',
'186,186,186,186,,186,186,,238,238,,,186,186,186,233,233,233,233,233',
',233,233,233,233,233,,233,233,,186,186,,,233,233,233,,,,,,,,,,,,,,,',
'233,233' ]
        racc_action_check = arr = ::Array.new(4669, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1179,   277,   nil,   nil,    95,   261,   nil,   nil,   136,   nil,
  4471,   283,   330,   377,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   240,   104,   235,   565,   612,
   659,   227,   753,    71,   -31,    35,    27,   nil,   991,   167,
   nil,   nil,   nil,  1085,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   216,   203,  1226,  1273,  1320,  1367,  1414,  1461,  1508,
    23,    74,  1649,  1696,  1743,  1790,  1837,  1884,  1931,  1978,
  2025,  2072,  2119,  2166,  2213,  2260,  2307,  2354,   107,  2448,
    86,  2545,  2592,   202,    77,    87,  3482,  2827,   nil,   nil,
   nil,     4,    -1,   -30,  3015,  3429,   nil,  3373,  3317,    -2,
  3261,  3159,    50,   nil,   nil,   nil,   164,    -2,   nil,   nil,
   nil,   nil,   nil,  3535,    20,   nil,   143,   nil,   nil,   198,
  3747,   nil,   154,   nil,   nil,   nil,   nil,   nil,   nil,   108,
     2,   nil,   nil,   nil,   nil,   945,  3066,    -3,   235,  3923,
  3951,  3968,  3989,  4033,  4051,  4095,  4113,  4158,  4203,  4256,
  4309,   nil,  4524,   518,   236,   800,   221,   258,   nil,   nil,
     3,   nil,     9,    -4,    86,    64,   121,     1,    -9,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  4578,  3906,   202,   nil,
   224,   nil,    -1,   nil,   222,   nil,   nil,   847,   nil,   208,
   nil,   202,     5,   nil,   894,   941,  1038,  3588,   nil,   nil,
  2780,  3062,   138,   134,   nil,   -16,   152,    74,    78,   nil,
   125,  3112,   nil,   nil,   209,  2968,   nil,   nil,   nil,   nil,
  2921,   nil,  2874,  4600,   nil,   225,  2733,    35,  4556,  2686,
  2639,    80,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  2498,   115,   nil,    60,
   106,    48,   nil,   145,   122,   153,   136,    53,  1602,   nil,
  1555,   182,   nil,   162,   196,   198,   nil,    69,   nil,   202,
  3206,  1132,   nil,   nil,  3641,   nil,   nil,   nil,  3694,   nil,
   214,   nil,   nil,   nil,   nil,  3800,  3853,   226,   236,   nil,
   nil,   nil,   nil,  4362,    28,   nil,   706,   244,   222,   nil,
   247,   250,   nil,   nil,   nil,  4415,   252,   471,   254,   nil,
   424,   nil,   nil,   nil,   240,   258,   nil,   259,   nil,   nil,
   nil,   nil,   nil,   nil,   189,   nil,   142,  2401,   nil,   nil,
   nil,   272,   nil,   nil,   nil,   nil,   273,   nil,   279,   nil,
   283,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -206,  -207,    -1,    -2,    -3,    -4,    -6,    -8,    -9,   -14,
  -106,  -207,  -207,  -207,   -40,   -41,   -42,   -43,   -44,   -45,
   -46,   -47,   -48,   -49,   -50,   -51,   -52,   -53,   -54,   -55,
   -56,   -57,   -58,   -59,   -60,   -63,   -64,   -68,  -207,  -207,
  -207,   -99,  -207,  -207,  -115,  -207,  -207,  -160,  -207,  -207,
  -170,  -171,  -172,  -207,  -174,  -181,  -182,  -183,  -184,  -185,
  -186,  -207,    -5,  -207,  -207,  -207,  -207,  -207,  -207,  -207,
  -207,  -207,  -207,  -207,  -207,  -207,  -207,  -207,  -207,  -207,
  -207,  -207,  -207,  -207,  -207,  -207,  -207,  -207,  -207,  -123,
  -118,  -206,  -206,   -25,  -207,   -32,  -207,  -207,   -65,   -70,
   -71,  -206,  -207,  -207,  -207,  -207,   -81,  -207,  -207,  -207,
  -207,  -207,  -206,  -149,  -150,  -116,  -206,  -206,  -141,  -143,
  -144,  -145,  -146,   -38,  -207,  -163,  -207,  -166,  -167,  -207,
  -178,  -173,  -207,   356,    -7,   -10,   -11,   -12,   -13,  -207,
   -16,   -17,  -158,  -159,   -18,   -19,   -20,   -21,   -22,   -23,
   -24,   -26,   -27,   -28,   -29,   -30,   -31,   -33,   -34,   -35,
   -36,   -69,  -207,  -198,  -205,  -192,  -189,  -187,  -113,  -124,
  -181,  -127,  -185,  -207,  -195,  -193,  -202,  -183,  -184,  -191,
  -196,  -197,  -199,  -200,  -201,  -203,  -123,  -122,  -207,  -121,
  -207,   -37,  -207,   -62,  -207,   -75,   -76,  -207,   -79,  -187,
  -154,  -157,  -207,   -67,  -207,  -207,  -207,  -207,  -100,  -101,
  -207,  -207,  -189,  -206,  -151,  -207,  -207,  -207,  -207,  -147,
  -207,  -207,  -161,  -164,  -207,  -207,  -175,  -176,  -177,  -179,
  -207,   -15,  -207,  -123,  -112,  -207,  -190,  -207,  -188,  -207,
  -207,  -187,  -126,  -128,  -192,  -193,  -194,  -195,  -198,  -202,
  -204,  -205,  -119,  -120,   -61,   -72,  -207,  -207,   -78,  -207,
  -188,  -207,   -66,  -207,   -84,  -207,   -90,  -207,  -207,   -94,
  -207,  -187,  -103,  -189,  -207,  -207,  -135,  -207,  -152,  -187,
  -207,  -207,  -142,  -148,   -39,  -162,  -165,  -168,  -169,  -180,
  -187,  -108,  -114,  -109,  -125,  -129,  -130,  -207,  -207,   -74,
   -77,   -80,  -155,  -156,   -84,   -83,  -207,  -207,   -90,   -89,
  -207,  -207,   -98,   -93,   -95,  -105,  -207,  -188,  -207,  -110,
  -207,  -136,  -137,  -138,  -207,  -207,  -132,  -207,  -140,  -111,
  -117,   -73,   -82,   -85,  -207,   -88,  -207,  -207,  -102,  -104,
  -107,  -207,  -134,  -153,  -131,  -139,  -207,   -87,  -207,   -92,
  -207,   -97,  -133,   -86,   -91,   -96 ]

racc_goto_table = [
     2,    93,    95,    96,   116,     3,   209,   131,   128,   166,
   309,   199,   129,   167,   237,   305,   122,   213,   101,   311,
   282,   216,   283,   269,   135,   136,   137,   138,   105,   107,
   108,   212,   110,   143,   143,   141,   144,   235,   123,   208,
   142,   142,   268,   130,   188,   190,   259,   271,   333,   255,
   194,   292,   335,   233,   100,   332,   294,    99,   123,   140,
   124,    98,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   275,   162,
   139,   187,   187,   274,   197,   314,   321,   123,   297,   217,
   134,   302,   126,    62,   123,     1,   229,   230,   228,   207,
   nil,   162,   nil,   nil,   nil,   nil,   195,   272,   nil,   192,
   241,   nil,   nil,   nil,   nil,   nil,   202,   214,   316,   nil,
   nil,   214,   219,   279,   nil,   nil,   324,   nil,   nil,   nil,
   nil,   273,   nil,   116,   nil,   nil,   nil,   329,   nil,   nil,
   nil,   nil,   nil,   nil,   318,   nil,   122,   nil,   nil,   nil,
   nil,   nil,   nil,   105,   107,   108,   nil,   290,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   287,   289,   nil,   nil,   129,   122,   nil,
   122,   nil,   nil,   nil,   nil,   nil,   123,   257,   nil,   nil,
   207,   162,   nil,   nil,   263,   265,   nil,   nil,   nil,   nil,
   nil,   284,   nil,   nil,   339,   288,   nil,   nil,   276,   nil,
   130,   nil,   284,   nil,   nil,   nil,   162,   nil,   nil,   295,
   296,   nil,   nil,   nil,   nil,   nil,   322,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   303,   nil,   nil,   nil,   nil,   298,   nil,   123,   nil,
   315,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   325,   327,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   105,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   207,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   341,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   346,   nil,   348,   350 ]

racc_goto_check = [
     2,     9,     9,     9,    66,     3,    53,    79,    75,    56,
    48,    44,    30,    58,    45,    47,    29,    67,    41,    51,
    72,    67,    72,    50,     8,     8,     8,     8,     9,     9,
     9,    56,     9,    30,    30,    12,    12,    57,     9,    52,
    29,    29,    49,     9,    62,    62,    45,    54,    46,    43,
    42,    59,    48,    60,    40,    47,    63,    39,     9,     9,
    11,    37,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,    68,     9,
    11,     9,     9,    57,    41,    50,    69,     9,    45,    71,
     6,    73,    74,     5,     9,     1,    80,    81,    83,     9,
   nil,     9,   nil,   nil,   nil,   nil,     3,    53,   nil,    11,
    58,   nil,   nil,   nil,   nil,   nil,    11,     3,    45,   nil,
   nil,     3,     3,    44,   nil,   nil,    45,   nil,   nil,   nil,
   nil,    56,   nil,    66,   nil,   nil,   nil,    45,   nil,   nil,
   nil,   nil,   nil,   nil,    57,   nil,    29,   nil,   nil,   nil,
   nil,   nil,   nil,     9,     9,     9,   nil,    58,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    75,    79,   nil,   nil,    30,    29,   nil,
    29,   nil,   nil,   nil,   nil,   nil,     9,     2,   nil,   nil,
     9,     9,   nil,   nil,     2,     2,   nil,   nil,   nil,   nil,
   nil,     9,   nil,   nil,    53,     9,   nil,   nil,     3,   nil,
     9,   nil,     9,   nil,   nil,   nil,     9,   nil,   nil,     9,
     9,   nil,   nil,   nil,   nil,   nil,    66,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     9,   nil,   nil,   nil,   nil,     2,   nil,     9,   nil,
     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    95,     0,     5,   nil,    89,    27,   nil,   -40,   -10,
   nil,    12,   -35,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -30,
   -37,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,    21,
    18,   -18,   -51,  -145,   -92,  -153,  -258,  -249,  -256,  -164,
  -183,  -248,   -70,  -103,  -163,   nil,   -80,  -129,   -76,  -185,
  -109,   nil,   -47,  -182,   nil,   nil,   -41,   -95,  -135,  -191,
   nil,   -28,  -198,  -169,    43,   -41,   nil,   nil,   nil,   -46,
   -36,   -35,   nil,   -34 ]

racc_goto_default = [
   nil,   nil,   nil,   189,     4,     5,     6,     7,     8,    10,
     9,   267,   nil,    14,    35,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    41,    36,   nil,    37,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   106,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    42,   nil,   nil,   nil,   168,
   nil,    90,   nil,   169,   173,   171,   112,   nil,   nil,   nil,
   117,   nil,   118,   200,   nil,   nil,    50,    51,    53,   nil,
   nil,   nil,   132,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 78, :_reduce_1,
  1, 78, :_reduce_none,
  1, 79, :_reduce_3,
  1, 81, :_reduce_4,
  2, 81, :_reduce_5,
  1, 82, :_reduce_6,
  3, 82, :_reduce_7,
  1, 83, :_reduce_none,
  1, 84, :_reduce_9,
  3, 84, :_reduce_10,
  3, 84, :_reduce_11,
  3, 84, :_reduce_12,
  3, 84, :_reduce_13,
  1, 86, :_reduce_none,
  4, 86, :_reduce_15,
  3, 86, :_reduce_16,
  3, 86, :_reduce_17,
  3, 86, :_reduce_18,
  3, 86, :_reduce_19,
  3, 86, :_reduce_20,
  3, 86, :_reduce_21,
  3, 86, :_reduce_22,
  3, 86, :_reduce_23,
  3, 86, :_reduce_24,
  2, 86, :_reduce_25,
  3, 86, :_reduce_26,
  3, 86, :_reduce_27,
  3, 86, :_reduce_28,
  3, 86, :_reduce_29,
  3, 86, :_reduce_30,
  3, 86, :_reduce_31,
  2, 86, :_reduce_32,
  3, 86, :_reduce_33,
  3, 86, :_reduce_34,
  3, 86, :_reduce_35,
  3, 86, :_reduce_36,
  3, 86, :_reduce_37,
  1, 88, :_reduce_38,
  3, 88, :_reduce_39,
  1, 87, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 107, :_reduce_59,
  1, 107, :_reduce_60,
  4, 112, :_reduce_61,
  3, 112, :_reduce_62,
  1, 112, :_reduce_63,
  1, 94, :_reduce_64,
  2, 94, :_reduce_65,
  4, 113, :_reduce_66,
  3, 113, :_reduce_67,
  1, 113, :_reduce_68,
  3, 115, :_reduce_69,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  3, 116, :_reduce_72,
  3, 120, :_reduce_73,
  2, 120, :_reduce_74,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  4, 117, :_reduce_77,
  3, 117, :_reduce_78,
  2, 118, :_reduce_79,
  4, 118, :_reduce_80,
  2, 97, :_reduce_81,
  5, 123, :_reduce_82,
  4, 123, :_reduce_83,
  0, 124, :_reduce_none,
  2, 124, :_reduce_85,
  4, 124, :_reduce_86,
  3, 124, :_reduce_87,
  6, 98, :_reduce_88,
  5, 98, :_reduce_89,
  0, 125, :_reduce_none,
  4, 125, :_reduce_91,
  3, 125, :_reduce_92,
  5, 96, :_reduce_93,
  1, 126, :_reduce_94,
  2, 126, :_reduce_95,
  5, 127, :_reduce_96,
  4, 127, :_reduce_97,
  1, 128, :_reduce_98,
  1, 90, :_reduce_none,
  3, 90, :_reduce_100,
  1, 129, :_reduce_none,
  4, 129, :_reduce_102,
  1, 131, :_reduce_103,
  3, 131, :_reduce_104,
  3, 130, :_reduce_105,
  1, 85, :_reduce_106,
  6, 85, :_reduce_107,
  5, 85, :_reduce_108,
  5, 85, :_reduce_109,
  5, 85, :_reduce_110,
  4, 136, :_reduce_111,
  1, 137, :_reduce_112,
  1, 133, :_reduce_113,
  3, 133, :_reduce_114,
  1, 132, :_reduce_115,
  2, 132, :_reduce_116,
  6, 95, :_reduce_117,
  2, 95, :_reduce_118,
  3, 138, :_reduce_119,
  3, 138, :_reduce_120,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  0, 135, :_reduce_123,
  1, 135, :_reduce_124,
  3, 135, :_reduce_125,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  3, 140, :_reduce_129,
  3, 140, :_reduce_130,
  6, 99, :_reduce_131,
  5, 99, :_reduce_132,
  7, 100, :_reduce_133,
  6, 100, :_reduce_134,
  1, 145, :_reduce_none,
  2, 145, :_reduce_136,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  6, 101, :_reduce_139,
  5, 101, :_reduce_140,
  1, 147, :_reduce_141,
  3, 147, :_reduce_142,
  1, 149, :_reduce_143,
  1, 149, :_reduce_144,
  1, 149, :_reduce_145,
  1, 149, :_reduce_none,
  1, 148, :_reduce_none,
  2, 148, :_reduce_148,
  1, 143, :_reduce_149,
  1, 143, :_reduce_150,
  1, 144, :_reduce_151,
  2, 144, :_reduce_152,
  4, 144, :_reduce_153,
  1, 121, :_reduce_154,
  3, 121, :_reduce_155,
  3, 150, :_reduce_156,
  1, 150, :_reduce_157,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 93, :_reduce_160,
  3, 102, :_reduce_161,
  4, 102, :_reduce_162,
  2, 102, :_reduce_163,
  3, 105, :_reduce_164,
  4, 105, :_reduce_165,
  2, 105, :_reduce_166,
  1, 151, :_reduce_167,
  3, 151, :_reduce_168,
  3, 152, :_reduce_169,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 153, :_reduce_172,
  2, 154, :_reduce_173,
  1, 155, :_reduce_174,
  1, 157, :_reduce_175,
  1, 158, :_reduce_176,
  2, 156, :_reduce_177,
  1, 159, :_reduce_178,
  1, 160, :_reduce_179,
  2, 160, :_reduce_180,
  1, 110, :_reduce_181,
  1, 108, :_reduce_182,
  1, 109, :_reduce_183,
  1, 104, :_reduce_184,
  1, 103, :_reduce_185,
  1, 106, :_reduce_186,
  0, 122, :_reduce_none,
  1, 122, :_reduce_188,
  0, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  0, 80, :_reduce_206 ]

racc_reduce_n = 207

racc_shift_n = 356

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68,
  :PIPE => 69,
  :LAMBDA => 70,
  :SELBRACE => 71,
  :LOW => 72,
  :HIGH => 73,
  :CALL => 74,
  :TITLE_COLON => 75,
  :CASE_COLON => 76 }

racc_nt_base = 77

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "LOW",
  "HIGH",
  "CALL",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "match_rvalue",
  "selector_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "type",
  "undef",
  "name",
  "quotedtext",
  "call_function_expression",
  "call_method_expression",
  "lambda",
  "named_access",
  "lambda_j8",
  "lambda_ruby",
  "lambda_parameter_list",
  "optional_farrow",
  "lambda_rest",
  "parameters",
  "endcomma",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entries",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 55)
  def _reduce_1(val, _values, result)
     result = Factory.block_or_expression(*val[0]) 
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'egrammar.ra', 61)
  def _reduce_3(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_4(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_5(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 72)
  def _reduce_6(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 73)
  def _reduce_7(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'egrammar.ra', 79)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_10(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_11(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_15(val, _values, result)
     result = val[0][*val[2]]; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_16(val, _values, result)
     result = val[0].in val[2]  ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 92)
  def _reduce_17(val, _values, result)
     result = val[0] =~  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_18(val, _values, result)
     result = val[0].mne val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_19(val, _values, result)
     result = val[0] +   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_20(val, _values, result)
     result = val[0] -   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_21(val, _values, result)
     result = val[0] /   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_22(val, _values, result)
     result = val[0] *   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_23(val, _values, result)
     result = val[0] <<  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_24(val, _values, result)
     result = val[0] >>  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_25(val, _values, result)
     result = val[1].minus()    ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_26(val, _values, result)
     result = val[0].ne  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_27(val, _values, result)
     result = val[0] ==  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_28(val, _values, result)
     result = val[0] >   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_29(val, _values, result)
     result = val[0] >=  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_30(val, _values, result)
     result = val[0] <   val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_31(val, _values, result)
     result = val[0] <=  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_32(val, _values, result)
     result = val[1].not        ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_33(val, _values, result)
     result = val[0].and val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_34(val, _values, result)
     result = val[0].or  val[2] ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_35(val, _values, result)
     result = val[0].set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_36(val, _values, result)
     result = val[0].plus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_37(val, _values, result)
     result = val[1]            ;                    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 120)
  def _reduce_38(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 121)
  def _reduce_39(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

module_eval(<<'.,.,', 'egrammar.ra', 152)
  def _reduce_59(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 153)
  def _reduce_60(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 160)
  def _reduce_61(val, _values, result)
     result = Factory.CALL_NAMED(val[0], true, val[2]) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 161)
  def _reduce_62(val, _values, result)
     result = Factory.CALL_NAMED(val[0], true, []) ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 162)
  def _reduce_63(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 168)
  def _reduce_64(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 169)
  def _reduce_65(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 172)
  def _reduce_66(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 173)
  def _reduce_67(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 174)
  def _reduce_68(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 179)
  def _reduce_69(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

# reduce 70 omitted

# reduce 71 omitted

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_72(val, _values, result)
          result = Factory.LAMBDA(val[0], val[2])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_73(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_74(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 75 omitted

# reduce 76 omitted

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_77(val, _values, result)
          result = Factory.LAMBDA(val[1], val[2])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_78(val, _values, result)
          result = Factory.LAMBDA(val[1], nil)
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_79(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 221)
  def _reduce_80(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 231)
  def _reduce_81(val, _values, result)
          result = val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 237)
  def _reduce_82(val, _values, result)
            @lexer.commentpop
        result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 242)
  def _reduce_83(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 84 omitted

module_eval(<<'.,.,', 'egrammar.ra', 249)
  def _reduce_85(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 251)
  def _reduce_86(val, _values, result)
            @lexer.commentpop
        result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 256)
  def _reduce_87(val, _values, result)
            @lexer.commentpop
  	    result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 266)
  def _reduce_88(val, _values, result)
          @lexer.commentpop
      result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 271)
  def _reduce_89(val, _values, result)
          @lexer.commentpop
      result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 90 omitted

module_eval(<<'.,.,', 'egrammar.ra', 282)
  def _reduce_91(val, _values, result)
            @lexer.commentpop
        result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_92(val, _values, result)
            @lexer.commentpop
    	  result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 296)
  def _reduce_93(val, _values, result)
          @lexer.commentpop
      result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 303)
  def _reduce_94(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 304)
  def _reduce_95(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_96(val, _values, result)
            @lexer.commentpop
        result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 314)
  def _reduce_97(val, _values, result)
            @lexer.commentpop
        result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 319)
  def _reduce_98(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 99 omitted

module_eval(<<'.,.,', 'egrammar.ra', 328)
  def _reduce_100(val, _values, result)
     result = val[0].select(*val[2]) ; loc result, val[0] 
    result
  end
.,.,

# reduce 101 omitted

module_eval(<<'.,.,', 'egrammar.ra', 339)
  def _reduce_102(val, _values, result)
            @lexer.commentpop
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_103(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 346)
  def _reduce_104(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 351)
  def _reduce_105(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 384)
  def _reduce_106(val, _values, result)
      	  result = val[0]
  	
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 387)
  def _reduce_107(val, _values, result)
      	  result = case Factory.resource_shape(val[1])
  	  when :resource, :class
  	    tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
  	    tmp.form = val[0]
  	    tmp
	  when :defaults
        error "A resource default can not be virtual or exported"
  	  when :override
        error "A resource override can not be virtual or exported"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 402)
  def _reduce_108(val, _values, result)
      	  result = case Factory.resource_shape(val[0])
  	  when :resource, :class
  	    Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
	  when :defaults
        error "A resource default can not specify a resource name"
  	  when :override
        error "A resource override does not allow override of name of resource"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 415)
  def _reduce_109(val, _values, result)
      	  result = case Factory.resource_shape(val[0])
  	  when :resource, :class
	    # This catches deprecated syntax.
	    error "All resource specifications require names"
	  when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
  	  when :override
  	    # This was only done for override in original - TODO shuld it be here at all
        @lexer.commentpop
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]  	  
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 431)
  def _reduce_110(val, _values, result)
      	    result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
  	    loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 436)
  def _reduce_111(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_112(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 441)
  def _reduce_113(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 442)
  def _reduce_114(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 447)
  def _reduce_115(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 448)
  def _reduce_116(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 460)
  def _reduce_117(val, _values, result)
          @lexer.commentpop
      result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 465)
  def _reduce_118(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 470)
  def _reduce_119(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 471)
  def _reduce_120(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 121 omitted

# reduce 122 omitted

module_eval(<<'.,.,', 'egrammar.ra', 486)
  def _reduce_123(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 487)
  def _reduce_124(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 488)
  def _reduce_125(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'egrammar.ra', 504)
  def _reduce_129(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 508)
  def _reduce_130(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 518)
  def _reduce_131(val, _values, result)
          @lexer.commentpop
      result = Factory.DEFINITION(classname(val[1][:value]), val[2], val[4])
      loc result, val[0], val[5]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 524)
  def _reduce_132(val, _values, result)
          @lexer.commentpop
      result = Factory.DEFINITION(classname(val[1][:value]), val[2], nil)
      loc result, val[0], val[4]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 540)
  def _reduce_133(val, _values, result)
          @lexer.commentpop
      @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5])
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 546)
  def _reduce_134(val, _values, result)
          @lexer.commentpop
      @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), nil)
      loc result, val[0], val[5]
      
    result
  end
.,.,

# reduce 135 omitted

module_eval(<<'.,.,', 'egrammar.ra', 555)
  def _reduce_136(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 137 omitted

# reduce 138 omitted

module_eval(<<'.,.,', 'egrammar.ra', 572)
  def _reduce_139(val, _values, result)
          @lexer.commentpop
      result = Factory.NODE(val[1], val[2], val[4])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_140(val, _values, result)
          @lexer.commentpop
      result = Factory.NODE(val[1], val[2], nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 588)
  def _reduce_141(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_142(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 593)
  def _reduce_143(val, _values, result)
     result = Factory.fqn(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 594)
  def _reduce_144(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 595)
  def _reduce_145(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 146 omitted

# reduce 147 omitted

module_eval(<<'.,.,', 'egrammar.ra', 601)
  def _reduce_148(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 607)
  def _reduce_149(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 608)
  def _reduce_150(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 613)
  def _reduce_151(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 614)
  def _reduce_152(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_153(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 619)
  def _reduce_154(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_155(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 624)
  def _reduce_156(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 625)
  def _reduce_157(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 158 omitted

# reduce 159 omitted

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_160(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_161(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_162(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_163(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_164(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_165(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_166(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_167(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_168(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_169(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 170 omitted

# reduce 171 omitted

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_172(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_173(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 667)
  def _reduce_174(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_175(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_176(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_177(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_178(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_179(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_180(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_181(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_182(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_183(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_184(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 685)
  def _reduce_185(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 688)
  def _reduce_186(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 187 omitted

module_eval(<<'.,.,', 'egrammar.ra', 701)
  def _reduce_188(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

module_eval(<<'.,.,', 'egrammar.ra', 725)
  def _reduce_206(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

        end   # class Parser
        end   # module Parser
      end   # module Impl
    end   # module Pops
  end   # module Puppet
