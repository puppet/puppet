# vim: syntax=ruby
class Nagios::Parser

token DEFINE NAME PARAM LCURLY RCURLY VALUE RETURN

rule
decls: decl { return val[0] if val[0] }
    | decls decl {
        if val[1].nil?
            result = val[0]
        else
            if val[0].nil?
                result = val[1]
            else
                result = [ val[0], val[1] ].flatten
            end
        end
    }
    ;

decl: object { result = [val[0]] }
    | RETURN { result = nil }
    ;

object: DEFINE NAME LCURLY returns vars RCURLY {
        result = Nagios::Base.create(val[1],val[4])
    }
    ;

vars: var
    | vars var {
        val[1].each {|p,v|
            val[0][p] = v
        }
        result = val[0]
    }
    ;

var: PARAM VALUE returns { result = { val[0] => val[1] } }
    ;

returns: RETURN
    | RETURN returns
    ;

end

----inner
require 'strscan'

class ::Nagios::Parser::SyntaxError < RuntimeError; end

def parse(src)
    if src.respond_to?("force_encoding") then
        src.force_encoding("ASCII-8BIT")
    end
    @ss = StringScanner.new(src)

    # state variables
    @invar = false
    @inobject = false
    @done = false

    @line = 1
    @yydebug = true

    do_parse
end

# The lexer.  Very simple.
def token
    text = @ss.peek(1)
    @line  +=  1  if text == "\n"

    token = case @inobject
        when false  # @inobject == false
          case
              when (chars = @ss.skip(/[ \t]+/))             # ignore whitespace /\s+/
                ;

              when (text = @ss.scan(/\#.*$/))               # ignore comments
                ;

              when (text = @ss.scan(/;.*$/))               # ignore inline comments
                ;

              when (text = @ss.scan(/\n/))                  # newline
                action { [:RETURN, text] }

              when (text = @ss.scan(/\b(define)\b/))
                action { [:DEFINE, text] }

              when (text = @ss.scan(/[^{ \t\n]+/))
                action { [:NAME, text] }

              when (text = @ss.scan(/\{/))
                @inobject = true
                action { [:LCURLY, text] }

              else
                text = @ss.string[@ss.pos .. -1]
                raise  ScanError, "can not match: '" + text + "'"
              end  # if
        when true   # @inobject == true
            case @invar
                when true                # @invar == true
                    case
                      when (chars = @ss.skip(/[ \t]+/))             # ignore whitespace /\s+/
                        ;

                      when (text = @ss.scan(/\#.*$/))               # ignore comments
                        ;

                      when (text = @ss.scan(/\n/))                  # newline
                        action { [:RETURN, text] }

                      when (text = @ss.scan(/.+$/))                 # Value of parameter
                        @invar = false

                        # Special handling of inline comments (;) and escaped semicolons (\;)

                        # We split the string on escaped semicolons (\;),
                        # Then we rebuild it as long as there are no inline comments (;)
                        # We join the rebuilt string with unescaped semicolons (on purpose)
                        array = text.split('\;', 0)

                        text = ""

                        array.each do |elt|

                            # Now we split at inline comments. If we have more than 1 element in the array
                            # it means we have an inline comment, so we are able to stop parsing
                            # However we still want to reconstruct the string with its first part (before the comment)
                            linearray = elt.split(';', 0)

                            # Let's reconstruct the string with a (unescaped) semicolon
                            if text != "" then
                                text += ';'
                            end
                            text += linearray[0]

                            # Now we can stop
                            if linearray.length > 1 then
                                break                                
                            end
                        end


                        # We strip the text to remove spaces between end of string and beginning of inline comment
                        action { [:VALUE, text.strip] }

                      else
                        text = @ss.string[@ss.pos .. -1]
                        raise  ScanError, "can not match: '" + text + "'"
                      end  # if
                when false              # @invar == false
                    case
                      when (chars = @ss.skip(/[ \t]+/))             # ignore whitespace /\s+/
                        ;

                      when (text = @ss.scan(/\#.*$/))               # ignore comments
                        ;

                      when (text = @ss.scan(/;.*$/))               # ignore inline comments
                        ;

                      when (text = @ss.scan(/\n/))                  # newline
                        action { [:RETURN, text] }

                      when (text = @ss.scan(/\}/))
                        @inobject = false
                        action { [:RCURLY, text] }

                      when (not @invar and (text = @ss.scan(/\S+/)))
                        @invar = true
                        action { [:PARAM, text] }

                      else
                        text = @ss.string[@ss.pos .. -1]
                        raise  ScanError, "can not match: '" + text + "'"
                      end  # if
            end
        else
          raise  ScanError, "undefined state: '" + state.to_s + "'"
    end  # case state
    token
end

def next_token
    return if @ss.eos?

    # skips empty actions
    until _next_token = token or @ss.eos?; end
    _next_token
end

def yydebug
    1
end

def yywrap
    0
end

def action
    yield
end

def on_error(token, value, vstack )
#    text = @ss.string[@ss.pos .. -1]
    text = @ss.peek(20)
    msg = ""
    unless value.nil?
        msg = "line #{@line}: syntax error at value '#{value}' : #{text}"
    else
        msg = "line #{@line}: syntax error at token '#{token}' : #{text}"
    end
    if @ss.eos?
        msg = "line #{@line}: Unexpected end of file"
    end
    if token == '$end'.intern
        puts "okay, this is silly"
    else
        raise ::Nagios::Parser::SyntaxError, msg
    end
end
