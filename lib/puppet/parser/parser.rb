#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 793)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'35,36,199,198,256,279,-112,86,301,82,245,302,95,90,159,214,209,89,334',
'158,-183,159,85,-196,210,212,211,213,39,119,48,49,158,33,50,247,51,37',
'26,158,40,46,30,35,36,32,84,216,215,31,396,203,204,206,205,207,208,332',
'201,202,52,35,36,277,-122,200,38,118,356,110,120,39,345,48,49,328,33',
'50,86,51,37,26,122,40,46,30,35,36,32,52,273,272,31,325,80,-177,273,272',
'37,230,35,36,46,52,35,36,32,222,103,38,31,256,254,336,39,355,48,49,354',
'33,50,52,51,37,26,253,40,46,30,35,36,32,185,256,362,31,395,80,225,119',
'185,37,230,190,119,46,52,337,189,32,359,190,38,31,35,36,189,39,358,48',
'49,348,33,50,52,51,37,26,276,40,46,30,35,36,32,109,275,118,31,393,120',
'355,118,90,354,120,339,89,94,52,35,36,225,324,32,38,321,92,93,52,39',
'342,48,49,52,33,50,90,51,37,26,89,40,46,30,35,36,32,249,317,110,31,390',
'80,90,185,185,37,128,315,40,46,52,35,36,32,190,190,38,31,90,189,189',
'39,89,48,49,373,33,50,52,51,37,26,-130,40,46,30,35,36,32,201,202,157',
'31,365,80,90,200,158,37,128,-178,40,46,52,201,202,32,-176,335,38,31',
'200,256,279,39,303,48,49,-181,33,50,52,51,37,26,-179,40,46,30,35,36',
'32,62,103,-180,31,-182,-130,-130,-130,-130,-183,203,204,206,205,52,35',
'36,201,202,270,38,94,273,272,200,137,135,139,134,136,80,132,140,141',
'177,168,180,131,162,82,35,36,32,52,142,130,163,306,80,206,205,52,37',
'230,201,202,46,52,35,36,32,200,138,144,31,91,266,351,39,352,48,49,-129',
'33,50,52,51,37,26,62,40,46,30,35,36,32,-179,-177,81,31,308,80,206,205',
'62,37,230,201,202,46,52,35,36,32,200,278,38,31,366,256,279,39,368,48',
'49,369,33,50,52,51,37,26,370,40,46,30,35,36,32,-176,-178,261,31,375',
'80,256,262,-178,37,230,300,267,46,52,256,262,32,266,266,38,31,377,264',
'-96,39,-184,48,49,239,33,50,52,51,37,26,-179,40,46,30,35,36,32,380,381',
'61,31,383,242,-227,35,36,385,386,103,321,104,52,-40,-40,-40,-40,242',
'38,-44,-44,-44,-44,39,-123,48,49,102,33,50,391,51,37,26,251,40,46,30',
'80,250,32,249,37,77,31,53,46,397,398,,32,101,35,36,31,52,78,100,-196',
',,38,35,36,,52,103,,104,,,,35,36,63,,103,,104,,,,35,36,102,80,103,,104',
'37,77,,,46,102,80,,32,,37,77,31,,46,102,80,,32,101,37,77,31,52,46,100',
'80,,32,101,37,77,31,52,46,100,,,32,101,35,36,31,52,103,100,104,,,,35',
'36,,52,103,,104,,,,35,36,102,,103,,104,56,57,58,59,,102,80,,,,37,77',
',,46,102,80,,32,101,37,77,31,,46,100,80,,32,101,37,77,31,52,46,100,',
',32,101,35,36,31,52,103,100,104,,,,35,36,,52,103,,104,,,,35,36,102,',
'103,,104,56,57,58,59,,102,80,,,,37,77,,,46,102,80,,32,101,37,77,31,',
'46,100,80,,32,101,37,77,31,52,46,100,,,32,101,35,36,31,52,103,100,104',
',,,35,36,,52,103,,104,203,204,206,205,,102,,201,202,-38,-38,-38,-38',
',200,102,80,,,,37,77,,,46,,80,,32,101,37,77,31,,46,100,,,32,101,35,36',
'31,52,103,100,104,,,,35,36,,52,103,,104,,,,35,36,102,155,103,,104,,',
',,,102,80,,,,37,77,,,46,102,80,,32,101,37,77,31,,46,100,80,,32,101,37',
'77,31,52,46,100,,,32,101,35,36,31,52,103,100,104,,,,35,36,,52,103,,104',
',,,35,36,102,,103,,104,,,,,,102,80,,,,37,77,,,46,102,80,,32,101,37,77',
'31,,46,100,80,,32,101,37,77,31,52,46,100,,,32,101,35,36,31,52,103,100',
'104,,,,35,36,,52,103,,104,,,,35,36,102,,103,161,104,,,,,,102,80,,,,37',
'77,,,46,102,80,,32,101,37,77,31,,46,100,80,,32,101,37,77,31,52,46,100',
',,32,101,35,36,31,52,103,100,104,,,,35,36,,52,103,,104,,,,35,36,102',
',,,,,,,,,102,80,,,,37,77,,,46,,80,,32,101,37,77,31,,46,100,80,,32,101',
'37,230,31,52,46,100,,,32,,35,36,31,52,103,,104,,,,35,36,,52,103,,104',
',,,35,36,102,,103,,104,,,,,,102,80,,,,37,77,,,46,102,80,,32,101,37,77',
'31,,46,100,80,,32,101,37,77,31,52,46,100,,,32,101,35,36,31,52,103,100',
'104,,,,35,36,,52,103,,,,,,35,36,102,,103,,104,,,,,,,80,,,,37,77,,,46',
'102,80,,32,101,37,77,31,,46,100,80,,32,,37,77,31,52,46,,,,32,101,35',
'36,31,52,103,100,104,,,,35,36,,52,103,,104,,,,35,36,102,,103,,104,,',
',,,102,80,,,,37,77,,,46,102,80,,32,101,37,77,31,,46,100,80,,32,101,37',
'77,31,52,46,100,,,32,101,35,36,31,52,103,100,104,,,,35,36,,52,103,,104',
',,,35,36,102,,103,,104,,,,,,102,80,,,,37,77,,,46,102,80,,32,101,37,77',
'31,,46,100,80,,32,101,37,77,31,52,46,100,,,32,101,35,36,31,52,103,100',
'104,,,,35,36,,52,103,,104,,,,35,36,102,,103,161,104,,,,,,102,80,,,,37',
'77,,,46,102,80,,32,101,37,77,31,,46,100,80,,32,101,37,77,31,52,46,100',
',,32,101,35,36,31,52,103,100,104,,,,35,36,,52,103,,104,,,,35,36,102',
',103,,104,,,,,,102,80,,,,37,77,,,46,102,80,,32,101,37,77,31,,46,100',
'80,,32,101,37,77,31,52,46,100,280,,32,101,,,31,52,,100,214,209,,,,,',
'52,,210,212,211,213,,35,36,,,,,233,,,35,36,,,103,,104,,,216,215,,,203',
'204,206,205,207,208,,201,202,102,,80,,,200,37,230,,,46,80,,,32,37,77',
',31,46,,252,,32,101,,,31,,52,100,214,209,,,,,,52,,210,212,211,213,,35',
'36,,,103,,,,,35,36,,,103,,104,,,216,215,,,203,204,206,205,207,208,,201',
'202,102,259,80,,,200,37,77,,,46,80,,,32,37,77,,31,46,,,229,32,101,,',
'31,,52,100,214,209,,,,,227,52,,210,212,211,213,,,214,209,,,,,,,,210',
'212,211,213,,,,,216,215,,,203,204,206,205,207,208,,201,202,,,216,215',
',200,203,204,206,205,207,208,228,201,202,,,,,,200,214,209,,,,,,,,210',
'212,211,213,,,214,209,,,,,,,299,210,212,211,213,,,,,216,215,,,203,204',
'206,205,207,208,,201,202,,,216,215,,200,203,204,206,205,207,208,,201',
'202,214,209,,,,200,,,,210,212,211,213,,,214,209,,,,,,,,210,212,211,213',
',,,,216,215,,,203,204,206,205,207,208,,201,202,,,216,215,,200,203,204',
'206,205,207,208,,201,202,214,209,,,,200,,,,210,212,211,213,,,214,209',
',,,,,,,210,212,211,213,,,,,216,215,,,203,204,206,205,207,208,,201,202',
',,216,215,,200,203,204,206,205,207,208,,201,202,214,209,,,,200,,,,210',
'212,211,213,,,214,209,,,,,,,,210,212,211,213,,,,,,215,,,203,204,206',
'205,207,208,,201,202,,,216,215,,200,203,204,206,205,207,208,,201,202',
'214,209,,,,200,,,,210,212,211,213,,,214,209,,,,,,,,210,212,211,213,',
',,,,,,,203,204,206,205,207,208,,201,202,,,216,215,,200,203,204,206,205',
'207,208,,201,202,214,209,,,,200,,,,210,212,211,213,,,214,209,,,,,,,',
'210,212,211,213,,,,,216,215,,,203,204,206,205,207,208,,201,202,,,,,',
'200,203,204,206,205,207,208,,201,202,214,209,,,,200,,,,210,212,211,213',
',,214,209,,,,,,,,210,212,211,213,,,,,216,215,,,203,204,206,205,207,208',
',201,202,,,216,215,,200,203,204,206,205,207,208,,201,202,214,209,,,',
'200,,,,210,212,211,213,,,,209,,203,204,206,205,207,208,210,201,202,',
',,,,200,,209,,203,204,206,205,207,208,210,201,202,,,,,209,200,203,204',
'206,205,207,208,210,201,202,,,,,,200,,209,,203,204,206,205,207,208,210',
'201,202,,,,,,200,203,204,206,205,207,208,,201,202,,,,,,200,,,,203,204',
'206,205,207,208,,201,202,137,135,139,134,136,200,132,140,141,148,179',
',131,133,,,,,,142,130,143,137,135,139,134,136,,132,140,141,148,146,',
'131,133,,138,144,,,142,130,143,137,135,139,134,136,,132,140,141,148',
'146,,131,133,,138,144,,,142,130,143,137,135,139,134,136,,132,140,141',
'148,179,,131,133,,138,144,,,142,130,143,137,135,139,134,136,,132,140',
'141,148,179,,131,133,,138,144,,,142,130,143,137,135,139,134,136,,132',
'140,141,148,146,,131,133,,138,144,,,142,130,143,203,204,206,205,207',
'208,,201,202,,,,,,200,138,144' ]
        racc_action_table = arr = ::Array.new(2372, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,97,97,258,258,168,28,221,28,115,221,34,49,77,97,97,49,258,168,34',
'128,28,128,97,97,97,97,0,51,0,0,77,0,0,115,0,0,0,128,0,0,0,389,389,0',
'28,97,97,0,389,97,97,97,97,97,97,254,97,97,0,309,309,191,253,97,0,51',
'309,48,51,389,274,389,389,248,389,389,68,389,389,389,53,389,389,389',
'2,2,389,51,191,191,389,244,309,68,274,274,309,309,104,104,309,389,264',
'264,309,104,264,389,309,154,154,262,2,308,2,2,308,2,2,309,2,2,2,154',
'2,2,2,381,381,2,271,313,313,2,381,264,104,247,84,264,264,271,245,264',
'2,263,271,264,311,84,2,264,302,302,84,381,311,381,381,302,381,381,264',
'381,381,381,186,381,381,381,380,380,381,41,186,247,381,380,247,352,245',
'29,352,245,265,29,33,381,55,55,302,243,29,381,242,33,33,247,380,268',
'380,380,245,380,380,50,380,380,380,50,380,380,380,370,370,380,269,240',
'239,380,370,55,55,185,85,55,55,234,55,55,380,60,60,55,185,85,380,55',
'324,185,85,370,324,370,370,324,370,370,55,370,370,370,261,370,370,370',
'317,317,370,288,288,64,370,317,60,60,288,230,60,60,66,60,60,370,287',
'287,60,67,260,370,60,287,260,260,317,224,317,317,69,317,317,60,317,317',
'317,71,317,317,317,81,81,317,73,81,75,317,76,261,261,261,261,79,289',
'289,289,289,317,233,233,289,289,181,317,80,181,181,289,81,81,81,81,81',
'81,81,81,81,81,81,83,81,81,87,227,227,81,202,81,81,81,227,233,286,286',
'201,233,233,286,286,233,81,229,229,233,286,81,81,233,30,178,305,227',
'307,227,227,177,227,227,233,227,227,227,175,227,227,227,228,228,227',
'173,171,27,227,228,229,285,285,25,229,229,285,285,229,227,359,359,229',
'285,192,227,229,318,192,192,228,319,228,228,321,228,228,229,228,228',
'228,322,228,228,228,325,325,228,170,23,160,228,325,359,160,160,169,359',
'359,220,166,359,228,220,220,359,165,341,228,359,343,164,163,325,162',
'325,325,112,325,325,359,325,325,325,22,325,325,325,304,304,325,355,358',
'21,325,360,113,362,86,86,364,367,86,368,86,325,7,7,7,7,114,325,9,9,9',
'9,304,155,304,304,86,304,304,374,304,304,304,149,304,304,304,86,146',
'304,145,86,86,304,1,86,392,394,,86,86,26,26,86,304,26,86,26,,,304,303',
'303,,86,303,,303,,,,276,276,26,,276,,276,,,,275,275,303,26,275,,275',
'26,26,,,26,276,303,,26,,303,303,26,,303,275,276,,303,303,276,276,303',
'26,276,303,275,,276,276,275,275,276,303,275,276,,,275,275,36,36,275',
'276,36,275,36,,,,38,38,,275,38,,38,,,,39,39,36,,39,,39,19,19,19,19,',
'38,36,,,,36,36,,,36,39,38,,36,36,38,38,36,,38,36,39,,38,38,39,39,38',
'36,39,38,,,39,39,40,40,39,38,40,39,40,,,,255,255,,39,255,,255,,,,251',
'251,40,,251,,251,20,20,20,20,,255,40,,,,40,40,,,40,251,255,,40,40,255',
'255,40,,255,40,251,,255,255,251,251,255,40,251,255,,,251,251,250,250',
'251,255,250,251,250,,,,62,62,,251,62,,62,290,290,290,290,,250,,290,290',
'5,5,5,5,,290,62,250,,,,250,250,,,250,,62,,250,250,62,62,250,,62,250',
',,62,62,63,63,62,250,63,62,63,,,,354,354,,62,354,,354,,,,216,216,63',
'63,216,,216,,,,,,354,63,,,,63,63,,,63,216,354,,63,63,354,354,63,,354',
'63,216,,354,354,216,216,354,63,216,354,,,216,216,215,215,216,354,215',
'216,215,,,,214,214,,216,214,,214,,,,213,213,215,,213,,213,,,,,,214,215',
',,,215,215,,,215,213,214,,215,215,214,214,215,,214,215,213,,214,214',
'213,213,214,215,213,214,,,213,213,212,212,213,214,212,213,212,,,,211',
'211,,213,211,,211,,,,78,78,212,,78,78,78,,,,,,211,212,,,,212,212,,,212',
'78,211,,212,212,211,211,212,,211,212,78,,211,211,78,78,211,212,78,211',
',,78,78,210,210,78,211,210,78,210,,,,209,209,,78,209,,209,,,,361,361',
'210,,,,,,,,,,209,210,,,,210,210,,,210,,209,,210,210,209,209,210,,209',
'210,361,,209,209,361,361,209,210,361,209,,,361,,208,208,361,209,208',
',208,,,,207,207,,361,207,,207,,,,206,206,208,,206,,206,,,,,,207,208',
',,,208,208,,,208,206,207,,208,208,207,207,208,,207,208,206,,207,207',
'206,206,207,208,206,207,,,206,206,205,205,206,207,205,206,205,,,,315',
'315,,206,315,,,,,,204,204,205,,204,,204,,,,,,,205,,,,205,205,,,205,204',
'315,,205,205,315,315,205,,315,205,204,,315,,204,204,315,205,204,,,,204',
'204,92,92,204,315,92,204,92,,,,93,93,,204,93,,93,,,,94,94,92,,94,,94',
',,,,,93,92,,,,92,92,,,92,94,93,,92,92,93,93,92,,93,92,94,,93,93,94,94',
'93,92,94,93,,,94,94,95,95,94,93,95,94,95,,,,369,369,,94,369,,369,,,',
'100,100,95,,100,,100,,,,,,369,95,,,,95,95,,,95,100,369,,95,95,369,369',
'95,,369,95,100,,369,369,100,100,369,95,100,369,,,100,100,101,101,100',
'369,101,100,101,,,,102,102,,100,102,,102,,,,103,103,101,,103,103,103',
',,,,,102,101,,,,101,101,,,101,103,102,,101,101,102,102,101,,102,101',
'103,,102,102,103,103,102,101,103,102,,,103,103,203,203,103,102,203,103',
'203,,,,200,200,,103,200,,200,,,,199,199,203,,199,,199,,,,,,200,203,',
',,203,203,,,203,199,200,,203,203,200,200,203,,200,203,199,,200,200,199',
'199,200,203,199,200,195,,199,199,,,199,200,,199,195,195,,,,,,199,,195',
'195,195,195,,109,109,,,,,109,,,159,159,,,159,,159,,,195,195,,,195,195',
'195,195,195,195,,195,195,159,,109,,,195,109,109,,,109,159,,,109,159',
'159,,109,159,,153,,159,159,,,159,,109,159,153,153,,,,,,159,,153,153',
'153,153,,157,157,,,157,,,,,158,158,,,158,,158,,,153,153,,,153,153,153',
'153,153,153,,153,153,158,158,157,,,153,157,157,,,157,158,,,157,158,158',
',157,158,,,108,158,158,,,158,,157,158,108,108,,,,,105,158,,108,108,108',
'108,,,105,105,,,,,,,,105,105,105,105,,,,,108,108,,,108,108,108,108,108',
'108,,108,108,,,105,105,,108,105,105,105,105,105,105,107,105,105,,,,',
',105,107,107,,,,,,,,107,107,107,107,,,219,219,,,,,,,219,219,219,219',
'219,,,,,107,107,,,107,107,107,107,107,107,,107,107,,,219,219,,107,219',
'219,219,219,219,219,,219,219,193,193,,,,219,,,,193,193,193,193,,,194',
'194,,,,,,,,194,194,194,194,,,,,193,193,,,193,193,193,193,193,193,,193',
'193,,,194,194,,193,194,194,194,194,194,194,,194,194,156,156,,,,194,',
',,156,156,156,156,,,388,388,,,,,,,,388,388,388,388,,,,,156,156,,,156',
'156,156,156,156,156,,156,156,,,388,388,,156,388,388,388,388,388,388',
',388,388,298,298,,,,388,,,,298,298,298,298,,,196,196,,,,,,,,196,196',
'196,196,,,,,,298,,,298,298,298,298,298,298,,298,298,,,196,196,,298,196',
'196,196,196,196,196,,196,196,297,297,,,,196,,,,297,297,297,297,,,350',
'350,,,,,,,,350,350,350,350,,,,,,,,,297,297,297,297,297,297,,297,297',
',,350,350,,297,350,350,350,350,350,350,,350,350,330,330,,,,350,,,,330',
'330,330,330,,,346,346,,,,,,,,346,346,346,346,,,,,330,330,,,330,330,330',
'330,330,330,,330,330,,,,,,330,346,346,346,346,346,346,,346,346,333,333',
',,,346,,,,333,333,333,333,,,331,331,,,,,,,,331,331,331,331,,,,,333,333',
',,333,333,333,333,333,333,,333,333,,,331,331,,333,331,331,331,331,331',
'331,,331,331,347,347,,,,331,,,,347,347,347,347,,,,296,,291,291,291,291',
'291,291,296,291,291,,,,,,291,,295,,347,347,347,347,347,347,295,347,347',
',,,,293,347,296,296,296,296,296,296,293,296,296,,,,,,296,,294,,295,295',
'295,295,295,295,294,295,295,,,,,,295,293,293,293,293,293,293,,293,293',
',,,,,293,,,,294,294,294,294,294,294,,294,294,266,266,266,266,266,294',
'266,266,266,266,266,,266,266,,,,,,266,266,266,180,180,180,180,180,,180',
'180,180,180,180,,180,180,,266,266,,,180,180,180,249,249,249,249,249',
',249,249,249,249,249,,249,249,,180,180,,,249,249,249,267,267,267,267',
'267,,267,267,267,267,267,,267,267,,249,249,,,267,267,267,82,82,82,82',
'82,,82,82,82,82,82,,82,82,,267,267,,,82,82,82,61,61,61,61,61,,61,61',
'61,61,61,,61,61,,82,82,,,61,61,61,292,292,292,292,292,292,,292,292,',
',,,,292,61,61' ]
        racc_action_check = arr = ::Array.new(2372, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   523,    84,   nil,   nil,   704,   nil,   428,   nil,   434,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   571,
   638,   470,   446,   411,   nil,   392,   528,   384,     1,   147,
   325,   nil,   nil,   182,    -3,   nil,   605,   nil,   615,   625,
   672,   152,   nil,   nil,   nil,   nil,   nil,   nil,    67,   -23,
   171,    27,   nil,    82,   nil,   188,   nil,   nil,   nil,   nil,
   231,  2303,   749,   796,   251,   nil,   249,   256,    72,   267,
   nil,   274,   nil,   298,   nil,   283,   285,     8,   950,   290,
   319,   299,  2281,   332,   116,   202,   481,   335,   nil,   nil,
   nil,   nil,  1198,  1208,  1218,  1265,   nil,    -2,   nil,   nil,
  1285,  1332,  1342,  1352,    98,  1624,   nil,  1675,  1609,  1486,
   nil,   nil,   450,   457,   471,    -2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   507,   465,   nil,   nil,   501,
   nil,   nil,   nil,  1533,   100,   479,  1795,  1562,  1571,  1495,
   428,   nil,   436,   434,   415,   439,   425,   nil,    -5,   418,
   410,   368,   nil,   367,   nil,   377,   nil,   353,   358,   nil,
  2215,   277,   nil,   nil,   nil,   201,   150,   nil,   nil,   nil,
   nil,    41,   402,  1735,  1750,  1457,  1870,   nil,   nil,  1419,
  1409,   293,   285,  1399,  1151,  1131,  1084,  1074,  1064,  1007,
   997,   940,   930,   883,   873,   863,   816,   nil,   nil,  1690,
   437,    -1,   nil,   nil,   276,   nil,   nil,   342,   385,   360,
   245,   nil,   nil,   317,   218,   nil,   nil,   nil,   nil,   218,
   211,   nil,   161,   156,    85,   142,   nil,   137,    66,  2237,
   739,   692,   nil,    41,    32,   682,   nil,   nil,    -7,   nil,
   273,   246,   106,   138,   102,   177,  2193,  2259,   192,   206,
   nil,   108,   nil,   nil,    47,   558,   548,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   341,   298,   216,   201,   261,
   705,  2077,  2302,  2143,  2161,  2128,  2110,  1915,  1855,   nil,
   nil,   nil,   152,   538,   471,   362,   nil,   364,    84,    59,
   nil,   138,   nil,   122,   nil,  1141,   nil,   256,   387,   404,
   nil,   404,   418,   nil,   204,   428,   nil,   nil,   nil,   nil,
  1975,  2050,   nil,  2035,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   440,   nil,   446,   nil,   nil,  1990,  2095,   nil,   nil,
  1930,   nil,   150,   nil,   806,   468,   nil,   nil,   469,   403,
   471,  1017,   473,   nil,   476,   nil,   nil,   461,   453,  1275,
   213,   nil,   nil,   nil,   499,   nil,   nil,   nil,   nil,   nil,
   170,   127,   nil,   nil,   nil,   nil,   nil,   nil,  1810,    41,
   nil,   nil,   516,   nil,   517,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -205,  -240,    -1,    -2,    -3,    -6,    -7,    -8,    -9,   -10,
   -11,   -12,   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,
  -240,   -39,   -41,   -42,   -43,   -45,   -97,  -240,  -177,  -240,
   -74,   -96,   -98,  -220,  -238,  -124,  -240,  -129,  -240,  -240,
  -240,  -240,  -176,  -180,  -181,  -182,  -184,  -185,  -240,  -240,
  -197,  -240,  -228,  -240,    -4,  -240,   -46,   -47,   -48,   -49,
  -240,  -119,  -240,  -240,   -53,   -54,   -58,   -59,   -60,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -97,  -240,  -238,
  -220,  -109,  -109,   -77,  -205,  -205,  -240,  -240,   -73,  -196,
  -197,   -75,  -240,  -240,  -240,  -240,  -125,  -240,  -141,  -142,
  -240,  -240,  -240,  -240,  -240,  -240,  -134,  -240,  -240,  -240,
  -186,  -187,  -189,  -205,  -205,  -205,  -198,  -200,  -201,  -202,
  -203,  -204,   399,   -37,   -38,   -39,   -40,   -44,   -97,   -36,
   -21,   -22,   -23,   -24,   -25,   -26,   -27,   -28,   -29,   -30,
   -31,   -32,   -33,   -34,   -35,  -226,  -112,  -113,  -114,  -240,
  -117,  -118,  -120,  -240,  -240,   -52,   -56,  -240,  -240,  -240,
  -240,  -223,   -24,   -34,   -94,  -226,  -240,   -92,   -97,   -99,
  -100,  -101,  -102,  -103,  -104,  -105,  -110,  -114,  -226,  -112,
  -119,  -240,   -80,   -81,   -83,  -205,  -240,   -89,   -90,   -97,
  -220,  -240,  -240,  -106,  -108,  -240,  -107,  -126,  -127,  -240,
  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -240,
  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -152,  -159,  -240,
  -240,  -240,  -231,  -232,  -240,  -235,  -236,  -240,  -240,  -240,
   -97,  -170,  -171,  -240,  -240,  -177,  -178,  -179,  -183,  -240,
  -240,  -207,  -206,  -205,  -240,  -240,  -214,  -240,  -240,  -227,
  -240,  -240,  -239,   -50,  -225,  -240,  -224,   -55,  -240,  -123,
  -240,  -221,  -225,  -240,   -95,  -240,  -227,  -109,  -240,  -226,
   -78,  -240,   -85,   -86,  -240,  -240,  -240,   -79,  -131,  -225,
  -237,  -128,  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,
  -151,  -153,  -154,  -155,  -156,  -157,  -158,  -160,  -161,  -162,
  -221,  -229,  -240,  -240,    -5,  -240,  -133,  -240,  -137,  -240,
  -164,  -240,  -168,  -226,  -173,  -240,  -188,  -240,  -240,  -226,
  -210,  -213,  -240,  -216,  -240,  -240,  -199,  -215,   -72,  -121,
  -116,  -115,   -51,   -57,  -122,  -130,  -222,   -69,   -93,   -70,
  -111,  -226,   -71,  -240,   -82,   -84,   -87,   -88,  -230,  -233,
  -234,  -132,  -137,  -136,  -240,  -240,  -163,  -165,  -240,  -240,
  -240,  -240,  -225,  -175,  -240,  -191,  -208,  -240,  -227,  -240,
  -240,  -217,  -218,  -219,  -240,  -195,   -91,   -76,  -135,  -138,
  -240,  -240,  -169,  -172,  -174,  -190,  -209,  -211,  -212,  -240,
  -193,  -194,  -240,  -140,  -240,  -167,  -192,  -139,  -166 ]

racc_goto_table = [
    28,     2,    28,    42,    54,    42,   106,    65,   113,   114,
   232,   223,   121,   234,   111,    44,   116,    44,    43,   174,
    43,   165,   178,    96,   248,   320,     3,   145,   167,    87,
    25,    83,    25,   176,   176,   310,   353,   309,   123,   329,
    88,   181,   191,   129,   265,   344,   305,   307,   127,   231,
    24,   126,    24,   127,   154,    28,   126,   268,    42,   197,
    28,    55,    60,    42,   240,   243,   124,   313,   263,   160,
    44,   124,   112,    43,   164,    44,   322,   192,    43,   115,
   378,   171,   244,   361,   170,    25,   327,   188,   188,   318,
    25,   319,    64,   371,   220,   221,    44,     1,   nil,    43,
   nil,   nil,   nil,   nil,   nil,    24,   nil,   nil,   nil,   235,
    24,   175,    42,   nil,   nil,   357,   nil,    34,   nil,    34,
   nil,   nil,   nil,   nil,    44,   nil,   nil,    43,   nil,   nil,
   nil,   172,   nil,   312,   314,   nil,   364,   234,   257,   241,
   241,   246,   274,   nil,   374,   nil,   269,   nil,   343,   258,
   260,   387,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   283,   284,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   281,   nil,   188,   nil,
   nil,   nil,   360,   nil,   nil,    21,   nil,    21,   367,   392,
   394,   nil,   174,   nil,   nil,   316,   121,   341,   121,   349,
   326,   338,   nil,   312,   nil,   nil,   nil,   nil,   340,   176,
   376,   nil,   nil,   nil,   nil,   nil,   238,    28,    28,   235,
    42,    42,    42,   235,   nil,   nil,    42,   nil,   nil,   nil,
   nil,   nil,    44,    44,    44,    43,    43,    43,    44,   nil,
   125,    43,   nil,   nil,   nil,   125,   nil,    25,    25,   nil,
   nil,   nil,   384,   382,   171,   234,   nil,   170,   nil,   323,
   nil,   nil,   nil,   nil,   188,   nil,   nil,    24,    24,    44,
   nil,   nil,    43,   372,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   175,   nil,   363,    23,   nil,    23,
   nil,   nil,   nil,   nil,    28,   nil,    54,    42,   nil,   235,
   nil,   nil,    42,   nil,   172,   nil,   nil,    28,   nil,    44,
    42,   379,    43,   nil,    44,    28,   nil,    43,    42,   nil,
   nil,   nil,    44,   nil,    25,    43,   nil,   nil,   nil,   nil,
    44,   nil,   nil,    43,    34,    34,   238,    25,   nil,   nil,
   238,   nil,    23,   nil,    24,    25,   nil,    23,   nil,   235,
   nil,   235,    42,   nil,    42,   nil,   nil,    24,   nil,   nil,
    28,   389,   nil,    42,    44,    24,    44,    43,   169,    43,
    28,    28,   nil,    42,    42,    44,   nil,   nil,    43,    28,
   nil,    54,    42,   nil,   nil,    44,    44,   nil,    43,    43,
    25,   226,   nil,   nil,    44,   nil,   236,    43,   nil,   nil,
    25,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,
    24,    34,    21,    21,   nil,   nil,   238,   nil,   nil,   nil,
    24,    24,   nil,    22,    34,    22,   nil,   nil,   nil,    24,
   nil,   nil,    34,   nil,   nil,   nil,   nil,    45,   nil,    45,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   238,   nil,   238,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    34,    22,   nil,
   nil,   nil,   nil,    22,   nil,   nil,   nil,    34,    34,    21,
   nil,   nil,    45,   nil,   nil,   nil,    34,    45,   nil,   nil,
   nil,   nil,    21,   nil,   173,   nil,   nil,   187,   187,   nil,
    21,   nil,   nil,   nil,    23,    23,   236,   nil,    45,   nil,
   236,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   237,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    97,   nil,   105,   107,   108,    45,   nil,   nil,   nil,
   nil,   169,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    21,    21,   153,   nil,   nil,
   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   226,
   nil,    23,   nil,   nil,   nil,   nil,   236,   193,   194,   195,
   196,   nil,   nil,   nil,    23,   217,   218,   219,   187,   nil,
   nil,   nil,    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   236,   nil,   236,   nil,
    22,    22,   237,   nil,   nil,   nil,   237,    23,   nil,   nil,
   nil,   nil,   nil,   nil,    45,    45,    45,    23,    23,   nil,
    45,   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   173,   nil,   nil,
   nil,   nil,   nil,   nil,   187,   nil,   nil,   nil,   nil,   nil,
   nil,    45,   nil,   nil,    97,   282,   nil,   nil,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,
   nil,   nil,   237,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    22,    45,   nil,   nil,   nil,   nil,    45,   nil,    22,   nil,
   nil,   nil,   nil,   nil,    45,   330,   331,   nil,   nil,   nil,
   333,   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   346,   347,   237,   nil,   237,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    22,   nil,   nil,    45,   nil,    45,   nil,
   nil,   nil,   nil,    22,    22,   nil,   nil,    45,   350,   nil,
   nil,   nil,    22,   nil,   nil,   nil,   nil,    45,    45,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    45,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   107,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   388 ]

racc_goto_check = [
    35,     2,    35,    34,     4,    34,    62,    31,    40,    40,
    71,    86,    65,    69,    73,    36,    79,    36,    38,    37,
    38,    43,    43,    60,    44,    83,     3,    45,    53,    35,
    28,    47,    28,    56,    56,    67,    63,    66,    22,    59,
     6,    48,    48,    22,    44,    49,     5,     5,    10,    70,
    27,     8,    27,    10,    29,    35,     8,    44,    34,    61,
    35,    23,    23,    34,    75,    75,     6,    72,    42,    29,
    36,     6,    74,    38,    41,    36,    76,    29,    38,    77,
    63,    35,    78,    33,    34,    28,    80,    34,    34,    81,
    28,    82,    30,    84,    29,    85,    36,     1,   nil,    38,
   nil,   nil,   nil,   nil,   nil,    27,   nil,   nil,   nil,    35,
    27,    28,    34,   nil,   nil,    67,   nil,    55,   nil,    55,
   nil,   nil,   nil,   nil,    36,   nil,   nil,    38,   nil,   nil,
   nil,    27,   nil,    69,    71,   nil,     5,    69,    31,     3,
     3,     3,    48,   nil,     5,   nil,    45,   nil,    44,    29,
    29,    83,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    65,    65,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    60,   nil,    34,   nil,
   nil,   nil,    44,   nil,   nil,    24,   nil,    24,    44,     5,
     5,   nil,    37,   nil,   nil,    73,    65,    43,    65,    86,
    79,    53,   nil,    69,   nil,   nil,   nil,   nil,    56,    56,
    44,   nil,   nil,   nil,   nil,   nil,    55,    35,    35,    35,
    34,    34,    34,    35,   nil,   nil,    34,   nil,   nil,   nil,
   nil,   nil,    36,    36,    36,    38,    38,    38,    36,   nil,
    24,    38,   nil,   nil,   nil,    24,   nil,    28,    28,   nil,
   nil,   nil,    71,    69,    35,    69,   nil,    34,   nil,     3,
   nil,   nil,   nil,   nil,    34,   nil,   nil,    27,    27,    36,
   nil,   nil,    38,    40,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    28,   nil,    31,    26,   nil,    26,
   nil,   nil,   nil,   nil,    35,   nil,     4,    34,   nil,    35,
   nil,   nil,    34,   nil,    27,   nil,   nil,    35,   nil,    36,
    34,    62,    38,   nil,    36,    35,   nil,    38,    34,   nil,
   nil,   nil,    36,   nil,    28,    38,   nil,   nil,   nil,   nil,
    36,   nil,   nil,    38,    55,    55,    55,    28,   nil,   nil,
    55,   nil,    26,   nil,    27,    28,   nil,    26,   nil,    35,
   nil,    35,    34,   nil,    34,   nil,   nil,    27,   nil,   nil,
    35,     2,   nil,    34,    36,    27,    36,    38,    26,    38,
    35,    35,   nil,    34,    34,    36,   nil,   nil,    38,    35,
   nil,     4,    34,   nil,   nil,    36,    36,   nil,    38,    38,
    28,    26,   nil,   nil,    36,   nil,    26,    38,   nil,   nil,
    28,    28,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    28,
    27,    55,    24,    24,   nil,   nil,    55,   nil,   nil,   nil,
    27,    27,   nil,    25,    55,    25,   nil,   nil,   nil,    27,
   nil,   nil,    55,   nil,   nil,   nil,   nil,    39,   nil,    39,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    55,   nil,    55,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    55,    25,   nil,
   nil,   nil,   nil,    25,   nil,   nil,   nil,    55,    55,    24,
   nil,   nil,    39,   nil,   nil,   nil,    55,    39,   nil,   nil,
   nil,   nil,    24,   nil,    25,   nil,   nil,    25,    25,   nil,
    24,   nil,   nil,   nil,    26,    26,    26,   nil,    39,   nil,
    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    32,   nil,    32,    32,    32,    39,   nil,   nil,   nil,
   nil,    26,   nil,   nil,   nil,    24,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    24,    24,    32,   nil,   nil,
   nil,   nil,   nil,   nil,    24,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,
   nil,    26,   nil,   nil,   nil,   nil,    26,    32,    32,    32,
    32,   nil,   nil,   nil,    26,    32,    32,    32,    25,   nil,
   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,    26,   nil,
    25,    25,    25,   nil,   nil,   nil,    25,    26,   nil,   nil,
   nil,   nil,   nil,   nil,    39,    39,    39,    26,    26,   nil,
    39,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,
   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,
   nil,    39,   nil,   nil,    32,    32,   nil,   nil,    32,    32,
    32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
    32,    32,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,
   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    25,    39,   nil,   nil,   nil,   nil,    39,   nil,    25,   nil,
   nil,   nil,   nil,   nil,    39,    32,    32,   nil,   nil,   nil,
    32,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    32,    32,    25,   nil,    25,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    25,   nil,   nil,    39,   nil,    39,   nil,
   nil,   nil,   nil,    25,    25,   nil,   nil,    39,    32,   nil,
   nil,   nil,    25,   nil,   nil,   nil,   nil,    39,    39,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    32 ]

racc_goto_pointer = [
   nil,    97,     1,    26,     2,  -181,    11,   nil,    -4,   nil,
    -7,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -17,    42,   195,   433,   297,    50,    30,    -9,
    66,   -19,   515,  -230,     3,     0,    15,   -62,    18,   447,
   -41,    -7,   -96,   -60,  -121,   -34,   nil,     3,   -43,  -226,
   nil,   nil,   nil,   -53,   nil,   117,   -48,   nil,   nil,  -210,
   -13,   -38,   -33,  -272,   nil,   -39,  -192,  -194,   nil,   -96,
   -60,   -99,  -166,   -34,    24,   -49,  -167,    28,   -33,   -35,
  -161,  -153,  -151,  -217,  -231,    -9,   -93,   nil ]

racc_goto_default = [
   nil,   nil,   304,   182,     4,   nil,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,   147,    20,   nil,    74,    71,    66,    70,    73,   nil,
   nil,    98,   156,   255,    67,    68,    69,    72,    75,    76,
    27,   nil,   nil,   nil,   nil,   nil,    29,   nil,   nil,   183,
   271,   184,   186,   nil,   166,    79,   150,   149,   151,   152,
   nil,   nil,   nil,   nil,    99,    47,   nil,   nil,   311,    41,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   117,   nil,   nil,   nil,   nil,   nil,   nil,   224 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 71, :_reduce_3,
  2, 71, :_reduce_4,
  1, 74, :_reduce_5,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  3, 89, :_reduce_36,
  3, 89, :_reduce_37,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  4, 83, :_reduce_50,
  5, 83, :_reduce_51,
  3, 83, :_reduce_52,
  2, 83, :_reduce_53,
  1, 99, :_reduce_54,
  3, 99, :_reduce_55,
  1, 98, :_reduce_56,
  3, 98, :_reduce_57,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  5, 75, :_reduce_69,
  5, 75, :_reduce_70,
  5, 75, :_reduce_71,
  5, 87, :_reduce_72,
  2, 76, :_reduce_73,
  1, 115, :_reduce_74,
  2, 115, :_reduce_75,
  6, 77, :_reduce_76,
  2, 77, :_reduce_77,
  3, 116, :_reduce_78,
  3, 116, :_reduce_79,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  3, 117, :_reduce_82,
  1, 118, :_reduce_none,
  3, 118, :_reduce_84,
  1, 119, :_reduce_85,
  1, 119, :_reduce_86,
  3, 120, :_reduce_87,
  3, 120, :_reduce_88,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  4, 122, :_reduce_91,
  1, 110, :_reduce_92,
  3, 110, :_reduce_93,
  0, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 108, :_reduce_96,
  1, 103, :_reduce_97,
  1, 104, :_reduce_98,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  3, 78, :_reduce_106,
  3, 78, :_reduce_107,
  3, 88, :_reduce_108,
  0, 112, :_reduce_109,
  1, 112, :_reduce_110,
  3, 112, :_reduce_111,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  3, 125, :_reduce_115,
  3, 127, :_reduce_116,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  0, 114, :_reduce_119,
  1, 114, :_reduce_120,
  3, 114, :_reduce_121,
  4, 107, :_reduce_122,
  3, 107, :_reduce_123,
  1, 95, :_reduce_124,
  2, 95, :_reduce_125,
  2, 129, :_reduce_126,
  1, 130, :_reduce_127,
  2, 130, :_reduce_128,
  1, 105, :_reduce_129,
  4, 93, :_reduce_130,
  4, 93, :_reduce_131,
  5, 81, :_reduce_132,
  4, 81, :_reduce_133,
  2, 80, :_reduce_134,
  5, 131, :_reduce_135,
  4, 131, :_reduce_136,
  0, 132, :_reduce_none,
  2, 132, :_reduce_138,
  4, 132, :_reduce_139,
  3, 132, :_reduce_140,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  3, 101, :_reduce_143,
  3, 101, :_reduce_144,
  3, 101, :_reduce_145,
  3, 101, :_reduce_146,
  3, 101, :_reduce_147,
  3, 101, :_reduce_148,
  3, 101, :_reduce_149,
  3, 101, :_reduce_150,
  3, 101, :_reduce_151,
  2, 101, :_reduce_152,
  3, 101, :_reduce_153,
  3, 101, :_reduce_154,
  3, 101, :_reduce_155,
  3, 101, :_reduce_156,
  3, 101, :_reduce_157,
  3, 101, :_reduce_158,
  2, 101, :_reduce_159,
  3, 101, :_reduce_160,
  3, 101, :_reduce_161,
  3, 101, :_reduce_162,
  5, 79, :_reduce_163,
  1, 135, :_reduce_164,
  2, 135, :_reduce_165,
  5, 136, :_reduce_166,
  4, 136, :_reduce_167,
  1, 137, :_reduce_168,
  3, 137, :_reduce_169,
  3, 96, :_reduce_170,
  1, 139, :_reduce_none,
  4, 139, :_reduce_172,
  1, 141, :_reduce_none,
  3, 141, :_reduce_174,
  3, 140, :_reduce_175,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_184,
  1, 138, :_reduce_none,
  1, 142, :_reduce_186,
  1, 143, :_reduce_none,
  3, 143, :_reduce_188,
  2, 82, :_reduce_189,
  6, 84, :_reduce_190,
  5, 84, :_reduce_191,
  7, 85, :_reduce_192,
  6, 85, :_reduce_193,
  6, 86, :_reduce_194,
  5, 86, :_reduce_195,
  1, 109, :_reduce_196,
  1, 109, :_reduce_197,
  1, 146, :_reduce_198,
  3, 146, :_reduce_199,
  1, 148, :_reduce_200,
  1, 149, :_reduce_201,
  1, 149, :_reduce_202,
  1, 149, :_reduce_203,
  1, 149, :_reduce_none,
  0, 72, :_reduce_205,
  0, 150, :_reduce_206,
  1, 144, :_reduce_none,
  3, 144, :_reduce_208,
  4, 144, :_reduce_209,
  1, 151, :_reduce_none,
  3, 151, :_reduce_211,
  3, 152, :_reduce_212,
  1, 152, :_reduce_213,
  1, 147, :_reduce_none,
  2, 147, :_reduce_215,
  1, 145, :_reduce_none,
  2, 145, :_reduce_217,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 94, :_reduce_220,
  3, 106, :_reduce_221,
  4, 106, :_reduce_222,
  2, 106, :_reduce_223,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  0, 113, :_reduce_none,
  1, 113, :_reduce_227,
  1, 134, :_reduce_228,
  3, 133, :_reduce_229,
  4, 133, :_reduce_230,
  2, 133, :_reduce_231,
  1, 154, :_reduce_none,
  3, 154, :_reduce_233,
  3, 155, :_reduce_234,
  1, 156, :_reduce_235,
  1, 156, :_reduce_236,
  4, 124, :_reduce_237,
  1, 97, :_reduce_none,
  4, 97, :_reduce_239 ]

racc_reduce_n = 240

racc_shift_n = 399

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68 }

racc_nt_base = 69

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "unlessstatement",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "keyword",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "expressions",
  "funcvalues",
  "rvalue",
  "expression",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "funcrvalue",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "param_name",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 34)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 37)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 46)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'grammar.ra', 89)
  def _reduce_36(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 92)
  def _reduce_37(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'grammar.ra', 107)
  def _reduce_50(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 114)
  def _reduce_51(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 120)
  def _reduce_52(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 127)
  def _reduce_53(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 134)
  def _reduce_54(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 137)
  def _reduce_55(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 141)
  def _reduce_56(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 142)
  def _reduce_57(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

module_eval(<<'.,.,', 'grammar.ra', 157)
  def _reduce_69(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 160)
  def _reduce_70(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 163)
  def _reduce_71(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 170)
  def _reduce_72(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 177)
  def _reduce_73(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 193)
  def _reduce_74(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 194)
  def _reduce_75(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 199)
  def _reduce_76(val, _values, result)
      @lexer.commentpop
  type = val[0].value.downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 217)
  def _reduce_77(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 235)
  def _reduce_78(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 243)
  def _reduce_79(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 80 omitted

# reduce 81 omitted

module_eval(<<'.,.,', 'grammar.ra', 256)
  def _reduce_82(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 83 omitted

module_eval(<<'.,.,', 'grammar.ra', 261)
  def _reduce_84(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 265)
  def _reduce_85(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 266)
  def _reduce_86(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 269)
  def _reduce_87(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 274)
  def _reduce_88(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 89 omitted

# reduce 90 omitted

module_eval(<<'.,.,', 'grammar.ra', 283)
  def _reduce_91(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 286)
  def _reduce_92(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 288)
  def _reduce_93(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

module_eval(<<'.,.,', 'grammar.ra', 296)
  def _reduce_96(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 300)
  def _reduce_97(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 304)
  def _reduce_98(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

module_eval(<<'.,.,', 'grammar.ra', 316)
  def _reduce_106(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 322)
  def _reduce_107(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 326)
  def _reduce_108(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 332)
  def _reduce_109(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 334)
  def _reduce_110(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 336)
  def _reduce_111(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

module_eval(<<'.,.,', 'grammar.ra', 345)
  def _reduce_115(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 349)
  def _reduce_116(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

module_eval(<<'.,.,', 'grammar.ra', 358)
  def _reduce_119(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 360)
  def _reduce_120(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 362)
  def _reduce_121(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 368)
  def _reduce_122(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 373)
  def _reduce_123(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 379)
  def _reduce_124(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 380)
  def _reduce_125(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 382)
  def _reduce_126(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 384)
  def _reduce_127(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 385)
  def _reduce_128(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 388)
  def _reduce_129(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 392)
  def _reduce_130(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 395)
  def _reduce_131(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 399)
  def _reduce_132(val, _values, result)
      @lexer.commentpop
  args = {
    :test => ast(AST::Not, :value => val[1]),
    :statements => val[3]
  }

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 408)
  def _reduce_133(val, _values, result)
        @lexer.commentpop
    args = {
      :test => ast(AST::Not, :value => val[1]), 
      :statements => ast(AST::Nop)
    }
    result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 417)
  def _reduce_134(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 421)
  def _reduce_135(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 432)
  def _reduce_136(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 137 omitted

module_eval(<<'.,.,', 'grammar.ra', 445)
  def _reduce_138(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 448)
  def _reduce_139(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 452)
  def _reduce_140(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'grammar.ra', 471)
  def _reduce_143(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 474)
  def _reduce_144(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 477)
  def _reduce_145(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 480)
  def _reduce_146(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 483)
  def _reduce_147(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 486)
  def _reduce_148(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 489)
  def _reduce_149(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 492)
  def _reduce_150(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 495)
  def _reduce_151(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 498)
  def _reduce_152(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 501)
  def _reduce_153(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 504)
  def _reduce_154(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 507)
  def _reduce_155(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 510)
  def _reduce_156(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 513)
  def _reduce_157(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 516)
  def _reduce_158(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 519)
  def _reduce_159(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 522)
  def _reduce_160(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 525)
  def _reduce_161(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 528)
  def _reduce_162(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 532)
  def _reduce_163(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 536)
  def _reduce_164(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 538)
  def _reduce_165(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 543)
  def _reduce_166(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 546)
  def _reduce_167(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 556)
  def _reduce_168(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 558)
  def _reduce_169(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 563)
  def _reduce_170(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 171 omitted

module_eval(<<'.,.,', 'grammar.ra', 568)
  def _reduce_172(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 173 omitted

module_eval(<<'.,.,', 'grammar.ra', 574)
  def _reduce_174(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 583)
  def _reduce_175(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

module_eval(<<'.,.,', 'grammar.ra', 595)
  def _reduce_184(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 185 omitted

module_eval(<<'.,.,', 'grammar.ra', 600)
  def _reduce_186(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 187 omitted

module_eval(<<'.,.,', 'grammar.ra', 602)
  def _reduce_188(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 605)
  def _reduce_189(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 615)
  def _reduce_190(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 623)
  def _reduce_191(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 631)
  def _reduce_192(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 638)
  def _reduce_193(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 647)
  def _reduce_194(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 652)
  def _reduce_195(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 656)
  def _reduce_196(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 657)
  def _reduce_197(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 662)
  def _reduce_198(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 665)
  def _reduce_199(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 670)
  def _reduce_200(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 673)
  def _reduce_201(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 674)
  def _reduce_202(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 675)
  def _reduce_203(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 204 omitted

module_eval(<<'.,.,', 'grammar.ra', 679)
  def _reduce_205(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 683)
  def _reduce_206(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 207 omitted

module_eval(<<'.,.,', 'grammar.ra', 688)
  def _reduce_208(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 691)
  def _reduce_209(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 210 omitted

module_eval(<<'.,.,', 'grammar.ra', 697)
  def _reduce_211(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 703)
  def _reduce_212(val, _values, result)
     result = [val[0][:value], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 704)
  def _reduce_213(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 214 omitted

module_eval(<<'.,.,', 'grammar.ra', 708)
  def _reduce_215(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 216 omitted

module_eval(<<'.,.,', 'grammar.ra', 713)
  def _reduce_217(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 218 omitted

# reduce 219 omitted

module_eval(<<'.,.,', 'grammar.ra', 719)
  def _reduce_220(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 722)
  def _reduce_221(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 723)
  def _reduce_222(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 724)
  def _reduce_223(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

module_eval(<<'.,.,', 'grammar.ra', 730)
  def _reduce_227(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 733)
  def _reduce_228(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 737)
  def _reduce_229(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 744)
  def _reduce_230(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 750)
  def _reduce_231(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 232 omitted

module_eval(<<'.,.,', 'grammar.ra', 755)
  def _reduce_233(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 764)
  def _reduce_234(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 767)
  def _reduce_235(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 768)
  def _reduce_236(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 771)
  def _reduce_237(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 238 omitted

module_eval(<<'.,.,', 'grammar.ra', 776)
  def _reduce_239(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
