#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 859)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'40,41,223,222,270,178,-150,94,66,90,312,337,399,408,338,239,234,178',
'311,-218,398,-62,93,177,235,237,236,238,44,272,52,53,358,38,54,177,55',
'42,27,357,45,50,35,40,41,37,92,241,240,36,436,227,228,230,229,232,233',
'296,225,226,56,-150,-150,-150,-150,224,43,231,40,41,385,44,94,52,53',
'388,38,54,352,55,42,27,103,45,50,35,40,41,37,-199,-205,277,36,98,309',
'308,-64,97,40,41,-200,239,234,56,37,247,250,281,402,43,235,237,236,238',
'44,395,52,53,394,38,54,313,55,42,27,365,45,50,35,40,41,37,124,241,240',
'36,250,227,228,230,229,232,233,-132,225,226,56,395,309,308,394,224,43',
'231,281,298,177,44,350,52,53,177,38,54,209,55,42,27,297,45,50,35,40',
'41,37,214,102,315,36,430,213,60,61,62,63,100,101,239,234,56,281,279',
'339,281,298,43,235,237,236,238,44,369,52,53,278,38,54,367,55,42,27,56',
'45,50,35,40,41,37,209,241,240,36,413,227,228,230,229,232,233,214,225',
'226,56,370,213,225,226,224,43,231,371,66,224,44,133,52,53,56,38,54,209',
'55,42,27,-62,45,50,35,40,41,37,214,209,98,36,290,213,97,-142,373,411',
'292,-142,214,375,56,40,41,213,376,377,43,132,225,226,134,44,302,52,53',
'224,38,54,-65,55,42,27,-202,45,50,35,40,41,37,56,225,226,36,435,84,98',
'-143,224,42,146,-143,45,50,56,40,41,37,368,379,43,36,281,298,-149,44',
'66,52,53,382,38,54,56,55,42,27,274,45,50,35,40,41,37,-201,-199,-198',
'36,405,84,98,98,-200,42,146,97,45,50,56,40,41,37,286,303,43,36,281,287',
'302,44,300,52,53,-116,38,54,56,55,42,27,-206,45,50,35,40,41,37,296,276',
'-61,36,341,84,-201,133,-64,42,255,314,-200,50,56,281,298,37,336,275',
'43,36,281,287,274,44,66,52,53,-200,38,54,56,55,42,27,-201,45,50,35,40',
'41,37,-61,117,132,36,-201,134,306,230,229,309,308,267,225,226,56,40',
'41,267,98,224,43,231,97,264,56,156,154,158,153,155,84,151,159,160,201',
'192,-66,150,186,-63,40,41,37,391,161,149,187,343,84,392,90,204,42,255',
'185,182,50,56,40,41,37,102,157,163,36,-205,406,133,44,375,52,53,361',
'38,54,56,55,42,27,-204,45,50,35,40,41,37,-202,66,-201,36,433,84,-203',
'-198,-200,42,255,415,296,50,56,176,302,37,419,132,43,36,134,136,124',
'44,123,52,53,99,38,54,56,55,42,27,89,45,50,35,254,56,37,422,423,-202',
'36,425,88,239,234,60,61,62,63,-249,427,56,235,237,236,238,428,43,227',
'228,230,229,232,233,87,225,226,-39,-39,-39,-39,431,224,86,231,241,240',
'234,-63,227,228,230,229,232,233,235,225,226,252,-41,-41,-41,-41,224',
'65,231,-66,239,234,-45,-45,-45,-45,57,437,438,235,237,236,238,,,227',
'228,230,229,232,233,,225,226,,,,,,224,,231,241,240,,,227,228,230,229',
'232,233,,225,226,253,,,,,224,,231,,239,234,,,,,,,,235,237,236,238,,',
'227,228,230,229,,40,41,225,226,117,,118,,,224,,231,241,240,,,227,228',
'230,229,232,233,116,225,226,40,41,,,117,224,118,231,84,,,,42,81,,,50',
',,,37,115,116,,36,40,41,114,,117,,118,,84,,56,,42,81,,,50,,,,37,115',
'116,,36,40,41,114,,117,,118,,84,,56,,42,81,,,50,,,,37,115,116,,36,40',
'41,114,,117,,118,,84,,56,,42,81,,,50,,,,37,115,116,,36,40,41,114,,117',
',118,,84,,56,,42,81,,,50,,,,37,115,116,,36,40,41,114,,117,,118,,84,',
'56,,42,81,,,50,,,,37,115,116,,36,40,41,114,,117,,118,,84,,56,,42,81',
',,50,,,,37,115,116,,36,40,41,114,,117,,118,,84,,56,,42,81,,,50,,,,37',
'115,116,,36,40,41,114,,117,,118,,84,,56,,42,81,,,50,,,,37,115,116,,36',
'40,41,114,,117,,118,,84,,56,,42,81,,,50,,,,37,115,116,,36,40,41,114',
',117,,118,,84,,56,,42,81,,,50,,,,37,115,116,,36,40,41,114,,117,,118',
',84,,56,,42,81,,,50,,,,37,115,116,,36,40,41,114,,117,,118,,84,,56,,42',
'81,,,50,,,,37,115,116,,36,40,41,114,,117,,118,,84,,56,,42,81,,,50,,',
',37,115,116,,36,40,41,114,,117,,118,,84,,56,,42,81,,,50,,,,37,115,116',
',36,40,41,114,,117,,118,,84,,56,,42,81,,,50,,,,37,115,116,,36,40,41',
'114,,117,,118,,84,,56,,42,81,,,50,,,,37,115,116,174,36,40,41,114,,117',
',118,,84,,56,,42,81,,,50,,,,37,115,116,,36,40,41,114,,117,,118,,84,',
'56,,42,81,,,50,,,,37,115,116,,36,40,41,114,,117,,118,,84,,56,,42,81',
',,50,,,,37,115,116,,36,40,41,114,,117,,118,,84,,56,,42,81,,,50,,,,37',
'115,116,,36,40,41,114,,117,,118,,84,,56,,42,81,,,50,,,,37,115,116,,36',
'40,41,114,,117,,118,,84,,56,,42,81,,,50,,,,37,115,116,,36,40,41,114',
',117,,118,,84,,56,,42,81,,,50,,,,37,115,116,,36,40,41,114,,117,,118',
',84,,56,,42,81,,,50,,,,37,115,116,,36,40,41,114,,117,180,118,,84,,56',
',42,81,,,50,,,,37,115,116,,36,40,41,114,,82,,-218,,84,,56,,42,81,40',
'41,50,,117,,37,115,67,,36,,,114,,,,,,84,,56,,42,81,,,50,40,41,,37,117',
'84,118,36,,42,81,,,50,,,,37,56,,,36,116,,,40,41,,,117,,118,56,84,,40',
'41,42,81,117,,50,,,,37,115,116,184,36,,,114,40,41,40,41,117,84,118,56',
',42,81,,,50,,84,,37,115,42,255,36,116,50,114,,,37,,,,36,56,84,,84,,42',
'81,42,255,50,56,50,,37,115,37,,36,,36,114,40,41,,,117,,118,56,,56,40',
'41,,,117,,118,,,,40,41,116,,117,,118,,,,,,116,84,,,,42,81,,,50,116,84',
',37,115,42,81,36,,50,114,84,,37,115,42,81,36,56,50,114,,,37,115,40,41',
'36,56,117,114,118,,,,40,41,,56,117,,118,,,,40,41,116,,117,,118,,,,,',
'116,84,,,,42,81,,,50,116,84,,37,115,42,81,36,,50,114,84,,37,115,42,81',
'36,56,50,114,,,37,115,40,41,36,56,117,114,118,,,,40,41,,56,117,,118',
',,,,,116,,,,,,227,228,230,229,116,84,,225,226,42,81,,,50,224,84,231',
'37,115,42,81,36,,50,114,,,37,115,40,41,36,56,117,114,118,,,,40,41,,56',
'117,,,,,,40,41,116,284,117,,118,,,,,,,84,,,,42,81,,,50,116,84,,37,115',
'42,81,36,,50,114,84,,37,,42,81,36,56,50,,,,37,115,40,41,36,56,117,114',
'118,,,,40,41,,56,,,258,,,,40,41,116,,117,,118,,,,,,,84,,,,42,81,,,50',
'116,84,,37,115,42,255,36,,50,114,84,,37,,42,81,36,56,50,,,,37,115,40',
'41,36,56,117,114,118,,,,40,41,,56,117,,118,,,,40,41,116,,117,,118,,',
',,,116,84,,,,42,81,,,50,116,84,,37,115,42,81,36,,50,114,84,,37,115,42',
'81,36,56,50,114,,,37,115,,,36,56,,114,40,41,40,41,117,180,118,56,,396',
'227,228,230,229,232,233,,225,226,,,,116,,224,,231,,,,,,,84,234,84,,42',
'81,42,255,50,235,50,,37,115,37,,36,,36,114,,239,234,,,,,56,,56,235,237',
'236,238,,,227,228,230,229,232,233,,225,226,,,,,,224,,231,241,240,,,227',
'228,230,229,232,233,,225,226,239,234,,,,224,,231,,235,237,236,238,,',
',,,239,234,,,,,,,,235,237,236,238,,241,240,,,227,228,230,229,232,233',
',225,226,,,,,,224,240,231,,227,228,230,229,232,233,,225,226,239,234',
',,,224,,231,,235,237,236,238,230,229,,,,225,226,,239,234,,,224,,231',
',,235,237,236,238,,,227,228,230,229,232,233,,225,226,,,,,,224,,231,241',
'240,,,227,228,230,229,232,233,,225,226,239,234,,,,224,,231,,235,237',
'236,238,,,,,,,,,,,234,,,,,,,,235,241,240,,,227,228,230,229,232,233,',
'225,226,239,234,,,,224,,231,,235,237,236,238,227,228,230,229,232,233',
',225,226,,,,,,224,,231,,,241,240,,,227,228,230,229,232,233,,225,226',
'239,234,,,,224,,231,,235,237,236,238,,,,,239,234,,,,,,,,235,237,236',
'238,,,241,240,,,227,228,230,229,232,233,,225,226,,,,,,224,,231,227,228',
'230,229,232,233,,225,226,239,234,,,,224,,231,,235,237,236,238,,,,,239',
'234,,,,,,,,235,237,236,238,,,241,240,,,227,228,230,229,232,233,,225',
'226,,,,,,224,,231,227,228,230,229,232,233,,225,226,239,234,,,,224,,231',
',235,237,236,238,,,,,,,,,,,234,,,,,,,,235,241,240,,,227,228,230,229',
'232,233,,225,226,239,234,,,,224,,231,,235,237,236,238,227,228,230,229',
'232,233,,225,226,,,,,,224,,231,,,241,240,,,227,228,230,229,232,233,',
'225,226,239,234,,,,224,,231,,235,237,236,238,,,,,,,,,,,,,,,,,,,,241',
'240,,,227,228,230,229,232,233,,225,226,239,234,,,,224,,231,,235,237',
'236,238,,,,,,,,,,,,,,,,,,,,241,240,,,227,228,230,229,232,233,,225,226',
'239,234,,,,224,,231,335,235,237,236,238,,,,,,,,,,,,,,,,,,,,241,240,',
',227,228,230,229,232,233,,225,226,,,,,,224,,231,156,154,158,153,155',
',151,159,160,167,203,,150,152,,,,,,161,149,162,156,154,158,153,155,',
'151,159,160,167,165,,150,152,,157,163,,,161,149,162,156,154,158,153',
'155,,151,159,160,167,165,,150,152,,157,163,,,161,149,162,156,154,158',
'153,155,,151,159,160,167,165,,150,152,,157,163,,,161,149,162,156,154',
'158,153,155,,151,159,160,167,203,,150,152,,157,163,,,161,149,162,156',
'154,158,153,155,,151,159,160,167,203,,150,152,,157,163,,,161,149,162',
',,,,,,,,,,,,,,,157,163' ]
        racc_action_table = arr = ::Array.new(2741, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,111,111,129,81,286,33,26,33,210,246,346,355,246,111,111,146,210',
'146,346,26,33,81,111,111,111,111,0,129,0,0,269,0,0,146,0,0,0,268,0,0',
'0,429,429,0,33,111,111,0,429,111,111,111,111,111,111,267,111,111,0,286',
'286,286,286,111,0,111,338,338,310,429,72,429,429,338,429,429,265,429',
'429,429,39,429,429,429,2,2,429,72,39,172,429,34,310,310,107,34,118,118',
'107,172,172,429,34,118,338,348,348,429,172,172,172,172,2,392,2,2,392',
'2,2,215,2,2,2,279,2,2,2,288,288,2,264,172,172,2,118,172,172,172,172',
'172,172,192,172,172,2,343,215,215,343,172,2,172,183,183,192,288,259',
'288,288,255,288,288,92,288,288,288,183,288,288,288,408,408,288,92,38',
'219,288,408,92,21,21,21,21,38,38,219,219,288,173,173,249,283,283,288',
'219,219,219,219,408,287,408,408,173,408,408,283,408,408,408,226,408',
'408,408,358,358,408,307,219,219,408,358,219,219,219,219,219,219,307',
'219,219,408,289,307,322,322,219,408,219,291,105,322,358,55,358,358,225',
'358,358,209,358,358,358,105,358,358,358,181,181,358,209,93,357,358,181',
'209,357,278,293,357,181,278,93,294,358,59,59,93,296,299,358,55,323,323',
'55,181,202,181,181,323,181,181,108,181,181,181,108,181,181,181,423,423',
'181,55,324,324,181,423,59,59,174,324,59,59,174,59,59,181,64,64,59,285',
'301,181,59,285,285,201,423,199,423,423,304,423,423,59,423,423,423,305',
'423,423,423,352,352,423,197,195,194,423,352,64,64,54,193,64,64,54,64',
'64,423,399,399,64,179,190,423,64,179,179,189,352,188,352,352,187,352',
'352,64,352,352,352,186,352,352,352,252,252,352,182,168,104,352,252,399',
'104,270,24,399,399,216,24,399,352,216,216,399,245,165,352,399,245,245',
'164,252,145,252,252,142,252,252,399,252,252,252,141,252,252,252,89,89',
'252,23,89,270,252,23,270,205,320,320,205,205,128,320,320,252,401,401',
'127,53,320,252,320,53,126,270,89,89,89,89,89,89,89,89,89,89,89,109,89',
'89,106,253,253,89,340,89,89,89,253,401,342,95,91,401,401,88,86,401,89',
'254,254,401,84,89,89,401,83,353,272,253,354,253,253,273,253,253,401',
'253,253,253,80,253,253,253,422,422,253,79,77,75,253,422,254,73,71,70',
'254,254,374,375,254,253,68,381,254,383,272,253,254,272,57,52,422,46',
'422,422,35,422,422,254,422,422,422,32,422,422,422,122,272,422,395,398',
'31,422,400,30,122,122,19,19,19,19,402,404,422,122,122,122,122,407,422',
'328,328,328,328,328,328,29,328,328,5,5,5,5,412,328,28,328,122,122,332',
'25,122,122,122,122,122,122,332,122,122,119,7,7,7,7,122,22,122,20,119',
'119,9,9,9,9,1,432,434,119,119,119,119,,,332,332,332,332,332,332,,332',
'332,,,,,,332,,332,119,119,,,119,119,119,119,119,119,,119,119,121,,,',
',119,,119,,121,121,,,,,,,,121,121,121,121,,,325,325,325,325,,394,394',
'325,325,394,,394,,,325,,325,121,121,,,121,121,121,121,121,121,394,121',
'121,239,239,,,239,121,239,121,394,,,,394,394,,,394,,,,394,394,239,,394',
'238,238,394,,238,,238,,239,,394,,239,239,,,239,,,,239,239,238,,239,237',
'237,239,,237,,237,,238,,239,,238,238,,,238,,,,238,238,237,,238,236,236',
'238,,236,,236,,237,,238,,237,237,,,237,,,,237,237,236,,237,235,235,237',
',235,,235,,236,,237,,236,236,,,236,,,,236,236,235,,236,41,41,236,,41',
',41,,235,,236,,235,235,,,235,,,,235,235,41,,235,43,43,235,,43,,43,,41',
',235,,41,41,,,41,,,,41,41,43,,41,44,44,41,,44,,44,,43,,41,,43,43,,,43',
',,,43,43,44,,43,45,45,43,,45,,45,,44,,43,,44,44,,,44,,,,44,44,45,,44',
'234,234,44,,234,,234,,45,,44,,45,45,,,45,,,,45,45,234,,45,233,233,45',
',233,,233,,234,,45,,234,234,,,234,,,,234,234,233,,234,232,232,234,,232',
',232,,233,,234,,233,233,,,233,,,,233,233,232,,233,231,231,233,,231,',
'231,,232,,233,,232,232,,,232,,,,232,232,231,,232,230,230,232,,230,,230',
',231,,232,,231,231,,,231,,,,231,231,230,,231,229,229,231,,229,,229,',
'230,,231,,230,230,,,230,,,,230,230,229,,230,66,66,230,,66,,66,,229,',
'230,,229,229,,,229,,,,229,229,66,,229,67,67,229,,67,,67,,66,,229,,66',
'66,,,66,,,,66,66,67,67,66,376,376,66,,376,,376,,67,,66,,67,67,,,67,',
',,67,67,376,,67,371,371,67,,371,,371,,376,,67,,376,376,,,376,,,,376',
'376,371,,376,228,228,376,,228,,228,,371,,376,,371,371,,,371,,,,371,371',
'228,,371,227,227,371,,227,,227,,228,,371,,228,228,,,228,,,,228,228,227',
',228,292,292,228,,292,,292,,227,,228,,227,227,,,227,,,,227,227,292,',
'227,240,240,227,,240,,240,,292,,227,,292,292,,,292,,,,292,292,240,,292',
'224,224,292,,224,,224,,240,,292,,240,240,,,240,,,,240,240,224,,240,223',
'223,240,,223,,223,,224,,240,,224,224,,,224,,,,224,224,223,,224,82,82',
'224,,82,82,82,,223,,224,,223,223,,,223,,,,223,223,82,,223,27,27,223',
',27,,27,,82,,223,,82,82,350,350,82,,350,,82,82,27,,82,,,82,,,,,,27,',
'82,,27,27,,,27,241,241,,27,241,350,241,27,,350,350,,,350,,,,350,27,',
',350,241,,,87,87,,,87,,87,350,241,,300,300,241,241,300,,241,,,,241,241',
'87,87,241,,,241,311,311,258,258,311,87,311,241,,87,87,,,87,,300,,87',
'87,300,300,87,311,300,87,,,300,,,,300,87,311,,258,,311,311,258,258,311',
'300,258,,311,311,258,,311,,258,311,312,312,,,312,,312,311,,258,280,280',
',,280,,280,,,,94,94,312,,94,,94,,,,,,280,312,,,,312,312,,,312,94,280',
',312,312,280,280,312,,280,312,94,,280,280,94,94,280,312,94,280,,,94',
'94,178,178,94,280,178,94,178,,,,100,100,,94,100,,100,,,,101,101,178',
',101,,101,,,,,,100,178,,,,178,178,,,178,101,100,,178,178,100,100,178',
',100,178,101,,100,100,101,101,100,178,101,100,,,101,101,102,102,101',
'100,102,101,102,,,,103,103,,101,103,,103,,,,,,102,,,,,,326,326,326,326',
'103,102,,326,326,102,102,,,102,326,103,326,102,102,103,103,102,,103',
'102,,,103,103,177,177,103,102,177,103,177,,,,176,176,,103,176,,,,,,339',
'339,177,177,339,,339,,,,,,,177,,,,177,177,,,177,339,176,,177,177,176',
'176,177,,176,177,339,,176,,339,339,176,177,339,,,,339,339,276,276,339',
'176,276,339,276,,,,123,123,,339,,,123,,,,275,275,276,,275,,275,,,,,',
',276,,,,276,276,,,276,275,123,,276,276,123,123,276,,123,276,275,,123',
',275,275,123,276,275,,,,275,275,114,114,275,123,114,275,114,,,,115,115',
',275,115,,115,,,,116,116,114,,116,,116,,,,,,115,114,,,,114,114,,,114',
'116,115,,114,114,115,115,114,,115,114,116,,115,115,116,116,115,114,116',
'115,,,116,116,,,116,115,,116,117,117,344,344,117,117,117,116,,344,327',
'327,327,327,327,327,,327,327,,,,117,,327,,327,,,,,,,117,329,344,,117',
'117,344,344,117,329,344,,117,117,344,,117,,344,117,,363,363,,,,,117',
',344,363,363,363,363,,,329,329,329,329,329,329,,329,329,,,,,,329,,329',
'363,363,,,363,363,363,363,363,363,,363,363,218,218,,,,363,,363,,218',
'218,218,218,,,,,,334,334,,,,,,,,334,334,334,334,,218,218,,,218,218,218',
'218,218,218,,218,218,,,,,,218,334,218,,334,334,334,334,334,334,,334',
'334,333,333,,,,334,,334,,333,333,333,333,321,321,,,,321,321,,364,364',
',,321,,321,,,364,364,364,364,,,333,333,333,333,333,333,,333,333,,,,',
',333,,333,364,364,,,364,364,364,364,364,364,,364,364,417,417,,,,364',
',364,,417,417,417,417,,,,,,,,,,,331,,,,,,,,331,417,417,,,417,417,417',
'417,417,417,,417,417,366,366,,,,417,,417,,366,366,366,366,331,331,331',
'331,331,331,,331,331,,,,,,331,,331,,,366,366,,,366,366,366,366,366,366',
',366,366,217,217,,,,366,,366,,217,217,217,217,,,,,386,386,,,,,,,,386',
'386,386,386,,,217,217,,,217,217,217,217,217,217,,217,217,,,,,,217,,217',
'386,386,386,386,386,386,,386,386,372,372,,,,386,,386,,372,372,372,372',
',,,,387,387,,,,,,,,387,387,387,387,,,372,372,,,372,372,372,372,372,372',
',372,372,,,,,,372,,372,387,387,387,387,387,387,,387,387,414,414,,,,387',
',387,,414,414,414,414,,,,,,,,,,,330,,,,,,,,330,414,414,,,414,414,414',
'414,414,414,,414,414,175,175,,,,414,,414,,175,175,175,175,330,330,330',
'330,330,330,,330,330,,,,,,330,,330,,,175,175,,,175,175,175,175,175,175',
',175,175,220,220,,,,175,,175,,220,220,220,220,,,,,,,,,,,,,,,,,,,,220',
'220,,,220,220,220,220,220,220,,220,220,390,390,,,,220,,220,,390,390',
'390,390,,,,,,,,,,,,,,,,,,,,390,390,,,390,390,390,390,390,390,,390,390',
'244,244,,,,390,,390,244,244,244,244,244,,,,,,,,,,,,,,,,,,,,244,244,',
',244,244,244,244,244,244,,244,244,,,,,,244,,244,90,90,90,90,90,,90,90',
'90,90,90,,90,90,,,,,,90,90,90,65,65,65,65,65,,65,65,65,65,65,,65,65',
',90,90,,,65,65,65,274,274,274,274,274,,274,274,274,274,274,,274,274',
',65,65,,,274,274,274,204,204,204,204,204,,204,204,204,204,204,,204,204',
',274,274,,,204,204,204,302,302,302,302,302,,302,302,302,302,302,,302',
'302,,204,204,,,302,302,302,303,303,303,303,303,,303,303,303,303,303',
',303,303,,302,302,,,303,303,303,,,,,,,,,,,,,,,,303,303' ]
        racc_action_check = arr = ::Array.new(2741, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   628,    84,   nil,   nil,   529,   nil,   551,   nil,   561,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   507,
   602,   118,   611,   414,   379,   584,     2,  1369,   527,   565,
   548,   541,   547,     1,    57,   504,   nil,   nil,   170,    67,
   nil,   844,   nil,   869,   894,   919,   522,   nil,   nil,   nil,
   nil,   nil,   541,   415,   318,   242,   nil,   542,   nil,   274,
   nil,   nil,   nil,   nil,   317,  2584,  1094,  1119,   522,   nil,
   504,   503,    66,   502,   nil,   498,   nil,   514,   nil,   496,
   489,    -1,  1344,   475,   488,   nil,   418,  1436,   447,   428,
  2562,   476,   140,   238,  1537,   475,   nil,   nil,   nil,   nil,
  1594,  1604,  1651,  1661,   373,   235,   453,    77,   274,   450,
   nil,    -2,   nil,   nil,  1842,  1852,  1862,  1915,    96,   605,
   nil,   659,   551,  1785,   nil,   nil,   444,   426,   420,    -8,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   403,   396,   nil,   nil,   410,    11,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   402,   357,   nil,   nil,   380,   nil,
   nil,   nil,    84,   179,   292,  2387,  1718,  1708,  1584,   358,
   nil,   256,   355,   143,   nil,   nil,   360,   353,   332,   359,
   346,   nil,   132,   332,   326,   325,   nil,   324,   nil,   324,
   nil,   305,   275,   nil,  2628,   393,   nil,   nil,   nil,   226,
    -8,   nil,   nil,   nil,   nil,    99,   394,  2218,  1999,   170,
  2432,   nil,   nil,  1319,  1294,   185,   149,  1219,  1194,  1069,
  1044,  1019,   994,   969,   944,   819,   794,   769,   744,   719,
  1269,  1411,   nil,   nil,  2522,   401,     2,   nil,   nil,   181,
   nil,   nil,   385,   471,   489,   137,   nil,   nil,  1466,   147,
   nil,   nil,   nil,   nil,   130,    70,   nil,    22,     2,    24,
   395,   nil,   498,   496,  2606,  1795,  1775,   nil,   249,   100,
  1527,   nil,   nil,   182,   nil,   315,    -2,   194,   127,   224,
   nil,   225,  1244,   199,   262,   nil,   264,   nil,   nil,   271,
  1446,   314,  2650,  2672,   324,   328,   nil,   194,   nil,   nil,
    45,  1464,  1517,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   385,  2037,   175,   223,   245,   638,  1628,  1874,   530,  1933,
  2364,  2150,   584,  2062,  2017,   nil,   nil,   nil,    66,  1728,
   467,   nil,   473,   116,  1917,   nil,     0,   nil,    96,   nil,
  1383,   nil,   342,   474,   490,     5,   nil,   227,   213,   nil,
   nil,   nil,   nil,  1954,  2083,   nil,  2173,   nil,   nil,   nil,
   nil,  1169,  2280,   nil,   460,   496,  1144,   nil,   nil,   nil,
   nil,   523,   nil,   528,   nil,   nil,  2235,  2297,   nil,   nil,
  2477,   nil,    84,   nil,   694,   554,   nil,   nil,   555,   360,
   557,   446,   565,   nil,   566,   nil,   nil,   556,   170,   nil,
   nil,   nil,   587,   nil,  2342,   nil,   nil,  2128,   nil,   nil,
   nil,   nil,   514,   299,   nil,   nil,   nil,   nil,   nil,    41,
   nil,   nil,   620,   nil,   621,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -227,  -262,    -1,    -2,    -3,    -6,    -7,    -8,    -9,   -10,
   -11,   -12,   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,
   -21,  -262,   -40,   -42,   -43,   -44,   -46,  -117,   -55,   -59,
  -262,   -65,  -262,  -199,  -262,   -94,  -116,  -118,  -242,  -260,
  -144,  -262,  -149,  -262,  -262,  -262,  -262,  -198,  -203,  -204,
  -206,  -207,  -262,  -262,  -219,  -262,  -250,  -262,    -4,  -262,
   -47,   -48,   -49,   -50,  -262,  -139,  -262,  -262,   -54,   -74,
   -78,   -79,   -80,   -81,   -82,   -83,   -84,   -85,   -86,   -87,
   -88,  -117,  -262,  -260,  -242,   -56,  -262,  -262,  -262,  -129,
  -129,   -97,  -227,  -227,  -262,  -262,   -93,  -218,  -219,   -95,
  -262,  -262,  -262,  -262,   -83,   -85,   -82,   -78,   -87,  -184,
  -145,  -262,  -161,  -162,  -262,  -262,  -262,  -262,  -262,  -262,
  -154,  -262,  -262,  -262,  -208,  -209,  -211,  -227,  -227,  -227,
  -220,  -222,  -223,  -224,  -225,  -226,   439,   -38,   -39,   -40,
   -41,   -42,   -43,   -44,   -45,   -46,  -117,  -202,   -37,   -22,
   -23,   -24,   -25,   -26,   -27,   -28,   -29,   -30,   -31,   -32,
   -33,   -34,   -35,   -36,  -248,  -132,  -133,  -134,  -262,  -137,
  -138,  -140,  -262,  -262,   -53,   -76,  -262,  -262,  -262,  -262,
  -245,  -262,  -228,  -262,   -58,   -60,   -25,   -35,  -114,  -248,
  -262,  -112,  -117,  -119,  -120,  -121,  -122,  -123,  -124,  -125,
  -130,  -134,  -248,  -132,  -139,  -262,  -100,  -101,  -103,  -227,
  -262,  -109,  -110,  -117,  -242,  -262,  -262,  -126,  -128,  -262,
  -127,  -146,  -147,  -262,  -262,  -262,  -262,  -262,  -262,  -262,
  -262,  -262,  -262,  -262,  -262,  -262,  -262,  -262,  -262,  -262,
  -262,  -262,  -173,  -180,  -262,  -262,  -262,  -253,  -254,  -262,
  -257,  -258,  -262,  -262,  -262,  -117,  -192,  -193,  -262,  -262,
  -199,  -200,  -201,  -205,  -262,  -262,  -229,  -228,  -227,  -262,
  -262,  -236,  -262,  -262,  -249,  -262,  -262,  -261,   -51,  -247,
  -262,  -246,   -75,  -262,  -143,  -262,  -243,  -247,    -5,  -262,
   -68,   -69,  -262,  -262,  -248,  -232,  -235,   -57,  -247,  -262,
  -115,  -262,  -249,  -129,  -262,  -248,   -98,  -262,  -105,  -106,
  -262,  -262,  -262,   -99,  -151,  -259,  -148,  -163,  -164,  -165,
  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -174,  -175,  -176,
  -177,  -178,  -179,  -181,  -182,  -183,  -243,  -251,  -262,  -262,
  -262,  -153,  -262,  -157,  -262,  -186,  -262,  -190,  -248,  -195,
  -262,  -210,  -262,  -262,  -248,  -262,  -238,  -262,  -262,  -221,
  -237,   -92,  -141,  -136,  -135,   -52,   -77,  -142,  -150,  -244,
   -67,  -262,   -71,   -72,  -262,  -249,  -262,   -89,  -113,   -90,
  -131,  -248,   -91,  -262,  -102,  -104,  -107,  -108,  -252,  -255,
  -256,  -152,  -157,  -156,  -262,  -262,  -185,  -187,  -262,  -262,
  -262,  -262,  -247,  -197,  -262,  -213,  -230,  -262,  -262,  -239,
  -240,  -241,  -262,  -217,   -70,   -73,  -233,  -234,  -111,   -96,
  -155,  -158,  -262,  -262,  -191,  -194,  -196,  -212,  -231,  -262,
  -215,  -216,  -262,  -160,  -262,  -189,  -214,  -159,  -188 ]

racc_goto_table = [
    22,     2,    22,    24,    58,    24,   120,   127,   128,    69,
   248,   257,   130,    31,   273,    31,    23,   135,    23,   189,
   202,   110,   291,   125,   200,   200,    25,   164,    25,    39,
    70,    39,   198,   191,     3,   345,   205,   215,   293,   301,
    79,   188,    47,    75,    47,   294,   173,   221,   393,    96,
   384,   259,   304,    74,    59,    20,    64,    20,   140,   139,
   144,   179,   142,   140,   139,   144,   183,   142,   265,   268,
    91,   137,   147,   216,   138,   141,   148,   147,   299,   138,
   141,   344,   362,   401,   256,   143,   289,   348,   181,   126,
   143,    85,   193,   340,   342,   355,   245,   420,   129,   269,
    68,    47,   147,   360,   416,   197,    47,   409,   211,   211,
   246,     1,   nil,   nil,   nil,   196,   nil,   nil,   nil,   nil,
   nil,   251,   nil,   353,   nil,   397,   261,   nil,   nil,   nil,
   354,   194,   nil,   nil,   212,   212,   147,   nil,   nil,   262,
   nil,   nil,   nil,   nil,   374,   nil,   349,   nil,   nil,   nil,
   nil,   nil,   263,   310,   nil,   383,   283,   285,   282,   nil,
   nil,   266,   266,   271,   nil,    47,   305,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    70,
   nil,    22,   347,   nil,    24,   nil,   259,   318,   319,    79,
   nil,   nil,    75,   404,    31,   nil,   nil,    23,   400,   412,
   nil,   nil,    74,   316,   407,   nil,   nil,    25,   nil,   nil,
    39,   nil,   nil,   nil,   nil,   nil,    33,   nil,    33,   nil,
   nil,   nil,   nil,    47,   nil,   211,   nil,   359,   nil,   nil,
   389,   418,   135,   381,   135,   351,    20,   380,   200,   nil,
   nil,   nil,   nil,   198,   378,   nil,   nil,   nil,   nil,   nil,
    95,   212,    22,    22,   nil,    24,    24,   261,   nil,   nil,
   nil,   261,   nil,   432,   434,    31,    31,   147,    23,    23,
   262,   147,   347,   nil,   262,    33,   nil,   nil,    25,    25,
    33,    39,    39,   263,   nil,   nil,   nil,   263,    22,   426,
    58,    24,   nil,   nil,    47,    47,    47,   nil,   nil,   nil,
    47,    31,   356,   193,    23,   195,   nil,    20,    20,   nil,
   nil,   410,   nil,   147,    25,   nil,   197,    39,   nil,   nil,
   nil,   nil,   nil,   211,   nil,   nil,   196,   424,   nil,   259,
    47,    49,   403,    49,   nil,   nil,   nil,   nil,   nil,   260,
   nil,   251,   194,    20,   nil,   nil,   nil,   261,   nil,   212,
   nil,   nil,    22,    70,   nil,    24,   421,   147,    22,   nil,
   262,    24,   nil,    79,   nil,    31,    75,   nil,    23,   nil,
   nil,    31,   nil,   263,    23,   nil,    74,   nil,    25,   nil,
   nil,    39,   nil,   nil,    25,   nil,    47,    39,   nil,   nil,
    49,   nil,   nil,   nil,    47,    49,   nil,    33,   nil,   nil,
    47,   nil,   261,   nil,   261,   nil,   nil,    20,    22,   429,
   nil,    24,   147,    20,   147,   262,   nil,   262,   nil,   nil,
    49,    31,    22,    22,    23,    24,    24,   nil,   263,    22,
   263,    58,    24,   nil,    25,    31,    31,    39,    23,    23,
   nil,    47,    31,    47,   nil,    23,   nil,   nil,    25,    25,
    47,    39,    39,   nil,    49,    25,   nil,   nil,    39,    48,
   nil,    48,   nil,    20,    47,    47,   nil,   nil,    33,    33,
   260,    47,   nil,   nil,   260,   nil,   nil,    20,    20,   nil,
   nil,    26,   nil,    26,    20,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,    77,   nil,
   nil,   nil,    49,   nil,   nil,   nil,   195,   nil,    48,   nil,
   nil,   nil,   nil,    48,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   145,   nil,   nil,   nil,   nil,   145,   nil,   nil,    48,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   260,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,
   199,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    48,    49,    49,    49,   nil,   nil,   nil,    49,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   260,   nil,   260,   nil,    49,
   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,   nil,
   nil,    49,   nil,   nil,   nil,   nil,   nil,   nil,    33,    33,
    48,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    77,   nil,   nil,
   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    49,   nil,   nil,   nil,   nil,   nil,    49,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    48,    48,    48,   nil,   nil,   nil,    48,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   111,   nil,   119,   121,   122,
    49,   nil,    49,    26,    26,   nil,   nil,   nil,   nil,    49,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    48,   nil,   nil,
   172,   nil,   nil,    49,    49,   nil,   nil,   nil,   nil,    48,
    49,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   199,   nil,   nil,   217,   218,   219,   220,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   242,   243,
   244,   nil,   nil,    48,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    48,   nil,   nil,   nil,   nil,   nil,    48,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    77,   nil,    26,   nil,   nil,   nil,   nil,   nil,    26,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    48,   nil,
    48,   nil,   nil,   nil,   nil,   nil,   nil,    48,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    48,    48,   nil,   nil,   nil,   nil,   nil,    48,    26,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    26,    26,   nil,   nil,   111,   317,   nil,
    26,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,   332,   333,   334,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   363,
   364,   nil,   nil,   nil,   366,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   372,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   386,   387,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   390,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   414,   nil,   nil,   nil,   nil,
   417,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   121 ]

racc_goto_check = [
    25,     2,    25,    27,     4,    27,    71,    50,    50,    43,
    93,    80,    88,    36,    42,    36,    26,    74,    26,    53,
    53,    69,     5,    82,    65,    65,    28,    54,    28,    64,
    27,    64,    48,    62,     3,    76,    57,    57,    40,    42,
    36,    51,    45,    26,    45,    41,    30,    70,    72,     6,
    58,    78,    42,    28,    24,    21,    24,    21,     8,    25,
    10,    30,    27,     8,    25,    10,    30,    27,    84,    84,
    56,    23,    36,    30,     6,    26,    23,    36,    52,     6,
    26,    75,    68,    44,    79,    28,    38,    81,    37,    83,
    28,    33,    27,     5,     5,    85,    30,    72,    86,    87,
    31,    45,    36,    89,    90,    26,    45,    91,    26,    26,
    92,     1,   nil,   nil,   nil,    28,   nil,   nil,   nil,   nil,
   nil,    27,   nil,    40,   nil,    76,    27,   nil,   nil,   nil,
    41,    45,   nil,   nil,    45,    45,    36,   nil,   nil,    26,
   nil,   nil,   nil,   nil,    42,   nil,    80,   nil,   nil,   nil,
   nil,   nil,    64,    57,   nil,    42,    30,    30,    43,   nil,
   nil,     3,     3,     3,   nil,    45,    54,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,
   nil,    25,    78,   nil,    27,   nil,    78,    74,    74,    36,
   nil,   nil,    26,     5,    36,   nil,   nil,    26,    42,     5,
   nil,   nil,    28,    69,    42,   nil,   nil,    28,   nil,   nil,
    64,   nil,   nil,   nil,   nil,   nil,    46,   nil,    46,   nil,
   nil,   nil,   nil,    45,   nil,    26,   nil,    88,   nil,   nil,
    93,    42,    74,    53,    74,    82,    21,    65,    65,   nil,
   nil,   nil,   nil,    48,    62,   nil,   nil,   nil,   nil,   nil,
    46,    45,    25,    25,   nil,    27,    27,    27,   nil,   nil,
   nil,    27,   nil,     5,     5,    36,    36,    36,    26,    26,
    26,    36,    78,   nil,    26,    46,   nil,   nil,    28,    28,
    46,    64,    64,    64,   nil,   nil,   nil,    64,    25,    80,
     4,    27,   nil,   nil,    45,    45,    45,   nil,   nil,   nil,
    45,    36,     3,    27,    26,    46,   nil,    21,    21,   nil,
   nil,    50,   nil,    36,    28,   nil,    26,    64,   nil,   nil,
   nil,   nil,   nil,    26,   nil,   nil,    28,    78,   nil,    78,
    45,    49,    43,    49,   nil,   nil,   nil,   nil,   nil,    46,
   nil,    27,    45,    21,   nil,   nil,   nil,    27,   nil,    45,
   nil,   nil,    25,    27,   nil,    27,    71,    36,    25,   nil,
    26,    27,   nil,    36,   nil,    36,    26,   nil,    26,   nil,
   nil,    36,   nil,    64,    26,   nil,    28,   nil,    28,   nil,
   nil,    64,   nil,   nil,    28,   nil,    45,    64,   nil,   nil,
    49,   nil,   nil,   nil,    45,    49,   nil,    46,   nil,   nil,
    45,   nil,    27,   nil,    27,   nil,   nil,    21,    25,     2,
   nil,    27,    36,    21,    36,    26,   nil,    26,   nil,   nil,
    49,    36,    25,    25,    26,    27,    27,   nil,    64,    25,
    64,     4,    27,   nil,    28,    36,    36,    64,    26,    26,
   nil,    45,    36,    45,   nil,    26,   nil,   nil,    28,    28,
    45,    64,    64,   nil,    49,    28,   nil,   nil,    64,    47,
   nil,    47,   nil,    21,    45,    45,   nil,   nil,    46,    46,
    46,    45,   nil,   nil,    46,   nil,   nil,    21,    21,   nil,
   nil,    29,   nil,    29,    21,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,    29,   nil,
   nil,   nil,    49,   nil,   nil,   nil,    46,   nil,    47,   nil,
   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    29,   nil,   nil,   nil,   nil,    29,   nil,   nil,    47,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    46,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    46,   nil,
    29,   nil,   nil,   nil,    46,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    47,    49,    49,    49,   nil,   nil,   nil,    49,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    46,   nil,    46,   nil,    49,
   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,   nil,   nil,
   nil,    49,   nil,   nil,   nil,   nil,   nil,   nil,    46,    46,
    47,   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29,   nil,   nil,
   nil,   nil,    29,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    49,   nil,   nil,   nil,   nil,   nil,    49,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    47,    47,    47,   nil,   nil,   nil,    47,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    39,   nil,    39,    39,    39,
    49,   nil,    49,    29,    29,   nil,   nil,   nil,   nil,    49,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,
    39,   nil,   nil,    49,    49,   nil,   nil,   nil,   nil,    47,
    49,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    29,   nil,   nil,    39,    39,    39,    39,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,    39,
    39,   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    47,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    29,   nil,    29,   nil,   nil,   nil,   nil,   nil,    29,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,
    47,   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    47,    47,   nil,   nil,   nil,   nil,   nil,    47,    29,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    29,    29,   nil,   nil,    39,    39,   nil,
    29,    39,    39,    39,    39,    39,    39,    39,    39,    39,
    39,    39,    39,    39,    39,    39,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,
    39,   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    39,    39,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil,
    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39 ]

racc_goto_pointer = [
   nil,   111,     1,    34,     2,  -159,    15,   nil,    -1,   nil,
     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    55,   nil,    12,    35,     0,    16,     3,    26,   481,
   -21,    73,   nil,    63,   nil,   nil,    13,     2,   -95,   684,
  -144,  -137,  -150,   -18,  -265,    42,   216,   459,   -57,   331,
   -46,   -48,  -110,   -70,   -38,   nil,    37,   -56,  -257,   nil,
   nil,   nil,   -56,   nil,    29,   -65,   nil,   nil,  -192,   -20,
   -64,   -38,  -295,   nil,   -38,  -173,  -219,   nil,   -72,   -39,
  -112,  -171,   -29,    37,   -59,  -173,    43,   -30,   -43,  -169,
  -271,  -250,    -8,  -108,   nil ]

racc_goto_default = [
   nil,   nil,   288,   206,     4,   nil,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,   109,   166,    21,   nil,    78,   104,   107,   106,   105,
   nil,   nil,    28,   nil,    29,    30,   108,   nil,   nil,   175,
   nil,   nil,   nil,   112,   280,    71,    72,    73,    76,    80,
    32,   nil,   nil,   nil,   nil,    34,   nil,   nil,   207,   307,
   208,   210,   nil,   190,    83,   169,   168,   170,   171,   nil,
   nil,   nil,   nil,   113,    51,   nil,   nil,   346,    46,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   131,
   295,   nil,   nil,   nil,   249 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 74, :_reduce_3,
  2, 74, :_reduce_4,
  1, 77, :_reduce_5,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_21,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  3, 92, :_reduce_37,
  3, 92, :_reduce_38,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  4, 86, :_reduce_51,
  5, 86, :_reduce_52,
  3, 86, :_reduce_53,
  2, 86, :_reduce_54,
  1, 93, :_reduce_55,
  2, 93, :_reduce_56,
  4, 104, :_reduce_57,
  3, 104, :_reduce_58,
  1, 104, :_reduce_59,
  3, 106, :_reduce_60,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  4, 105, :_reduce_67,
  3, 105, :_reduce_68,
  1, 110, :_reduce_none,
  3, 110, :_reduce_70,
  2, 110, :_reduce_71,
  3, 109, :_reduce_72,
  4, 109, :_reduce_73,
  1, 103, :_reduce_74,
  3, 103, :_reduce_75,
  1, 102, :_reduce_76,
  3, 102, :_reduce_77,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  5, 78, :_reduce_89,
  5, 78, :_reduce_90,
  5, 78, :_reduce_91,
  5, 90, :_reduce_92,
  2, 79, :_reduce_93,
  1, 127, :_reduce_94,
  2, 127, :_reduce_95,
  6, 80, :_reduce_96,
  2, 80, :_reduce_97,
  3, 128, :_reduce_98,
  3, 128, :_reduce_99,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  3, 129, :_reduce_102,
  1, 130, :_reduce_none,
  3, 130, :_reduce_104,
  1, 131, :_reduce_105,
  1, 131, :_reduce_106,
  3, 132, :_reduce_107,
  3, 132, :_reduce_108,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  4, 134, :_reduce_111,
  1, 123, :_reduce_112,
  3, 123, :_reduce_113,
  0, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 121, :_reduce_116,
  1, 117, :_reduce_117,
  1, 118, :_reduce_118,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  3, 81, :_reduce_126,
  3, 81, :_reduce_127,
  3, 91, :_reduce_128,
  0, 125, :_reduce_129,
  1, 125, :_reduce_130,
  3, 125, :_reduce_131,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  3, 137, :_reduce_135,
  3, 139, :_reduce_136,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  0, 126, :_reduce_139,
  1, 126, :_reduce_140,
  3, 126, :_reduce_141,
  4, 108, :_reduce_142,
  3, 108, :_reduce_143,
  1, 99, :_reduce_144,
  2, 99, :_reduce_145,
  2, 141, :_reduce_146,
  1, 142, :_reduce_147,
  2, 142, :_reduce_148,
  1, 119, :_reduce_149,
  4, 97, :_reduce_150,
  4, 97, :_reduce_151,
  5, 84, :_reduce_152,
  4, 84, :_reduce_153,
  2, 83, :_reduce_154,
  5, 143, :_reduce_155,
  4, 143, :_reduce_156,
  0, 144, :_reduce_none,
  2, 144, :_reduce_158,
  4, 144, :_reduce_159,
  3, 144, :_reduce_160,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  3, 111, :_reduce_163,
  3, 111, :_reduce_164,
  3, 111, :_reduce_165,
  3, 111, :_reduce_166,
  3, 111, :_reduce_167,
  3, 111, :_reduce_168,
  3, 111, :_reduce_169,
  3, 111, :_reduce_170,
  3, 111, :_reduce_171,
  3, 111, :_reduce_172,
  2, 111, :_reduce_173,
  3, 111, :_reduce_174,
  3, 111, :_reduce_175,
  3, 111, :_reduce_176,
  3, 111, :_reduce_177,
  3, 111, :_reduce_178,
  3, 111, :_reduce_179,
  2, 111, :_reduce_180,
  3, 111, :_reduce_181,
  3, 111, :_reduce_182,
  3, 111, :_reduce_183,
  1, 111, :_reduce_184,
  5, 82, :_reduce_185,
  1, 147, :_reduce_186,
  2, 147, :_reduce_187,
  5, 148, :_reduce_188,
  4, 148, :_reduce_189,
  1, 149, :_reduce_190,
  3, 149, :_reduce_191,
  3, 100, :_reduce_192,
  1, 151, :_reduce_none,
  4, 151, :_reduce_194,
  1, 153, :_reduce_none,
  3, 153, :_reduce_196,
  3, 152, :_reduce_197,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_206,
  1, 150, :_reduce_none,
  1, 154, :_reduce_208,
  1, 155, :_reduce_none,
  3, 155, :_reduce_210,
  2, 85, :_reduce_211,
  6, 87, :_reduce_212,
  5, 87, :_reduce_213,
  7, 88, :_reduce_214,
  6, 88, :_reduce_215,
  6, 89, :_reduce_216,
  5, 89, :_reduce_217,
  1, 122, :_reduce_218,
  1, 122, :_reduce_219,
  1, 158, :_reduce_220,
  3, 158, :_reduce_221,
  1, 160, :_reduce_222,
  1, 161, :_reduce_223,
  1, 161, :_reduce_224,
  1, 161, :_reduce_225,
  1, 161, :_reduce_none,
  0, 75, :_reduce_227,
  0, 112, :_reduce_228,
  1, 156, :_reduce_none,
  3, 156, :_reduce_230,
  4, 156, :_reduce_231,
  1, 113, :_reduce_none,
  3, 113, :_reduce_233,
  3, 162, :_reduce_234,
  1, 162, :_reduce_235,
  1, 159, :_reduce_none,
  2, 159, :_reduce_237,
  1, 157, :_reduce_none,
  2, 157, :_reduce_239,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 98, :_reduce_242,
  3, 120, :_reduce_243,
  4, 120, :_reduce_244,
  2, 120, :_reduce_245,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  0, 114, :_reduce_none,
  1, 114, :_reduce_249,
  1, 146, :_reduce_250,
  3, 145, :_reduce_251,
  4, 145, :_reduce_252,
  2, 145, :_reduce_253,
  1, 164, :_reduce_none,
  3, 164, :_reduce_255,
  3, 165, :_reduce_256,
  1, 166, :_reduce_257,
  1, 166, :_reduce_258,
  4, 136, :_reduce_259,
  1, 101, :_reduce_none,
  4, 101, :_reduce_261 ]

racc_reduce_n = 262

racc_shift_n = 439

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68,
  :MODULO => 69,
  :PIPE => 70,
  :LAMBDA => 71 }

racc_nt_base = 72

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "MODULO",
  "PIPE",
  "LAMBDA",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "unlessstatement",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "call_method_with_lambda",
  "keyword",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "expressions",
  "funcvalues",
  "call_method",
  "lambda",
  "named_access",
  "named_access_lval",
  "funcrvalue",
  "lambda_parameter_list",
  "statements_or_expression",
  "expression",
  "nothing",
  "arguments",
  "endcomma",
  "rvalue",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "param_name",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 37)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 40)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 49)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'grammar.ra', 74)
  def _reduce_21(val, _values, result)
     result = val[0] ; val[0].ignore_rvalue 
    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'grammar.ra', 94)
  def _reduce_37(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 97)
  def _reduce_38(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

module_eval(<<'.,.,', 'grammar.ra', 112)
  def _reduce_51(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 119)
  def _reduce_52(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 125)
  def _reduce_53(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 132)
  def _reduce_54(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 141)
  def _reduce_55(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 142)
  def _reduce_56(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 145)
  def _reduce_57(val, _values, result)
     result = ast AST::MethodCall, val[0].merge(:arguments => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 146)
  def _reduce_58(val, _values, result)
     result = ast AST::MethodCall, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 147)
  def _reduce_59(val, _values, result)
     result = ast AST::MethodCall, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 150)
  def _reduce_60(val, _values, result)
     result = {:receiver => val[0], :name => val[2][:value], :line => val[1][:line]} 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'grammar.ra', 166)
  def _reduce_67(val, _values, result)
          result = ast AST::Lambda, 
        :parameters => val[1],
        :expressions => val[2],
        :line => val[0][:line]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 172)
  def _reduce_68(val, _values, result)
          result = ast AST::Lambda, 
        :parameters => val[1],
        :line => val[0][:line]
    
    result
  end
.,.,

# reduce 69 omitted

module_eval(<<'.,.,', 'grammar.ra', 184)
  def _reduce_70(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 185)
  def _reduce_71(val, _values, result)
    result = ast AST::ASTArray, :children => [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 189)
  def _reduce_72(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 190)
  def _reduce_73(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 193)
  def _reduce_74(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 196)
  def _reduce_75(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 200)
  def _reduce_76(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 201)
  def _reduce_77(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

module_eval(<<'.,.,', 'grammar.ra', 216)
  def _reduce_89(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 219)
  def _reduce_90(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 222)
  def _reduce_91(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 229)
  def _reduce_92(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 236)
  def _reduce_93(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 252)
  def _reduce_94(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 253)
  def _reduce_95(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 258)
  def _reduce_96(val, _values, result)
      @lexer.commentpop
  type = val[0].value.downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 276)
  def _reduce_97(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 294)
  def _reduce_98(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 302)
  def _reduce_99(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 100 omitted

# reduce 101 omitted

module_eval(<<'.,.,', 'grammar.ra', 315)
  def _reduce_102(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 103 omitted

module_eval(<<'.,.,', 'grammar.ra', 320)
  def _reduce_104(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 324)
  def _reduce_105(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 325)
  def _reduce_106(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 328)
  def _reduce_107(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 333)
  def _reduce_108(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 109 omitted

# reduce 110 omitted

module_eval(<<'.,.,', 'grammar.ra', 342)
  def _reduce_111(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 345)
  def _reduce_112(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 347)
  def _reduce_113(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 114 omitted

# reduce 115 omitted

module_eval(<<'.,.,', 'grammar.ra', 355)
  def _reduce_116(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 359)
  def _reduce_117(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 363)
  def _reduce_118(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'grammar.ra', 375)
  def _reduce_126(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 381)
  def _reduce_127(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 385)
  def _reduce_128(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 391)
  def _reduce_129(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 393)
  def _reduce_130(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 395)
  def _reduce_131(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'grammar.ra', 404)
  def _reduce_135(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 408)
  def _reduce_136(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 137 omitted

# reduce 138 omitted

module_eval(<<'.,.,', 'grammar.ra', 417)
  def _reduce_139(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 419)
  def _reduce_140(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 421)
  def _reduce_141(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 427)
  def _reduce_142(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 432)
  def _reduce_143(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 438)
  def _reduce_144(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 439)
  def _reduce_145(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 441)
  def _reduce_146(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 443)
  def _reduce_147(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 444)
  def _reduce_148(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 447)
  def _reduce_149(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 451)
  def _reduce_150(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 454)
  def _reduce_151(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 458)
  def _reduce_152(val, _values, result)
      @lexer.commentpop
  args = {
    :test => ast(AST::Not, :value => val[1]),
    :statements => val[3]
  }

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 467)
  def _reduce_153(val, _values, result)
        @lexer.commentpop
    args = {
      :test => ast(AST::Not, :value => val[1]), 
      :statements => ast(AST::Nop)
    }
    result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 476)
  def _reduce_154(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 480)
  def _reduce_155(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 491)
  def _reduce_156(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 157 omitted

module_eval(<<'.,.,', 'grammar.ra', 504)
  def _reduce_158(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 507)
  def _reduce_159(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 511)
  def _reduce_160(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 161 omitted

# reduce 162 omitted

module_eval(<<'.,.,', 'grammar.ra', 530)
  def _reduce_163(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 533)
  def _reduce_164(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 536)
  def _reduce_165(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 539)
  def _reduce_166(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 542)
  def _reduce_167(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 545)
  def _reduce_168(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 548)
  def _reduce_169(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 551)
  def _reduce_170(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 554)
  def _reduce_171(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 557)
  def _reduce_172(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 560)
  def _reduce_173(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 563)
  def _reduce_174(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 566)
  def _reduce_175(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 569)
  def _reduce_176(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 572)
  def _reduce_177(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 575)
  def _reduce_178(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 578)
  def _reduce_179(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 581)
  def _reduce_180(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 584)
  def _reduce_181(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 587)
  def _reduce_182(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 590)
  def _reduce_183(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 592)
  def _reduce_184(val, _values, result)
        result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 597)
  def _reduce_185(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 601)
  def _reduce_186(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 603)
  def _reduce_187(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 608)
  def _reduce_188(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 611)
  def _reduce_189(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 621)
  def _reduce_190(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 623)
  def _reduce_191(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 628)
  def _reduce_192(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 193 omitted

module_eval(<<'.,.,', 'grammar.ra', 633)
  def _reduce_194(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 195 omitted

module_eval(<<'.,.,', 'grammar.ra', 639)
  def _reduce_196(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 648)
  def _reduce_197(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

module_eval(<<'.,.,', 'grammar.ra', 660)
  def _reduce_206(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 207 omitted

module_eval(<<'.,.,', 'grammar.ra', 665)
  def _reduce_208(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 209 omitted

module_eval(<<'.,.,', 'grammar.ra', 667)
  def _reduce_210(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 670)
  def _reduce_211(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 680)
  def _reduce_212(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 688)
  def _reduce_213(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 696)
  def _reduce_214(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 703)
  def _reduce_215(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 712)
  def _reduce_216(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 717)
  def _reduce_217(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 721)
  def _reduce_218(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 722)
  def _reduce_219(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 727)
  def _reduce_220(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 730)
  def _reduce_221(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 735)
  def _reduce_222(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 738)
  def _reduce_223(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 739)
  def _reduce_224(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 740)
  def _reduce_225(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 226 omitted

module_eval(<<'.,.,', 'grammar.ra', 744)
  def _reduce_227(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 748)
  def _reduce_228(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 229 omitted

module_eval(<<'.,.,', 'grammar.ra', 753)
  def _reduce_230(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 756)
  def _reduce_231(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 232 omitted

module_eval(<<'.,.,', 'grammar.ra', 762)
  def _reduce_233(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 768)
  def _reduce_234(val, _values, result)
     result = [val[0][:value], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 769)
  def _reduce_235(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 236 omitted

module_eval(<<'.,.,', 'grammar.ra', 773)
  def _reduce_237(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 238 omitted

module_eval(<<'.,.,', 'grammar.ra', 778)
  def _reduce_239(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 240 omitted

# reduce 241 omitted

module_eval(<<'.,.,', 'grammar.ra', 784)
  def _reduce_242(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 787)
  def _reduce_243(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 788)
  def _reduce_244(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 789)
  def _reduce_245(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

module_eval(<<'.,.,', 'grammar.ra', 795)
  def _reduce_249(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 798)
  def _reduce_250(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 802)
  def _reduce_251(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 809)
  def _reduce_252(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 815)
  def _reduce_253(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 254 omitted

module_eval(<<'.,.,', 'grammar.ra', 820)
  def _reduce_255(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 829)
  def _reduce_256(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 832)
  def _reduce_257(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 833)
  def _reduce_258(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 836)
  def _reduce_259(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 260 omitted

module_eval(<<'.,.,', 'grammar.ra', 841)
  def _reduce_261(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
