#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 797)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'9,15,199,200,204,181,-130,104,-112,106,301,372,91,291,370,168,172,181',
'300,-197,-184,180,107,180,163,165,169,171,39,205,47,1,332,10,13,180',
'21,25,35,331,44,48,2,9,15,16,103,164,167,34,334,174,175,157,158,160',
'161,340,166,170,31,-130,-130,-130,-130,159,8,162,9,15,311,39,104,47',
'1,348,10,13,330,21,25,35,376,44,48,2,9,15,16,-178,377,292,34,397,282',
'319,54,304,305,120,55,168,172,31,282,307,185,16,320,8,163,165,169,171',
'39,-123,47,1,345,10,13,180,21,25,35,358,44,48,2,9,15,16,315,164,167',
'34,395,174,175,157,158,160,161,314,166,170,31,9,15,304,305,159,8,162',
'187,372,312,39,370,47,1,257,10,13,212,21,25,35,212,44,48,2,9,15,16,211',
'299,329,34,211,214,82,54,294,214,185,55,168,172,31,80,81,282,366,336',
'8,163,165,169,171,39,290,47,1,289,10,13,54,21,25,35,55,44,48,2,9,15',
'16,31,164,167,34,354,174,175,157,158,160,161,31,166,170,31,9,15,166',
'170,159,8,162,166,170,159,39,-185,47,1,159,10,13,121,21,25,35,342,44',
'48,2,9,15,16,-179,-96,343,34,384,58,-180,212,212,25,236,-178,-129,48',
'31,9,15,16,211,211,8,34,54,214,214,39,55,47,1,353,10,13,31,21,25,35',
'259,44,48,2,9,15,16,166,170,-177,34,278,58,350,159,303,25,236,304,305',
'48,31,9,15,16,308,257,8,34,282,307,256,39,255,47,1,253,10,13,31,21,25',
'35,249,44,48,2,9,15,16,247,312,361,34,322,58,241,93,363,25,236,321,220',
'48,31,282,283,16,285,106,8,34,282,283,208,39,369,47,1,-122,10,13,31',
'21,25,35,122,44,48,2,9,15,16,121,66,97,34,373,99,346,157,158,-183,282',
'307,166,170,31,9,15,-181,-179,159,8,162,375,249,31,149,151,154,125,128',
'58,134,135,139,141,145,380,152,155,381,9,15,16,257,138,143,146,394,58',
'93,-182,-180,25,236,-177,-184,48,31,9,15,16,385,127,130,34,82,122,93',
'39,386,47,1,121,10,13,31,21,25,35,-228,44,48,2,9,15,16,120,97,388,34',
'99,58,54,-179,390,25,196,-180,44,48,31,110,393,16,108,97,8,34,99,31',
'100,39,57,47,1,56,10,13,31,21,25,35,399,44,48,2,245,31,16,400,,,34,',
',168,172,85,86,87,83,,,31,163,165,169,171,,8,174,175,157,158,,,,166',
'170,-38,-38,-38,-38,,159,,162,164,167,172,,174,175,157,158,160,161,163',
'166,170,246,-40,-40,-40,-40,159,,162,,168,172,85,86,87,83,,,,163,165',
'169,171,,,174,175,157,158,160,161,,166,170,-44,-44,-44,-44,,159,,162',
'164,167,,,174,175,157,158,160,161,,166,170,173,,,,,159,,162,,168,172',
',,,,,,,163,165,169,171,,,174,175,157,158,,9,15,166,170,66,,72,,,159',
',162,164,167,,,174,175,157,158,160,161,59,166,170,9,15,,,114,159,-197',
'162,58,,,,25,69,,,48,,,,16,64,113,,34,9,15,77,,66,,72,,58,,31,,25,69',
',,48,9,15,,16,66,59,72,34,,,,,,,,,58,,31,,25,69,59,,48,,,,16,64,,,34',
'58,,77,,25,69,,,48,,31,,16,64,9,15,34,,66,77,72,,,,9,15,,31,66,,72,',
',,,,59,,,,,,,,157,158,59,58,,166,170,25,69,,,48,159,58,162,16,64,25',
'69,34,,48,77,,,16,64,9,15,34,31,66,77,72,,,,9,15,,31,66,,72,,,,9,15',
'59,287,66,,72,,,,,,59,58,,,,25,69,,,48,59,58,,16,64,25,69,34,,48,77',
'58,,16,64,25,69,34,31,48,77,,,16,64,9,15,34,31,66,77,72,,,,9,15,,31',
'66,,72,,,,9,15,59,,66,,72,,,,,,59,58,,,,25,69,,,48,59,58,,16,64,25,69',
'34,,48,77,58,,16,64,25,69,34,31,48,77,,,16,64,9,15,34,31,66,77,72,,',
',9,15,,31,66,,72,,,,9,15,59,,66,179,72,,,,,,59,58,,,,25,69,,,48,59,58',
',16,64,25,69,34,,48,77,58,,16,64,25,69,34,31,48,77,,,16,64,9,15,34,31',
'66,77,72,,,,9,15,,31,66,,72,,,,9,15,59,,66,,72,,,,,,59,58,,,,25,69,',
',48,59,58,,16,64,25,69,34,,48,77,58,,16,64,25,69,34,31,48,77,,,16,64',
'9,15,34,31,66,77,72,,,,9,15,,31,66,,72,,,,9,15,59,,66,,72,,,,,,59,58',
',,,25,69,,,48,59,58,,16,64,25,69,34,,48,77,58,,16,64,25,69,34,31,48',
'77,,,16,64,9,15,34,31,66,77,72,,,,9,15,,31,66,,72,,,,9,15,59,,66,,72',
',,,,,59,58,,,,25,69,,,48,59,58,,16,64,25,69,34,,48,77,58,,16,64,25,69',
'34,31,48,77,,,16,64,9,15,34,31,66,77,72,,,,9,15,,31,66,,72,,,,9,15,59',
',66,,72,,,,,,59,58,,,,25,69,,,48,59,58,,16,64,25,69,34,,48,77,58,,16',
'64,25,69,34,31,48,77,,,16,64,9,15,34,31,66,77,72,,,,9,15,,31,66,,72',
',,,,,59,,,,,,,,,,59,58,9,15,,25,69,,,48,,58,,16,64,25,69,34,,48,77,',
',16,64,,,34,31,,77,,,,,58,54,,31,25,196,,44,48,9,15,,16,66,,72,34,,',
'9,15,,,66,,72,,31,,9,15,59,,66,,,,,,9,15,59,58,66,,,25,69,,,48,,58,',
'16,64,25,69,34,,48,77,58,,16,64,25,69,34,31,48,77,58,,16,,25,69,34,31',
'48,9,15,,16,66,,72,34,31,,9,15,,,66,,72,,31,,9,15,59,,66,,72,,,,,,59',
'58,,,,25,69,,,48,59,58,,16,64,25,69,34,,48,77,58,,16,64,25,69,34,31',
'48,77,,,16,64,9,15,34,31,66,77,72,,,,9,15,,31,66,,72,,,,9,15,59,,,,238',
',,,,,59,58,,,,25,69,,,48,,58,,16,64,25,69,34,,48,77,58,,16,64,25,236',
'34,31,48,77,,,16,,9,15,34,31,66,,72,,,,,,,31,,,,9,15,,,66,59,72,,,,',
',,,,,58,,,,25,69,59,243,48,9,15,,16,64,,,34,58,,77,,25,69,,,48,,31,',
'16,64,,,34,9,15,77,,66,179,72,,58,,31,,25,236,,,48,9,15,,16,66,59,72',
'34,,,,,,,,,58,,31,,25,69,59,,48,,,,16,64,,,34,58,,77,,25,69,,,48,,31',
',16,64,9,15,34,,66,77,72,,,,9,15,,31,66,,72,,,,9,15,59,,66,,72,,,,,',
'59,58,,,,25,69,,,48,59,58,,16,64,25,69,34,,48,77,58,,16,64,25,69,34',
'31,48,77,,,16,64,9,15,34,31,66,77,72,,,,9,15,,31,66,,174,175,157,158',
'160,161,59,166,170,,,,,,159,,162,58,,,,25,69,,,48,,58,,16,64,25,236',
'34,,48,77,168,172,16,,,,34,31,,163,165,169,171,,,,,31,,,,,,,,,,,,,,',
'164,167,,,174,175,157,158,160,161,,166,170,168,172,,,,159,,162,,163',
'165,169,171,,,,,168,172,,,,,,,,163,165,169,171,,,164,167,,,174,175,157',
'158,160,161,,166,170,,,,,,159,,162,174,175,157,158,160,161,,166,170',
'168,172,,,,159,,162,,163,165,169,171,,,,,,,,,168,172,,,,,,,,163,165',
'169,171,,,174,175,157,158,160,161,,166,170,,,172,,,159,,162,164,167',
'163,,174,175,157,158,160,161,,166,170,168,172,,,,159,,162,,163,165,169',
'171,,,,174,175,157,158,160,161,,166,170,,,,,,159,,162,167,,,174,175',
'157,158,160,161,,166,170,168,172,,,,159,,162,,163,165,169,171,174,175',
'157,158,160,161,,166,170,,172,,,,159,,162,,163,164,167,,,174,175,157',
'158,160,161,,166,170,168,172,,,,159,,162,,163,165,169,171,174,175,157',
'158,160,161,,166,170,,172,,,,159,,162,,163,164,167,,,174,175,157,158',
'160,161,,166,170,168,172,,,,159,,162,,163,165,169,171,174,175,157,158',
'160,161,,166,170,,,,,,159,,162,,,164,167,,,174,175,157,158,160,161,',
'166,170,168,172,,,,159,,162,,163,165,169,171,,,,,,,,,,,,,,,,,,,,164',
'167,,,174,175,157,158,160,161,,166,170,168,172,,,,159,,162,260,163,165',
'169,171,,,,,,,,,,,,,,,,,,,,164,167,,,174,175,157,158,160,161,,166,170',
'168,172,,,,159,,162,,163,165,169,171,,,,,168,172,,,,,,,,163,165,169',
'171,,,164,167,,,174,175,157,158,160,161,,166,170,,,,,,159,,162,174,175',
'157,158,160,161,,166,170,168,172,,,,159,,162,,163,165,169,171,,,,,,',
',,,,,,,,,,,,,164,167,,,174,175,157,158,160,161,,166,170,,,,,,159,,162',
'149,151,154,125,128,,134,135,139,222,230,,152,225,,,,,,138,143,224,149',
'151,154,125,128,,134,135,139,222,223,,152,225,,127,130,,,138,143,224',
'149,151,154,125,128,,134,135,139,222,230,,152,225,,127,130,,,138,143',
'224,149,151,154,125,128,,134,135,139,222,223,,152,225,,127,130,,,138',
'143,224,149,151,154,125,128,,134,135,139,222,223,,152,225,,127,130,',
',138,143,224,149,151,154,125,128,,134,135,139,222,230,,152,225,,127',
'130,,,138,143,224,,,,,,,,,,,,,,,,127,130' ]
        racc_action_table = arr = ::Array.new(2533, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,89,89,95,69,321,27,145,27,210,322,18,184,322,89,89,196,210,196,18',
'145,27,69,89,89,89,89,0,95,0,0,251,0,0,196,0,0,0,250,0,0,0,253,253,0',
'27,89,89,0,253,89,89,89,89,89,89,258,89,89,0,321,321,321,321,89,0,89',
'289,289,226,253,68,253,253,289,253,253,249,253,253,253,326,253,253,253',
'393,393,253,68,326,191,253,393,242,242,26,226,226,247,26,191,191,253',
'286,286,289,26,242,253,191,191,191,191,393,243,393,393,286,393,393,236',
'393,393,393,302,393,393,393,390,390,393,235,191,191,393,390,191,191',
'191,191,191,191,230,191,191,393,72,72,302,302,191,393,191,72,373,228',
'390,373,390,390,221,390,390,306,390,390,390,212,390,390,390,277,277',
'390,306,206,248,390,212,306,10,1,198,212,72,1,248,248,390,10,10,317',
'317,254,390,248,248,248,248,277,182,277,277,182,277,277,13,277,277,277',
'13,277,277,277,299,299,277,170,248,248,277,299,248,248,248,248,248,248',
'166,248,248,277,376,376,262,262,248,277,248,266,266,262,299,155,299',
'299,266,299,299,153,299,299,299,279,299,299,299,350,350,299,148,146',
'283,299,350,376,144,103,107,376,376,142,141,376,299,367,367,376,103',
'107,299,376,294,103,107,350,294,350,350,294,350,350,376,350,350,350',
'140,350,350,350,173,173,350,261,261,137,350,173,367,293,261,217,367',
'367,217,217,367,350,246,246,367,219,133,350,367,219,219,132,173,126',
'173,173,123,173,173,367,173,173,173,122,173,173,173,245,245,173,119',
'309,310,173,245,246,111,205,313,246,246,244,105,246,173,244,244,246',
'177,101,173,246,177,177,100,245,319,245,245,320,245,245,246,245,245',
'245,88,245,245,245,57,57,245,79,57,205,245,323,205,288,280,280,78,288',
'288,280,280,245,324,324,75,74,280,245,280,324,332,205,57,57,57,57,57',
'57,57,57,57,57,57,333,57,57,335,383,383,57,338,57,57,57,383,324,204',
'71,70,324,324,65,63,324,57,84,84,324,355,57,57,324,58,53,21,383,360',
'383,383,50,383,383,324,383,383,383,366,383,383,383,30,30,383,47,204',
'368,383,204,84,84,40,372,84,84,36,84,84,383,33,377,84,28,21,383,84,21',
'204,24,30,3,30,30,2,30,30,84,30,30,30,396,30,30,30,116,21,30,398,,,30',
',,116,116,11,11,11,11,,,30,116,116,116,116,,30,265,265,265,265,,,,265',
'265,52,52,52,52,,265,,265,116,116,275,,116,116,116,116,116,116,275,116',
'116,117,7,7,7,7,116,,116,,117,117,19,19,19,19,,,,117,117,117,117,,,275',
'275,275,275,275,275,,275,275,17,17,17,17,,275,,275,117,117,,,117,117',
'117,117,117,117,,117,117,62,,,,,117,,117,,62,62,,,,,,,,62,62,62,62,',
',264,264,264,264,,160,160,264,264,160,,160,,,264,,264,62,62,,,62,62',
'62,62,62,62,160,62,62,35,35,,,35,62,35,62,160,,,,160,160,,,160,,,,160',
'160,35,,160,181,181,160,,181,,181,,35,,160,,35,35,,,35,39,39,,35,39',
'181,39,35,,,,,,,,,181,,35,,181,181,39,,181,,,,181,181,,,181,39,,181',
',39,39,,,39,,181,,39,39,370,370,39,,370,39,370,,,,44,44,,39,44,,44,',
',,,,370,,,,,,,,281,281,44,370,,281,281,370,370,,,370,281,44,281,370',
'370,44,44,370,,44,370,,,44,44,180,180,44,370,180,44,180,,,,175,175,',
'44,175,,175,,,,174,174,180,180,174,,174,,,,,,175,180,,,,180,180,,,180',
'174,175,,180,180,175,175,180,,175,180,174,,175,175,174,174,175,180,174',
'175,,,174,174,15,15,174,175,15,174,15,,,,59,59,,174,59,,59,,,,199,199',
'15,,199,,199,,,,,,59,15,,,,15,15,,,15,199,59,,15,15,59,59,15,,59,15',
'199,,59,59,199,199,59,15,199,59,,,199,199,64,64,199,59,64,199,64,,,',
'172,172,,199,172,,172,,,,66,66,64,,66,66,66,,,,,,172,64,,,,64,64,,,64',
'66,172,,64,64,172,172,64,,172,64,66,,172,172,66,66,172,64,66,172,,,66',
'66,8,8,66,172,8,66,8,,,,171,171,,66,171,,171,,,,169,169,8,,169,,169',
',,,,,171,8,,,,8,8,,,8,169,171,,8,8,171,171,8,,171,8,169,,171,171,169',
'169,171,8,169,171,,,169,169,168,168,169,171,168,169,168,,,,167,167,',
'169,167,,167,,,,330,330,168,,330,,330,,,,,,167,168,,,,168,168,,,168',
'330,167,,168,168,167,167,168,,167,168,330,,167,167,330,330,167,168,330',
'167,,,330,330,165,165,330,167,165,330,165,,,,77,77,,330,77,,77,,,,164',
'164,165,,164,,164,,,,,,77,165,,,,165,165,,,165,164,77,,165,165,77,77',
'165,,77,165,164,,77,77,164,164,77,165,164,77,,,164,164,80,80,164,77',
'80,164,80,,,,81,81,,164,81,,81,,,,82,82,80,,82,,82,,,,,,81,80,,,,80',
'80,,,80,82,81,,80,80,81,81,80,,81,80,82,,81,81,82,82,81,80,82,81,,,82',
'82,163,163,82,81,163,82,163,,,,91,91,,82,91,,91,,,,,,163,,,,,,,,,,91',
'163,92,92,,163,163,,,163,,91,,163,163,91,91,163,,91,163,,,91,91,,,91',
'163,,91,,,,,92,92,,91,92,92,,92,92,162,162,,92,162,,162,92,,,161,161',
',,161,,161,,92,,315,315,162,,315,,,,,,241,241,161,162,241,,,162,162',
',,162,,161,,162,162,161,161,162,,161,162,315,,161,161,315,315,161,162',
'315,161,241,,315,,241,241,315,161,241,104,104,,241,104,,104,241,315',
',314,314,,,314,,314,,241,,159,159,104,,159,,159,,,,,,314,104,,,,104',
'104,,,104,159,314,,104,104,314,314,104,,314,104,159,,314,314,159,159',
'314,104,159,314,,,159,159,158,158,159,314,158,159,158,,,,157,157,,159',
'157,,157,,,,110,110,158,,,,110,,,,,,157,158,,,,158,158,,,158,,157,,158',
'158,157,157,158,,157,158,110,,157,157,110,110,157,158,110,157,,,110',
',259,259,110,157,259,,259,,,,,,,110,,,,113,113,,,113,259,113,,,,,,,',
',,259,,,,259,259,113,113,259,238,238,,259,259,,,259,113,,259,,113,113',
',,113,,259,,113,113,,,113,114,114,113,,114,114,114,,238,,113,,238,238',
',,238,284,284,,238,284,114,284,238,,,,,,,,,114,,238,,114,114,284,,114',
',,,114,114,,,114,284,,114,,284,284,,,284,,114,,284,284,121,121,284,',
'121,284,121,,,,291,291,,284,291,,291,,,,301,301,121,,301,,301,,,,,,291',
'121,,,,121,121,,,121,301,291,,121,121,291,291,121,,291,121,301,,291',
'291,301,301,291,121,301,291,,,301,301,300,300,301,291,300,301,300,,',
',255,255,,301,255,,276,276,276,276,276,276,300,276,276,,,,,,276,,276',
'300,,,,300,300,,,300,,255,,300,300,255,255,300,,255,300,378,378,255',
',,,255,300,,378,378,378,378,,,,,255,,,,,,,,,,,,,,,378,378,,,378,378',
'378,378,378,378,,378,378,189,189,,,,378,,378,,189,189,189,189,,,,,357',
'357,,,,,,,,357,357,357,357,,,189,189,,,189,189,189,189,189,189,,189',
'189,,,,,,189,,189,357,357,357,357,357,357,,357,357,356,356,,,,357,,357',
',356,356,356,356,,,,,,,,,349,349,,,,,,,,349,349,349,349,,,356,356,356',
'356,356,356,,356,356,,,269,,,356,,356,349,349,269,,349,349,349,349,349',
'349,,349,349,268,268,,,,349,,349,,268,268,268,268,,,,269,269,269,269',
'269,269,,269,269,,,,,,269,,269,268,,,268,268,268,268,268,268,,268,268',
'364,364,,,,268,,268,,364,364,364,364,267,267,267,267,267,267,,267,267',
',273,,,,267,,267,,273,364,364,,,364,364,364,364,364,364,,364,364,178',
'178,,,,364,,364,,178,178,178,178,273,273,273,273,273,273,,273,273,,272',
',,,273,,273,,272,178,178,,,178,178,178,178,178,178,,178,178,190,190',
',,,178,,178,,190,190,190,190,272,272,272,272,272,272,,272,272,,,,,,272',
',272,,,190,190,,,190,190,190,190,190,190,,190,190,202,202,,,,190,,190',
',202,202,202,202,,,,,,,,,,,,,,,,,,,,202,202,,,202,202,202,202,202,202',
',202,202,156,156,,,,202,,202,156,156,156,156,156,,,,,,,,,,,,,,,,,,,',
'156,156,,,156,156,156,156,156,156,,156,156,341,341,,,,156,,156,,341',
'341,341,341,,,,,271,271,,,,,,,,271,271,271,271,,,341,341,,,341,341,341',
'341,341,341,,341,341,,,,,,341,,341,271,271,271,271,271,271,,271,271',
'344,344,,,,271,,271,,344,344,344,344,,,,,,,,,,,,,,,,,,,,344,344,,,344',
'344,344,344,344,344,,344,344,,,,,,344,,344,108,108,108,108,108,,108',
'108,108,108,108,,108,108,,,,,,108,108,108,106,106,106,106,106,,106,106',
'106,106,106,,106,106,,108,108,,,106,106,106,312,312,312,312,312,,312',
'312,312,312,312,,312,312,,106,106,,,312,312,312,257,257,257,257,257',
',257,257,257,257,257,,257,257,,312,312,,,257,257,257,256,256,256,256',
'256,,256,256,256,256,256,,256,256,,257,257,,,256,256,256,220,220,220',
'220,220,,220,220,220,220,220,,220,220,,256,256,,,220,220,220,,,,,,,',
',,,,,,,,220,220' ]
        racc_action_check = arr = ::Array.new(2533, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   146,   461,   494,   nil,   nil,   nil,   508,  1023,   nil,
   175,   464,   nil,   171,   nil,   889,   nil,   540,    -3,   518,
   nil,   455,   nil,   nil,   500,   nil,    60,     1,   486,   nil,
   471,   nil,   nil,   468,   nil,   676,   464,   nil,   nil,   718,
   460,   nil,   nil,   nil,   775,   nil,   nil,   474,   nil,   nil,
   456,   nil,   486,   432,   nil,   nil,   nil,   385,   449,   899,
   nil,   nil,   616,   422,   956,   421,   976,   nil,    66,    -1,
   418,   417,   145,   nil,   385,   384,   nil,  1167,   376,   384,
  1224,  1234,  1244,   nil,   446,   nil,   nil,   nil,   359,    -2,
   nil,  1301,  1325,   nil,   nil,    -8,   nil,   nil,   nil,   nil,
   371,   358,   nil,   244,  1439,   351,  2376,   245,  2354,   nil,
  1526,   341,   nil,  1590,  1640,   nil,   508,   562,   nil,   335,
   nil,  1704,   305,   325,   nil,   nil,   289,   nil,   nil,   nil,
   nil,   nil,   308,   311,   nil,   nil,   nil,   283,   nil,   nil,
   286,   250,   249,   nil,   244,    -3,   239,   nil,   238,   nil,
   nil,   nil,   nil,   244,   nil,   221,  2207,  1516,  1506,  1459,
   651,  1377,  1367,  1291,  1177,  1157,   167,  1100,  1090,  1043,
   156,  1033,   966,   299,   842,   832,   nil,   358,  2072,   nil,
   822,   701,   192,   nil,     2,   nil,   nil,   nil,   nil,  1854,
  2117,    84,   nil,   nil,   nil,   nil,    11,   nil,   146,   909,
   nil,   nil,  2162,   nil,   437,   352,   168,   nil,   nil,   nil,
    -8,   nil,   144,   nil,   nil,   nil,   nil,   266,   nil,   315,
  2464,   149,   nil,   nil,   nil,   nil,    48,   nil,   144,   nil,
    91,   nil,   nil,   nil,   nil,   121,    97,   nil,  1615,   nil,
   nil,  1397,    83,    92,   351,   342,   317,    97,   170,    63,
    14,    20,   nil,    41,   185,  1781,  2442,  2420,    48,  1573,
   nil,   244,   175,   nil,   595,   487,   180,  2004,  1982,  1962,
   nil,  2269,  2094,  2049,   nil,   541,  1736,   170,   nil,   245,
   342,   742,   nil,   256,  1657,   nil,    93,   nil,   389,    66,
   nil,  1714,   nil,   302,   247,   nil,   nil,   nil,   nil,   213,
  1771,  1724,   100,   nil,   nil,   nil,   140,   nil,   nil,   336,
   340,   nil,  2398,   346,  1449,  1387,   nil,   181,   nil,   348,
   353,    -2,   -20,   385,   403,   nil,    70,   nil,   nil,   nil,
  1110,   nil,   378,   401,   nil,   420,   nil,   nil,   421,   nil,
   nil,  2252,   nil,   nil,  2314,   nil,   nil,   nil,   nil,  1937,
   256,   nil,   nil,   nil,   nil,   442,  1916,  1871,   nil,   nil,
   450,   nil,   nil,   nil,  2027,   nil,   460,   274,   469,   nil,
   765,   nil,   476,   124,   nil,   nil,   231,   484,  1809,   nil,
   nil,   nil,   nil,   428,   nil,   nil,   nil,   nil,   nil,   nil,
   127,   nil,   nil,    84,   nil,   nil,   503,   nil,   510,   nil,
   nil ]

racc_action_default = [
  -206,  -241,   -74,  -241,   -18,    -7,   -19,    -8,  -241,  -124,
  -221,   -20,    -9,  -198,  -186,  -241,   -98,   -10,  -239,  -241,
   -11,  -241,  -177,   -12,  -241,  -129,  -241,  -178,   -39,   -13,
    -1,  -229,  -182,  -241,   -96,   -97,   -41,   -14,    -2,  -241,
   -42,   -15,    -3,  -181,  -241,   -43,   -16,  -241,  -185,  -183,
   -45,   -17,    -6,  -206,  -198,  -197,   -75,  -109,  -221,  -241,
  -142,  -141,  -241,  -239,  -241,   -59,  -241,   -66,   -60,   -97,
   -63,   -61,  -241,   -64,   -58,   -67,   -62,  -241,   -68,   -65,
  -241,  -241,  -241,   -49,  -241,   -46,   -47,   -48,  -206,  -241,
  -125,  -241,  -241,  -203,  -205,  -206,  -199,  -202,  -201,  -204,
  -241,  -241,   -73,  -206,  -241,   -77,  -109,  -206,  -119,    -4,
  -241,   -53,   -54,  -241,  -241,  -134,  -241,  -241,  -188,  -190,
  -187,  -241,  -207,  -241,  -208,   -25,   -94,   -29,   -27,   -92,
   -35,  -113,  -241,  -227,   -23,   -31,  -110,  -100,   -33,   -32,
  -241,  -114,  -101,   -21,  -103,   -97,   -34,  -104,   -99,   -28,
  -102,   -26,   -22,  -105,   -30,   -24,  -241,  -241,  -241,  -241,
  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,
  -241,  -241,  -241,  -241,  -241,  -241,  -160,  -241,   -56,  -224,
  -241,  -241,  -241,  -233,  -241,  -236,  -237,  -232,  -153,  -106,
  -108,  -241,   -40,   -44,   -37,   -39,   -97,   -38,  -206,  -241,
  -127,  -126,  -107,   -36,  -241,  -241,  -241,  -215,   401,   -83,
  -241,  -221,  -206,   -90,   -97,   -89,   -80,  -241,   -81,  -241,
  -119,  -227,  -114,  -112,   -34,   -24,  -241,  -117,  -227,  -118,
  -112,  -120,  -184,  -178,  -180,  -241,   -97,  -179,  -241,  -171,
  -172,  -241,  -241,   -52,  -241,  -241,  -241,  -241,  -241,  -214,
  -241,  -227,  -211,  -241,  -241,   -95,  -109,  -228,  -241,  -241,
  -163,  -149,  -148,  -143,  -151,  -152,  -150,  -155,  -162,  -157,
  -144,  -161,  -159,  -156,  -145,  -158,  -154,    -5,  -133,  -241,
  -146,  -147,  -225,  -226,  -241,  -222,  -241,  -123,  -241,  -241,
  -230,  -241,  -238,  -241,  -241,  -217,  -128,  -200,  -216,  -241,
  -241,  -241,  -241,   -78,   -86,   -85,  -241,  -226,  -131,  -227,
  -241,   -79,  -228,  -241,  -241,  -241,  -174,  -227,   -55,  -226,
   -50,  -222,  -137,  -241,  -241,  -165,  -241,  -169,  -189,  -240,
  -241,  -209,  -228,  -241,  -192,  -241,   -69,   -93,  -227,  -111,
   -70,  -115,  -132,  -223,   -57,  -122,  -130,  -234,  -231,  -235,
  -241,  -219,  -218,  -220,  -196,  -241,   -87,   -88,   -84,   -82,
  -241,   -71,  -121,   -72,  -116,  -176,  -226,  -241,  -241,   -51,
  -241,  -136,  -241,  -137,  -166,  -164,  -241,  -241,  -213,  -212,
  -210,  -191,   -91,  -241,  -194,  -195,   -76,  -175,  -173,  -138,
  -241,  -135,  -170,  -241,  -193,  -140,  -241,  -168,  -241,  -139,
  -167 ]

racc_goto_table = [
    27,    30,   112,   115,    22,   109,   279,    53,   235,   252,
   183,   133,   240,    50,   118,   147,   227,    90,   371,    88,
   258,   228,    94,   129,    96,   325,   101,   177,   123,   194,
    27,   192,    38,    84,    22,   102,   217,   203,    32,   192,
   226,    92,    43,    50,   193,   105,   324,   362,   359,   239,
   201,   317,   193,   254,   119,   126,   293,   142,    95,   206,
   221,   137,   367,   198,   298,   219,   250,   251,    32,   391,
   153,   111,    43,   352,   242,   244,   182,    24,   323,   nil,
   nil,   nil,   nil,   nil,    27,   124,   335,    18,    22,   nil,
   nil,   nil,    27,   197,   nil,    32,    22,    50,   nil,    43,
   nil,   197,   nil,   374,   nil,    50,   nil,   213,   310,   nil,
   233,   213,   nil,   nil,    22,   313,   nil,    18,   nil,   nil,
   124,   nil,    32,   nil,   nil,    28,    43,   207,   227,   nil,
    32,   nil,   355,   309,    43,   nil,   235,   nil,   333,   nil,
   316,   286,   288,   nil,   327,   302,   nil,   nil,    32,   nil,
   nil,   nil,    43,   nil,   nil,    28,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   339,   nil,   270,   nil,   nil,
   nil,   274,   nil,    27,   nil,   nil,   nil,    22,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    50,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   360,   232,   nil,   nil,
   nil,   296,   nil,   nil,   368,    94,    94,   297,   318,   195,
   338,    32,   nil,   147,   328,    43,   213,   195,   nil,   379,
   227,   337,   327,   396,   nil,   382,   398,   347,   nil,   nil,
   295,   nil,   nil,   nil,   nil,   nil,   nil,    45,   233,   nil,
   nil,   nil,    22,   nil,   nil,    27,   233,   nil,   nil,    22,
    22,   nil,   109,    27,   nil,   142,   nil,    22,    50,   137,
    18,   nil,   nil,   nil,   nil,   235,    50,    45,   153,   387,
   nil,   nil,   nil,   nil,   392,   nil,    32,    27,   nil,   nil,
    43,    22,   365,    32,    32,   nil,   nil,    43,    43,   nil,
    50,    32,   nil,    32,   150,    43,   nil,    43,    28,    27,
   351,   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,
   213,   nil,    50,   nil,   nil,    32,   nil,   nil,   nil,    43,
   nil,    45,   nil,   nil,   233,   232,   nil,   nil,    22,    45,
   nil,   nil,    18,   232,   389,   nil,   nil,    32,   nil,   nil,
    18,    43,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    27,   383,   nil,   nil,    22,    40,   nil,   nil,   109,    36,
   nil,   nil,    32,    50,    18,   nil,    43,   233,   nil,   nil,
    28,    22,   nil,   nil,   nil,   nil,   233,   nil,    28,   nil,
    22,   nil,   nil,    27,   nil,    40,    18,    22,    32,    36,
    27,   nil,    43,    27,    22,   nil,    50,    22,   nil,   nil,
   nil,   nil,    28,    50,   nil,    32,    50,   nil,   nil,    43,
    45,   232,   148,   nil,    32,    49,   144,   nil,    43,   nil,
   nil,    32,   nil,   nil,    28,    43,   nil,   186,    32,   nil,
   nil,    32,    43,   nil,   nil,    43,   nil,    18,   nil,    40,
   nil,   nil,   nil,    36,   nil,    49,   nil,    40,   nil,   nil,
   nil,    36,   nil,   nil,   232,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   215,   232,   nil,   237,   215,   nil,   nil,   234,
    18,   nil,    49,   nil,   nil,    28,   nil,    18,   nil,   nil,
    18,   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    45,   nil,   150,   nil,   nil,   nil,   nil,   nil,   nil,    49,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    49,    28,   nil,
   nil,   nil,   nil,   nil,    45,    28,   nil,   nil,    28,   nil,
   nil,   nil,   nil,   nil,   nil,    49,   nil,   nil,    40,   nil,
   nil,   nil,    36,   nil,   nil,   nil,    45,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   215,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,    49,   nil,
   nil,   nil,   nil,   237,   nil,   nil,   nil,   234,   nil,   nil,
    40,   237,   nil,   nil,    36,   234,   nil,   nil,    40,   nil,
   148,   nil,    36,   nil,   144,   nil,   nil,   nil,   nil,   nil,
    45,   nil,   nil,   nil,   nil,   nil,   nil,    45,   nil,   nil,
    45,   nil,    40,   nil,   nil,   nil,    36,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   186,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    49,    40,   nil,   nil,   nil,    36,   nil,
    49,    49,   nil,   nil,   nil,   215,   nil,   nil,    49,   nil,
    49,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   237,
   nil,    62,   nil,   234,   nil,   nil,   nil,   nil,    89,   nil,
   nil,   nil,    49,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,    36,
   nil,   nil,   116,   nil,    49,   nil,   nil,   117,   nil,   nil,
   nil,   nil,   237,   nil,   nil,   nil,   234,   nil,   nil,   nil,
   nil,   237,   156,   nil,   nil,   234,   nil,   176,    40,    49,
   nil,   nil,    36,   nil,   nil,    40,   nil,   nil,    40,    36,
   188,   nil,    36,   189,   190,   191,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   202,    49,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    49,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    49,   nil,   nil,   248,   nil,   nil,   nil,    49,   nil,
   nil,   nil,   nil,   nil,   nil,    49,   nil,   nil,    49,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   261,   262,   263,   264,   265,   266,   267,   268,   269,   nil,
   271,   272,   273,   nil,   275,   276,   nil,   280,   281,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    89,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   341,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   344,   nil,   nil,
   nil,   nil,   nil,   nil,   349,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   356,   357,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   364,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   378,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   116 ]

racc_goto_check = [
    35,     2,    31,    62,    34,     4,     5,    40,    69,    83,
    86,    43,    71,    28,    73,    37,    56,    60,    63,    40,
    44,    45,    65,    53,    79,    67,    35,    29,    75,    22,
    35,     8,     3,    23,    34,     6,    48,    22,    36,     8,
    48,    23,    38,    28,    10,    47,    66,    59,    49,    70,
    61,    72,    10,    42,    74,    41,    76,    35,    77,    78,
    43,    34,    33,    75,    80,    29,    81,    82,    36,    63,
    28,    30,    38,    84,    29,    29,    85,     1,     5,   nil,
   nil,   nil,   nil,   nil,    35,     3,     5,    55,    34,   nil,
   nil,   nil,    35,     6,   nil,    36,    34,    28,   nil,    38,
   nil,     6,   nil,    67,   nil,    28,   nil,    34,    44,   nil,
    35,    34,   nil,   nil,    34,    44,   nil,    55,   nil,   nil,
     3,   nil,    36,   nil,   nil,    24,    38,     3,    56,   nil,
    36,   nil,     5,    45,    38,   nil,    69,   nil,    44,   nil,
    71,    29,    29,   nil,    69,    48,   nil,   nil,    36,   nil,
   nil,   nil,    38,   nil,   nil,    24,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    56,   nil,    65,   nil,   nil,
   nil,    65,   nil,    35,   nil,   nil,   nil,    34,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    44,    55,   nil,   nil,
   nil,    60,   nil,   nil,    44,    65,    65,    79,    31,    24,
    43,    36,   nil,    37,    73,    38,    34,    24,   nil,    83,
    56,    53,    69,     5,   nil,    44,     5,    86,   nil,   nil,
     3,   nil,   nil,   nil,   nil,   nil,   nil,    27,    35,   nil,
   nil,   nil,    34,   nil,   nil,    35,    35,   nil,   nil,    34,
    34,   nil,     4,    35,   nil,    35,   nil,    34,    28,    34,
    55,   nil,   nil,   nil,   nil,    69,    28,    27,    28,    71,
   nil,   nil,   nil,   nil,    69,   nil,    36,    35,   nil,   nil,
    38,    34,    31,    36,    36,   nil,   nil,    38,    38,   nil,
    28,    36,   nil,    36,    27,    38,   nil,    38,    24,    35,
    40,   nil,   nil,    34,   nil,   nil,   nil,   nil,   nil,   nil,
    34,   nil,    28,   nil,   nil,    36,   nil,   nil,   nil,    38,
   nil,    27,   nil,   nil,    35,    55,   nil,   nil,    34,    27,
   nil,   nil,    55,    55,    62,   nil,   nil,    36,   nil,   nil,
    55,    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    35,     2,   nil,   nil,    34,    26,   nil,   nil,     4,    25,
   nil,   nil,    36,    28,    55,   nil,    38,    35,   nil,   nil,
    24,    34,   nil,   nil,   nil,   nil,    35,   nil,    24,   nil,
    34,   nil,   nil,    35,   nil,    26,    55,    34,    36,    25,
    35,   nil,    38,    35,    34,   nil,    28,    34,   nil,   nil,
   nil,   nil,    24,    28,   nil,    36,    28,   nil,   nil,    38,
    27,    55,    26,   nil,    36,    39,    25,   nil,    38,   nil,
   nil,    36,   nil,   nil,    24,    38,   nil,    26,    36,   nil,
   nil,    36,    38,   nil,   nil,    38,   nil,    55,   nil,    26,
   nil,   nil,   nil,    25,   nil,    39,   nil,    26,   nil,   nil,
   nil,    25,   nil,   nil,    55,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    25,    55,   nil,    26,    25,   nil,   nil,    25,
    55,   nil,    39,   nil,   nil,    24,   nil,    55,   nil,   nil,
    55,   nil,    27,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    27,   nil,    27,   nil,   nil,   nil,   nil,   nil,   nil,    39,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,    24,   nil,
   nil,   nil,   nil,   nil,    27,    24,   nil,   nil,    24,   nil,
   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,    26,   nil,
   nil,   nil,    25,   nil,   nil,   nil,    27,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,    39,   nil,
   nil,   nil,   nil,    26,   nil,   nil,   nil,    25,   nil,   nil,
    26,    26,   nil,   nil,    25,    25,   nil,   nil,    26,   nil,
    26,   nil,    25,   nil,    25,   nil,   nil,   nil,   nil,   nil,
    27,   nil,   nil,   nil,   nil,   nil,   nil,    27,   nil,   nil,
    27,   nil,    26,   nil,   nil,   nil,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    39,    26,   nil,   nil,   nil,    25,   nil,
    39,    39,   nil,   nil,   nil,    25,   nil,   nil,    39,   nil,
    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,
   nil,    32,   nil,    25,   nil,   nil,   nil,   nil,    32,   nil,
   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,    25,
   nil,   nil,    32,   nil,    39,   nil,   nil,    32,   nil,   nil,
   nil,   nil,    26,   nil,   nil,   nil,    25,   nil,   nil,   nil,
   nil,    26,    32,   nil,   nil,    25,   nil,    32,    26,    39,
   nil,   nil,    25,   nil,   nil,    26,   nil,   nil,    26,    25,
    32,   nil,    25,    32,    32,    32,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    32,    39,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    39,   nil,   nil,    32,   nil,   nil,   nil,    39,   nil,
   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,    39,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    32,    32,    32,    32,    32,    32,    32,    32,    32,   nil,
    32,    32,    32,   nil,    32,    32,   nil,    32,    32,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,   nil,   nil,
   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    32,    32,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    32 ]

racc_goto_pointer = [
   nil,    77,     1,    32,   -25,  -167,     9,   nil,   -53,   nil,
   -40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -55,    22,   125,   359,   355,   237,    13,   -39,
    36,   -33,   673,  -255,     4,     0,    38,   -42,    42,   415,
     6,    -2,   -73,   -46,  -113,   -87,   nil,    18,   -67,  -258,
   nil,   nil,   nil,   -34,   nil,    87,   -92,   nil,   nil,  -265,
     2,   -39,   -36,  -304,   nil,     1,  -200,  -221,   nil,  -102,
   -61,   -98,  -187,   -33,     7,   -25,  -142,    37,   -36,     3,
  -141,   -56,   -55,  -113,  -221,     4,   -62,   nil ]

racc_goto_default = [
   nil,   nil,   277,   216,    42,   nil,    52,     5,     7,    12,
    17,    20,    23,    29,    37,    41,    46,    51,     4,     6,
    11,   131,    19,   nil,    67,    70,    74,    76,    79,   nil,
   nil,    61,   178,   284,    65,    68,    71,    73,    75,    78,
     3,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   218,
   306,   209,   210,   nil,   132,    63,   136,   140,   229,   231,
   nil,   nil,   nil,   nil,    60,    14,   nil,   nil,   326,    33,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    98,   nil,   nil,   nil,   nil,   nil,   nil,   184 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 72, :_reduce_3,
  2, 72, :_reduce_4,
  1, 75, :_reduce_5,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  3, 90, :_reduce_36,
  3, 90, :_reduce_37,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  4, 84, :_reduce_50,
  5, 84, :_reduce_51,
  3, 84, :_reduce_52,
  2, 84, :_reduce_53,
  1, 100, :_reduce_54,
  3, 100, :_reduce_55,
  1, 99, :_reduce_56,
  3, 99, :_reduce_57,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  5, 76, :_reduce_69,
  5, 76, :_reduce_70,
  5, 76, :_reduce_71,
  5, 88, :_reduce_72,
  2, 77, :_reduce_73,
  1, 116, :_reduce_74,
  2, 116, :_reduce_75,
  6, 78, :_reduce_76,
  2, 78, :_reduce_77,
  3, 117, :_reduce_78,
  3, 117, :_reduce_79,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  3, 118, :_reduce_82,
  1, 119, :_reduce_none,
  3, 119, :_reduce_84,
  1, 120, :_reduce_85,
  1, 120, :_reduce_86,
  3, 121, :_reduce_87,
  3, 121, :_reduce_88,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  4, 123, :_reduce_91,
  1, 111, :_reduce_92,
  3, 111, :_reduce_93,
  0, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 109, :_reduce_96,
  1, 104, :_reduce_97,
  1, 105, :_reduce_98,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  3, 79, :_reduce_106,
  3, 79, :_reduce_107,
  3, 89, :_reduce_108,
  0, 113, :_reduce_109,
  1, 113, :_reduce_110,
  3, 113, :_reduce_111,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  3, 126, :_reduce_115,
  3, 128, :_reduce_116,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  0, 115, :_reduce_119,
  1, 115, :_reduce_120,
  3, 115, :_reduce_121,
  4, 108, :_reduce_122,
  3, 108, :_reduce_123,
  1, 96, :_reduce_124,
  2, 96, :_reduce_125,
  2, 130, :_reduce_126,
  1, 131, :_reduce_127,
  2, 131, :_reduce_128,
  1, 106, :_reduce_129,
  4, 94, :_reduce_130,
  4, 94, :_reduce_131,
  5, 82, :_reduce_132,
  4, 82, :_reduce_133,
  2, 81, :_reduce_134,
  5, 132, :_reduce_135,
  4, 132, :_reduce_136,
  0, 133, :_reduce_none,
  2, 133, :_reduce_138,
  4, 133, :_reduce_139,
  3, 133, :_reduce_140,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  3, 102, :_reduce_143,
  3, 102, :_reduce_144,
  3, 102, :_reduce_145,
  3, 102, :_reduce_146,
  3, 102, :_reduce_147,
  3, 102, :_reduce_148,
  3, 102, :_reduce_149,
  3, 102, :_reduce_150,
  3, 102, :_reduce_151,
  3, 102, :_reduce_152,
  2, 102, :_reduce_153,
  3, 102, :_reduce_154,
  3, 102, :_reduce_155,
  3, 102, :_reduce_156,
  3, 102, :_reduce_157,
  3, 102, :_reduce_158,
  3, 102, :_reduce_159,
  2, 102, :_reduce_160,
  3, 102, :_reduce_161,
  3, 102, :_reduce_162,
  3, 102, :_reduce_163,
  5, 80, :_reduce_164,
  1, 136, :_reduce_165,
  2, 136, :_reduce_166,
  5, 137, :_reduce_167,
  4, 137, :_reduce_168,
  1, 138, :_reduce_169,
  3, 138, :_reduce_170,
  3, 97, :_reduce_171,
  1, 140, :_reduce_none,
  4, 140, :_reduce_173,
  1, 142, :_reduce_none,
  3, 142, :_reduce_175,
  3, 141, :_reduce_176,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_185,
  1, 139, :_reduce_none,
  1, 143, :_reduce_187,
  1, 144, :_reduce_none,
  3, 144, :_reduce_189,
  2, 83, :_reduce_190,
  6, 85, :_reduce_191,
  5, 85, :_reduce_192,
  7, 86, :_reduce_193,
  6, 86, :_reduce_194,
  6, 87, :_reduce_195,
  5, 87, :_reduce_196,
  1, 110, :_reduce_197,
  1, 110, :_reduce_198,
  1, 147, :_reduce_199,
  3, 147, :_reduce_200,
  1, 149, :_reduce_201,
  1, 150, :_reduce_202,
  1, 150, :_reduce_203,
  1, 150, :_reduce_204,
  1, 150, :_reduce_none,
  0, 73, :_reduce_206,
  0, 151, :_reduce_207,
  1, 145, :_reduce_none,
  3, 145, :_reduce_209,
  4, 145, :_reduce_210,
  1, 152, :_reduce_none,
  3, 152, :_reduce_212,
  3, 153, :_reduce_213,
  1, 153, :_reduce_214,
  1, 148, :_reduce_none,
  2, 148, :_reduce_216,
  1, 146, :_reduce_none,
  2, 146, :_reduce_218,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 95, :_reduce_221,
  3, 107, :_reduce_222,
  4, 107, :_reduce_223,
  2, 107, :_reduce_224,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  0, 114, :_reduce_none,
  1, 114, :_reduce_228,
  1, 135, :_reduce_229,
  3, 134, :_reduce_230,
  4, 134, :_reduce_231,
  2, 134, :_reduce_232,
  1, 155, :_reduce_none,
  3, 155, :_reduce_234,
  3, 156, :_reduce_235,
  1, 157, :_reduce_236,
  1, 157, :_reduce_237,
  4, 125, :_reduce_238,
  1, 98, :_reduce_none,
  4, 98, :_reduce_240 ]

racc_reduce_n = 241

racc_shift_n = 401

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68,
  :MODULO => 69 }

racc_nt_base = 70

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "MODULO",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "unlessstatement",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "keyword",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "expressions",
  "funcvalues",
  "rvalue",
  "expression",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "funcrvalue",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "param_name",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 34)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 37)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 46)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'grammar.ra', 89)
  def _reduce_36(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 92)
  def _reduce_37(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'grammar.ra', 107)
  def _reduce_50(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 114)
  def _reduce_51(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 120)
  def _reduce_52(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 127)
  def _reduce_53(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 134)
  def _reduce_54(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 137)
  def _reduce_55(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 141)
  def _reduce_56(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 142)
  def _reduce_57(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

module_eval(<<'.,.,', 'grammar.ra', 157)
  def _reduce_69(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 160)
  def _reduce_70(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 163)
  def _reduce_71(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 170)
  def _reduce_72(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 177)
  def _reduce_73(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 193)
  def _reduce_74(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 194)
  def _reduce_75(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 199)
  def _reduce_76(val, _values, result)
      @lexer.commentpop
  type = val[0].value.downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 217)
  def _reduce_77(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 235)
  def _reduce_78(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 243)
  def _reduce_79(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 80 omitted

# reduce 81 omitted

module_eval(<<'.,.,', 'grammar.ra', 256)
  def _reduce_82(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 83 omitted

module_eval(<<'.,.,', 'grammar.ra', 261)
  def _reduce_84(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 265)
  def _reduce_85(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 266)
  def _reduce_86(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 269)
  def _reduce_87(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 274)
  def _reduce_88(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 89 omitted

# reduce 90 omitted

module_eval(<<'.,.,', 'grammar.ra', 283)
  def _reduce_91(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 286)
  def _reduce_92(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 288)
  def _reduce_93(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

module_eval(<<'.,.,', 'grammar.ra', 296)
  def _reduce_96(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 300)
  def _reduce_97(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 304)
  def _reduce_98(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

module_eval(<<'.,.,', 'grammar.ra', 316)
  def _reduce_106(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 322)
  def _reduce_107(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 326)
  def _reduce_108(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 332)
  def _reduce_109(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 334)
  def _reduce_110(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 336)
  def _reduce_111(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

module_eval(<<'.,.,', 'grammar.ra', 345)
  def _reduce_115(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 349)
  def _reduce_116(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

module_eval(<<'.,.,', 'grammar.ra', 358)
  def _reduce_119(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 360)
  def _reduce_120(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 362)
  def _reduce_121(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 368)
  def _reduce_122(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 373)
  def _reduce_123(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 379)
  def _reduce_124(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 380)
  def _reduce_125(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 382)
  def _reduce_126(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 384)
  def _reduce_127(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 385)
  def _reduce_128(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 388)
  def _reduce_129(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 392)
  def _reduce_130(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 395)
  def _reduce_131(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 399)
  def _reduce_132(val, _values, result)
      @lexer.commentpop
  args = {
    :test => ast(AST::Not, :value => val[1]),
    :statements => val[3]
  }

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 408)
  def _reduce_133(val, _values, result)
        @lexer.commentpop
    args = {
      :test => ast(AST::Not, :value => val[1]), 
      :statements => ast(AST::Nop)
    }
    result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 417)
  def _reduce_134(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 421)
  def _reduce_135(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 432)
  def _reduce_136(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 137 omitted

module_eval(<<'.,.,', 'grammar.ra', 445)
  def _reduce_138(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 448)
  def _reduce_139(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 452)
  def _reduce_140(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'grammar.ra', 471)
  def _reduce_143(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 474)
  def _reduce_144(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 477)
  def _reduce_145(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 480)
  def _reduce_146(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 483)
  def _reduce_147(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 486)
  def _reduce_148(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 489)
  def _reduce_149(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 492)
  def _reduce_150(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 495)
  def _reduce_151(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 498)
  def _reduce_152(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 501)
  def _reduce_153(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 504)
  def _reduce_154(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 507)
  def _reduce_155(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 510)
  def _reduce_156(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 513)
  def _reduce_157(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 516)
  def _reduce_158(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 519)
  def _reduce_159(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 522)
  def _reduce_160(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 525)
  def _reduce_161(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 528)
  def _reduce_162(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 531)
  def _reduce_163(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 535)
  def _reduce_164(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 539)
  def _reduce_165(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 541)
  def _reduce_166(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 546)
  def _reduce_167(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 549)
  def _reduce_168(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 559)
  def _reduce_169(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 561)
  def _reduce_170(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 566)
  def _reduce_171(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 172 omitted

module_eval(<<'.,.,', 'grammar.ra', 571)
  def _reduce_173(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 174 omitted

module_eval(<<'.,.,', 'grammar.ra', 577)
  def _reduce_175(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 586)
  def _reduce_176(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

module_eval(<<'.,.,', 'grammar.ra', 598)
  def _reduce_185(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 186 omitted

module_eval(<<'.,.,', 'grammar.ra', 603)
  def _reduce_187(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'grammar.ra', 605)
  def _reduce_189(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 608)
  def _reduce_190(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 618)
  def _reduce_191(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 626)
  def _reduce_192(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 634)
  def _reduce_193(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 641)
  def _reduce_194(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 650)
  def _reduce_195(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 655)
  def _reduce_196(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 659)
  def _reduce_197(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 660)
  def _reduce_198(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 665)
  def _reduce_199(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 668)
  def _reduce_200(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 673)
  def _reduce_201(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 676)
  def _reduce_202(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 677)
  def _reduce_203(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 678)
  def _reduce_204(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 205 omitted

module_eval(<<'.,.,', 'grammar.ra', 682)
  def _reduce_206(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 686)
  def _reduce_207(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 208 omitted

module_eval(<<'.,.,', 'grammar.ra', 691)
  def _reduce_209(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 694)
  def _reduce_210(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 211 omitted

module_eval(<<'.,.,', 'grammar.ra', 700)
  def _reduce_212(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 706)
  def _reduce_213(val, _values, result)
     result = [val[0][:value], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 707)
  def _reduce_214(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 215 omitted

module_eval(<<'.,.,', 'grammar.ra', 711)
  def _reduce_216(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 217 omitted

module_eval(<<'.,.,', 'grammar.ra', 716)
  def _reduce_218(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 219 omitted

# reduce 220 omitted

module_eval(<<'.,.,', 'grammar.ra', 722)
  def _reduce_221(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 725)
  def _reduce_222(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 726)
  def _reduce_223(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 727)
  def _reduce_224(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

module_eval(<<'.,.,', 'grammar.ra', 733)
  def _reduce_228(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 736)
  def _reduce_229(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 740)
  def _reduce_230(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 747)
  def _reduce_231(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 753)
  def _reduce_232(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 233 omitted

module_eval(<<'.,.,', 'grammar.ra', 758)
  def _reduce_234(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 767)
  def _reduce_235(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 770)
  def _reduce_236(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 771)
  def _reduce_237(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 774)
  def _reduce_238(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 239 omitted

module_eval(<<'.,.,', 'grammar.ra', 779)
  def _reduce_240(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
