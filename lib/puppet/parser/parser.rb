#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 796)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'9,15,198,199,203,180,-130,103,-112,105,300,289,375,290,288,167,171,180',
'299,-197,376,179,106,179,162,164,168,170,39,204,47,1,54,10,13,179,21',
'25,35,16,44,48,2,9,15,16,102,163,166,34,396,173,174,156,157,159,160',
'335,165,169,31,-130,-130,-130,-130,158,8,161,9,15,310,39,103,47,1,347',
'10,13,330,21,25,35,329,44,48,2,9,15,16,-178,81,328,34,394,281,318,119',
'303,304,79,80,167,171,31,281,306,184,90,319,8,162,164,168,170,39,-184',
'47,1,344,10,13,339,21,25,35,357,44,48,2,9,15,16,-123,163,166,34,393',
'173,174,156,157,159,160,179,165,169,31,9,15,303,304,158,8,161,186,371',
'314,39,369,47,1,313,10,13,211,21,25,35,311,44,48,2,9,15,16,210,256,291',
'34,321,213,281,365,165,169,184,298,167,171,31,158,-40,-40,-40,-40,8',
'162,164,168,170,39,54,47,1,352,10,13,293,21,25,35,331,44,48,2,9,15,16',
'31,163,166,34,31,173,174,156,157,159,160,-185,165,169,31,9,15,165,169',
'158,8,161,165,169,158,39,120,47,1,158,10,13,-179,21,25,35,-96,44,48',
'2,9,15,16,341,-180,-178,34,277,57,92,211,302,25,235,303,304,48,31,9',
'15,16,210,65,8,34,342,213,-129,39,371,47,1,369,10,13,31,21,25,35,258',
'44,48,2,9,15,16,-177,96,345,34,98,57,281,306,211,25,68,256,255,48,31',
'9,15,16,349,210,8,34,254,31,213,39,252,47,1,248,10,13,31,21,25,35,246',
'44,48,2,9,15,16,211,240,219,34,353,57,311,92,360,25,235,210,105,48,31',
'362,213,16,307,207,8,34,281,306,121,39,120,47,1,368,10,13,31,21,25,35',
'-122,44,48,2,9,15,16,-183,65,96,34,-181,98,284,156,157,372,281,282,165',
'169,31,9,15,-179,320,158,8,161,281,282,31,148,150,153,124,127,57,133',
'134,138,140,144,-182,151,154,-180,9,15,16,248,137,142,145,383,57,379',
'380,256,25,235,-177,-184,48,31,9,15,16,81,126,129,34,374,121,92,39,384',
'47,1,120,10,13,31,21,25,35,119,44,48,2,9,15,16,385,-179,-227,34,333',
'57,-180,387,109,25,235,389,107,48,31,99,392,16,54,96,8,34,98,56,55,39',
'54,47,1,398,10,13,31,21,25,35,399,44,48,2,172,31,16,,,,34,,,167,171',
'-44,-44,-44,-44,,,31,162,164,168,170,,8,173,174,156,157,,,,165,169,-38',
'-38,-38,-38,,158,,161,163,166,171,,173,174,156,157,159,160,162,165,169',
'245,84,85,86,82,158,,161,,167,171,84,85,86,82,,,,162,164,168,170,,,173',
'174,156,157,159,160,,165,169,,,,,,158,,161,163,166,,,173,174,156,157',
'159,160,,165,169,244,,,,,158,,161,,167,171,,,,,,,,162,164,168,170,,',
'173,174,156,157,,9,15,165,169,65,,71,,,158,,161,163,166,,,173,174,156',
'157,159,160,58,165,169,9,15,,,65,158,71,161,57,,,,25,68,,,48,,,,16,63',
'58,,34,9,15,76,,113,,-197,,57,,31,,25,68,,,48,,,,16,63,112,,34,9,15',
'76,,65,,71,,57,,31,,25,68,,,48,9,15,,16,65,58,71,34,,,,,,,,,57,,31,',
'25,68,58,,48,,,,16,63,,,34,57,,76,,25,68,,,48,,31,,16,63,9,15,34,,65',
'76,71,,,,9,15,,31,65,,71,,,,9,15,58,,65,,71,,,,,,58,57,,,,25,68,,,48',
'58,57,,16,63,25,68,34,,48,76,57,,16,63,25,68,34,31,48,76,,,16,63,9,15',
'34,31,65,76,71,,,,9,15,,31,65,,71,,,,9,15,58,286,65,,71,,,,,,58,57,',
',,25,68,,,48,58,57,,16,63,25,68,34,,48,76,57,,16,63,25,68,34,31,48,76',
',,16,63,9,15,34,31,65,76,71,,,,9,15,,31,65,178,71,,,,9,15,58,,65,,71',
',,,,,58,57,,,,25,68,,,48,58,57,,16,63,25,68,34,,48,76,57,,16,63,25,68',
'34,31,48,76,,,16,63,9,15,34,31,65,76,71,,,,9,15,,31,65,,71,,,,9,15,58',
',65,,71,,,,,,58,57,,,,25,68,,,48,58,57,,16,63,25,68,34,,48,76,57,,16',
'63,25,68,34,31,48,76,,,16,63,9,15,34,31,65,76,71,,,,9,15,,31,65,,71',
',,,9,15,58,,65,,71,,,,,,58,57,,,,25,68,,,48,58,57,,16,63,25,68,34,,48',
'76,57,,16,63,25,68,34,31,48,76,,,16,63,9,15,34,31,65,76,71,,,,9,15,',
'31,65,,71,,,,9,15,58,,65,,71,,,,,,58,57,,,,25,68,,,48,58,57,,16,63,25',
'68,34,,48,76,57,,16,63,25,68,34,31,48,76,,,16,63,9,15,34,31,65,76,71',
',,,9,15,,31,65,,71,,,,,,58,,,,,,9,15,156,157,58,57,,165,169,25,68,,',
'48,158,57,161,16,63,25,68,34,,48,76,9,15,16,63,65,,34,31,57,76,9,15',
'25,195,65,44,48,31,,,16,,,,34,,,,9,15,,,65,57,71,31,,25,68,,,48,,57',
',16,,25,235,34,58,48,9,15,,16,,,,34,31,57,,,,25,68,,,48,31,,,16,63,',
',34,9,15,76,,65,,71,57,,,31,25,195,,44,48,,,,16,9,15,58,34,65,,71,,',
',,,,57,31,,,25,68,,,48,58,,,16,63,,,34,,,76,57,,,,25,68,,31,48,,,,16',
'63,9,15,34,,65,76,71,,,,9,15,,31,65,,71,,,,9,15,58,,65,,71,,,,,,58,57',
',,,25,68,,,48,58,57,,16,63,25,68,34,,48,76,57,,16,63,25,68,34,31,48',
'76,,,16,63,9,15,34,31,65,76,71,,,,9,15,,31,65,,71,,,,9,15,58,,65,,71',
',,,,,58,57,,,,25,68,,,48,58,57,,16,63,25,68,34,,48,76,57,,16,63,25,68',
'34,31,48,76,,,16,63,9,15,34,31,65,76,71,,,,9,15,,31,,,237,,,,9,15,58',
',65,,71,,,,,,,57,,,,25,68,,,48,58,57,,16,63,25,235,34,,48,76,57,,16',
',25,68,34,31,48,,,,16,63,9,15,34,31,65,76,71,,,,9,15,,31,65,178,71,',
',,9,15,58,242,,,,,,,,,58,57,,,,25,68,,,48,,57,,16,63,25,68,34,,48,76',
'57,,16,63,25,235,34,31,48,76,,,16,,9,15,34,31,65,,71,,,,9,15,,31,65',
',71,,,,9,15,58,,65,,71,,,,,,58,57,,,,25,68,,,48,58,57,,16,63,25,68,34',
',48,76,57,,16,63,25,68,34,31,48,76,,,16,63,9,15,34,31,65,76,71,,,,9',
'15,,31,65,,71,,,,9,15,58,,65,,71,,,,,,58,57,,,,25,68,,,48,58,57,,16',
'63,25,68,34,,48,76,57,,16,63,25,68,34,31,48,76,,,16,63,167,171,34,31',
',76,,,,162,164,168,170,31,,,,167,171,,,,,,,,162,164,168,170,,,163,166',
',,173,174,156,157,159,160,,165,169,,,,,,158,,161,173,174,156,157,159',
'160,,165,169,167,171,,,,158,,161,,162,164,168,170,,,,,167,171,,,,,,',
',162,164,168,170,,,163,166,,,173,174,156,157,159,160,,165,169,,,,,,158',
',161,173,174,156,157,159,160,,165,169,167,171,,,,158,,161,,162,164,168',
'170,173,174,156,157,159,160,,165,169,,171,,,,158,,161,,162,163,166,',
',173,174,156,157,159,160,,165,169,167,171,,,,158,,161,,162,164,168,170',
'173,174,156,157,159,160,,165,169,,,,,,158,,161,,,163,166,,,173,174,156',
'157,159,160,,165,169,167,171,,,,158,,161,,162,164,168,170,,,,,,167,171',
',,,,,,,162,164,168,170,,163,166,,,173,174,156,157,159,160,,165,169,',
',,,,158,166,161,,173,174,156,157,159,160,,165,169,167,171,,,,158,,161',
',162,164,168,170,,,,,167,171,,,,,,,,162,164,168,170,,,163,166,,,173',
'174,156,157,159,160,,165,169,,,,,,158,,161,173,174,156,157,159,160,',
'165,169,167,171,,,,158,,161,259,162,164,168,170,173,174,156,157,159',
'160,,165,169,,171,,,,158,,161,,162,163,166,,,173,174,156,157,159,160',
',165,169,167,171,,,,158,,161,,162,164,168,170,173,174,156,157,159,160',
',165,169,,171,,,,158,,161,,162,163,166,,,173,174,156,157,159,160,,165',
'169,167,171,,,,158,,161,,162,164,168,170,173,174,156,157,159,160,,165',
'169,,,,,,158,,161,,,163,166,,,173,174,156,157,159,160,,165,169,167,171',
',,,158,,161,,162,164,168,170,,,,,,,,,,,,,,,,,,,,163,166,,,173,174,156',
'157,159,160,,165,169,,,,,,158,,161,148,150,153,124,127,,133,134,138',
'221,222,,151,224,,,,,,137,142,223,148,150,153,124,127,,133,134,138,221',
'229,,151,224,,126,129,,,137,142,223,148,150,153,124,127,,133,134,138',
'221,222,,151,224,,126,129,,,137,142,223,148,150,153,124,127,,133,134',
'138,221,229,,151,224,,126,129,,,137,142,223,148,150,153,124,127,,133',
'134,138,221,229,,151,224,,126,129,,,137,142,223,148,150,153,124,127',
',133,134,138,221,222,,151,224,,126,129,,,137,142,223,,,,,,,,,,,,,,,',
'126,129' ]
        racc_action_table = arr = ::Array.new(2470, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,88,88,94,68,320,27,144,27,209,181,325,183,181,88,88,195,209,195',
'325,144,27,68,88,88,88,88,0,94,0,0,26,0,0,195,0,0,0,26,0,0,0,392,392',
'0,27,88,88,0,392,88,88,88,88,88,88,253,88,88,0,320,320,320,320,88,0',
'88,288,288,225,392,67,392,392,288,392,392,249,392,392,392,248,392,392',
'392,389,389,392,67,10,247,392,389,241,241,246,225,225,10,10,247,247',
'392,285,285,288,18,241,392,247,247,247,247,389,18,389,389,285,389,389',
'257,389,389,389,301,389,389,389,382,382,389,242,247,247,389,382,247',
'247,247,247,247,247,235,247,247,389,71,71,301,301,247,389,247,71,372',
'234,382,372,382,382,229,382,382,211,382,382,382,227,382,382,382,244',
'244,382,211,220,190,382,244,211,316,316,261,261,71,205,190,190,382,261',
'7,7,7,7,382,190,190,190,190,244,293,244,244,293,244,244,197,244,244',
'244,250,244,244,244,30,30,244,169,190,190,244,165,190,190,190,190,190',
'190,154,190,190,244,366,366,260,260,190,244,190,265,265,260,30,152,30',
'30,265,30,30,147,30,30,30,145,30,30,30,172,172,30,278,143,141,30,172',
'366,204,102,216,366,366,216,216,366,30,240,240,366,102,240,30,366,282',
'102,140,172,321,172,172,321,172,172,366,172,172,172,139,172,172,172',
'276,276,172,136,204,287,172,204,240,287,287,305,240,240,132,131,240',
'172,237,237,240,292,305,172,240,125,204,305,276,122,276,276,121,276',
'276,240,276,276,276,118,276,276,276,298,298,276,106,110,104,276,298',
'237,308,203,309,237,237,106,100,237,276,312,106,237,218,99,276,237,218',
'218,87,298,78,298,298,318,298,298,237,298,298,298,319,298,298,298,56',
'56,298,77,56,203,298,74,203,176,279,279,322,176,176,279,279,298,245',
'245,73,243,279,298,279,243,243,203,56,56,56,56,56,56,56,56,56,56,56',
'70,56,56,69,349,349,56,331,56,56,56,349,245,332,334,337,245,245,64,62',
'245,56,323,323,245,57,56,56,245,323,53,21,349,354,349,349,50,349,349',
'245,349,349,349,47,349,349,349,252,252,349,359,40,365,349,252,323,36',
'367,33,323,323,371,28,323,349,24,376,323,13,21,349,323,21,3,2,252,1',
'252,252,395,252,252,323,252,252,252,397,252,252,252,61,21,252,,,,252',
',,61,61,17,17,17,17,,,252,61,61,61,61,,252,264,264,264,264,,,,264,264',
'52,52,52,52,,264,,264,61,61,268,,61,61,61,61,61,61,268,61,61,116,11',
'11,11,11,61,,61,,116,116,19,19,19,19,,,,116,116,116,116,,,268,268,268',
'268,268,268,,268,268,,,,,,268,,268,116,116,,,116,116,116,116,116,116',
',116,116,115,,,,,116,,116,,115,115,,,,,,,,115,115,115,115,,,263,263',
'263,263,,162,162,263,263,162,,162,,,263,,263,115,115,,,115,115,115,115',
'115,115,162,115,115,369,369,,,369,115,369,115,162,,,,162,162,,,162,',
',,162,162,369,,162,35,35,162,,35,,35,,369,,162,,369,369,,,369,,,,369',
'369,35,,369,39,39,369,,39,,39,,35,,369,,35,35,,,35,44,44,,35,44,39,44',
'35,,,,,,,,,39,,35,,39,39,44,,39,,,,39,39,,,39,44,,39,,44,44,,,44,,39',
',44,44,198,198,44,,198,44,198,,,,15,15,,44,15,,15,,,,58,58,198,,58,',
'58,,,,,,15,198,,,,198,198,,,198,58,15,,198,198,15,15,198,,15,198,58',
',15,15,58,58,15,198,58,15,,,58,58,179,179,58,15,179,58,179,,,,180,180',
',58,180,,180,,,,63,63,179,179,63,,63,,,,,,180,179,,,,179,179,,,179,63',
'180,,179,179,180,180,179,,180,179,63,,180,180,63,63,180,179,63,180,',
',63,63,8,8,63,180,8,63,8,,,,65,65,,63,65,65,65,,,,174,174,8,,174,,174',
',,,,,65,8,,,,8,8,,,8,174,65,,8,8,65,65,8,,65,8,174,,65,65,174,174,65',
'8,174,65,,,174,174,173,173,174,65,173,174,173,,,,329,329,,174,329,,329',
',,,171,171,173,,171,,171,,,,,,329,173,,,,173,173,,,173,171,329,,173',
'173,329,329,173,,329,173,171,,329,329,171,171,329,173,171,329,,,171',
'171,170,170,171,329,170,171,170,,,,168,168,,171,168,,168,,,,76,76,170',
',76,,76,,,,,,168,170,,,,170,170,,,170,76,168,,170,170,168,168,170,,168',
'170,76,,168,168,76,76,168,170,76,168,,,76,76,283,283,76,168,283,76,283',
',,,167,167,,76,167,,167,,,,79,79,283,,79,,79,,,,,,167,283,,,,283,283',
',,283,79,167,,283,283,167,167,283,,167,283,79,,167,167,79,79,167,283',
'79,167,,,79,79,80,80,79,167,80,79,80,,,,81,81,,79,81,,81,,,,,,80,,,',
',,83,83,280,280,81,80,,280,280,80,80,,,80,280,81,280,80,80,81,81,80',
',81,80,314,314,81,81,314,,81,80,83,81,254,254,83,83,254,83,83,81,,,83',
',,,83,,,,90,90,,,90,314,90,83,,314,314,,,314,,254,,314,,254,254,314',
'90,254,91,91,,254,,,,254,314,90,,,,90,90,,,90,254,,,90,90,,,90,166,166',
'90,,166,,166,91,,,90,91,91,,91,91,,,,91,313,313,166,91,313,,313,,,,',
',,166,91,,,166,166,,,166,313,,,166,166,,,166,,,166,313,,,,313,313,,166',
'313,,,,313,313,164,164,313,,164,313,164,,,,163,163,,313,163,,163,,,',
'103,103,164,,103,,103,,,,,,163,164,,,,164,164,,,164,103,163,,164,164',
'163,163,164,,163,164,103,,163,163,103,103,163,164,103,163,,,103,103',
'258,258,103,163,258,103,258,,,,161,161,,103,161,,161,,,,160,160,258',
',160,,160,,,,,,161,258,,,,258,258,,,258,160,161,,258,258,161,161,258',
',161,258,160,,161,161,160,160,161,258,160,161,,,160,160,159,159,160',
'161,159,160,159,,,,109,109,,160,,,109,,,,158,158,159,,158,,158,,,,,',
',159,,,,159,159,,,159,158,109,,159,159,109,109,159,,109,159,158,,109',
',158,158,109,159,158,,,,158,158,112,112,158,109,112,158,112,,,,113,113',
',158,113,113,113,,,,375,375,112,112,,,,,,,,,113,112,,,,112,112,,,112',
',113,,112,112,113,113,112,,113,112,375,,113,113,375,375,113,112,375',
'113,,,375,,300,300,375,113,300,,300,,,,120,120,,375,120,,120,,,,299',
'299,300,,299,,299,,,,,,120,300,,,,300,300,,,300,299,120,,300,300,120',
'120,300,,120,300,299,,120,120,299,299,120,300,299,120,,,299,299,157',
'157,299,120,157,299,157,,,,156,156,,299,156,,156,,,,290,290,157,,290',
',290,,,,,,156,157,,,,157,157,,,157,290,156,,157,157,156,156,157,,156',
'157,290,,156,156,290,290,156,157,290,156,,,290,290,340,340,290,156,',
'290,,,,340,340,340,340,290,,,,355,355,,,,,,,,355,355,355,355,,,340,340',
',,340,340,340,340,340,340,,340,340,,,,,,340,,340,355,355,355,355,355',
'355,,355,355,177,177,,,,355,,355,,177,177,177,177,,,,,356,356,,,,,,',
',356,356,356,356,,,177,177,,,177,177,177,177,177,177,,177,177,,,,,,177',
',177,356,356,356,356,356,356,,356,356,201,201,,,,356,,356,,201,201,201',
'201,266,266,266,266,266,266,,266,266,,272,,,,266,,266,,272,201,201,',
',201,201,201,201,201,201,,201,201,363,363,,,,201,,201,,363,363,363,363',
'272,272,272,272,272,272,,272,272,,,,,,272,,272,,,363,363,,,363,363,363',
'363,363,363,,363,363,343,343,,,,363,,363,,343,343,343,343,,,,,,267,267',
',,,,,,,267,267,267,267,,343,343,,,343,343,343,343,343,343,,343,343,',
',,,,343,267,343,,267,267,267,267,267,267,,267,267,348,348,,,,267,,267',
',348,348,348,348,,,,,270,270,,,,,,,,270,270,270,270,,,348,348,,,348',
'348,348,348,348,348,,348,348,,,,,,348,,348,270,270,270,270,270,270,',
'270,270,155,155,,,,270,,270,155,155,155,155,155,275,275,275,275,275',
'275,,275,275,,274,,,,275,,275,,274,155,155,,,155,155,155,155,155,155',
',155,155,188,188,,,,155,,155,,188,188,188,188,274,274,274,274,274,274',
',274,274,,271,,,,274,,274,,271,188,188,,,188,188,188,188,188,188,,188',
'188,377,377,,,,188,,188,,377,377,377,377,271,271,271,271,271,271,,271',
'271,,,,,,271,,271,,,377,377,,,377,377,377,377,377,377,,377,377,189,189',
',,,377,,377,,189,189,189,189,,,,,,,,,,,,,,,,,,,,189,189,,,189,189,189',
'189,189,189,,189,189,,,,,,189,,189,105,105,105,105,105,,105,105,105',
'105,105,,105,105,,,,,,105,105,105,311,311,311,311,311,,311,311,311,311',
'311,,311,311,,105,105,,,311,311,311,256,256,256,256,256,,256,256,256',
'256,256,,256,256,,311,311,,,256,256,256,107,107,107,107,107,,107,107',
'107,107,107,,107,107,,256,256,,,107,107,107,219,219,219,219,219,,219',
'219,219,219,219,,219,219,,107,107,,,219,219,219,255,255,255,255,255',
',255,255,255,255,255,,255,255,,219,219,,,255,255,255,,,,,,,,,,,,,,,',
'255,255' ]
        racc_action_check = arr = ::Array.new(2470, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   462,   456,   491,   nil,   nil,   nil,   128,   924,   nil,
    84,   508,   nil,   454,   nil,   800,   nil,   464,    92,   518,
   nil,   455,   nil,   nil,   491,   nil,    -8,     1,   480,   nil,
   213,   nil,   nil,   461,   nil,   701,   459,   nil,   nil,   726,
   454,   nil,   nil,   nil,   743,   nil,   nil,   467,   nil,   nil,
   456,   nil,   486,   432,   nil,   nil,   385,   445,   810,   nil,
   nil,   508,   422,   877,   421,   934,   nil,    66,    -1,   406,
   403,   145,   nil,   384,   371,   nil,  1078,   367,   367,  1145,
  1192,  1202,   nil,  1220,   nil,   nil,   nil,   347,    -2,   nil,
  1273,  1297,   nil,   nil,    -8,   nil,   nil,   nil,   nil,   366,
   351,   nil,   244,  1410,   341,  2291,   323,  2357,   nil,  1534,
   336,   nil,  1591,  1601,   nil,   616,   562,   nil,   328,   nil,
  1668,   298,   322,   nil,   nil,   285,   nil,   nil,   nil,   nil,
   nil,   296,   303,   nil,   nil,   nil,   281,   nil,   nil,   286,
   262,   240,   nil,   239,    -3,   231,   nil,   227,   nil,   nil,
   nil,   nil,   238,   nil,   206,  2116,  1735,  1725,  1544,  1524,
  1477,  1467,   651,  1400,  1390,   160,  1323,  1135,  1068,   156,
  1058,  1011,   256,   991,   944,   nil,   389,  1839,   nil,   857,
   867,     2,   nil,     2,   nil,   nil,   nil,   nil,  2161,  2251,
   170,   nil,   nil,   nil,   nil,    11,   nil,   170,   790,   nil,
   nil,  1901,   nil,   352,   265,   178,   nil,   nil,   nil,    -8,
   nil,   140,   nil,   nil,   nil,   nil,   223,   nil,   358,  2379,
   164,   nil,   nil,   nil,   nil,    48,   nil,   156,   nil,   109,
   nil,   nil,   nil,   nil,   145,   119,   nil,   317,   nil,   nil,
   274,    83,   109,   401,   170,   403,    94,    84,    67,    53,
   199,   nil,   471,    48,  1255,  2401,  2335,   112,  1457,   nil,
   175,   123,   nil,   595,   487,   180,  1878,  2009,   541,   nil,
  2071,  2183,  1923,   nil,  2138,  2093,   299,   nil,   252,   342,
  1169,   nil,   276,  1125,   nil,    93,   nil,   299,    66,   nil,
  1745,   nil,   314,   161,   nil,   nil,   nil,   nil,   342,  1678,
  1658,   100,   nil,   nil,   nil,   288,   nil,   nil,   341,   346,
   nil,  2313,   353,  1343,  1245,   nil,   170,   nil,   351,   360,
    -2,   256,   390,   446,   nil,     0,   nil,   nil,   nil,  1001,
   nil,   398,   414,   nil,   431,   nil,   nil,   429,   nil,   nil,
  1777,   nil,   nil,  1991,   nil,   nil,   nil,   nil,  2054,   428,
   nil,   nil,   nil,   nil,   450,  1794,  1856,   nil,   nil,   467,
   nil,   nil,   nil,  1946,   nil,   469,   231,   474,   nil,   676,
   nil,   479,   124,   nil,   nil,  1611,   484,  2206,   nil,   nil,
   nil,   nil,   127,   nil,   nil,   nil,   nil,   nil,   nil,    84,
   nil,   nil,    41,   nil,   nil,   496,   nil,   503,   nil,   nil ]

racc_action_default = [
  -205,  -240,   -74,  -240,   -18,    -7,   -19,    -8,  -240,  -124,
  -220,   -20,    -9,  -240,  -186,  -240,   -98,   -10,  -238,  -240,
   -11,  -240,  -177,   -12,  -240,  -129,  -240,  -178,   -39,   -13,
    -1,  -228,  -182,  -240,   -96,   -97,   -41,   -14,    -2,  -240,
   -42,   -15,    -3,  -181,  -240,   -43,   -16,  -240,  -185,  -183,
   -45,   -17,    -6,  -205,  -197,   -75,  -109,  -220,  -240,  -142,
  -141,  -240,  -238,  -240,   -59,  -240,   -66,   -60,   -97,   -63,
   -61,  -240,   -64,   -58,   -67,   -62,  -240,   -68,   -65,  -240,
  -240,  -240,   -49,  -240,   -46,   -47,   -48,  -205,  -240,  -125,
  -240,  -240,  -202,  -204,  -205,  -198,  -201,  -200,  -203,  -240,
  -240,   -73,  -205,  -240,   -77,  -109,  -205,  -119,    -4,  -240,
   -53,   -54,  -240,  -240,  -134,  -240,  -240,  -188,  -190,  -187,
  -240,  -206,  -240,  -207,   -25,   -94,   -29,   -27,   -92,   -35,
  -113,  -240,  -226,   -23,   -31,  -110,  -100,   -33,   -32,  -240,
  -114,  -101,   -21,  -103,   -97,   -34,  -104,   -99,   -28,  -102,
   -26,   -22,  -105,   -30,   -24,  -240,  -240,  -240,  -240,  -240,
  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -240,
  -240,  -240,  -240,  -240,  -240,  -160,  -240,   -56,  -223,  -240,
  -240,  -240,  -232,  -240,  -235,  -236,  -231,  -153,  -106,  -108,
  -240,   -40,   -44,   -37,   -39,   -97,   -38,  -205,  -240,  -127,
  -126,  -107,   -36,  -240,  -240,  -240,  -214,   400,   -83,  -240,
  -220,  -205,   -90,   -97,   -89,   -80,  -240,   -81,  -240,  -119,
  -226,  -114,  -112,   -34,   -24,  -240,  -117,  -226,  -118,  -112,
  -120,  -184,  -178,  -180,  -240,   -97,  -179,  -240,  -171,  -172,
  -240,  -240,   -52,  -240,  -240,  -240,  -240,  -240,  -213,  -240,
  -226,  -210,  -240,  -240,   -95,  -109,  -227,  -240,  -240,  -163,
  -149,  -148,  -143,  -151,  -152,  -150,  -155,  -162,  -157,  -144,
  -161,  -159,  -156,  -145,  -158,  -154,    -5,  -133,  -240,  -146,
  -147,  -224,  -225,  -240,  -221,  -240,  -123,  -240,  -240,  -229,
  -240,  -237,  -240,  -240,  -216,  -128,  -199,  -215,  -240,  -240,
  -240,  -240,   -78,   -86,   -85,  -240,  -225,  -131,  -226,  -240,
   -79,  -227,  -240,  -240,  -240,  -174,  -226,   -55,  -225,   -50,
  -221,  -137,  -240,  -240,  -165,  -240,  -169,  -189,  -239,  -240,
  -208,  -227,  -240,  -192,  -240,   -69,   -93,  -226,  -111,   -70,
  -115,  -132,  -222,   -57,  -122,  -130,  -233,  -230,  -234,  -240,
  -218,  -217,  -219,  -196,  -240,   -87,   -88,   -84,   -82,  -240,
   -71,  -121,   -72,  -116,  -176,  -225,  -240,  -240,   -51,  -240,
  -136,  -240,  -137,  -166,  -164,  -240,  -240,  -212,  -211,  -209,
  -191,   -91,  -240,  -194,  -195,   -76,  -175,  -173,  -138,  -240,
  -135,  -170,  -240,  -193,  -140,  -240,  -168,  -240,  -139,  -167 ]

racc_goto_table = [
    27,    30,   114,    53,    22,   108,   111,   182,   278,   239,
   251,    89,   234,    50,   226,    87,    93,   117,   132,    95,
   227,   128,   370,   146,   101,   324,   100,   216,   257,   122,
    27,   225,   193,    38,    22,   104,   191,    83,    32,   192,
   202,   323,    43,    50,   191,    91,   361,   192,   358,   238,
   200,   316,   253,   118,   176,   125,   141,   292,    94,   205,
   136,   366,   297,   197,   249,   250,   110,   220,    32,   152,
   351,   181,    43,   390,    24,   nil,   nil,   nil,   nil,   nil,
   322,   196,   nil,    27,   nil,   nil,   123,    22,   334,   196,
   nil,    27,   218,   nil,    32,    22,    50,   nil,    43,   nil,
    18,   241,   243,   373,    50,   nil,   212,   nil,   nil,   232,
   212,   nil,    28,    22,   nil,   nil,   309,   nil,   nil,   nil,
   123,    32,   nil,   312,   nil,    43,   226,   206,   nil,    32,
    18,   nil,   308,    43,   354,   nil,   301,   315,   nil,   nil,
   234,   nil,    28,   nil,   nil,   nil,   332,    32,   326,   nil,
   nil,    43,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   269,   nil,   nil,   338,   273,   nil,   nil,   nil,   285,   287,
   nil,   nil,    27,   nil,   nil,   nil,    22,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    50,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   295,   194,   nil,   nil,    93,    93,
   nil,   296,   nil,   194,   359,   nil,   nil,   nil,    45,   231,
    32,   317,   367,   nil,    43,   212,   327,   337,   226,   336,
   378,   146,   nil,   nil,   346,   395,   326,   nil,   397,   nil,
   294,   nil,   nil,   381,   nil,   nil,   nil,   232,    45,   nil,
   nil,    22,   nil,   nil,    27,   232,   nil,   nil,    22,    22,
   nil,   108,    27,   nil,   141,   nil,    22,    50,   136,   nil,
   nil,   nil,   nil,    40,   149,    50,   386,   152,   nil,   234,
   nil,   nil,    18,   nil,   nil,    32,    27,   nil,   391,    43,
    22,   nil,    32,    32,    28,   364,    43,    43,   nil,    50,
    32,    45,    32,    40,    43,   350,    43,   nil,    27,    45,
   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,   212,
   nil,    50,   nil,   nil,    32,   nil,   nil,   nil,    43,   147,
   nil,   nil,   nil,   232,   nil,   nil,   nil,    22,   nil,   nil,
   nil,   nil,   388,   nil,   185,   nil,    32,   231,   nil,   nil,
    43,   nil,   nil,   nil,    18,   231,    40,   nil,   nil,    27,
   382,   nil,    18,    22,    40,   nil,    28,   108,   nil,   nil,
   nil,    32,    50,   nil,    28,    43,   232,   nil,   nil,   nil,
    22,   nil,   236,   nil,   nil,   232,    18,   nil,   nil,    22,
    45,    36,    27,   nil,   nil,   nil,    22,    32,    28,    27,
   nil,    43,    27,    22,   nil,    50,    22,   nil,    18,   nil,
   nil,   nil,    50,   nil,    32,    50,   nil,   nil,    43,   nil,
    28,    36,   nil,    32,   nil,   nil,   nil,    43,   nil,   nil,
    32,   nil,   nil,   231,    43,   nil,   nil,    32,   nil,    49,
    32,    43,   nil,   nil,    43,    40,   nil,   143,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,
   nil,   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,    49,
    45,    28,   149,   nil,    36,   nil,   231,   nil,   nil,   nil,
   nil,   nil,    36,   nil,   nil,   231,   nil,   nil,   nil,   nil,
   nil,   nil,    18,   214,    45,    49,   nil,   214,   nil,    18,
   233,   nil,    18,   nil,    28,   nil,   nil,   nil,   nil,   nil,
   236,    28,   nil,   nil,    28,   nil,    45,    40,   236,   nil,
   nil,   nil,    49,   nil,   nil,    40,   nil,   147,   nil,   nil,
    49,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    49,    40,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   185,   nil,    36,   nil,   nil,   nil,    45,   nil,   nil,
   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   236,   nil,   nil,   nil,
    45,   nil,   214,   nil,   nil,   nil,   nil,    45,   nil,   nil,
    45,    49,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,   233,   nil,
   nil,   nil,   nil,   nil,   nil,    36,   233,   nil,   nil,   236,
   nil,   nil,   nil,    36,   nil,   143,   nil,   nil,   236,   nil,
   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,
   nil,   nil,    40,   nil,   nil,    40,   nil,    36,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,
   nil,   nil,   nil,    49,    49,   nil,   nil,   nil,    61,    36,
   nil,    49,   nil,    49,   nil,    88,   214,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   233,    49,   nil,   nil,   nil,   115,
   nil,   nil,   nil,   nil,   116,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    49,   155,   nil,
    36,   nil,   nil,   175,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   187,   233,   nil,   188,
   189,   190,    49,   nil,   nil,   nil,   233,   nil,   nil,   nil,
   201,   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,
    36,   nil,   nil,    36,   nil,   nil,   nil,   nil,    49,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   247,   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,   nil,   nil,
   nil,    49,   nil,   nil,   nil,   nil,   nil,   nil,    49,   nil,
   nil,    49,   nil,   nil,   nil,   nil,   260,   261,   262,   263,
   264,   265,   266,   267,   268,   nil,   270,   271,   272,   nil,
   274,   275,   nil,   279,   280,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    88,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   340,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   343,   nil,   nil,   nil,   nil,   nil,   nil,
   348,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   355,
   356,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   363,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   377,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   115 ]

racc_goto_check = [
    35,     2,    62,    40,    34,     4,    31,    86,     5,    71,
    83,    60,    69,    28,    56,    40,    65,    73,    43,    79,
    45,    53,    63,    37,     6,    67,    35,    48,    44,    75,
    35,    48,    22,     3,    34,    47,     8,    23,    36,    10,
    22,    66,    38,    28,     8,    23,    59,    10,    49,    70,
    61,    72,    42,    74,    29,    41,    35,    76,    77,    78,
    34,    33,    80,    75,    81,    82,    30,    43,    36,    28,
    84,    85,    38,    63,     1,   nil,   nil,   nil,   nil,   nil,
     5,     6,   nil,    35,   nil,   nil,     3,    34,     5,     6,
   nil,    35,    29,   nil,    36,    34,    28,   nil,    38,   nil,
    55,    29,    29,    67,    28,   nil,    34,   nil,   nil,    35,
    34,   nil,    24,    34,   nil,   nil,    44,   nil,   nil,   nil,
     3,    36,   nil,    44,   nil,    38,    56,     3,   nil,    36,
    55,   nil,    45,    38,     5,   nil,    48,    71,   nil,   nil,
    69,   nil,    24,   nil,   nil,   nil,    44,    36,    69,   nil,
   nil,    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    65,   nil,   nil,    56,    65,   nil,   nil,   nil,    29,    29,
   nil,   nil,    35,   nil,   nil,   nil,    34,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    60,    24,   nil,   nil,    65,    65,
   nil,    79,   nil,    24,    44,   nil,   nil,   nil,    27,    55,
    36,    31,    44,   nil,    38,    34,    73,    43,    56,    53,
    83,    37,   nil,   nil,    86,     5,    69,   nil,     5,   nil,
     3,   nil,   nil,    44,   nil,   nil,   nil,    35,    27,   nil,
   nil,    34,   nil,   nil,    35,    35,   nil,   nil,    34,    34,
   nil,     4,    35,   nil,    35,   nil,    34,    28,    34,   nil,
   nil,   nil,   nil,    26,    27,    28,    71,    28,   nil,    69,
   nil,   nil,    55,   nil,   nil,    36,    35,   nil,    69,    38,
    34,   nil,    36,    36,    24,    31,    38,    38,   nil,    28,
    36,    27,    36,    26,    38,    40,    38,   nil,    35,    27,
   nil,   nil,    34,   nil,   nil,   nil,   nil,   nil,   nil,    34,
   nil,    28,   nil,   nil,    36,   nil,   nil,   nil,    38,    26,
   nil,   nil,   nil,    35,   nil,   nil,   nil,    34,   nil,   nil,
   nil,   nil,    62,   nil,    26,   nil,    36,    55,   nil,   nil,
    38,   nil,   nil,   nil,    55,    55,    26,   nil,   nil,    35,
     2,   nil,    55,    34,    26,   nil,    24,     4,   nil,   nil,
   nil,    36,    28,   nil,    24,    38,    35,   nil,   nil,   nil,
    34,   nil,    26,   nil,   nil,    35,    55,   nil,   nil,    34,
    27,    25,    35,   nil,   nil,   nil,    34,    36,    24,    35,
   nil,    38,    35,    34,   nil,    28,    34,   nil,    55,   nil,
   nil,   nil,    28,   nil,    36,    28,   nil,   nil,    38,   nil,
    24,    25,   nil,    36,   nil,   nil,   nil,    38,   nil,   nil,
    36,   nil,   nil,    55,    38,   nil,   nil,    36,   nil,    39,
    36,    38,   nil,   nil,    38,    26,   nil,    25,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    55,
   nil,   nil,    27,   nil,   nil,   nil,   nil,   nil,   nil,    39,
    27,    24,    27,   nil,    25,   nil,    55,   nil,   nil,   nil,
   nil,   nil,    25,   nil,   nil,    55,   nil,   nil,   nil,   nil,
   nil,   nil,    55,    25,    27,    39,   nil,    25,   nil,    55,
    25,   nil,    55,   nil,    24,   nil,   nil,   nil,   nil,   nil,
    26,    24,   nil,   nil,    24,   nil,    27,    26,    26,   nil,
   nil,   nil,    39,   nil,   nil,    26,   nil,    26,   nil,   nil,
    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,    26,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    26,   nil,    25,   nil,   nil,   nil,    27,   nil,   nil,
   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,
    27,   nil,    25,   nil,   nil,   nil,   nil,    27,   nil,   nil,
    27,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,    25,   nil,
   nil,   nil,   nil,   nil,   nil,    25,    25,   nil,   nil,    26,
   nil,   nil,   nil,    25,   nil,    25,   nil,   nil,    26,   nil,
   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,
   nil,   nil,    26,   nil,   nil,    26,   nil,    25,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,
   nil,   nil,   nil,    39,    39,   nil,   nil,   nil,    32,    25,
   nil,    39,   nil,    39,   nil,    32,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    25,    39,   nil,   nil,   nil,    32,
   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,    32,   nil,
    25,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    32,    25,   nil,    32,
    32,    32,    39,   nil,   nil,   nil,    25,   nil,   nil,   nil,
    32,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,
    25,   nil,   nil,    25,   nil,   nil,   nil,   nil,    39,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    32,   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,
   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,    39,   nil,
   nil,    39,   nil,   nil,   nil,   nil,    32,    32,    32,    32,
    32,    32,    32,    32,    32,   nil,    32,    32,    32,   nil,
    32,    32,   nil,    32,    32,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,
    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,
    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32 ]

racc_goto_pointer = [
   nil,    74,     1,    33,   -25,  -164,    -2,   nil,   -47,   nil,
   -44,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -51,    26,   112,   381,   263,   208,    13,   -11,
    31,   -29,   670,  -255,     4,     0,    38,   -33,    42,   429,
     2,    -1,   -73,   -38,  -104,   -87,   nil,     8,   -75,  -257,
   nil,   nil,   nil,   -35,   nil,   100,   -93,   nil,   nil,  -265,
    -4,   -38,   -37,  -299,   nil,    -5,  -204,  -220,   nil,   -97,
   -60,  -100,  -186,   -30,     6,   -24,  -140,    37,   -35,    -2,
  -142,   -57,   -56,  -111,  -223,     0,   -64,   nil ]

racc_goto_default = [
   nil,   nil,   276,   215,    42,   nil,    52,     5,     7,    12,
    17,    20,    23,    29,    37,    41,    46,    51,     4,     6,
    11,   130,    19,   nil,    66,    69,    73,    75,    78,   nil,
   nil,    60,   177,   283,    64,    67,    70,    72,    74,    77,
     3,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   217,
   305,   208,   209,   nil,   131,    62,   135,   139,   228,   230,
   nil,   nil,   nil,   nil,    59,    14,   nil,   nil,   325,    33,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    97,   nil,   nil,   nil,   nil,   nil,   nil,   183 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 72, :_reduce_3,
  2, 72, :_reduce_4,
  1, 75, :_reduce_5,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  3, 90, :_reduce_36,
  3, 90, :_reduce_37,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  4, 84, :_reduce_50,
  5, 84, :_reduce_51,
  3, 84, :_reduce_52,
  2, 84, :_reduce_53,
  1, 100, :_reduce_54,
  3, 100, :_reduce_55,
  1, 99, :_reduce_56,
  3, 99, :_reduce_57,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  5, 76, :_reduce_69,
  5, 76, :_reduce_70,
  5, 76, :_reduce_71,
  5, 88, :_reduce_72,
  2, 77, :_reduce_73,
  1, 116, :_reduce_74,
  2, 116, :_reduce_75,
  6, 78, :_reduce_76,
  2, 78, :_reduce_77,
  3, 117, :_reduce_78,
  3, 117, :_reduce_79,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  3, 118, :_reduce_82,
  1, 119, :_reduce_none,
  3, 119, :_reduce_84,
  1, 120, :_reduce_85,
  1, 120, :_reduce_86,
  3, 121, :_reduce_87,
  3, 121, :_reduce_88,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  4, 123, :_reduce_91,
  1, 111, :_reduce_92,
  3, 111, :_reduce_93,
  0, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 109, :_reduce_96,
  1, 104, :_reduce_97,
  1, 105, :_reduce_98,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  3, 79, :_reduce_106,
  3, 79, :_reduce_107,
  3, 89, :_reduce_108,
  0, 113, :_reduce_109,
  1, 113, :_reduce_110,
  3, 113, :_reduce_111,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  3, 126, :_reduce_115,
  3, 128, :_reduce_116,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  0, 115, :_reduce_119,
  1, 115, :_reduce_120,
  3, 115, :_reduce_121,
  4, 108, :_reduce_122,
  3, 108, :_reduce_123,
  1, 96, :_reduce_124,
  2, 96, :_reduce_125,
  2, 130, :_reduce_126,
  1, 131, :_reduce_127,
  2, 131, :_reduce_128,
  1, 106, :_reduce_129,
  4, 94, :_reduce_130,
  4, 94, :_reduce_131,
  5, 82, :_reduce_132,
  4, 82, :_reduce_133,
  2, 81, :_reduce_134,
  5, 132, :_reduce_135,
  4, 132, :_reduce_136,
  0, 133, :_reduce_none,
  2, 133, :_reduce_138,
  4, 133, :_reduce_139,
  3, 133, :_reduce_140,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  3, 102, :_reduce_143,
  3, 102, :_reduce_144,
  3, 102, :_reduce_145,
  3, 102, :_reduce_146,
  3, 102, :_reduce_147,
  3, 102, :_reduce_148,
  3, 102, :_reduce_149,
  3, 102, :_reduce_150,
  3, 102, :_reduce_151,
  3, 102, :_reduce_152,
  2, 102, :_reduce_153,
  3, 102, :_reduce_154,
  3, 102, :_reduce_155,
  3, 102, :_reduce_156,
  3, 102, :_reduce_157,
  3, 102, :_reduce_158,
  3, 102, :_reduce_159,
  2, 102, :_reduce_160,
  3, 102, :_reduce_161,
  3, 102, :_reduce_162,
  3, 102, :_reduce_163,
  5, 80, :_reduce_164,
  1, 136, :_reduce_165,
  2, 136, :_reduce_166,
  5, 137, :_reduce_167,
  4, 137, :_reduce_168,
  1, 138, :_reduce_169,
  3, 138, :_reduce_170,
  3, 97, :_reduce_171,
  1, 140, :_reduce_none,
  4, 140, :_reduce_173,
  1, 142, :_reduce_none,
  3, 142, :_reduce_175,
  3, 141, :_reduce_176,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_185,
  1, 139, :_reduce_none,
  1, 143, :_reduce_187,
  1, 144, :_reduce_none,
  3, 144, :_reduce_189,
  2, 83, :_reduce_190,
  6, 85, :_reduce_191,
  5, 85, :_reduce_192,
  7, 86, :_reduce_193,
  6, 86, :_reduce_194,
  6, 87, :_reduce_195,
  5, 87, :_reduce_196,
  1, 110, :_reduce_197,
  1, 147, :_reduce_198,
  3, 147, :_reduce_199,
  1, 149, :_reduce_200,
  1, 150, :_reduce_201,
  1, 150, :_reduce_202,
  1, 150, :_reduce_203,
  1, 150, :_reduce_none,
  0, 73, :_reduce_205,
  0, 151, :_reduce_206,
  1, 145, :_reduce_none,
  3, 145, :_reduce_208,
  4, 145, :_reduce_209,
  1, 152, :_reduce_none,
  3, 152, :_reduce_211,
  3, 153, :_reduce_212,
  1, 153, :_reduce_213,
  1, 148, :_reduce_none,
  2, 148, :_reduce_215,
  1, 146, :_reduce_none,
  2, 146, :_reduce_217,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 95, :_reduce_220,
  3, 107, :_reduce_221,
  4, 107, :_reduce_222,
  2, 107, :_reduce_223,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  0, 114, :_reduce_none,
  1, 114, :_reduce_227,
  1, 135, :_reduce_228,
  3, 134, :_reduce_229,
  4, 134, :_reduce_230,
  2, 134, :_reduce_231,
  1, 155, :_reduce_none,
  3, 155, :_reduce_233,
  3, 156, :_reduce_234,
  1, 157, :_reduce_235,
  1, 157, :_reduce_236,
  4, 125, :_reduce_237,
  1, 98, :_reduce_none,
  4, 98, :_reduce_239 ]

racc_reduce_n = 240

racc_shift_n = 400

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68,
  :MODULO => 69 }

racc_nt_base = 70

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "MODULO",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "unlessstatement",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "keyword",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "expressions",
  "funcvalues",
  "rvalue",
  "expression",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "funcrvalue",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "param_name",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 34)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 37)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 46)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'grammar.ra', 89)
  def _reduce_36(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 92)
  def _reduce_37(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'grammar.ra', 107)
  def _reduce_50(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 114)
  def _reduce_51(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 120)
  def _reduce_52(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 127)
  def _reduce_53(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 134)
  def _reduce_54(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 137)
  def _reduce_55(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 141)
  def _reduce_56(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 142)
  def _reduce_57(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

module_eval(<<'.,.,', 'grammar.ra', 157)
  def _reduce_69(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 160)
  def _reduce_70(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 163)
  def _reduce_71(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 170)
  def _reduce_72(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 177)
  def _reduce_73(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 193)
  def _reduce_74(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 194)
  def _reduce_75(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 199)
  def _reduce_76(val, _values, result)
      @lexer.commentpop
  type = val[0].value.downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 217)
  def _reduce_77(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 235)
  def _reduce_78(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 243)
  def _reduce_79(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 80 omitted

# reduce 81 omitted

module_eval(<<'.,.,', 'grammar.ra', 256)
  def _reduce_82(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 83 omitted

module_eval(<<'.,.,', 'grammar.ra', 261)
  def _reduce_84(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 265)
  def _reduce_85(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 266)
  def _reduce_86(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 269)
  def _reduce_87(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 274)
  def _reduce_88(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 89 omitted

# reduce 90 omitted

module_eval(<<'.,.,', 'grammar.ra', 283)
  def _reduce_91(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 286)
  def _reduce_92(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 288)
  def _reduce_93(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

module_eval(<<'.,.,', 'grammar.ra', 296)
  def _reduce_96(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 300)
  def _reduce_97(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 304)
  def _reduce_98(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

module_eval(<<'.,.,', 'grammar.ra', 316)
  def _reduce_106(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 322)
  def _reduce_107(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 326)
  def _reduce_108(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 332)
  def _reduce_109(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 334)
  def _reduce_110(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 336)
  def _reduce_111(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

module_eval(<<'.,.,', 'grammar.ra', 345)
  def _reduce_115(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 349)
  def _reduce_116(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

module_eval(<<'.,.,', 'grammar.ra', 358)
  def _reduce_119(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 360)
  def _reduce_120(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 362)
  def _reduce_121(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 368)
  def _reduce_122(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 373)
  def _reduce_123(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 379)
  def _reduce_124(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 380)
  def _reduce_125(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 382)
  def _reduce_126(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 384)
  def _reduce_127(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 385)
  def _reduce_128(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 388)
  def _reduce_129(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 392)
  def _reduce_130(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 395)
  def _reduce_131(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 399)
  def _reduce_132(val, _values, result)
      @lexer.commentpop
  args = {
    :test => ast(AST::Not, :value => val[1]),
    :statements => val[3]
  }

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 408)
  def _reduce_133(val, _values, result)
        @lexer.commentpop
    args = {
      :test => ast(AST::Not, :value => val[1]), 
      :statements => ast(AST::Nop)
    }
    result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 417)
  def _reduce_134(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 421)
  def _reduce_135(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 432)
  def _reduce_136(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 137 omitted

module_eval(<<'.,.,', 'grammar.ra', 445)
  def _reduce_138(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 448)
  def _reduce_139(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 452)
  def _reduce_140(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'grammar.ra', 471)
  def _reduce_143(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 474)
  def _reduce_144(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 477)
  def _reduce_145(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 480)
  def _reduce_146(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 483)
  def _reduce_147(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 486)
  def _reduce_148(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 489)
  def _reduce_149(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 492)
  def _reduce_150(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 495)
  def _reduce_151(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 498)
  def _reduce_152(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 501)
  def _reduce_153(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 504)
  def _reduce_154(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 507)
  def _reduce_155(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 510)
  def _reduce_156(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 513)
  def _reduce_157(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 516)
  def _reduce_158(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 519)
  def _reduce_159(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 522)
  def _reduce_160(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 525)
  def _reduce_161(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 528)
  def _reduce_162(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 531)
  def _reduce_163(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 535)
  def _reduce_164(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 539)
  def _reduce_165(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 541)
  def _reduce_166(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 546)
  def _reduce_167(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 549)
  def _reduce_168(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 559)
  def _reduce_169(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 561)
  def _reduce_170(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 566)
  def _reduce_171(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 172 omitted

module_eval(<<'.,.,', 'grammar.ra', 571)
  def _reduce_173(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 174 omitted

module_eval(<<'.,.,', 'grammar.ra', 577)
  def _reduce_175(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 586)
  def _reduce_176(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

module_eval(<<'.,.,', 'grammar.ra', 598)
  def _reduce_185(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 186 omitted

module_eval(<<'.,.,', 'grammar.ra', 603)
  def _reduce_187(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'grammar.ra', 605)
  def _reduce_189(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 608)
  def _reduce_190(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 618)
  def _reduce_191(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 626)
  def _reduce_192(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 634)
  def _reduce_193(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 641)
  def _reduce_194(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 650)
  def _reduce_195(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 655)
  def _reduce_196(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 659)
  def _reduce_197(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 664)
  def _reduce_198(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 667)
  def _reduce_199(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 672)
  def _reduce_200(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 675)
  def _reduce_201(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 676)
  def _reduce_202(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 677)
  def _reduce_203(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 204 omitted

module_eval(<<'.,.,', 'grammar.ra', 681)
  def _reduce_205(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 685)
  def _reduce_206(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 207 omitted

module_eval(<<'.,.,', 'grammar.ra', 690)
  def _reduce_208(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 693)
  def _reduce_209(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 210 omitted

module_eval(<<'.,.,', 'grammar.ra', 699)
  def _reduce_211(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 705)
  def _reduce_212(val, _values, result)
     result = [val[0][:value], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 706)
  def _reduce_213(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 214 omitted

module_eval(<<'.,.,', 'grammar.ra', 710)
  def _reduce_215(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 216 omitted

module_eval(<<'.,.,', 'grammar.ra', 715)
  def _reduce_217(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 218 omitted

# reduce 219 omitted

module_eval(<<'.,.,', 'grammar.ra', 721)
  def _reduce_220(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 724)
  def _reduce_221(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 725)
  def _reduce_222(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 726)
  def _reduce_223(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

module_eval(<<'.,.,', 'grammar.ra', 732)
  def _reduce_227(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 735)
  def _reduce_228(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 739)
  def _reduce_229(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 746)
  def _reduce_230(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 752)
  def _reduce_231(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 232 omitted

module_eval(<<'.,.,', 'grammar.ra', 757)
  def _reduce_233(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 766)
  def _reduce_234(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 769)
  def _reduce_235(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 770)
  def _reduce_236(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 773)
  def _reduce_237(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 238 omitted

module_eval(<<'.,.,', 'grammar.ra', 778)
  def _reduce_239(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
