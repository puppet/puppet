#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 796)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'9,15,199,200,204,181,-130,104,-112,106,300,371,91,290,369,168,172,181',
'299,-197,-184,180,107,180,163,165,169,171,39,205,47,1,331,10,13,180',
'21,25,35,330,44,48,2,9,15,16,103,164,167,34,321,174,175,157,158,160',
'161,329,166,170,31,-130,-130,-130,-130,159,8,162,9,15,310,39,104,47',
'1,347,10,13,339,21,25,35,318,44,48,2,9,15,16,-178,82,328,34,396,306',
'319,120,303,304,80,81,168,172,31,54,-123,185,344,55,8,163,165,169,171',
'39,16,47,1,371,10,13,369,21,25,35,357,44,48,2,9,15,16,180,164,167,34',
'394,174,175,157,158,160,161,314,166,170,31,9,15,303,304,159,8,162,187',
'289,320,39,288,47,1,282,10,13,212,21,25,35,375,44,48,2,9,15,16,211,376',
'291,34,393,214,-44,-44,-44,-44,185,54,168,172,31,55,313,311,352,257',
'8,163,165,169,171,39,298,47,1,293,10,13,54,21,25,35,55,44,48,2,9,15',
'16,335,164,167,34,278,174,175,157,158,160,161,31,166,170,31,9,15,166',
'170,159,8,162,166,170,159,39,31,47,1,159,10,13,54,21,25,35,55,44,48',
'2,9,15,16,-185,166,170,34,121,58,307,212,159,25,236,306,-179,48,31,9',
'15,16,211,66,8,34,341,214,284,39,-96,47,1,282,10,13,31,21,25,35,-180',
'44,48,2,9,15,16,342,345,-178,34,353,58,306,212,212,25,69,-129,259,48',
'31,9,15,16,211,211,8,34,-177,214,214,39,257,47,1,349,10,13,31,21,25',
'35,256,44,48,2,9,15,16,255,253,249,34,383,58,247,93,302,25,236,303,304',
'48,31,241,311,16,360,220,8,34,362,106,93,39,208,47,1,365,10,13,31,21',
'25,35,368,44,48,2,9,15,16,-122,66,97,34,122,99,-38,-38,-38,-38,121,93',
'372,-183,31,-40,-40,-40,-40,97,8,-181,99,-179,31,149,151,154,125,128',
'58,134,135,139,141,145,249,152,155,9,15,31,16,379,138,143,146,380,257',
'97,-182,-180,99,85,86,87,83,31,172,-177,-184,384,127,130,82,122,163',
'39,385,47,1,31,10,13,121,21,25,35,-227,44,48,2,9,15,16,120,387,-179',
'34,333,389,-180,110,174,175,157,158,160,161,31,166,170,392,108,100,8',
'57,159,56,162,39,398,47,1,399,10,13,,21,25,35,,44,48,2,245,,16,,,,34',
',,168,172,85,86,87,83,,,31,163,165,169,171,,8,174,175,157,158,160,161',
',166,170,,,,,,159,,162,164,167,172,,174,175,157,158,160,161,163,166',
'170,246,,,,,159,,162,,168,172,,,,,,,,163,165,169,171,,,174,175,157,158',
'160,161,,166,170,,,,,,159,,162,164,167,,,174,175,157,158,160,161,,166',
'170,173,,,,,159,,162,,168,172,,,,,,,,163,165,169,171,,,174,175,157,158',
',9,15,166,170,66,,72,,,159,,162,164,167,,,174,175,157,158,160,161,59',
'166,170,9,15,,,114,159,-197,162,58,,,,25,69,,,48,,,,16,64,113,,34,9',
'15,77,,66,,72,,58,,31,,25,69,,,48,9,15,,16,66,59,72,34,,,,,,,,,58,,31',
',25,69,59,,48,,,,16,64,,,34,58,,77,,25,69,,,48,,31,,16,64,9,15,34,,66',
'77,72,,,,9,15,,31,66,,72,,,,9,15,59,,,,,,174,175,157,158,59,58,,166',
'170,25,69,,,48,159,58,162,16,64,25,69,34,,48,77,58,,16,64,25,236,34',
'31,48,77,,,16,,9,15,34,31,66,,72,,,,9,15,,31,66,,72,,,,9,15,59,,66,',
'72,,,,9,15,59,58,,,,25,69,,,48,59,58,,16,64,25,69,34,,48,77,58,,16,64',
'25,69,34,31,48,77,58,,16,64,25,236,34,31,48,77,,,16,,9,15,34,31,66,',
'72,,,,9,15,,31,66,,72,,,,9,15,59,,66,,72,,,,,,59,58,,,,25,69,,,48,59',
'58,,16,64,25,69,34,,48,77,58,,16,64,25,69,34,31,48,77,,,16,64,9,15,34',
'31,66,77,72,,,,9,15,,31,66,179,72,,,,9,15,59,,66,,72,,,,,,59,58,,,,25',
'69,,,48,59,58,,16,64,25,69,34,,48,77,58,,16,64,25,69,34,31,48,77,,,16',
'64,9,15,34,31,66,77,72,,,,9,15,,31,66,,72,,,,9,15,59,,66,,72,,,,,,59',
'58,,,,25,69,,,48,59,58,,16,64,25,69,34,,48,77,58,,16,64,25,69,34,31',
'48,77,,,16,64,9,15,34,31,66,77,72,,,,9,15,,31,66,,72,,,,9,15,59,,,,',
'374,,,157,158,59,58,,166,170,25,69,,,48,159,58,162,16,64,25,69,34,,48',
'77,58,,16,64,25,236,34,31,48,77,,,16,,9,15,34,31,66,,72,,,,9,15,,31',
'66,,72,,,,9,15,59,,66,,72,,,,,,59,58,,,,25,69,,,48,59,58,,16,64,25,69',
'34,,48,77,58,,16,64,25,69,34,31,48,77,,,16,64,9,15,34,31,66,77,72,,',
',9,15,,31,,,,,,,9,15,59,,66,,72,,,,,,,58,,,,25,69,,,48,59,58,54,16,64',
'25,196,34,44,48,77,58,,16,,25,69,34,31,48,,,,16,64,9,15,34,31,66,77',
'72,,,,9,15,,31,66,,72,,,,,,59,286,,,,,,,,,59,58,9,15,,25,69,,,48,,58',
',16,64,25,69,34,,48,77,,,16,64,,,34,31,,77,,,,,58,54,,31,25,196,,44',
'48,9,15,,16,66,,72,34,,,9,15,,,66,,,,31,,9,15,59,,66,,72,,,,,,,58,,',
',25,69,,,48,59,58,,16,64,25,69,34,,48,77,58,,16,,25,69,34,31,48,,,,16',
'64,9,15,34,31,66,77,72,,,,9,15,,31,66,,72,,,,9,15,59,,66,,72,,,,,,59',
'58,,,,25,69,,,48,59,58,,16,64,25,69,34,,48,77,58,,16,64,25,69,34,31',
'48,77,,,16,64,9,15,34,31,66,77,72,,,,9,15,,31,66,,72,,,,9,15,59,,66',
',72,,,,9,15,59,58,,,238,25,69,,,48,59,58,,16,64,25,69,34,,48,77,58,',
'16,64,25,69,34,31,48,77,58,,16,64,25,236,34,31,48,77,,,16,,9,15,34,31',
'66,,72,,,,,,,31,157,158,,9,15,166,170,66,59,72,,,159,,162,,,,,58,,,',
'25,69,59,243,48,,9,15,16,64,66,,34,58,,77,,25,69,,,48,,31,,16,64,,,34',
'9,15,77,,66,179,72,,,58,31,,,25,236,,,48,,,,16,59,,,34,9,15,,,66,,72',
'58,,,31,25,69,,,48,,,,16,64,,59,34,,,77,,,,,,,58,31,,,25,69,,,48,,,',
'16,64,9,15,34,,66,77,72,,,,9,15,,31,66,,72,,,,9,15,59,,66,,72,,,,,,59',
'58,,,,25,69,,,48,59,58,,16,64,25,69,34,,48,77,58,,16,64,25,69,34,31',
'48,77,,,16,64,9,15,34,31,66,77,72,,,,9,15,,31,66,,72,,,,,,59,,,,,,,',
',,59,58,,,172,25,69,,,48,,58,163,16,64,25,69,34,,48,77,,,16,64,168,172',
'34,31,,77,,,,163,165,169,171,31,174,175,157,158,160,161,,166,170,172',
',,,,159,,162,163,164,167,,,174,175,157,158,160,161,,166,170,168,172',
',,,159,,162,,163,165,169,171,174,175,157,158,160,161,,166,170,,,,,,159',
',162,,,164,167,,,174,175,157,158,160,161,,166,170,168,172,,,,159,,162',
',163,165,169,171,174,175,157,158,160,161,,166,170,,,,,,159,,162,,,164',
'167,,,174,175,157,158,160,161,,166,170,168,172,,,,159,,162,,163,165',
'169,171,,,,,,,,,,,,,,,,,,,,164,167,,,174,175,157,158,160,161,,166,170',
'168,172,,,,159,,162,,163,165,169,171,,,,,,,,,,,,,,,,,,,,164,167,,,174',
'175,157,158,160,161,,166,170,168,172,,,,159,,162,,163,165,169,171,,',
',,,,,,,,,,,,,,,,,164,167,,,174,175,157,158,160,161,,166,170,168,172',
',,,159,,162,,163,165,169,171,,,,,,168,172,,,,,,,,163,165,169,171,,164',
'167,,,174,175,157,158,160,161,,166,170,,,,,,159,167,162,,174,175,157',
'158,160,161,,166,170,168,172,,,,159,,162,,163,165,169,171,,,,,168,172',
',,,,,,,163,165,169,171,,,164,167,,,174,175,157,158,160,161,,166,170',
',,,,,159,,162,174,175,157,158,160,161,,166,170,168,172,,,,159,,162,260',
'163,165,169,171,,,,,168,172,,,,,,,,163,165,169,171,,,164,167,,,174,175',
'157,158,160,161,,166,170,,,,,,159,,162,174,175,157,158,160,161,,166',
'170,168,172,,,,159,,162,,163,165,169,171,,,,,168,172,,,,,,,,163,165',
'169,171,,,164,167,,,174,175,157,158,160,161,,166,170,,,,,,159,,162,174',
'175,157,158,160,161,,166,170,,,,,,159,,162,149,151,154,125,128,,134',
'135,139,222,230,,152,225,,,,,,138,143,224,149,151,154,125,128,,134,135',
'139,222,230,,152,225,,127,130,,,138,143,224,149,151,154,125,128,,134',
'135,139,222,223,,152,225,,127,130,,,138,143,224,149,151,154,125,128',
',134,135,139,222,230,,152,225,,127,130,,,138,143,224,149,151,154,125',
'128,,134,135,139,222,223,,152,225,,127,130,,,138,143,224,149,151,154',
'125,128,,134,135,139,222,223,,152,225,,127,130,,,138,143,224,,,,,,,',
',,,,,,,,127,130' ]
        racc_action_table = arr = ::Array.new(2539, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,89,89,95,69,320,27,145,27,210,372,18,184,372,89,89,196,210,196,18',
'145,27,69,89,89,89,89,0,95,0,0,251,0,0,196,0,0,0,250,0,0,0,245,245,0',
'27,89,89,0,245,89,89,89,89,89,89,249,89,89,0,320,320,320,320,89,0,89',
'288,288,226,245,68,245,245,288,245,245,258,245,245,245,242,245,245,245',
'392,392,245,68,10,248,245,392,285,242,247,226,226,10,10,248,248,245',
'26,243,288,285,26,245,248,248,248,248,392,26,392,392,321,392,392,321',
'392,392,392,301,392,392,392,389,389,392,236,248,248,392,389,248,248',
'248,248,248,248,235,248,248,392,72,72,301,301,248,392,248,72,182,244',
'389,182,389,389,244,389,389,212,389,389,389,325,389,389,389,382,382',
'389,212,325,191,389,382,212,17,17,17,17,72,293,191,191,389,293,230,228',
'293,221,389,191,191,191,191,382,206,382,382,198,382,382,1,382,382,382',
'1,382,382,382,173,173,382,254,191,191,382,173,191,191,191,191,191,191',
'170,191,191,382,375,375,261,261,191,382,191,266,266,261,173,166,173',
'173,266,173,173,13,173,173,173,13,173,173,173,277,277,173,155,262,262',
'173,153,375,219,305,262,375,375,219,148,375,173,241,241,375,305,241',
'173,375,279,305,177,277,146,277,277,177,277,277,375,277,277,277,144',
'277,277,277,298,298,277,282,287,142,277,298,241,287,103,107,241,241',
'141,140,241,277,366,366,241,103,107,277,241,137,103,107,298,133,298',
'298,292,298,298,241,298,298,298,132,298,298,298,349,349,298,126,123',
'122,298,349,366,119,205,217,366,366,217,217,366,298,111,308,366,309',
'105,298,366,312,101,204,349,100,349,349,316,349,349,366,349,349,349',
'318,349,349,349,57,57,349,319,57,205,349,88,205,52,52,52,52,79,21,322',
'78,349,7,7,7,7,204,349,75,204,74,205,57,57,57,57,57,57,57,57,57,57,57',
'331,57,57,30,30,204,57,332,57,57,57,334,337,21,71,70,21,11,11,11,11',
'57,275,65,63,354,57,57,58,53,275,30,359,30,30,21,30,30,50,30,30,30,365',
'30,30,30,253,253,30,47,367,40,30,253,371,36,33,275,275,275,275,275,275',
'30,275,275,376,28,24,30,3,275,2,275,253,395,253,253,397,253,253,,253',
'253,253,,253,253,253,116,,253,,,,253,,,116,116,19,19,19,19,,,253,116',
'116,116,116,,253,267,267,267,267,267,267,,267,267,,,,,,267,,267,116',
'116,272,,116,116,116,116,116,116,272,116,116,117,,,,,116,,116,,117,117',
',,,,,,,117,117,117,117,,,272,272,272,272,272,272,,272,272,,,,,,272,',
'272,117,117,,,117,117,117,117,117,117,,117,117,62,,,,,117,,117,,62,62',
',,,,,,,62,62,62,62,,,264,264,264,264,,59,59,264,264,59,,59,,,264,,264',
'62,62,,,62,62,62,62,62,62,59,62,62,35,35,,,35,62,35,62,59,,,,59,59,',
',59,,,,59,59,35,,59,39,39,59,,39,,39,,35,,59,,35,35,,,35,369,369,,35',
'369,39,369,35,,,,,,,,,39,,35,,39,39,369,,39,,,,39,39,,,39,369,,39,,369',
'369,,,369,,39,,369,369,44,44,369,,44,369,44,,,,158,158,,369,158,,158',
',,,238,238,44,,,,,,265,265,265,265,158,44,,265,265,44,44,,,44,265,158',
'265,44,44,158,158,44,,158,44,238,,158,158,238,238,158,44,238,158,,,238',
',157,157,238,158,157,,157,,,,15,15,,238,15,,15,,,,160,160,157,,160,',
'160,,,,246,246,15,157,,,,157,157,,,157,160,15,,157,157,15,15,157,,15',
'157,160,,15,15,160,160,15,157,160,15,246,,160,160,246,246,160,15,246',
'160,,,246,,161,161,246,160,161,,161,,,,162,162,,246,162,,162,,,,64,64',
'161,,64,,64,,,,,,162,161,,,,161,161,,,161,64,162,,161,161,162,162,161',
',162,161,64,,162,162,64,64,162,161,64,162,,,64,64,163,163,64,162,163',
'64,163,,,,66,66,,64,66,66,66,,,,164,164,163,,164,,164,,,,,,66,163,,',
',163,163,,,163,164,66,,163,163,66,66,163,,66,163,164,,66,66,164,164',
'66,163,164,66,,,164,164,165,165,164,66,165,164,165,,,,283,283,,164,283',
',283,,,,329,329,165,,329,,329,,,,,,283,165,,,,165,165,,,165,329,283',
',165,165,283,283,165,,283,165,329,,283,283,329,329,283,165,329,283,',
',329,329,199,199,329,283,199,329,199,,,,77,77,,329,77,,77,,,,323,323',
'199,,,,,323,,,280,280,77,199,,280,280,199,199,,,199,280,77,280,199,199',
'77,77,199,,77,199,323,,77,77,323,323,77,199,323,77,,,323,,259,259,323',
'77,259,,259,,,,80,80,,323,80,,80,,,,81,81,259,,81,,81,,,,,,80,259,,',
',259,259,,,259,81,80,,259,259,80,80,259,,80,259,81,,80,80,81,81,80,259',
'81,80,,,81,81,82,82,81,80,82,81,82,,,,84,84,,81,,,,,,,167,167,82,,167',
',167,,,,,,,82,,,,82,82,,,82,167,84,84,82,82,84,84,82,84,84,82,167,,84',
',167,167,84,82,167,,,,167,167,180,180,167,84,180,167,180,,,,91,91,,167',
'91,,91,,,,,,180,180,,,,,,,,,91,180,92,92,,180,180,,,180,,91,,180,180',
'91,91,180,,91,180,,,91,91,,,91,180,,91,,,,,92,92,,91,92,92,,92,92,168',
'168,,92,168,,168,92,,,314,314,,,314,,,,92,,313,313,168,,313,,313,,,',
',,,168,,,,168,168,,,168,313,314,,168,168,314,314,168,,314,168,313,,314',
',313,313,314,168,313,,,,313,313,169,169,313,314,169,313,169,,,,104,104',
',313,104,,104,,,,159,159,169,,159,,159,,,,,,104,169,,,,169,169,,,169',
'159,104,,169,169,104,104,169,,104,169,159,,104,104,159,159,104,169,159',
'104,,,159,159,181,181,159,104,181,159,181,,,,290,290,,159,290,,290,',
',,175,175,181,,175,,175,,,,110,110,290,181,,,110,181,181,,,181,175,290',
',181,181,290,290,181,,290,181,175,,290,290,175,175,290,181,175,290,110',
',175,175,110,110,175,290,110,175,,,110,,174,174,110,175,174,,174,,,',
',,,110,281,281,,113,113,281,281,113,174,113,,,281,,281,,,,,174,,,,174',
'174,113,113,174,,255,255,174,174,255,,174,113,,174,,113,113,,,113,,174',
',113,113,,,113,114,114,113,,114,114,114,,,255,113,,,255,255,,,255,,',
',255,114,,,255,8,8,,,8,,8,114,,,255,114,114,,,114,,,,114,114,,8,114',
',,114,,,,,,,8,114,,,8,8,,,8,,,,8,8,171,171,8,,171,8,171,,,,300,300,',
'8,300,,300,,,,299,299,171,,299,,299,,,,,,300,171,,,,171,171,,,171,299',
'300,,171,171,300,300,171,,300,171,299,,300,300,299,299,300,171,299,300',
',,299,299,172,172,299,300,172,299,172,,,,121,121,,299,121,,121,,,,,',
'172,,,,,,,,,,121,172,,,269,172,172,,,172,,121,269,172,172,121,121,172',
',121,172,,,121,121,348,348,121,172,,121,,,,348,348,348,348,121,269,269',
'269,269,269,269,,269,269,273,,,,,269,,269,273,348,348,,,348,348,348',
'348,348,348,,348,348,190,190,,,,348,,348,,190,190,190,190,273,273,273',
'273,273,273,,273,273,,,,,,273,,273,,,190,190,,,190,190,190,190,190,190',
',190,190,178,178,,,,190,,190,,178,178,178,178,276,276,276,276,276,276',
',276,276,,,,,,276,,276,,,178,178,,,178,178,178,178,178,178,,178,178',
'202,202,,,,178,,178,,202,202,202,202,,,,,,,,,,,,,,,,,,,,202,202,,,202',
'202,202,202,202,202,,202,202,340,340,,,,202,,202,,340,340,340,340,,',
',,,,,,,,,,,,,,,,,340,340,,,340,340,340,340,340,340,,340,340,343,343',
',,,340,,340,,343,343,343,343,,,,,,,,,,,,,,,,,,,,343,343,,,343,343,343',
'343,343,343,,343,343,189,189,,,,343,,343,,189,189,189,189,,,,,,268,268',
',,,,,,,268,268,268,268,,189,189,,,189,189,189,189,189,189,,189,189,',
',,,,189,268,189,,268,268,268,268,268,268,,268,268,377,377,,,,268,,268',
',377,377,377,377,,,,,355,355,,,,,,,,355,355,355,355,,,377,377,,,377',
'377,377,377,377,377,,377,377,,,,,,377,,377,355,355,355,355,355,355,',
'355,355,156,156,,,,355,,355,156,156,156,156,156,,,,,356,356,,,,,,,,356',
'356,356,356,,,156,156,,,156,156,156,156,156,156,,156,156,,,,,,156,,156',
'356,356,356,356,356,356,,356,356,363,363,,,,356,,356,,363,363,363,363',
',,,,271,271,,,,,,,,271,271,271,271,,,363,363,,,363,363,363,363,363,363',
',363,363,,,,,,363,,363,271,271,271,271,271,271,,271,271,,,,,,271,,271',
'311,311,311,311,311,,311,311,311,311,311,,311,311,,,,,,311,311,311,220',
'220,220,220,220,,220,220,220,220,220,,220,220,,311,311,,,220,220,220',
'257,257,257,257,257,,257,257,257,257,257,,257,257,,220,220,,,257,257',
'257,108,108,108,108,108,,108,108,108,108,108,,108,108,,257,257,,,108',
'108,108,256,256,256,256,256,,256,256,256,256,256,,256,256,,108,108,',
',256,256,256,106,106,106,106,106,,106,106,106,106,106,,106,106,,256',
'256,,,106,106,106,,,,,,,,,,,,,,,,106,106' ]
        racc_action_check = arr = ::Array.new(2539, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   171,   454,   488,   nil,   nil,   nil,   342,  1690,   nil,
    84,   380,   nil,   214,   nil,   841,   nil,   118,    -3,   463,
   nil,   399,   nil,   nil,   494,   nil,    68,     1,   485,   nil,
   427,   nil,   nil,   459,   nil,   675,   458,   nil,   nil,   700,
   454,   nil,   nil,   nil,   764,   nil,   nil,   473,   nil,   nil,
   458,   nil,   333,   431,   nil,   nil,   nil,   385,   448,   650,
   nil,   nil,   615,   427,   928,   426,   985,   nil,    66,    -1,
   418,   417,   145,   nil,   390,   388,   nil,  1119,   380,   394,
  1186,  1196,  1243,   nil,  1253,   nil,   nil,   nil,   370,    -2,
   nil,  1320,  1344,   nil,   nil,    -8,   nil,   nil,   nil,   nil,
   373,   362,   nil,   287,  1463,   358,  2470,   288,  2426,   nil,
  1550,   350,   nil,  1614,  1664,   nil,   507,   561,   nil,   341,
   nil,  1814,   314,   340,   nil,   nil,   306,   nil,   nil,   nil,
   nil,   nil,   320,   318,   nil,   nil,   nil,   303,   nil,   nil,
   305,   292,   283,   nil,   274,    -3,   264,   nil,   250,   nil,
   nil,   nil,   nil,   259,   nil,   238,  2241,   831,   774,  1473,
   851,   908,   918,   975,   995,  1042,   182,  1263,  1386,  1453,
   167,  1737,  1804,   213,  1597,  1540,   nil,   278,  1936,   nil,
  1310,  1520,   146,   nil,     2,   nil,   nil,   nil,   nil,  2116,
  1891,   170,   nil,   nil,   nil,   nil,    11,   nil,   167,  1109,
   nil,   nil,  1981,   nil,   369,   352,   193,   nil,   nil,   nil,
    -8,   nil,   140,   nil,   nil,   nil,   nil,   309,   nil,   260,
  2382,   182,   nil,   nil,   nil,   nil,    48,   nil,   180,   nil,
   139,   nil,   nil,   nil,   nil,   132,   108,   nil,   784,   nil,
   nil,   274,    70,    82,   149,    41,   861,    94,    84,    42,
    14,    20,   nil,   470,   209,  1640,  2448,  2404,    69,  1176,
   nil,   175,   202,   nil,   594,   741,   180,   486,  2134,  1824,
   nil,  2320,   540,  1868,   nil,   430,  1913,   256,   nil,   274,
  1086,  1558,   297,  1052,   nil,    82,   nil,   298,    66,   nil,
  1530,   nil,   325,   150,   nil,   nil,   nil,   nil,   299,  1757,
  1747,   100,   nil,   nil,   nil,   244,   nil,   nil,   351,   356,
   nil,  2360,   360,  1406,  1396,   nil,   364,   nil,   358,   367,
    -2,    87,   393,  1129,   nil,   156,   nil,   nil,   nil,  1062,
   nil,   391,   408,   nil,   428,   nil,   nil,   426,   nil,   nil,
  2026,   nil,   nil,  2071,   nil,   nil,   nil,   nil,  1846,   342,
   nil,   nil,   nil,   nil,   442,  2196,  2258,   nil,   nil,   449,
   nil,   nil,   nil,  2303,   nil,   459,   317,   467,   nil,   717,
   nil,   472,   -20,   nil,   nil,   231,   484,  2179,   nil,   nil,
   nil,   nil,   170,   nil,   nil,   nil,   nil,   nil,   nil,   127,
   nil,   nil,    84,   nil,   nil,   492,   nil,   495,   nil,   nil ]

racc_action_default = [
  -206,  -240,   -74,  -240,   -18,    -7,   -19,    -8,  -240,  -124,
  -221,   -20,    -9,  -198,  -186,  -240,   -98,   -10,  -238,  -240,
   -11,  -240,  -177,   -12,  -240,  -129,  -240,  -178,   -39,   -13,
    -1,  -228,  -182,  -240,   -96,   -97,   -41,   -14,    -2,  -240,
   -42,   -15,    -3,  -181,  -240,   -43,   -16,  -240,  -185,  -183,
   -45,   -17,    -6,  -206,  -198,  -197,   -75,  -109,  -221,  -240,
  -142,  -141,  -240,  -238,  -240,   -59,  -240,   -66,   -60,   -97,
   -63,   -61,  -240,   -64,   -58,   -67,   -62,  -240,   -68,   -65,
  -240,  -240,  -240,   -49,  -240,   -46,   -47,   -48,  -206,  -240,
  -125,  -240,  -240,  -203,  -205,  -206,  -199,  -202,  -201,  -204,
  -240,  -240,   -73,  -206,  -240,   -77,  -109,  -206,  -119,    -4,
  -240,   -53,   -54,  -240,  -240,  -134,  -240,  -240,  -188,  -190,
  -187,  -240,  -207,  -240,  -208,   -25,   -94,   -29,   -27,   -92,
   -35,  -113,  -240,  -226,   -23,   -31,  -110,  -100,   -33,   -32,
  -240,  -114,  -101,   -21,  -103,   -97,   -34,  -104,   -99,   -28,
  -102,   -26,   -22,  -105,   -30,   -24,  -240,  -240,  -240,  -240,
  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -240,
  -240,  -240,  -240,  -240,  -240,  -240,  -160,  -240,   -56,  -224,
  -240,  -240,  -240,  -232,  -240,  -235,  -236,  -231,  -153,  -106,
  -108,  -240,   -40,   -44,   -37,   -39,   -97,   -38,  -206,  -240,
  -127,  -126,  -107,   -36,  -240,  -240,  -240,  -215,   400,   -83,
  -240,  -221,  -206,   -90,   -97,   -89,   -80,  -240,   -81,  -240,
  -119,  -226,  -114,  -112,   -34,   -24,  -240,  -117,  -226,  -118,
  -112,  -120,  -184,  -178,  -180,  -240,   -97,  -179,  -240,  -171,
  -172,  -240,  -240,   -52,  -240,  -240,  -240,  -240,  -240,  -214,
  -240,  -226,  -211,  -240,  -240,   -95,  -109,  -227,  -240,  -240,
  -163,  -149,  -148,  -143,  -151,  -152,  -150,  -155,  -162,  -157,
  -144,  -161,  -159,  -156,  -145,  -158,  -154,    -5,  -133,  -240,
  -146,  -147,  -225,  -240,  -222,  -240,  -123,  -240,  -240,  -229,
  -240,  -237,  -240,  -240,  -217,  -128,  -200,  -216,  -240,  -240,
  -240,  -240,   -78,   -86,   -85,  -240,  -225,  -131,  -226,  -240,
   -79,  -227,  -240,  -240,  -240,  -174,  -226,   -55,  -225,   -50,
  -222,  -137,  -240,  -240,  -165,  -240,  -169,  -189,  -239,  -240,
  -209,  -227,  -240,  -192,  -240,   -69,   -93,  -226,  -111,   -70,
  -115,  -132,  -223,   -57,  -122,  -130,  -233,  -230,  -234,  -240,
  -219,  -218,  -220,  -196,  -240,   -87,   -88,   -84,   -82,  -240,
   -71,  -121,   -72,  -116,  -176,  -225,  -240,  -240,   -51,  -240,
  -136,  -240,  -137,  -166,  -164,  -240,  -240,  -213,  -212,  -210,
  -191,   -91,  -240,  -194,  -195,   -76,  -175,  -173,  -138,  -240,
  -135,  -170,  -240,  -193,  -140,  -240,  -168,  -240,  -139,  -167 ]

racc_goto_table = [
    27,    30,   115,   279,    22,   109,   112,    53,   235,   240,
   183,   227,   147,    50,   252,   129,    90,   118,    94,    88,
    38,   258,    96,   228,   324,   370,   101,   102,   133,   217,
    27,   177,   123,   226,    22,   105,   194,   192,    32,    84,
   193,   323,    43,    50,   203,   192,   361,    92,   193,   358,
   239,   201,   316,   254,   119,   126,   292,   142,    95,   206,
   366,   137,   297,   250,   251,   111,   351,   198,    32,   219,
   153,   182,    43,   124,    24,   322,   390,   221,   242,   244,
   nil,   nil,   nil,   334,    27,   197,   nil,   nil,    22,   nil,
    45,   nil,    27,   197,   nil,    32,    22,    50,   nil,    43,
   nil,   373,   nil,   nil,   nil,    50,   nil,   213,   124,   309,
   233,   213,   nil,   nil,    22,   207,   312,   nil,   nil,   nil,
    45,   nil,    32,   227,   nil,   nil,    43,   nil,   354,   nil,
    32,   nil,   nil,   nil,    43,   308,   235,   315,   301,   332,
   nil,   nil,   nil,   nil,   326,   285,   287,   150,    32,   nil,
   nil,   nil,    43,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   338,    18,   nil,   270,   nil,   nil,   nil,   274,   nil,   nil,
   nil,   nil,   nil,    27,    45,   nil,   nil,    22,   nil,   nil,
   nil,   nil,    45,   nil,   nil,   nil,    50,   nil,   nil,   nil,
    40,    18,   nil,   nil,   nil,   nil,   359,   nil,   nil,   nil,
   295,    94,    94,   nil,   367,   296,   nil,   nil,   nil,   nil,
   147,    32,   317,   336,   227,    43,   213,   327,   294,   395,
    40,   326,   397,   378,    28,   381,   346,   337,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   233,   nil,
   nil,   nil,    22,   nil,   nil,    27,   233,   148,   nil,    22,
    22,   nil,   109,    27,    28,   142,   nil,    22,    50,   137,
   nil,   nil,   186,    45,   235,   386,    50,   nil,   153,   nil,
   nil,   232,   nil,   391,    40,   nil,    32,    27,   nil,   nil,
    43,    22,    40,    32,    32,   364,   nil,    43,    43,   nil,
    50,    32,   nil,    32,   nil,    43,   nil,    43,    27,   350,
   237,   nil,    22,   nil,   nil,   nil,   nil,   nil,   195,   213,
   nil,    50,   nil,   nil,   nil,    32,   195,   nil,   nil,    43,
   nil,   nil,   nil,   233,   nil,   nil,   nil,    22,   nil,   nil,
   nil,   nil,   388,   nil,    18,    45,    32,   nil,   nil,   nil,
    43,   nil,   nil,    45,   nil,   150,   nil,   nil,   nil,    27,
   382,   nil,   nil,    22,   nil,   nil,   nil,   109,   nil,   nil,
   nil,    32,    50,    40,    49,    43,   233,    45,   nil,   nil,
    22,   nil,   nil,   nil,   nil,   233,   nil,   nil,   nil,    22,
   nil,   nil,    27,   nil,   nil,   nil,    22,    32,    45,    27,
   nil,    43,    27,    22,    49,    50,    22,    28,   nil,   232,
   nil,   nil,    50,   nil,    32,    50,    18,   232,    43,   nil,
   nil,    36,   nil,    32,    18,   nil,   nil,    43,   nil,   nil,
    32,    49,   nil,   nil,    43,   nil,   nil,    32,   237,   nil,
    32,    43,   nil,   nil,    43,    40,   237,   nil,    18,    45,
   nil,    36,   nil,    40,   nil,   148,   nil,   nil,    49,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    49,   nil,   nil,    18,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,   144,    28,
   nil,   nil,    45,   nil,    49,   nil,   nil,    28,   186,    45,
   nil,   nil,    45,   nil,   232,   nil,   nil,   nil,    40,   nil,
   nil,   nil,   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,
   nil,    28,   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,
    18,   nil,   nil,   237,   215,   nil,   nil,   nil,   215,   nil,
   nil,   234,    28,   nil,   nil,   nil,   nil,   232,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   232,    49,   nil,    40,
   nil,   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,
    18,   nil,   nil,    18,   nil,   nil,   237,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   237,   nil,   nil,   nil,   nil,
   nil,   nil,    40,    28,   nil,   nil,   nil,   nil,   nil,    40,
   nil,   nil,    40,   nil,    36,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    49,   nil,   nil,   nil,    28,   nil,   nil,    49,
    49,   nil,   nil,    28,   nil,   nil,    28,    49,   nil,    49,
   nil,   nil,   nil,   215,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    49,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   234,
   nil,   nil,   nil,   nil,   nil,   nil,    36,   234,   nil,   nil,
   nil,   nil,    49,   nil,    36,   nil,   144,   nil,    62,   nil,
   nil,   nil,   nil,   nil,   nil,    89,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    49,    36,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   116,
   nil,   nil,   nil,   nil,   117,   nil,   nil,   nil,   nil,    36,
   nil,   nil,   nil,    49,   nil,   nil,   215,   nil,   nil,   156,
   nil,   nil,   nil,   nil,   176,   nil,   nil,   nil,   nil,   nil,
    49,   nil,   nil,   nil,   234,   nil,   nil,   188,   nil,    49,
   189,   190,   191,   nil,   nil,   nil,    49,   nil,   nil,   nil,
   nil,   202,   nil,    49,   nil,   nil,    49,   nil,   nil,   nil,
    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   234,   nil,   nil,
   nil,   248,   nil,   nil,   nil,   nil,   234,   nil,   nil,   nil,
   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,
    36,   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   nil,   271,   272,   273,
   nil,   275,   276,   nil,   280,   281,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    89,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   340,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   343,   nil,   nil,   nil,   nil,   nil,   nil,
   348,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   355,
   356,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   363,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   377,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   116 ]

racc_goto_check = [
    35,     2,    62,     5,    34,     4,    31,    40,    69,    71,
    86,    56,    37,    28,    83,    53,    60,    73,    65,    40,
     3,    44,    79,    45,    67,    63,    35,     6,    43,    48,
    35,    29,    75,    48,    34,    47,    22,     8,    36,    23,
    10,    66,    38,    28,    22,     8,    59,    23,    10,    49,
    70,    61,    72,    42,    74,    41,    76,    35,    77,    78,
    33,    34,    80,    81,    82,    30,    84,    75,    36,    29,
    28,    85,    38,     3,     1,     5,    63,    43,    29,    29,
   nil,   nil,   nil,     5,    35,     6,   nil,   nil,    34,   nil,
    27,   nil,    35,     6,   nil,    36,    34,    28,   nil,    38,
   nil,    67,   nil,   nil,   nil,    28,   nil,    34,     3,    44,
    35,    34,   nil,   nil,    34,     3,    44,   nil,   nil,   nil,
    27,   nil,    36,    56,   nil,   nil,    38,   nil,     5,   nil,
    36,   nil,   nil,   nil,    38,    45,    69,    71,    48,    44,
   nil,   nil,   nil,   nil,    69,    29,    29,    27,    36,   nil,
   nil,   nil,    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    56,    55,   nil,    65,   nil,   nil,   nil,    65,   nil,   nil,
   nil,   nil,   nil,    35,    27,   nil,   nil,    34,   nil,   nil,
   nil,   nil,    27,   nil,   nil,   nil,    28,   nil,   nil,   nil,
    26,    55,   nil,   nil,   nil,   nil,    44,   nil,   nil,   nil,
    60,    65,    65,   nil,    44,    79,   nil,   nil,   nil,   nil,
    37,    36,    31,    53,    56,    38,    34,    73,     3,     5,
    26,    69,     5,    83,    24,    44,    86,    43,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    35,   nil,
   nil,   nil,    34,   nil,   nil,    35,    35,    26,   nil,    34,
    34,   nil,     4,    35,    24,    35,   nil,    34,    28,    34,
   nil,   nil,    26,    27,    69,    71,    28,   nil,    28,   nil,
   nil,    55,   nil,    69,    26,   nil,    36,    35,   nil,   nil,
    38,    34,    26,    36,    36,    31,   nil,    38,    38,   nil,
    28,    36,   nil,    36,   nil,    38,   nil,    38,    35,    40,
    26,   nil,    34,   nil,   nil,   nil,   nil,   nil,    24,    34,
   nil,    28,   nil,   nil,   nil,    36,    24,   nil,   nil,    38,
   nil,   nil,   nil,    35,   nil,   nil,   nil,    34,   nil,   nil,
   nil,   nil,    62,   nil,    55,    27,    36,   nil,   nil,   nil,
    38,   nil,   nil,    27,   nil,    27,   nil,   nil,   nil,    35,
     2,   nil,   nil,    34,   nil,   nil,   nil,     4,   nil,   nil,
   nil,    36,    28,    26,    39,    38,    35,    27,   nil,   nil,
    34,   nil,   nil,   nil,   nil,    35,   nil,   nil,   nil,    34,
   nil,   nil,    35,   nil,   nil,   nil,    34,    36,    27,    35,
   nil,    38,    35,    34,    39,    28,    34,    24,   nil,    55,
   nil,   nil,    28,   nil,    36,    28,    55,    55,    38,   nil,
   nil,    25,   nil,    36,    55,   nil,   nil,    38,   nil,   nil,
    36,    39,   nil,   nil,    38,   nil,   nil,    36,    26,   nil,
    36,    38,   nil,   nil,    38,    26,    26,   nil,    55,    27,
   nil,    25,   nil,    26,   nil,    26,   nil,   nil,    39,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,    55,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,    25,    24,
   nil,   nil,    27,   nil,    39,   nil,   nil,    24,    26,    27,
   nil,   nil,    27,   nil,    55,   nil,   nil,   nil,    26,   nil,
   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,
   nil,    24,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,
    55,   nil,   nil,    26,    25,   nil,   nil,   nil,    25,   nil,
   nil,    25,    24,   nil,   nil,   nil,   nil,    55,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    55,    39,   nil,    26,
   nil,   nil,   nil,    55,   nil,   nil,   nil,   nil,   nil,   nil,
    55,   nil,   nil,    55,   nil,   nil,    26,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,
   nil,   nil,    26,    24,   nil,   nil,   nil,   nil,   nil,    26,
   nil,   nil,    26,   nil,    25,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    39,   nil,   nil,   nil,    24,   nil,   nil,    39,
    39,   nil,   nil,    24,   nil,   nil,    24,    39,   nil,    39,
   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,
   nil,   nil,   nil,   nil,   nil,   nil,    25,    25,   nil,   nil,
   nil,   nil,    39,   nil,    25,   nil,    25,   nil,    32,   nil,
   nil,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,    25,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,
   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,    25,
   nil,   nil,   nil,    39,   nil,   nil,    25,   nil,   nil,    32,
   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,
    39,   nil,   nil,   nil,    25,   nil,   nil,    32,   nil,    39,
    32,    32,    32,   nil,   nil,   nil,    39,   nil,   nil,   nil,
   nil,    32,   nil,    39,   nil,   nil,    39,   nil,   nil,   nil,
    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,
   nil,    32,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,
   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,
    25,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,    32,    32,
    32,    32,    32,    32,    32,    32,   nil,    32,    32,    32,
   nil,    32,    32,   nil,    32,    32,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,
    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,
    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32 ]

racc_goto_pointer = [
   nil,    74,     1,    20,   -25,  -170,     1,   nil,   -47,   nil,
   -44,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -48,    28,   224,   411,   190,    90,    13,   -35,
    30,   -29,   660,  -256,     4,     0,    38,   -45,    42,   364,
     6,    -2,   -73,   -29,  -112,   -85,   nil,     8,   -74,  -256,
   nil,   nil,   nil,   -42,   nil,   161,   -97,   nil,   nil,  -265,
     1,   -38,   -37,  -296,   nil,    -3,  -205,  -222,   nil,  -102,
   -60,  -101,  -186,   -30,     7,   -21,  -142,    37,   -36,     1,
  -143,   -59,   -58,  -108,  -227,    -1,   -62,   nil ]

racc_goto_default = [
   nil,   nil,   277,   216,    42,   nil,    52,     5,     7,    12,
    17,    20,    23,    29,    37,    41,    46,    51,     4,     6,
    11,   131,    19,   nil,    67,    70,    74,    76,    79,   nil,
   nil,    61,   178,   283,    65,    68,    71,    73,    75,    78,
     3,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   218,
   305,   209,   210,   nil,   132,    63,   136,   140,   229,   231,
   nil,   nil,   nil,   nil,    60,    14,   nil,   nil,   325,    33,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    98,   nil,   nil,   nil,   nil,   nil,   nil,   184 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 72, :_reduce_3,
  2, 72, :_reduce_4,
  1, 75, :_reduce_5,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  3, 90, :_reduce_36,
  3, 90, :_reduce_37,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  4, 84, :_reduce_50,
  5, 84, :_reduce_51,
  3, 84, :_reduce_52,
  2, 84, :_reduce_53,
  1, 100, :_reduce_54,
  3, 100, :_reduce_55,
  1, 99, :_reduce_56,
  3, 99, :_reduce_57,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  5, 76, :_reduce_69,
  5, 76, :_reduce_70,
  5, 76, :_reduce_71,
  5, 88, :_reduce_72,
  2, 77, :_reduce_73,
  1, 116, :_reduce_74,
  2, 116, :_reduce_75,
  6, 78, :_reduce_76,
  2, 78, :_reduce_77,
  3, 117, :_reduce_78,
  3, 117, :_reduce_79,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  3, 118, :_reduce_82,
  1, 119, :_reduce_none,
  3, 119, :_reduce_84,
  1, 120, :_reduce_85,
  1, 120, :_reduce_86,
  3, 121, :_reduce_87,
  3, 121, :_reduce_88,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  4, 123, :_reduce_91,
  1, 111, :_reduce_92,
  3, 111, :_reduce_93,
  0, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 109, :_reduce_96,
  1, 104, :_reduce_97,
  1, 105, :_reduce_98,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  3, 79, :_reduce_106,
  3, 79, :_reduce_107,
  3, 89, :_reduce_108,
  0, 113, :_reduce_109,
  1, 113, :_reduce_110,
  3, 113, :_reduce_111,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  3, 126, :_reduce_115,
  3, 128, :_reduce_116,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  0, 115, :_reduce_119,
  1, 115, :_reduce_120,
  3, 115, :_reduce_121,
  4, 108, :_reduce_122,
  3, 108, :_reduce_123,
  1, 96, :_reduce_124,
  2, 96, :_reduce_125,
  2, 130, :_reduce_126,
  1, 131, :_reduce_127,
  2, 131, :_reduce_128,
  1, 106, :_reduce_129,
  4, 94, :_reduce_130,
  4, 94, :_reduce_131,
  5, 82, :_reduce_132,
  4, 82, :_reduce_133,
  2, 81, :_reduce_134,
  5, 132, :_reduce_135,
  4, 132, :_reduce_136,
  0, 133, :_reduce_none,
  2, 133, :_reduce_138,
  4, 133, :_reduce_139,
  3, 133, :_reduce_140,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  3, 102, :_reduce_143,
  3, 102, :_reduce_144,
  3, 102, :_reduce_145,
  3, 102, :_reduce_146,
  3, 102, :_reduce_147,
  3, 102, :_reduce_148,
  3, 102, :_reduce_149,
  3, 102, :_reduce_150,
  3, 102, :_reduce_151,
  3, 102, :_reduce_152,
  2, 102, :_reduce_153,
  3, 102, :_reduce_154,
  3, 102, :_reduce_155,
  3, 102, :_reduce_156,
  3, 102, :_reduce_157,
  3, 102, :_reduce_158,
  3, 102, :_reduce_159,
  2, 102, :_reduce_160,
  3, 102, :_reduce_161,
  3, 102, :_reduce_162,
  3, 102, :_reduce_163,
  5, 80, :_reduce_164,
  1, 136, :_reduce_165,
  2, 136, :_reduce_166,
  5, 137, :_reduce_167,
  4, 137, :_reduce_168,
  1, 138, :_reduce_169,
  3, 138, :_reduce_170,
  3, 97, :_reduce_171,
  1, 140, :_reduce_none,
  4, 140, :_reduce_173,
  1, 142, :_reduce_none,
  3, 142, :_reduce_175,
  3, 141, :_reduce_176,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_185,
  1, 139, :_reduce_none,
  1, 143, :_reduce_187,
  1, 144, :_reduce_none,
  3, 144, :_reduce_189,
  2, 83, :_reduce_190,
  6, 85, :_reduce_191,
  5, 85, :_reduce_192,
  7, 86, :_reduce_193,
  6, 86, :_reduce_194,
  6, 87, :_reduce_195,
  5, 87, :_reduce_196,
  1, 110, :_reduce_197,
  1, 110, :_reduce_198,
  1, 147, :_reduce_199,
  3, 147, :_reduce_200,
  1, 149, :_reduce_201,
  1, 150, :_reduce_202,
  1, 150, :_reduce_203,
  1, 150, :_reduce_204,
  1, 150, :_reduce_none,
  0, 73, :_reduce_206,
  0, 151, :_reduce_207,
  1, 145, :_reduce_none,
  3, 145, :_reduce_209,
  4, 145, :_reduce_210,
  1, 152, :_reduce_none,
  3, 152, :_reduce_212,
  3, 153, :_reduce_213,
  1, 153, :_reduce_214,
  1, 148, :_reduce_none,
  2, 148, :_reduce_216,
  1, 146, :_reduce_none,
  2, 146, :_reduce_218,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 95, :_reduce_221,
  3, 107, :_reduce_222,
  4, 107, :_reduce_223,
  2, 107, :_reduce_224,
  1, 103, :_reduce_none,
  0, 114, :_reduce_none,
  1, 114, :_reduce_227,
  1, 135, :_reduce_228,
  3, 134, :_reduce_229,
  4, 134, :_reduce_230,
  2, 134, :_reduce_231,
  1, 155, :_reduce_none,
  3, 155, :_reduce_233,
  3, 156, :_reduce_234,
  1, 157, :_reduce_235,
  1, 157, :_reduce_236,
  4, 125, :_reduce_237,
  1, 98, :_reduce_none,
  4, 98, :_reduce_239 ]

racc_reduce_n = 240

racc_shift_n = 400

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68,
  :MODULO => 69 }

racc_nt_base = 70

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "MODULO",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "unlessstatement",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "keyword",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "expressions",
  "funcvalues",
  "rvalue",
  "expression",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "funcrvalue",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "param_name",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 34)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 37)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 46)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'grammar.ra', 89)
  def _reduce_36(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 92)
  def _reduce_37(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'grammar.ra', 107)
  def _reduce_50(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 114)
  def _reduce_51(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 120)
  def _reduce_52(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 127)
  def _reduce_53(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 134)
  def _reduce_54(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 137)
  def _reduce_55(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 141)
  def _reduce_56(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 142)
  def _reduce_57(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

module_eval(<<'.,.,', 'grammar.ra', 157)
  def _reduce_69(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 160)
  def _reduce_70(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 163)
  def _reduce_71(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 170)
  def _reduce_72(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 177)
  def _reduce_73(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 193)
  def _reduce_74(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 194)
  def _reduce_75(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 199)
  def _reduce_76(val, _values, result)
      @lexer.commentpop
  type = val[0].value.downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 217)
  def _reduce_77(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 235)
  def _reduce_78(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 243)
  def _reduce_79(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 80 omitted

# reduce 81 omitted

module_eval(<<'.,.,', 'grammar.ra', 256)
  def _reduce_82(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 83 omitted

module_eval(<<'.,.,', 'grammar.ra', 261)
  def _reduce_84(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 265)
  def _reduce_85(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 266)
  def _reduce_86(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 269)
  def _reduce_87(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 274)
  def _reduce_88(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 89 omitted

# reduce 90 omitted

module_eval(<<'.,.,', 'grammar.ra', 283)
  def _reduce_91(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 286)
  def _reduce_92(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 288)
  def _reduce_93(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

module_eval(<<'.,.,', 'grammar.ra', 296)
  def _reduce_96(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 300)
  def _reduce_97(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 304)
  def _reduce_98(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

module_eval(<<'.,.,', 'grammar.ra', 316)
  def _reduce_106(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 322)
  def _reduce_107(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 326)
  def _reduce_108(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 332)
  def _reduce_109(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 334)
  def _reduce_110(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 336)
  def _reduce_111(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

module_eval(<<'.,.,', 'grammar.ra', 345)
  def _reduce_115(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 349)
  def _reduce_116(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

module_eval(<<'.,.,', 'grammar.ra', 358)
  def _reduce_119(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 360)
  def _reduce_120(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 362)
  def _reduce_121(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 368)
  def _reduce_122(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 373)
  def _reduce_123(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 379)
  def _reduce_124(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 380)
  def _reduce_125(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 382)
  def _reduce_126(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 384)
  def _reduce_127(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 385)
  def _reduce_128(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 388)
  def _reduce_129(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 392)
  def _reduce_130(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 395)
  def _reduce_131(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 399)
  def _reduce_132(val, _values, result)
      @lexer.commentpop
  args = {
    :test => ast(AST::Not, :value => val[1]),
    :statements => val[3]
  }

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 408)
  def _reduce_133(val, _values, result)
        @lexer.commentpop
    args = {
      :test => ast(AST::Not, :value => val[1]), 
      :statements => ast(AST::Nop)
    }
    result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 417)
  def _reduce_134(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 421)
  def _reduce_135(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 432)
  def _reduce_136(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 137 omitted

module_eval(<<'.,.,', 'grammar.ra', 445)
  def _reduce_138(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 448)
  def _reduce_139(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 452)
  def _reduce_140(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'grammar.ra', 471)
  def _reduce_143(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 474)
  def _reduce_144(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 477)
  def _reduce_145(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 480)
  def _reduce_146(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 483)
  def _reduce_147(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 486)
  def _reduce_148(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 489)
  def _reduce_149(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 492)
  def _reduce_150(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 495)
  def _reduce_151(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 498)
  def _reduce_152(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 501)
  def _reduce_153(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 504)
  def _reduce_154(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 507)
  def _reduce_155(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 510)
  def _reduce_156(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 513)
  def _reduce_157(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 516)
  def _reduce_158(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 519)
  def _reduce_159(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 522)
  def _reduce_160(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 525)
  def _reduce_161(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 528)
  def _reduce_162(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 531)
  def _reduce_163(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 535)
  def _reduce_164(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 539)
  def _reduce_165(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 541)
  def _reduce_166(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 546)
  def _reduce_167(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 549)
  def _reduce_168(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 559)
  def _reduce_169(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 561)
  def _reduce_170(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 566)
  def _reduce_171(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 172 omitted

module_eval(<<'.,.,', 'grammar.ra', 571)
  def _reduce_173(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 174 omitted

module_eval(<<'.,.,', 'grammar.ra', 577)
  def _reduce_175(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 586)
  def _reduce_176(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

module_eval(<<'.,.,', 'grammar.ra', 598)
  def _reduce_185(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 186 omitted

module_eval(<<'.,.,', 'grammar.ra', 603)
  def _reduce_187(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'grammar.ra', 605)
  def _reduce_189(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 608)
  def _reduce_190(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 618)
  def _reduce_191(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 626)
  def _reduce_192(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 634)
  def _reduce_193(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 641)
  def _reduce_194(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 650)
  def _reduce_195(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 655)
  def _reduce_196(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 659)
  def _reduce_197(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 660)
  def _reduce_198(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 665)
  def _reduce_199(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 668)
  def _reduce_200(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 673)
  def _reduce_201(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 676)
  def _reduce_202(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 677)
  def _reduce_203(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 678)
  def _reduce_204(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 205 omitted

module_eval(<<'.,.,', 'grammar.ra', 682)
  def _reduce_206(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 686)
  def _reduce_207(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 208 omitted

module_eval(<<'.,.,', 'grammar.ra', 691)
  def _reduce_209(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 694)
  def _reduce_210(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 211 omitted

module_eval(<<'.,.,', 'grammar.ra', 700)
  def _reduce_212(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 706)
  def _reduce_213(val, _values, result)
     result = [val[0][:value], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 707)
  def _reduce_214(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 215 omitted

module_eval(<<'.,.,', 'grammar.ra', 711)
  def _reduce_216(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 217 omitted

module_eval(<<'.,.,', 'grammar.ra', 716)
  def _reduce_218(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 219 omitted

# reduce 220 omitted

module_eval(<<'.,.,', 'grammar.ra', 722)
  def _reduce_221(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 725)
  def _reduce_222(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 726)
  def _reduce_223(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 727)
  def _reduce_224(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 225 omitted

# reduce 226 omitted

module_eval(<<'.,.,', 'grammar.ra', 732)
  def _reduce_227(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 735)
  def _reduce_228(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 739)
  def _reduce_229(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 746)
  def _reduce_230(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 752)
  def _reduce_231(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 232 omitted

module_eval(<<'.,.,', 'grammar.ra', 757)
  def _reduce_233(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 766)
  def _reduce_234(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 769)
  def _reduce_235(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 770)
  def _reduce_236(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 773)
  def _reduce_237(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 238 omitted

module_eval(<<'.,.,', 'grammar.ra', 778)
  def _reduce_239(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
