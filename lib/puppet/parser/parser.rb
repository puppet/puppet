#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 854)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'40,41,223,222,94,178,103,94,392,90,269,391,396,-141,-203,238,233,-141',
'280,297,395,-197,93,177,234,236,235,237,44,133,52,53,296,38,54,271,55',
'42,27,-200,45,50,35,40,41,37,92,240,239,36,432,227,228,230,229,231,232',
'-115,225,226,56,40,41,312,-204,224,43,132,393,66,134,44,382,52,53,392',
'38,54,391,55,42,27,-62,45,50,35,40,41,37,56,308,307,36,-149,84,66,308',
'307,42,254,-131,133,50,56,280,297,37,311,-62,43,36,280,278,177,44,310',
'52,53,365,38,54,56,55,42,27,277,45,50,35,40,41,37,359,313,314,36,431',
'280,297,132,225,226,134,295,238,233,56,224,-149,-149,-149,-149,43,234',
'236,235,237,44,133,52,53,56,38,54,98,55,42,27,97,45,50,35,40,41,37,37',
'240,239,36,429,227,228,230,229,231,232,355,225,226,56,40,41,230,229',
'224,43,132,225,226,134,44,295,52,53,224,38,54,-65,55,42,27,-200,45,50',
'35,40,41,37,56,225,226,36,339,84,98,209,224,42,146,350,45,50,56,40,41',
'37,214,117,43,36,98,213,363,44,97,52,53,408,38,54,56,55,42,27,275,45',
'50,35,40,41,37,178,274,-216,36,426,84,124,366,209,42,81,280,297,50,56',
'40,41,37,177,214,43,36,-64,273,213,44,-198,52,53,367,38,54,56,55,42',
'27,66,45,50,35,40,41,37,209,280,399,36,402,84,98,368,209,42,146,214',
'45,50,56,335,213,37,336,214,43,36,40,41,213,44,-198,52,53,246,38,54',
'56,55,42,27,370,45,50,35,40,41,37,372,373,374,36,289,40,41,-61,-199',
'102,291,-199,385,376,56,40,41,249,100,101,43,266,-61,266,379,44,-199',
'52,53,273,38,54,-64,55,42,27,-198,45,50,35,40,41,37,249,263,-66,36,98',
'84,230,229,97,42,254,225,226,50,56,40,41,37,224,334,43,36,-142,280,286',
'44,-142,52,53,348,38,54,56,55,42,27,299,45,50,35,40,41,37,-63,177,285',
'36,410,84,280,286,305,42,254,308,307,50,56,98,233,37,90,97,43,36,204',
'185,234,44,182,52,53,102,38,54,56,55,42,27,-203,45,50,35,40,41,37,-202',
'117,-200,36,-41,-41,-41,-41,227,228,230,229,231,232,56,225,226,66,-199',
'-201,43,-196,224,-198,176,156,154,158,153,155,84,151,159,160,201,192',
'388,150,186,389,40,41,37,301,161,149,187,341,136,302,40,41,-198,337',
'117,124,118,56,60,61,62,63,157,163,60,61,62,63,44,403,52,53,116,38,54',
'372,55,42,27,405,45,50,35,84,123,37,99,42,81,36,89,50,356,88,87,37,115',
'40,41,36,56,117,114,118,411,295,43,40,41,86,56,117,301,118,415,-63,-196',
'40,41,116,-197,117,-199,118,-39,-39,-39,-39,65,116,84,418,419,66,42',
'81,421,-66,50,116,84,-247,37,115,42,81,36,423,50,114,84,424,37,115,42',
'81,36,56,50,114,-148,427,37,115,40,41,36,56,117,114,118,301,56,56,40',
'41,57,56,117,433,118,434,,,40,41,116,,117,,118,-45,-45,-45,-45,,116',
'84,,,,42,81,,,50,116,84,,37,115,42,81,36,,50,114,84,,37,115,42,81,36',
'56,50,114,,,37,115,40,41,36,56,117,114,118,,,,40,41,,56,117,,118,,,',
'40,41,116,,117,,118,,,,,,116,84,,,,42,81,,,50,116,84,,37,115,42,81,36',
',50,114,84,,37,115,42,81,36,56,50,114,,,37,115,40,41,36,56,117,114,118',
',,,40,41,,56,117,,118,,,,40,41,116,,117,,118,,,,,,116,84,,,,42,81,,',
'50,116,84,,37,115,42,81,36,,50,114,84,,37,115,42,81,36,56,50,114,,,37',
'115,40,41,36,56,117,114,118,,,,40,41,,56,117,,118,,,,40,41,116,,117',
',118,,,,,,116,84,,,,42,81,,,50,116,84,,37,115,42,81,36,,50,114,84,,37',
'115,42,81,36,56,50,114,,,37,115,40,41,36,56,82,114,-216,,,,40,41,,56',
'117,,118,,,,40,41,67,,117,,118,,,,,,116,84,,,,42,81,,,50,116,84,,37',
',42,81,36,,50,,84,,37,115,42,81,36,56,50,114,,,37,115,40,41,36,56,117',
'114,118,,,,40,41,,56,117,,118,,,,40,41,116,174,117,,118,,,,,,116,84',
',,,42,81,,,50,116,84,,37,115,42,81,36,,50,114,84,,37,115,42,81,36,56',
'50,114,,,37,115,40,41,36,56,117,114,118,,,,40,41,,56,117,,118,,,,40',
'41,116,,117,,118,,,,40,41,116,84,,,,42,81,,,50,116,84,,37,115,42,81',
'36,,50,114,84,,37,115,42,81,36,56,50,114,84,,37,115,42,254,36,56,50',
'114,,,37,,40,41,36,56,117,,118,,,,40,41,,56,117,180,118,,,,40,41,116',
',,,,,227,228,230,229,116,84,,225,226,42,81,,,50,224,84,,37,115,42,81',
'36,,50,114,84,,37,115,42,254,36,56,50,114,,,37,,40,41,36,56,117,,118',
',,,40,41,,56,117,,118,227,228,230,229,,116,,225,226,,,,,,224,116,84',
',,,42,81,,,50,,84,,37,115,42,81,36,,50,114,,,37,115,40,41,36,56,117',
'114,118,,,,,,,56,,,,,,,40,41,116,184,117,,118,,,,40,41,,84,117,,,42',
'81,,,50,116,283,,37,115,,,36,,,114,84,,,,42,81,,56,50,,84,,37,115,42',
'81,36,,50,114,,,37,,40,41,36,56,117,,118,,276,,,,,56,,,,,238,233,,,116',
',,,,234,236,235,237,,,84,,,,42,81,,,50,,,,37,115,,,36,240,239,114,,227',
'228,230,229,231,232,56,225,226,40,41,,,117,224,118,,,,40,41,,,117,,118',
',,,40,41,116,,117,,118,,,,,,116,84,,,,42,81,,,50,116,84,,37,115,42,81',
'36,,50,114,84,,37,115,42,81,36,56,50,114,,,37,115,40,41,36,56,117,114',
'118,,,,40,41,,56,117,,118,,,,40,41,116,,117,,118,,,,,,116,84,,,,42,81',
',,50,116,84,,37,115,42,81,36,,50,114,84,,37,115,42,81,36,56,50,114,',
',37,115,40,41,36,56,117,114,118,,,,40,41,,56,117,,118,,,,40,41,116,',
'117,,,,,,40,41,116,84,,,257,42,81,,,50,,84,,37,115,42,81,36,,50,114',
'84,,37,115,42,254,36,56,50,114,84,,37,,42,254,36,56,50,40,41,,37,117',
'180,118,36,56,,40,41,,,117,,118,,56,,40,41,116,,117,,118,,,,,,116,84',
',,,42,81,,,50,116,84,,37,115,42,81,36,,50,114,84,,37,115,42,81,36,56',
'50,114,,,37,115,40,41,36,56,117,114,118,,,,40,41,,56,117,,118,,,,,,116',
',,,,,,,,,116,84,,,,42,81,,,50,,84,,37,115,42,81,36,,50,114,,251,37,115',
',,36,56,,114,238,233,,,,,252,56,,234,236,235,237,,,238,233,,,,,,,,234',
'236,235,237,,,,,240,239,,,227,228,230,229,231,232,,225,226,,,240,239',
',224,227,228,230,229,231,232,253,225,226,,,,,,224,238,233,,,,,,,,234',
'236,235,237,,,238,233,,,,,,,,234,236,235,237,,,,,240,239,,,227,228,230',
'229,231,232,,225,226,,,240,239,,224,227,228,230,229,231,232,,225,226',
'238,233,,,,224,,,,234,236,235,237,,,238,233,,,,,,,,234,236,235,237,',
',,,240,239,,,227,228,230,229,231,232,,225,226,,,240,239,,224,227,228',
'230,229,231,232,,225,226,238,233,,,,224,,,,234,236,235,237,,,238,233',
',,,,,,,234,236,235,237,,,,,240,239,,,227,228,230,229,231,232,,225,226',
',,240,239,,224,227,228,230,229,231,232,,225,226,238,233,,,,224,,,,234',
'236,235,237,,,238,233,,,,,,,,234,236,235,237,,,,,240,239,,,227,228,230',
'229,231,232,,225,226,,,,,,224,227,228,230,229,231,232,,225,226,238,233',
',,,224,,,,234,236,235,237,,,238,233,,,,,,,,234,236,235,237,,,,,,239',
',,227,228,230,229,231,232,,225,226,,,,,,224,227,228,230,229,231,232',
',225,226,238,233,,,,224,,,333,234,236,235,237,,,238,233,,,,,,,,234,236',
'235,237,,,,,240,239,,,227,228,230,229,231,232,,225,226,,,240,239,,224',
'227,228,230,229,231,232,,225,226,238,233,,,,224,,,,234,236,235,237,',
',238,233,,,,,,,,234,236,235,237,,,,,240,239,,,227,228,230,229,231,232',
',225,226,,,240,239,,224,227,228,230,229,231,232,,225,226,238,233,,,',
'224,,,,234,236,235,237,,,238,233,,,,,,,,234,236,235,237,,,,,,,233,,227',
'228,230,229,231,232,234,225,226,,,240,239,233,224,227,228,230,229,231',
'232,234,225,226,,,,,,224,,233,,227,228,230,229,231,232,234,225,226,',
',,,,224,227,228,230,229,231,232,,225,226,,,,,,224,,,,227,228,230,229',
'231,232,,225,226,156,154,158,153,155,224,151,159,160,167,203,,150,152',
',,,,,161,149,162,156,154,158,153,155,,151,159,160,167,203,,150,152,',
'157,163,,,161,149,162,156,154,158,153,155,,151,159,160,167,203,,150',
'152,,157,163,,,161,149,162,156,154,158,153,155,,151,159,160,167,165',
',150,152,,157,163,,,161,149,162,156,154,158,153,155,,151,159,160,167',
'165,,150,152,,157,163,,,161,149,162,156,154,158,153,155,,151,159,160',
'167,165,,150,152,,157,163,,,161,149,162,227,228,230,229,231,232,,225',
'226,,,,,,224,157,163,227,228,230,229,231,232,,225,226,,,,,,224' ]
        racc_action_table = arr = ::Array.new(2480, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,111,111,72,81,39,33,341,33,129,341,344,277,39,111,111,277,183,183',
'344,72,33,81,111,111,111,111,0,55,0,0,183,0,0,129,0,0,0,31,0,0,0,425',
'425,0,33,111,111,0,425,111,111,111,111,111,111,187,111,111,0,342,342',
'215,186,111,0,55,342,26,55,425,309,425,425,389,425,425,389,425,425,425',
'26,425,425,425,2,2,425,55,215,215,425,285,342,105,309,309,342,342,192',
'269,342,425,282,282,342,210,105,425,342,173,173,192,2,210,2,2,282,2',
'2,342,2,2,2,173,2,2,2,419,419,2,272,216,219,2,419,216,216,269,321,321',
'269,182,219,219,2,321,285,285,285,285,2,219,219,219,219,419,271,419',
'419,269,419,419,34,419,419,419,34,419,419,419,418,418,419,34,219,219',
'419,418,219,219,219,219,219,219,267,219,219,419,59,59,320,320,219,419',
'271,320,320,271,418,266,418,418,320,418,418,108,418,418,418,108,418',
'418,418,251,251,418,271,322,322,418,251,59,59,92,322,59,59,264,59,59',
'418,348,348,59,92,348,418,59,355,92,278,251,355,251,251,355,251,251',
'59,251,251,251,168,251,251,251,405,405,251,146,165,146,251,405,348,263',
'284,209,348,348,284,284,348,251,64,64,348,146,209,251,348,107,164,209',
'405,107,405,405,286,405,405,348,405,405,405,145,405,405,405,350,350',
'405,93,346,346,405,350,64,64,288,306,64,64,93,64,64,405,245,93,64,245',
'306,405,64,118,118,306,350,142,350,350,118,350,350,64,350,350,350,292',
'350,350,350,181,181,350,293,295,298,350,181,336,336,104,141,38,181,104',
'336,300,350,398,398,118,38,38,350,128,23,127,303,181,23,181,181,304',
'181,181,24,181,181,181,24,181,181,181,287,287,181,336,126,109,181,54',
'398,319,319,54,398,398,319,319,398,181,253,253,398,319,244,181,398,174',
'244,244,287,174,287,287,258,287,287,398,287,287,287,188,287,287,287',
'356,356,287,106,254,179,287,356,253,179,179,205,253,253,205,205,253',
'287,53,328,253,95,53,287,253,91,88,328,356,86,356,356,84,356,356,253',
'356,356,356,83,356,356,356,89,89,356,80,89,79,356,7,7,7,7,328,328,328',
'328,328,328,356,328,328,77,75,73,356,71,328,70,68,89,89,89,89,89,89',
'89,89,89,89,89,338,89,89,340,252,252,89,189,89,89,89,252,57,190,373',
'373,193,248,373,52,373,89,21,21,21,21,89,89,19,19,19,19,252,351,252',
'252,373,252,252,352,252,252,252,353,252,252,252,373,46,252,35,373,373',
'252,32,373,268,30,29,373,373,230,230,373,252,230,373,230,371,372,252',
'229,229,28,373,229,378,229,380,25,194,228,228,230,195,228,197,228,5',
'5,5,5,22,229,230,392,395,199,230,230,397,20,230,228,229,399,230,230',
'229,229,230,401,229,230,228,404,229,229,228,228,229,230,228,229,201',
'409,228,228,227,227,228,229,227,228,227,202,226,225,232,232,1,228,232',
'428,232,430,,,233,233,227,,233,,233,9,9,9,9,,232,227,,,,227,227,,,227',
'233,232,,227,227,232,232,227,,232,227,233,,232,232,233,233,232,227,233',
'232,,,233,233,224,224,233,232,224,233,224,,,,223,223,,233,223,,223,',
',,41,41,224,,41,,41,,,,,,223,224,,,,224,224,,,224,41,223,,224,224,223',
'223,224,,223,224,41,,223,223,41,41,223,224,41,223,,,41,41,43,43,41,223',
'43,41,43,,,,44,44,,41,44,,44,,,,45,45,43,,45,,45,,,,,,44,43,,,,43,43',
',,43,45,44,,43,43,44,44,43,,44,43,45,,44,44,45,45,44,43,45,44,,,45,45',
'231,231,45,44,231,45,231,,,,234,234,,45,234,,234,,,,235,235,231,,235',
',235,,,,,,234,231,,,,231,231,,,231,235,234,,231,231,234,234,231,,234',
'231,235,,234,234,235,235,234,231,235,234,,,235,235,27,27,235,234,27',
'235,27,,,,236,236,,235,236,,236,,,,66,66,27,,66,,66,,,,,,236,27,,,,27',
'27,,,27,66,236,,27,,236,236,27,,236,,66,,236,236,66,66,236,27,66,236',
',,66,66,67,67,66,236,67,66,67,,,,337,337,,66,337,,337,,,,237,237,67',
'67,237,,237,,,,,,337,67,,,,67,67,,,67,237,337,,67,67,337,337,67,,337',
'67,237,,337,337,237,237,337,67,237,337,,,237,237,238,238,237,337,238',
'237,238,,,,239,239,,237,239,,239,,,,240,240,238,,240,,240,,,,257,257',
'239,238,,,,238,238,,,238,240,239,,238,238,239,239,238,,239,238,240,',
'239,239,240,240,239,238,240,239,257,,240,240,257,257,240,239,257,240',
',,257,,114,114,257,240,114,,114,,,,82,82,,257,82,82,82,,,,396,396,114',
',,,,,323,323,323,323,82,114,,323,323,114,114,,,114,323,82,,114,114,82',
'82,114,,82,114,396,,82,82,396,396,82,114,396,82,,,396,,274,274,396,82',
'274,,274,,,,178,178,,396,178,,178,324,324,324,324,,274,,324,324,,,,',
',324,178,274,,,,274,274,,,274,,178,,274,274,178,178,274,,178,274,,,178',
'178,87,87,178,274,87,178,87,,,,,,,178,,,,,,,177,177,87,87,177,,177,',
',,176,176,,87,176,,,87,87,,,87,177,177,,87,87,,,87,,,87,177,,,,177,177',
',87,177,,176,,177,177,176,176,177,,176,177,,,176,,275,275,176,177,275',
',275,,172,,,,,176,,,,,172,172,,,275,,,,,172,172,172,172,,,275,,,,275',
'275,,,275,,,,275,275,,,275,172,172,275,,172,172,172,172,172,172,275',
'172,172,279,279,,,279,172,279,,,,391,391,,,391,,391,,,,94,94,279,,94',
',94,,,,,,391,279,,,,279,279,,,279,94,391,,279,279,391,391,279,,391,279',
'94,,391,391,94,94,391,279,94,391,,,94,94,291,291,94,391,291,94,291,',
',,100,100,,94,100,,100,,,,101,101,291,,101,,101,,,,,,100,291,,,,291',
'291,,,291,101,100,,291,291,100,100,291,,100,291,101,,100,100,101,101',
'100,291,101,100,,,101,101,102,102,101,100,102,101,102,,,,103,103,,101',
'103,,103,,,,299,299,102,,299,,,,,,123,123,103,102,,,123,102,102,,,102',
',103,,102,102,103,103,102,,103,102,299,,103,103,299,299,103,102,299',
'103,123,,299,,123,123,299,103,123,117,117,,123,117,117,117,123,299,',
'311,311,,,311,,311,,123,,310,310,117,,310,,310,,,,,,311,117,,,,117,117',
',,117,310,311,,117,117,311,311,117,,311,117,310,,311,311,310,310,311',
'117,310,311,,,310,310,116,116,310,311,116,310,116,,,,115,115,,310,115',
',115,,,,,,116,,,,,,,,,,115,116,,,,116,116,,,116,,115,,116,116,115,115',
'116,,115,116,,119,115,115,,,115,116,,115,119,119,,,,,121,115,,119,119',
'119,119,,,121,121,,,,,,,,121,121,121,121,,,,,119,119,,,119,119,119,119',
'119,119,,119,119,,,121,121,,119,121,121,121,121,121,121,122,121,121',
',,,,,121,122,122,,,,,,,,122,122,122,122,,,217,217,,,,,,,,217,217,217',
'217,,,,,122,122,,,122,122,122,122,122,122,,122,122,,,217,217,,122,217',
'217,217,217,217,217,,217,217,361,361,,,,217,,,,361,361,361,361,,,362',
'362,,,,,,,,362,362,362,362,,,,,361,361,,,361,361,361,361,361,361,,361',
'361,,,362,362,,361,362,362,362,362,362,362,,362,362,220,220,,,,362,',
',,220,220,220,220,,,218,218,,,,,,,,218,218,218,218,,,,,220,220,,,220',
'220,220,220,220,220,,220,220,,,218,218,,220,218,218,218,218,218,218',
',218,218,387,387,,,,218,,,,387,387,387,387,,,383,383,,,,,,,,383,383',
'383,383,,,,,387,387,,,387,387,387,387,387,387,,387,387,,,,,,387,383',
'383,383,383,383,383,,383,383,332,332,,,,383,,,,332,332,332,332,,,331',
'331,,,,,,,,331,331,331,331,,,,,,332,,,332,332,332,332,332,332,,332,332',
',,,,,332,331,331,331,331,331,331,,331,331,243,243,,,,331,,,243,243,243',
'243,243,,,413,413,,,,,,,,413,413,413,413,,,,,243,243,,,243,243,243,243',
'243,243,,243,243,,,413,413,,243,413,413,413,413,413,413,,413,413,175',
'175,,,,413,,,,175,175,175,175,,,364,364,,,,,,,,364,364,364,364,,,,,175',
'175,,,175,175,175,175,175,175,,175,175,,,364,364,,175,364,364,364,364',
'364,364,,364,364,384,384,,,,364,,,,384,384,384,384,,,369,369,,,,,,,',
'369,369,369,369,,,,,,,330,,384,384,384,384,384,384,330,384,384,,,369',
'369,329,384,369,369,369,369,369,369,329,369,369,,,,,,369,,327,,330,330',
'330,330,330,330,327,330,330,,,,,,330,329,329,329,329,329,329,,329,329',
',,,,,329,,,,327,327,327,327,327,327,,327,327,301,301,301,301,301,327',
'301,301,301,301,301,,301,301,,,,,,301,301,301,302,302,302,302,302,,302',
'302,302,302,302,,302,302,,301,301,,,302,302,302,90,90,90,90,90,,90,90',
'90,90,90,,90,90,,302,302,,,90,90,90,273,273,273,273,273,,273,273,273',
'273,273,,273,273,,90,90,,,273,273,273,65,65,65,65,65,,65,65,65,65,65',
',65,65,,273,273,,,65,65,65,204,204,204,204,204,,204,204,204,204,204',
',204,204,,65,65,,,204,204,204,326,326,326,326,326,326,,326,326,,,,,',
'326,204,204,325,325,325,325,325,325,,325,325,,,,,,325' ]
        racc_action_check = arr = ::Array.new(2480, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   652,    84,   nil,   nil,   537,   nil,   417,   nil,   604,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   477,
   594,   471,   596,   350,   360,   572,    63,   906,   515,   546,
   550,    16,   558,     1,   128,   518,   nil,   nil,   350,    -9,
   nil,   725,   nil,   772,   782,   792,   537,   nil,   nil,   nil,
   nil,   nil,   529,   412,   358,    27,   nil,   524,   nil,   188,
   nil,   nil,   nil,   nil,   274,  2374,   926,   973,   488,   nil,
   476,   474,    -2,   472,   nil,   471,   nil,   487,   nil,   455,
   453,    -1,  1127,   446,   456,   nil,   390,  1241,   416,   471,
  2330,   447,   201,   280,  1401,   443,   nil,   nil,   nil,   nil,
  1458,  1468,  1515,  1525,   335,    89,   414,   264,   188,   373,
   nil,    -2,   nil,   nil,  1117,  1664,  1654,  1587,   324,  1702,
   nil,  1717,  1768,  1545,   nil,   nil,   379,   346,   344,    -2,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   332,   307,   nil,   nil,   291,   255,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   272,   210,   nil,   nil,   243,   nil,
   nil,   nil,  1321,   100,   393,  2128,  1271,  1261,  1194,   428,
   nil,   342,   108,     7,   nil,   nil,    41,    34,   385,   507,
   505,   nil,    89,   505,   569,   573,   nil,   575,   nil,   603,
   nil,   613,   635,   nil,  2396,   395,   nil,   nil,   nil,   245,
    89,   nil,   nil,   nil,   nil,    41,   126,  1783,  1903,   127,
  1888,   nil,   nil,   715,   705,   587,   586,   638,   591,   581,
   571,   839,   648,   658,   849,   859,   916,   993,  1040,  1050,
  1060,   nil,   nil,  2068,   402,   310,   nil,   nil,   518,   nil,
   nil,   213,   514,   403,   410,   nil,   nil,  1070,   408,   nil,
   nil,   nil,   nil,   265,   221,   nil,   166,   149,   560,    99,
   nil,   156,   123,  2352,  1184,  1318,   nil,    -6,   217,  1381,
   nil,   nil,    93,   nil,   261,    85,   283,   385,   302,   nil,
   nil,  1448,   271,   335,   nil,   333,   nil,   nil,   340,  1535,
   351,  2286,  2308,   362,   364,   nil,   288,   nil,   nil,    47,
  1607,  1597,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   341,
   137,    80,   159,  1094,  1150,  2412,  2395,  2254,   431,  2236,
  2221,  2023,  2008,   nil,   nil,   nil,   350,   983,   503,   nil,
   506,   -23,    59,   nil,     0,   nil,   294,   nil,   231,   nil,
   299,   520,   539,   547,   nil,   204,   428,   nil,   nil,   nil,
   nil,  1828,  1843,   nil,  2143,   nil,   nil,   nil,   nil,  2203,
   nil,   511,   546,   524,   nil,   nil,   nil,   nil,   576,   nil,
   581,   nil,   nil,  1963,  2188,   nil,   nil,  1948,   nil,    44,
   nil,  1391,   599,   nil,   nil,   600,  1137,   603,   360,   608,
   nil,   614,   nil,   nil,   602,   256,   nil,   nil,   nil,   628,
   nil,   nil,   nil,  2083,   nil,   nil,   nil,   nil,   170,   127,
   nil,   nil,   nil,   nil,   nil,    41,   nil,   nil,   646,   nil,
   648,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -225,  -260,    -1,    -2,    -3,    -6,    -7,    -8,    -9,   -10,
   -11,   -12,   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,
   -21,  -260,   -40,   -42,   -43,   -44,   -46,  -116,   -55,   -59,
  -260,   -65,  -260,  -197,  -260,   -93,  -115,  -117,  -240,  -258,
  -143,  -260,  -148,  -260,  -260,  -260,  -260,  -196,  -201,  -202,
  -204,  -205,  -260,  -260,  -217,  -260,  -248,  -260,    -4,  -260,
   -47,   -48,   -49,   -50,  -260,  -138,  -260,  -260,   -54,   -73,
   -77,   -78,   -79,   -80,   -81,   -82,   -83,   -84,   -85,   -86,
   -87,  -116,  -260,  -258,  -240,   -56,  -260,  -260,  -260,  -128,
  -128,   -96,  -225,  -225,  -260,  -260,   -92,  -216,  -217,   -94,
  -260,  -260,  -260,  -260,   -82,   -84,   -81,   -77,   -86,  -182,
  -144,  -260,  -160,  -161,  -260,  -260,  -260,  -260,  -260,  -260,
  -153,  -260,  -260,  -260,  -206,  -207,  -209,  -225,  -225,  -225,
  -218,  -220,  -221,  -222,  -223,  -224,   435,   -38,   -39,   -40,
   -41,   -42,   -43,   -44,   -45,   -46,  -116,  -200,   -37,   -22,
   -23,   -24,   -25,   -26,   -27,   -28,   -29,   -30,   -31,   -32,
   -33,   -34,   -35,   -36,  -246,  -131,  -132,  -133,  -260,  -136,
  -137,  -139,  -260,  -260,   -53,   -75,  -260,  -260,  -260,  -260,
  -243,  -260,  -226,  -260,   -58,   -60,   -25,   -35,  -113,  -246,
  -260,  -111,  -116,  -118,  -119,  -120,  -121,  -122,  -123,  -124,
  -129,  -133,  -246,  -131,  -138,  -260,   -99,  -100,  -102,  -225,
  -260,  -108,  -109,  -116,  -240,  -260,  -260,  -125,  -127,  -260,
  -126,  -145,  -146,  -260,  -260,  -260,  -260,  -260,  -260,  -260,
  -260,  -260,  -260,  -260,  -260,  -260,  -260,  -260,  -260,  -260,
  -260,  -171,  -178,  -260,  -260,  -260,  -251,  -252,  -260,  -255,
  -256,  -260,  -260,  -260,  -116,  -190,  -191,  -260,  -260,  -197,
  -198,  -199,  -203,  -260,  -260,  -227,  -226,  -225,  -260,  -260,
  -234,  -260,  -260,  -247,  -260,  -260,  -259,   -51,  -245,  -260,
  -244,   -74,  -260,  -142,  -260,  -241,  -245,    -5,  -260,   -68,
   -69,  -260,  -260,  -246,  -230,  -233,   -57,  -245,  -260,  -114,
  -260,  -247,  -128,  -260,  -246,   -97,  -260,  -104,  -105,  -260,
  -260,  -260,   -98,  -150,  -257,  -147,  -162,  -163,  -164,  -165,
  -166,  -167,  -168,  -169,  -170,  -172,  -173,  -174,  -175,  -176,
  -177,  -179,  -180,  -181,  -241,  -249,  -260,  -260,  -260,  -152,
  -260,  -156,  -260,  -184,  -260,  -188,  -246,  -193,  -260,  -208,
  -260,  -260,  -246,  -260,  -236,  -260,  -260,  -219,  -235,   -91,
  -140,  -135,  -134,   -52,   -76,  -141,  -149,  -242,   -67,   -70,
   -71,  -260,  -247,  -260,   -88,  -112,   -89,  -130,  -246,   -90,
  -260,  -101,  -103,  -106,  -107,  -250,  -253,  -254,  -151,  -156,
  -155,  -260,  -260,  -183,  -185,  -260,  -260,  -260,  -260,  -245,
  -195,  -260,  -211,  -228,  -260,  -260,  -237,  -238,  -239,  -260,
  -215,   -72,  -231,  -232,  -110,   -95,  -154,  -157,  -260,  -260,
  -189,  -192,  -194,  -210,  -229,  -260,  -213,  -214,  -260,  -159,
  -260,  -187,  -212,  -158,  -186 ]

racc_goto_table = [
    22,     2,    22,    24,    69,    24,   256,    58,   120,   258,
   127,   128,   247,   130,   198,   135,   191,   164,    31,   343,
    31,   125,   292,   200,   200,   272,   290,   189,   202,   110,
    70,     3,   293,   205,   215,   390,   188,   140,   144,   221,
    96,   173,   140,   144,    39,    79,    39,   137,   381,    59,
   300,    64,   148,   264,   267,    91,   179,   298,   342,   139,
   360,   183,   142,   303,   139,   138,   398,   142,   216,   255,
   138,   288,   346,   181,   126,    85,   353,   147,   129,   268,
    68,   358,   147,   416,   412,    23,   406,    23,   245,     1,
   nil,   244,   193,   nil,   nil,   nil,   338,   340,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   351,   147,   394,   nil,
   nil,   nil,    75,   nil,   nil,   nil,   352,   nil,   nil,   nil,
   nil,   250,   nil,   nil,   nil,   nil,   260,   nil,   nil,   nil,
    20,   nil,    20,   nil,   nil,   nil,   nil,   nil,   nil,   345,
   347,   147,   nil,   258,   141,    47,   nil,    47,   nil,   141,
   309,   282,   284,   281,   371,   nil,   304,   nil,   265,   265,
   270,   nil,   nil,   nil,   nil,   380,   nil,   262,   nil,   nil,
   nil,   nil,   nil,   nil,   197,   nil,   nil,   211,   211,    70,
   nil,    22,   nil,   nil,    24,   317,   318,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    79,   401,   nil,   nil,   nil,    31,
   nil,   409,   nil,   nil,    47,   nil,   nil,   397,   261,    47,
   nil,   315,   nil,   404,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   198,    39,   375,   357,   345,   135,
   386,   135,   349,   nil,   194,   377,   200,   212,   212,   414,
   378,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    22,    22,   nil,    24,    24,   260,   nil,   nil,   nil,
   260,    75,   nil,   428,   430,   nil,    23,   nil,    47,    31,
    31,   147,   nil,   nil,   nil,   147,   nil,   nil,   nil,   nil,
   nil,   422,   420,   nil,   258,   nil,   nil,    22,   nil,   nil,
    24,   nil,    58,   nil,   211,    39,    39,   262,   354,   nil,
   nil,   262,   193,   nil,   nil,    31,   nil,   nil,   nil,   nil,
   nil,    20,   407,   nil,   nil,   nil,   nil,   147,   nil,   nil,
   nil,    25,   nil,    25,   nil,   400,    47,   nil,   nil,   nil,
   nil,    39,   nil,   nil,   nil,   nil,    23,    23,   261,   250,
   nil,   nil,   261,   nil,   nil,   260,   nil,   nil,    74,   nil,
    22,    70,   nil,    24,   212,   417,    22,   nil,   nil,    24,
   147,   nil,   nil,   nil,   nil,    49,    79,    49,    31,   nil,
   nil,   nil,    23,   nil,    31,    33,   nil,    33,   nil,   nil,
   143,    20,    20,   nil,   197,   143,   262,   nil,   nil,   nil,
   nil,   211,   nil,    48,    39,    48,    47,    47,    47,   260,
    39,   260,    47,   nil,   nil,    22,   425,   nil,    24,    95,
   196,   nil,   nil,   nil,   147,   nil,   147,    20,    22,    22,
   nil,    24,    24,    31,    49,    22,   nil,   261,    24,    49,
    58,   nil,    47,    75,    33,    23,    31,    31,   nil,    33,
   262,    23,   262,    31,   194,   nil,   nil,   nil,   nil,    39,
   nil,   212,    48,   nil,    49,   nil,   nil,    48,    26,   nil,
    26,   nil,    39,    39,   195,   nil,   nil,   nil,   nil,    39,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    20,   261,    48,   261,   nil,    77,    20,    47,    49,   nil,
    23,   nil,   nil,   nil,   nil,    47,   nil,    74,   259,   nil,
   nil,    47,    25,    23,    23,   nil,   nil,   nil,   nil,   nil,
    23,   nil,   nil,   nil,   nil,   nil,    48,   145,   nil,   nil,
   nil,   nil,   145,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,   nil,
   nil,    47,   nil,    47,   nil,   nil,    49,   199,    20,    20,
    47,   nil,   nil,   nil,   nil,    20,    33,   nil,   nil,   nil,
   nil,   nil,   nil,    47,    47,   nil,   nil,   nil,   nil,   nil,
    47,   nil,    25,    25,    48,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    49,    49,    49,   nil,
   196,   nil,    49,   nil,   nil,   nil,    33,    33,   259,   nil,
   nil,   nil,   259,   nil,    77,   nil,   nil,   nil,   nil,    26,
   nil,   nil,   nil,   nil,    48,    48,    48,   nil,   nil,   nil,
    48,   nil,    49,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    33,   nil,    49,   nil,   nil,   nil,   nil,    74,
   nil,    25,   nil,   nil,   195,   nil,   nil,    25,   nil,   nil,
    48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    49,   nil,    26,
    26,   nil,   nil,   nil,   nil,    49,   nil,   259,   nil,   nil,
   nil,    49,   nil,   nil,   nil,    33,    25,   nil,   nil,   nil,
   nil,    33,   nil,   nil,   nil,    48,   nil,   nil,   nil,    25,
    25,   nil,   nil,    48,   nil,    26,    25,   nil,   nil,    48,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   199,   nil,   nil,
   nil,    49,   111,    49,   119,   121,   122,   nil,   nil,   nil,
    49,   259,   nil,   259,   nil,   nil,   nil,   nil,   nil,   nil,
    33,   nil,   nil,    49,    49,   nil,   nil,   172,   nil,    48,
    49,    48,   nil,    33,    33,   nil,   nil,   nil,    48,   nil,
    33,   nil,   nil,   nil,   nil,   nil,    77,   nil,    26,   nil,
   nil,    48,    48,   nil,    26,   nil,   nil,   nil,    48,   nil,
   nil,   217,   218,   219,   220,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   241,   242,   243,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    26,    26,   nil,   nil,
   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   111,   316,   nil,   nil,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   332,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   361,   362,   nil,   nil,   nil,
   364,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   369,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   383,   384,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   387,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   413,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   121 ]

racc_goto_check = [
    25,     2,    25,    27,    43,    27,    80,     4,    71,    78,
    50,    50,    93,    88,    48,    74,    62,    54,    36,    76,
    36,    82,    40,    65,    65,    42,     5,    53,    53,    69,
    27,     3,    41,    57,    57,    72,    51,     8,    10,    70,
     6,    30,     8,    10,    64,    36,    64,    23,    58,    24,
    42,    24,    23,    84,    84,    56,    30,    52,    75,    25,
    68,    30,    27,    42,    25,     6,    44,    27,    30,    79,
     6,    38,    81,    37,    83,    33,    85,    36,    86,    87,
    31,    89,    36,    72,    90,    26,    91,    26,    92,     1,
   nil,    30,    27,   nil,   nil,   nil,     5,     5,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    40,    36,    76,   nil,
   nil,   nil,    26,   nil,   nil,   nil,    41,   nil,   nil,   nil,
   nil,    27,   nil,   nil,   nil,   nil,    27,   nil,   nil,   nil,
    21,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,    78,
    80,    36,   nil,    78,    26,    45,   nil,    45,   nil,    26,
    57,    30,    30,    43,    42,   nil,    54,   nil,     3,     3,
     3,   nil,   nil,   nil,   nil,    42,   nil,    64,   nil,   nil,
   nil,   nil,   nil,   nil,    26,   nil,   nil,    26,    26,    27,
   nil,    25,   nil,   nil,    27,    74,    74,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    36,     5,   nil,   nil,   nil,    36,
   nil,     5,   nil,   nil,    45,   nil,   nil,    42,    26,    45,
   nil,    69,   nil,    42,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    48,    64,    62,    88,    78,    74,
    93,    74,    82,   nil,    45,    65,    65,    45,    45,    42,
    53,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    25,    25,   nil,    27,    27,    27,   nil,   nil,   nil,
    27,    26,   nil,     5,     5,   nil,    26,   nil,    45,    36,
    36,    36,   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,
   nil,    80,    78,   nil,    78,   nil,   nil,    25,   nil,   nil,
    27,   nil,     4,   nil,    26,    64,    64,    64,     3,   nil,
   nil,    64,    27,   nil,   nil,    36,   nil,   nil,   nil,   nil,
   nil,    21,    50,   nil,   nil,   nil,   nil,    36,   nil,   nil,
   nil,    28,   nil,    28,   nil,    43,    45,   nil,   nil,   nil,
   nil,    64,   nil,   nil,   nil,   nil,    26,    26,    26,    27,
   nil,   nil,    26,   nil,   nil,    27,   nil,   nil,    28,   nil,
    25,    27,   nil,    27,    45,    71,    25,   nil,   nil,    27,
    36,   nil,   nil,   nil,   nil,    49,    36,    49,    36,   nil,
   nil,   nil,    26,   nil,    36,    46,   nil,    46,   nil,   nil,
    28,    21,    21,   nil,    26,    28,    64,   nil,   nil,   nil,
   nil,    26,   nil,    47,    64,    47,    45,    45,    45,    27,
    64,    27,    45,   nil,   nil,    25,     2,   nil,    27,    46,
    28,   nil,   nil,   nil,    36,   nil,    36,    21,    25,    25,
   nil,    27,    27,    36,    49,    25,   nil,    26,    27,    49,
     4,   nil,    45,    26,    46,    26,    36,    36,   nil,    46,
    64,    26,    64,    36,    45,   nil,   nil,   nil,   nil,    64,
   nil,    45,    47,   nil,    49,   nil,   nil,    47,    29,   nil,
    29,   nil,    64,    64,    46,   nil,   nil,   nil,   nil,    64,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    21,    26,    47,    26,   nil,    29,    21,    45,    49,   nil,
    26,   nil,   nil,   nil,   nil,    45,   nil,    28,    46,   nil,
   nil,    45,    28,    26,    26,   nil,   nil,   nil,   nil,   nil,
    26,   nil,   nil,   nil,   nil,   nil,    47,    29,   nil,   nil,
   nil,   nil,    29,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
   nil,    45,   nil,    45,   nil,   nil,    49,    29,    21,    21,
    45,   nil,   nil,   nil,   nil,    21,    46,   nil,   nil,   nil,
   nil,   nil,   nil,    45,    45,   nil,   nil,   nil,   nil,   nil,
    45,   nil,    28,    28,    47,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    28,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    49,    49,    49,   nil,
    28,   nil,    49,   nil,   nil,   nil,    46,    46,    46,   nil,
   nil,   nil,    46,   nil,    29,   nil,   nil,   nil,   nil,    29,
   nil,   nil,   nil,   nil,    47,    47,    47,   nil,   nil,   nil,
    47,   nil,    49,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    46,   nil,    49,   nil,   nil,   nil,   nil,    28,
   nil,    28,   nil,   nil,    46,   nil,   nil,    28,   nil,   nil,
    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    49,   nil,    29,
    29,   nil,   nil,   nil,   nil,    49,   nil,    46,   nil,   nil,
   nil,    49,   nil,   nil,   nil,    46,    28,   nil,   nil,   nil,
   nil,    46,   nil,   nil,   nil,    47,   nil,   nil,   nil,    28,
    28,   nil,   nil,    47,   nil,    29,    28,   nil,   nil,    47,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29,   nil,   nil,
   nil,    49,    39,    49,    39,    39,    39,   nil,   nil,   nil,
    49,    46,   nil,    46,   nil,   nil,   nil,   nil,   nil,   nil,
    46,   nil,   nil,    49,    49,   nil,   nil,    39,   nil,    47,
    49,    47,   nil,    46,    46,   nil,   nil,   nil,    47,   nil,
    46,   nil,   nil,   nil,   nil,   nil,    29,   nil,    29,   nil,
   nil,    47,    47,   nil,    29,   nil,   nil,   nil,    47,   nil,
   nil,    39,    39,    39,    39,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    39,    39,    39,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    29,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    29,    29,   nil,   nil,
   nil,   nil,   nil,    29,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    39,    39,   nil,   nil,    39,    39,
    39,    39,    39,    39,    39,    39,    39,    39,    39,    39,
    39,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    39,    39,   nil,   nil,   nil,
    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    39,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    39 ]

racc_goto_pointer = [
   nil,    89,     1,    31,     5,  -155,     6,   nil,   -22,   nil,
   -21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   130,   nil,   -12,    30,     0,    85,     3,   321,   458,
   -26,    53,   nil,    47,   nil,   nil,    18,   -13,  -110,   721,
  -160,  -150,  -139,   -23,  -280,   145,   375,   393,   -75,   365,
   -43,   -53,  -131,   -62,   -48,   nil,    22,   -59,  -258,   nil,
   nil,   nil,   -73,   nil,    44,   -66,   nil,   nil,  -213,   -12,
   -72,   -36,  -306,   nil,   -40,  -195,  -234,   nil,  -114,   -54,
  -117,  -185,   -31,    22,   -74,  -191,    23,   -50,   -42,  -190,
  -288,  -269,   -30,  -106,   nil ]

racc_goto_default = [
   nil,   nil,   287,   206,     4,   nil,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,   109,   166,    21,   nil,    78,   104,   107,   106,   105,
   nil,   nil,    28,   nil,    29,    30,   108,   nil,   nil,   175,
   nil,   nil,   nil,   112,   279,    71,    72,    73,    76,    80,
    32,   nil,   nil,   nil,   nil,    34,   nil,   nil,   207,   306,
   208,   210,   nil,   190,    83,   169,   168,   170,   171,   nil,
   nil,   nil,   nil,   113,    51,   nil,   nil,   344,    46,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   131,
   294,   nil,   nil,   nil,   248 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 73, :_reduce_3,
  2, 73, :_reduce_4,
  1, 76, :_reduce_5,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_21,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  3, 91, :_reduce_37,
  3, 91, :_reduce_38,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  4, 85, :_reduce_51,
  5, 85, :_reduce_52,
  3, 85, :_reduce_53,
  2, 85, :_reduce_54,
  1, 92, :_reduce_55,
  2, 92, :_reduce_56,
  4, 103, :_reduce_57,
  3, 103, :_reduce_58,
  1, 103, :_reduce_59,
  3, 105, :_reduce_60,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  4, 104, :_reduce_67,
  3, 104, :_reduce_68,
  1, 109, :_reduce_none,
  2, 109, :_reduce_70,
  3, 108, :_reduce_71,
  4, 108, :_reduce_72,
  1, 102, :_reduce_73,
  3, 102, :_reduce_74,
  1, 101, :_reduce_75,
  3, 101, :_reduce_76,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  5, 77, :_reduce_88,
  5, 77, :_reduce_89,
  5, 77, :_reduce_90,
  5, 89, :_reduce_91,
  2, 78, :_reduce_92,
  1, 126, :_reduce_93,
  2, 126, :_reduce_94,
  6, 79, :_reduce_95,
  2, 79, :_reduce_96,
  3, 127, :_reduce_97,
  3, 127, :_reduce_98,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  3, 128, :_reduce_101,
  1, 129, :_reduce_none,
  3, 129, :_reduce_103,
  1, 130, :_reduce_104,
  1, 130, :_reduce_105,
  3, 131, :_reduce_106,
  3, 131, :_reduce_107,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  4, 133, :_reduce_110,
  1, 122, :_reduce_111,
  3, 122, :_reduce_112,
  0, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 120, :_reduce_115,
  1, 116, :_reduce_116,
  1, 117, :_reduce_117,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  3, 80, :_reduce_125,
  3, 80, :_reduce_126,
  3, 90, :_reduce_127,
  0, 124, :_reduce_128,
  1, 124, :_reduce_129,
  3, 124, :_reduce_130,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  3, 136, :_reduce_134,
  3, 138, :_reduce_135,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  0, 125, :_reduce_138,
  1, 125, :_reduce_139,
  3, 125, :_reduce_140,
  4, 107, :_reduce_141,
  3, 107, :_reduce_142,
  1, 98, :_reduce_143,
  2, 98, :_reduce_144,
  2, 140, :_reduce_145,
  1, 141, :_reduce_146,
  2, 141, :_reduce_147,
  1, 118, :_reduce_148,
  4, 96, :_reduce_149,
  4, 96, :_reduce_150,
  5, 83, :_reduce_151,
  4, 83, :_reduce_152,
  2, 82, :_reduce_153,
  5, 142, :_reduce_154,
  4, 142, :_reduce_155,
  0, 143, :_reduce_none,
  2, 143, :_reduce_157,
  4, 143, :_reduce_158,
  3, 143, :_reduce_159,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  3, 110, :_reduce_162,
  3, 110, :_reduce_163,
  3, 110, :_reduce_164,
  3, 110, :_reduce_165,
  3, 110, :_reduce_166,
  3, 110, :_reduce_167,
  3, 110, :_reduce_168,
  3, 110, :_reduce_169,
  3, 110, :_reduce_170,
  2, 110, :_reduce_171,
  3, 110, :_reduce_172,
  3, 110, :_reduce_173,
  3, 110, :_reduce_174,
  3, 110, :_reduce_175,
  3, 110, :_reduce_176,
  3, 110, :_reduce_177,
  2, 110, :_reduce_178,
  3, 110, :_reduce_179,
  3, 110, :_reduce_180,
  3, 110, :_reduce_181,
  1, 110, :_reduce_182,
  5, 81, :_reduce_183,
  1, 146, :_reduce_184,
  2, 146, :_reduce_185,
  5, 147, :_reduce_186,
  4, 147, :_reduce_187,
  1, 148, :_reduce_188,
  3, 148, :_reduce_189,
  3, 99, :_reduce_190,
  1, 150, :_reduce_none,
  4, 150, :_reduce_192,
  1, 152, :_reduce_none,
  3, 152, :_reduce_194,
  3, 151, :_reduce_195,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_204,
  1, 149, :_reduce_none,
  1, 153, :_reduce_206,
  1, 154, :_reduce_none,
  3, 154, :_reduce_208,
  2, 84, :_reduce_209,
  6, 86, :_reduce_210,
  5, 86, :_reduce_211,
  7, 87, :_reduce_212,
  6, 87, :_reduce_213,
  6, 88, :_reduce_214,
  5, 88, :_reduce_215,
  1, 121, :_reduce_216,
  1, 121, :_reduce_217,
  1, 157, :_reduce_218,
  3, 157, :_reduce_219,
  1, 159, :_reduce_220,
  1, 160, :_reduce_221,
  1, 160, :_reduce_222,
  1, 160, :_reduce_223,
  1, 160, :_reduce_none,
  0, 74, :_reduce_225,
  0, 111, :_reduce_226,
  1, 155, :_reduce_none,
  3, 155, :_reduce_228,
  4, 155, :_reduce_229,
  1, 112, :_reduce_none,
  3, 112, :_reduce_231,
  3, 161, :_reduce_232,
  1, 161, :_reduce_233,
  1, 158, :_reduce_none,
  2, 158, :_reduce_235,
  1, 156, :_reduce_none,
  2, 156, :_reduce_237,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 97, :_reduce_240,
  3, 119, :_reduce_241,
  4, 119, :_reduce_242,
  2, 119, :_reduce_243,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  0, 113, :_reduce_none,
  1, 113, :_reduce_247,
  1, 145, :_reduce_248,
  3, 144, :_reduce_249,
  4, 144, :_reduce_250,
  2, 144, :_reduce_251,
  1, 163, :_reduce_none,
  3, 163, :_reduce_253,
  3, 164, :_reduce_254,
  1, 165, :_reduce_255,
  1, 165, :_reduce_256,
  4, 135, :_reduce_257,
  1, 100, :_reduce_none,
  4, 100, :_reduce_259 ]

racc_reduce_n = 260

racc_shift_n = 435

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68,
  :PIPE => 69,
  :LAMBDA => 70 }

racc_nt_base = 71

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "unlessstatement",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "call_method_with_lambda",
  "keyword",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "expressions",
  "funcvalues",
  "call_method",
  "lambda",
  "named_access",
  "named_access_lval",
  "funcrvalue",
  "lambda_parameter_list",
  "statements_or_expression",
  "expression",
  "nothing",
  "arguments",
  "endcomma",
  "rvalue",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "param_name",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 36)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 39)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 48)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'grammar.ra', 73)
  def _reduce_21(val, _values, result)
     result = val[0] ; val[0].ignore_rvalue 
    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'grammar.ra', 93)
  def _reduce_37(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 96)
  def _reduce_38(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

module_eval(<<'.,.,', 'grammar.ra', 111)
  def _reduce_51(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 118)
  def _reduce_52(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 124)
  def _reduce_53(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 131)
  def _reduce_54(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 140)
  def _reduce_55(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 141)
  def _reduce_56(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 144)
  def _reduce_57(val, _values, result)
     result = ast AST::MethodCall, val[0].merge(:arguments => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 145)
  def _reduce_58(val, _values, result)
     result = ast AST::MethodCall, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 146)
  def _reduce_59(val, _values, result)
     result = ast AST::MethodCall, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 149)
  def _reduce_60(val, _values, result)
     result = {:receiver => val[0], :name => val[2][:value], :line => val[1][:line]} 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'grammar.ra', 165)
  def _reduce_67(val, _values, result)
          result = ast AST::Lambda, 
        :parameters => val[1],
        :expressions => val[2],
        :line => val[0][:line]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 171)
  def _reduce_68(val, _values, result)
          result = ast AST::Lambda, 
        :parameters => val[1],
        :line => val[0][:line]
    
    result
  end
.,.,

# reduce 69 omitted

module_eval(<<'.,.,', 'grammar.ra', 183)
  def _reduce_70(val, _values, result)
    result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 187)
  def _reduce_71(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 188)
  def _reduce_72(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 191)
  def _reduce_73(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 194)
  def _reduce_74(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 198)
  def _reduce_75(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 199)
  def _reduce_76(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

module_eval(<<'.,.,', 'grammar.ra', 214)
  def _reduce_88(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 217)
  def _reduce_89(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 220)
  def _reduce_90(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 227)
  def _reduce_91(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 234)
  def _reduce_92(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 250)
  def _reduce_93(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 251)
  def _reduce_94(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 256)
  def _reduce_95(val, _values, result)
      @lexer.commentpop
  type = val[0].value.downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 274)
  def _reduce_96(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 292)
  def _reduce_97(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 300)
  def _reduce_98(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 99 omitted

# reduce 100 omitted

module_eval(<<'.,.,', 'grammar.ra', 313)
  def _reduce_101(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 102 omitted

module_eval(<<'.,.,', 'grammar.ra', 318)
  def _reduce_103(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 322)
  def _reduce_104(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 323)
  def _reduce_105(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 326)
  def _reduce_106(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 331)
  def _reduce_107(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 108 omitted

# reduce 109 omitted

module_eval(<<'.,.,', 'grammar.ra', 340)
  def _reduce_110(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 343)
  def _reduce_111(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 345)
  def _reduce_112(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 113 omitted

# reduce 114 omitted

module_eval(<<'.,.,', 'grammar.ra', 353)
  def _reduce_115(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 357)
  def _reduce_116(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 361)
  def _reduce_117(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

module_eval(<<'.,.,', 'grammar.ra', 373)
  def _reduce_125(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 379)
  def _reduce_126(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 383)
  def _reduce_127(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 389)
  def _reduce_128(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 391)
  def _reduce_129(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 393)
  def _reduce_130(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

module_eval(<<'.,.,', 'grammar.ra', 402)
  def _reduce_134(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 406)
  def _reduce_135(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 136 omitted

# reduce 137 omitted

module_eval(<<'.,.,', 'grammar.ra', 415)
  def _reduce_138(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 417)
  def _reduce_139(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 419)
  def _reduce_140(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 425)
  def _reduce_141(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 430)
  def _reduce_142(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 436)
  def _reduce_143(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 437)
  def _reduce_144(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 439)
  def _reduce_145(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 441)
  def _reduce_146(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 442)
  def _reduce_147(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 445)
  def _reduce_148(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 449)
  def _reduce_149(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 452)
  def _reduce_150(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 456)
  def _reduce_151(val, _values, result)
      @lexer.commentpop
  args = {
    :test => ast(AST::Not, :value => val[1]),
    :statements => val[3]
  }

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 465)
  def _reduce_152(val, _values, result)
        @lexer.commentpop
    args = {
      :test => ast(AST::Not, :value => val[1]), 
      :statements => ast(AST::Nop)
    }
    result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 474)
  def _reduce_153(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 478)
  def _reduce_154(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 489)
  def _reduce_155(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 156 omitted

module_eval(<<'.,.,', 'grammar.ra', 502)
  def _reduce_157(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 505)
  def _reduce_158(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 509)
  def _reduce_159(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 160 omitted

# reduce 161 omitted

module_eval(<<'.,.,', 'grammar.ra', 528)
  def _reduce_162(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 531)
  def _reduce_163(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 534)
  def _reduce_164(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 537)
  def _reduce_165(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 540)
  def _reduce_166(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 543)
  def _reduce_167(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 546)
  def _reduce_168(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 549)
  def _reduce_169(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 552)
  def _reduce_170(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 555)
  def _reduce_171(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 558)
  def _reduce_172(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 561)
  def _reduce_173(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 564)
  def _reduce_174(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 567)
  def _reduce_175(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 570)
  def _reduce_176(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 573)
  def _reduce_177(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 576)
  def _reduce_178(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 579)
  def _reduce_179(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 582)
  def _reduce_180(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 585)
  def _reduce_181(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 587)
  def _reduce_182(val, _values, result)
        result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 592)
  def _reduce_183(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 596)
  def _reduce_184(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 598)
  def _reduce_185(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 603)
  def _reduce_186(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 606)
  def _reduce_187(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 616)
  def _reduce_188(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 618)
  def _reduce_189(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 623)
  def _reduce_190(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 191 omitted

module_eval(<<'.,.,', 'grammar.ra', 628)
  def _reduce_192(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 193 omitted

module_eval(<<'.,.,', 'grammar.ra', 634)
  def _reduce_194(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 643)
  def _reduce_195(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

module_eval(<<'.,.,', 'grammar.ra', 655)
  def _reduce_204(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 205 omitted

module_eval(<<'.,.,', 'grammar.ra', 660)
  def _reduce_206(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 207 omitted

module_eval(<<'.,.,', 'grammar.ra', 662)
  def _reduce_208(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 665)
  def _reduce_209(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 675)
  def _reduce_210(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 683)
  def _reduce_211(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 691)
  def _reduce_212(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 698)
  def _reduce_213(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 707)
  def _reduce_214(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 712)
  def _reduce_215(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 716)
  def _reduce_216(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 717)
  def _reduce_217(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 722)
  def _reduce_218(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 725)
  def _reduce_219(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 730)
  def _reduce_220(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 733)
  def _reduce_221(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 734)
  def _reduce_222(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 735)
  def _reduce_223(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 224 omitted

module_eval(<<'.,.,', 'grammar.ra', 739)
  def _reduce_225(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 743)
  def _reduce_226(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 227 omitted

module_eval(<<'.,.,', 'grammar.ra', 748)
  def _reduce_228(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 751)
  def _reduce_229(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 230 omitted

module_eval(<<'.,.,', 'grammar.ra', 757)
  def _reduce_231(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 763)
  def _reduce_232(val, _values, result)
     result = [val[0][:value], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 764)
  def _reduce_233(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 234 omitted

module_eval(<<'.,.,', 'grammar.ra', 768)
  def _reduce_235(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 236 omitted

module_eval(<<'.,.,', 'grammar.ra', 773)
  def _reduce_237(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 238 omitted

# reduce 239 omitted

module_eval(<<'.,.,', 'grammar.ra', 779)
  def _reduce_240(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 782)
  def _reduce_241(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 783)
  def _reduce_242(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 784)
  def _reduce_243(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

module_eval(<<'.,.,', 'grammar.ra', 790)
  def _reduce_247(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 793)
  def _reduce_248(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 797)
  def _reduce_249(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 804)
  def _reduce_250(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 810)
  def _reduce_251(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 252 omitted

module_eval(<<'.,.,', 'grammar.ra', 815)
  def _reduce_253(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 824)
  def _reduce_254(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 827)
  def _reduce_255(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 828)
  def _reduce_256(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 831)
  def _reduce_257(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 258 omitted

module_eval(<<'.,.,', 'grammar.ra', 836)
  def _reduce_259(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
