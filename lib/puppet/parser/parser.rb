#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 881)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'40,41,316,95,84,91,-221,95,40,41,40,41,210,134,271,393,99,248,94,390',
'98,294,67,215,-202,40,41,37,214,312,311,-63,344,86,181,-204,-221,42',
'83,273,134,50,93,312,311,37,251,56,251,36,181,133,180,44,135,52,53,56',
'38,54,56,55,42,27,210,45,50,35,180,69,37,40,41,56,36,215,278,-153,133',
'317,214,135,305,282,301,56,240,235,69,282,301,43,282,280,369,236,238',
'237,239,44,56,52,53,300,38,54,279,55,42,27,-152,45,50,35,40,41,37,66',
'242,241,36,442,228,229,231,230,233,234,66,226,227,56,-153,-153,-153',
'-153,225,43,232,282,301,-64,44,340,52,53,341,38,54,210,55,42,27,378',
'45,50,35,40,41,37,215,103,318,36,440,214,66,315,-204,104,101,102,240',
'235,56,314,-135,-208,404,-64,43,236,238,237,239,44,403,52,53,180,38',
'54,-63,55,42,27,-204,45,50,35,40,41,37,371,242,241,36,346,228,229,231',
'230,233,234,372,226,227,56,40,41,226,227,225,43,232,99,-202,225,44,98',
'52,53,416,38,54,-66,55,42,27,-203,45,50,35,40,41,37,374,226,227,36,443',
'86,376,210,225,42,256,282,407,50,56,40,41,37,215,377,43,36,-67,214,-201',
'44,-205,52,53,69,38,54,56,55,42,27,-203,45,50,35,40,41,37,306,226,227',
'36,437,86,381,134,225,42,256,339,382,50,56,282,299,37,298,305,43,36',
'282,299,384,44,400,52,53,399,38,54,56,55,42,27,303,45,50,35,40,41,37',
'-119,387,133,36,418,135,380,231,230,275,282,301,226,227,56,40,41,-209',
'99,225,43,232,98,400,56,44,399,52,53,294,38,54,-145,55,42,27,-145,45',
'50,35,40,41,37,-146,69,277,36,-146,86,99,-66,276,42,147,-203,45,50,56',
'40,41,37,275,309,43,36,312,311,66,44,-203,52,53,-204,38,54,56,55,42',
'27,268,45,50,35,40,41,37,99,268,265,36,98,86,99,-68,-65,42,147,91,45',
'50,56,40,41,37,205,186,43,36,103,-208,-207,44,-205,52,53,396,38,54,56',
'55,42,27,397,45,50,35,40,41,37,180,66,-204,36,410,86,342,-206,-201,42',
'256,411,376,50,56,413,235,37,-203,179,43,36,177,137,236,44,125,52,53',
'69,38,54,56,55,42,27,124,45,50,35,40,41,37,100,118,90,36,-39,-39,-39',
'-39,228,229,231,230,233,234,56,226,227,421,364,-205,43,69,225,305,232',
'157,155,159,154,156,86,152,160,161,202,193,426,151,187,89,40,41,37,88',
'162,150,188,288,-41,-41,-41,-41,69,290,361,-65,429,56,430,65,40,41,158',
'164,118,432,360,-252,44,434,52,53,435,38,54,-68,55,42,27,438,45,50,35',
'294,355,37,125,353,57,36,224,223,444,86,445,,,42,83,,56,50,,240,235',
'37,43,,,36,,,236,238,237,239,228,229,231,230,56,,,226,227,-45,-45,-45',
'-45,,225,,232,,,242,241,235,,228,229,231,230,233,234,236,226,227,255',
'60,61,62,63,225,,232,,240,235,60,61,62,63,,,,236,238,237,239,,,228,229',
'231,230,233,234,,226,227,,,,,,225,,232,242,241,235,,228,229,231,230',
'233,234,236,226,227,253,,,,,225,,232,,240,235,,,,,,,,236,238,237,239',
',,228,229,231,230,233,234,,226,227,,,,,,225,,232,242,241,,,228,229,231',
'230,233,234,,226,227,254,,,,,225,,232,,240,235,,,,,,,,236,238,237,239',
',,228,229,231,230,,40,41,226,227,118,,119,,,225,,232,242,241,,,228,229',
'231,230,233,234,117,226,227,40,41,,,118,225,119,232,86,,,,42,83,,,50',
',,,37,116,117,,36,40,41,115,,118,,119,,86,,56,,42,83,,,50,,,,37,116',
'117,,36,40,41,115,,118,,119,,86,,56,,42,83,,,50,,,,37,116,117,,36,40',
'41,115,,118,,119,,86,,56,,42,83,,,50,,,,37,116,117,,36,40,41,115,,118',
',119,,86,,56,,42,83,,,50,,,,37,116,117,,36,40,41,115,,118,,119,,86,',
'56,,42,83,,,50,,,,37,116,117,,36,40,41,115,,118,,119,,86,,56,,42,83',
',,50,,,,37,116,117,,36,40,41,115,,118,,119,,86,,56,,42,83,,,50,,,,37',
'116,117,,36,40,41,115,,118,,119,,86,,56,,42,83,,,50,,,,37,116,117,,36',
'40,41,115,,118,,119,,86,,56,,42,83,,,50,,,,37,116,117,,36,40,41,115',
',118,,119,,86,,56,,42,83,,,50,,,,37,116,117,,36,40,41,115,,118,,119',
',86,,56,,42,83,,,50,,,,37,116,117,175,36,40,41,115,,118,,119,,86,,56',
',42,83,,,50,,,,37,116,117,,36,40,41,115,,118,,119,,86,,56,,42,83,,,50',
',,,37,116,117,,36,40,41,115,,118,,119,,86,,56,,42,83,,,50,,,,37,116',
'117,,36,40,41,115,,118,,119,,86,,56,,42,83,,,50,,,,37,116,117,,36,40',
'41,115,,118,,119,,86,,56,,42,83,,,50,,40,41,37,116,117,,36,401,,115',
'40,41,,,118,86,119,56,,42,83,,,50,,,,37,116,,,36,117,86,115,,,42,256',
',,50,56,86,,37,,42,83,36,,50,,,,37,116,40,41,36,56,118,115,119,,,,40',
'41,,56,118,,119,,,,40,41,117,,118,183,119,,,,40,41,117,86,118,,,42,83',
',,50,117,86,,37,116,42,83,36,,50,115,86,,37,116,42,83,36,56,50,115,86',
',37,116,42,83,36,56,50,115,,,37,,40,41,36,56,118,,119,,,,,,,56,231,230',
',40,41,226,227,118,117,119,,,225,,232,,,,,86,,,,42,83,117,185,50,,,',
'37,116,,,36,86,,115,,42,83,,,50,,56,,37,116,40,41,36,,118,115,119,,',
',40,41,,56,118,,119,,,,40,41,117,296,,,,,,,,,117,86,,,,42,83,,,50,,86',
',37,116,42,83,36,,50,115,86,,37,116,42,256,36,56,50,115,,,37,,40,41',
'36,56,118,,119,,,,40,41,,56,118,,119,,,,40,41,117,,118,,119,,,,,,117',
'86,,,,42,83,,,50,117,86,,37,116,42,83,36,,50,115,86,,37,116,42,83,36',
'56,50,115,,,37,116,40,41,36,56,118,115,119,,,,40,41,,56,118,,119,,,',
'40,41,117,,118,,119,,,,,,117,86,,,,42,83,,,50,117,86,,37,116,42,83,36',
',50,115,86,,37,116,42,83,36,56,50,115,,,37,116,40,41,36,56,118,115,119',
',,,40,41,,56,118,,119,,,,40,41,117,,118,,119,,,,,,117,86,,,,42,83,,',
'50,117,86,,37,116,42,83,36,,50,115,86,,37,116,42,83,36,56,50,115,,,37',
'116,40,41,36,56,118,115,119,,,,40,41,,56,118,,119,,,,40,41,117,,,,259',
',,,,,117,86,,,,42,83,,,50,,86,,37,116,42,83,36,,50,115,86,,37,116,42',
'256,36,56,50,115,,,37,,40,41,36,56,118,,119,,,,40,41,,56,118,,119,,',
',40,41,117,,118,,,,,,,,117,86,,,,42,83,,,50,,86,,37,116,42,83,36,,50',
'115,86,,37,116,42,256,36,56,50,115,,,37,,40,41,36,56,118,,119,,,,40',
'41,,56,118,,119,,,,40,41,117,,118,,119,,,,,,117,86,,,,42,83,,,50,117',
'86,,37,116,42,83,36,,50,115,86,,37,116,42,83,36,56,50,115,,,37,116,40',
'41,36,56,118,115,119,,,,40,41,,56,118,183,119,,,,40,41,117,,118,,119',
',,,,,117,86,,,,42,83,,,50,117,86,,37,116,42,83,36,,50,115,86,,37,116',
'42,83,36,56,50,115,,,37,116,40,41,36,56,118,115,119,228,229,231,230',
'233,234,56,226,227,,,240,235,,225,117,232,,,,236,238,237,239,,,86,,',
',42,83,,,50,,,,37,116,,,36,242,241,115,,228,229,231,230,233,234,56,226',
'227,240,235,,,,225,,232,,236,238,237,239,,,,,240,235,,,,,,,,236,238',
'237,239,,,242,241,,,228,229,231,230,233,234,,226,227,,,,,,225,,232,228',
'229,231,230,233,234,,226,227,240,235,,,,225,,232,,236,238,237,239,,',
',,240,235,,,,,,,,236,238,237,239,,,242,241,,,228,229,231,230,233,234',
',226,227,,,,,,225,,232,228,229,231,230,233,234,,226,227,240,235,,,,225',
',232,,236,238,237,239,228,229,231,230,233,234,,226,227,,,,,,225,,232',
',,,241,,,228,229,231,230,233,234,,226,227,240,235,,,,225,,232,338,236',
'238,237,239,,,,,240,235,,,,,,,,236,238,237,239,,,242,241,,,228,229,231',
'230,233,234,,226,227,,,,,,225,,232,228,229,231,230,233,234,,226,227',
'240,235,,,,225,,232,,236,238,237,239,,,,,,,,,,,235,,,,,,,,236,242,241',
',,228,229,231,230,233,234,,226,227,240,235,,,,225,,232,,236,238,237',
'239,228,229,231,230,233,234,,226,227,,,,,,225,,232,,,242,241,,,228,229',
'231,230,233,234,,226,227,240,235,,,,225,,232,,236,238,237,239,,,,,,',
',,,,,,,,,,,,,242,241,,,228,229,231,230,233,234,,226,227,240,235,,,,225',
',232,,236,238,237,239,,,,,,,,,,,,,,,,,,,,242,241,,,228,229,231,230,233',
'234,,226,227,240,235,,,,225,,232,,236,238,237,239,,,,,,,,,,,,,,,,,,',
',242,241,,,228,229,231,230,233,234,,226,227,240,235,,,,225,,232,,236',
'238,237,239,,,,,,,,,,,,,,,,,,,,242,241,,,228,229,231,230,233,234,,226',
'227,240,235,,,,225,,232,,236,238,237,239,,,,,,,,,,,,,,,,,,,,242,241',
',,228,229,231,230,233,234,,226,227,240,235,,,,225,,232,,236,238,237',
'239,,,,,,,,,,,,,,,,,,,,242,241,,,228,229,231,230,233,234,,226,227,,',
',,,225,,232,157,155,159,154,156,,152,160,161,168,204,,151,153,,,,,,162',
'150,163,157,155,159,154,156,,152,160,161,168,166,,151,153,,158,164,',
',162,150,163,157,155,159,154,156,,152,160,161,168,166,,151,153,,158',
'164,,,162,150,163,157,155,159,154,156,,152,160,161,168,204,,151,153',
',158,164,,,162,150,163,157,155,159,154,156,,152,160,161,168,204,,151',
'153,,158,164,,,162,150,163,157,155,159,154,156,,152,160,161,168,166',
',151,153,,158,164,,,162,150,163,,,,,,,,,,,,,,,,158,164' ]
        racc_action_table = arr = ::Array.new(2777, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'27,27,216,33,27,33,27,74,341,341,119,119,310,271,130,341,34,119,33,313',
'34,376,27,310,74,253,253,34,310,216,216,105,253,27,147,105,147,27,27',
'130,273,27,33,313,313,27,341,227,119,27,83,271,147,253,271,253,253,226',
'253,253,27,253,253,253,93,253,253,253,83,27,253,2,2,271,253,93,173,298',
'273,217,93,273,203,217,217,253,173,173,279,184,184,253,174,174,280,173',
'173,173,173,2,273,2,2,184,2,2,174,2,2,2,202,2,2,2,430,430,2,200,173',
'173,2,430,173,173,173,173,173,173,106,173,173,2,298,298,298,298,173',
'2,173,295,295,106,430,247,430,430,247,430,430,94,430,430,430,295,430',
'430,430,429,429,430,94,38,220,430,429,94,26,211,198,39,38,38,220,220',
'430,211,193,39,349,26,430,220,220,220,220,429,349,429,429,193,429,429',
'23,429,429,429,23,429,429,429,254,254,429,287,220,220,429,254,220,220',
'220,220,220,220,289,220,220,429,255,255,325,325,220,429,220,360,196',
'325,254,360,254,254,360,254,254,108,254,254,254,108,254,254,254,436',
'436,254,291,327,327,254,436,255,292,210,327,255,255,351,351,255,254',
'259,259,255,210,294,254,255,109,210,195,436,109,436,436,296,436,436',
'255,436,436,436,194,436,436,436,413,413,436,191,326,326,436,413,259',
'299,55,326,259,259,246,302,259,436,246,246,259,182,190,436,259,182,182',
'304,413,346,413,413,346,413,413,259,413,413,413,189,413,413,413,361',
'361,413,188,307,55,413,361,55,297,324,324,308,297,297,324,324,413,59',
'59,187,53,324,413,324,53,397,55,361,397,361,361,179,361,361,368,361',
'361,361,368,361,361,361,286,286,361,284,175,169,361,284,59,59,24,166',
'59,59,24,59,59,361,64,64,59,165,206,361,59,206,206,146,286,143,286,286',
'142,286,286,59,286,286,286,129,286,286,286,0,0,286,54,128,127,286,54',
'64,64,110,107,64,64,96,64,64,286,406,406,64,92,89,286,64,86,85,82,0',
'81,0,0,343,0,0,64,0,0,0,345,0,0,0,355,355,0,256,79,77,0,355,406,250',
'75,73,406,406,356,357,406,0,358,333,406,72,69,0,406,68,57,333,355,52',
'355,355,369,355,355,406,355,355,355,46,355,355,355,90,90,355,35,90,32',
'355,5,5,5,5,333,333,333,333,333,333,355,333,333,375,274,31,355,378,333',
'386,333,90,90,90,90,90,90,90,90,90,90,90,388,90,90,30,178,178,90,29',
'90,90,90,178,7,7,7,7,28,178,270,25,400,90,403,22,353,353,90,90,353,405',
'269,407,178,409,178,178,412,178,178,20,178,178,178,417,178,178,178,268',
'266,178,265,260,1,178,112,112,439,353,441,,,353,353,,178,353,,112,112',
'353,178,,,353,,,112,112,112,112,329,329,329,329,353,,,329,329,9,9,9',
'9,,329,,329,,,112,112,334,,112,112,112,112,112,112,334,112,112,123,21',
'21,21,21,112,,112,,123,123,19,19,19,19,,,,123,123,123,123,,,334,334',
'334,334,334,334,,334,334,,,,,,334,,334,123,123,335,,123,123,123,123',
'123,123,335,123,123,120,,,,,123,,123,,120,120,,,,,,,,120,120,120,120',
',,335,335,335,335,335,335,,335,335,,,,,,335,,335,120,120,,,120,120,120',
'120,120,120,,120,120,122,,,,,120,,120,,122,122,,,,,,,,122,122,122,122',
',,328,328,328,328,,66,66,328,328,66,,66,,,328,,328,122,122,,,122,122',
'122,122,122,122,66,122,122,372,372,,,372,122,372,122,66,,,,66,66,,,66',
',,,66,66,372,,66,230,230,66,,230,,230,,372,,66,,372,372,,,372,,,,372',
'372,230,,372,231,231,372,,231,,231,,230,,372,,230,230,,,230,,,,230,230',
'231,,230,41,41,230,,41,,41,,231,,230,,231,231,,,231,,,,231,231,41,,231',
'43,43,231,,43,,43,,41,,231,,41,41,,,41,,,,41,41,43,,41,44,44,41,,44',
',44,,43,,41,,43,43,,,43,,,,43,43,44,,43,45,45,43,,45,,45,,44,,43,,44',
'44,,,44,,,,44,44,45,,44,315,315,44,,315,,315,,45,,44,,45,45,,,45,,,',
'45,45,315,,45,232,232,45,,232,,232,,315,,45,,315,315,,,315,,,,315,315',
'232,,315,233,233,315,,233,,233,,232,,315,,232,232,,,232,,,,232,232,233',
',232,314,314,232,,314,,314,,233,,232,,233,233,,,233,,,,233,233,314,',
'233,67,67,233,,67,,67,,314,,233,,314,314,,,314,,,,314,314,67,67,314',
'234,234,314,,234,,234,,67,,314,,67,67,,,67,,,,67,67,234,,67,235,235',
'67,,235,,235,,234,,67,,234,234,,,234,,,,234,234,235,,234,236,236,234',
',236,,236,,235,,234,,235,235,,,235,,,,235,235,236,,235,377,377,235,',
'377,,377,,236,,235,,236,236,,,236,,,,236,236,377,,236,242,242,236,,242',
',242,,377,,236,,377,377,,,377,,347,347,377,377,242,,377,347,,377,342',
'342,,,342,242,342,377,,242,242,,,242,,,,242,242,,,242,342,347,242,,',
'347,347,,,347,242,342,,347,,342,342,347,,342,,,,342,342,277,277,342',
'347,277,342,277,,,,281,281,,342,281,,281,,,,84,84,277,,84,84,84,,,,177',
'177,281,277,177,,,277,277,,,277,84,281,,277,277,281,281,277,,281,277',
'84,,281,281,84,84,281,277,84,281,177,,84,84,177,177,84,281,177,84,,',
'177,,229,229,177,84,229,,229,,,,,,,177,323,323,,88,88,323,323,88,229',
'88,,,323,,323,,,,,229,,,,229,229,88,88,229,,,,229,229,,,229,88,,229',
',88,88,,,88,,229,,88,88,180,180,88,,180,88,180,,,,181,181,,88,181,,181',
',,,404,404,180,180,,,,,,,,,181,180,,,,180,180,,,180,,181,,180,180,181',
'181,180,,181,180,404,,181,181,404,404,181,180,404,181,,,404,,290,290',
'404,181,290,,290,,,,224,224,,404,224,,224,,,,225,225,290,,225,,225,',
',,,,224,290,,,,290,290,,,290,225,224,,290,290,224,224,290,,224,290,225',
',224,224,225,225,224,290,225,224,,,225,225,95,95,225,224,95,225,95,',
',,276,276,,225,276,,276,,,,101,101,95,,101,,101,,,,,,276,95,,,,95,95',
',,95,101,276,,95,95,276,276,95,,276,95,101,,276,276,101,101,276,95,101',
'276,,,101,101,102,102,101,276,102,101,102,,,,103,103,,101,103,,103,',
',,104,104,102,,104,,104,,,,,,103,102,,,,102,102,,,102,104,103,,102,102',
'103,103,102,,103,102,104,,103,103,104,104,103,102,104,103,,,104,104',
'241,241,104,103,241,104,241,,,,240,240,,104,240,,240,,,,124,124,241',
',,,124,,,,,,240,241,,,,241,241,,,241,,240,,241,241,240,240,241,,240',
'241,124,,240,240,124,124,240,241,124,240,,,124,,239,239,124,240,239',
',239,,,,238,238,,124,238,,238,,,,303,303,239,,303,,,,,,,,238,239,,,',
'239,239,,,239,,238,,239,239,238,238,239,,238,239,303,,238,238,303,303',
'238,239,303,238,,,303,,399,399,303,238,399,,399,,,,115,115,,303,115',
',115,,,,116,116,399,,116,,116,,,,,,115,399,,,,399,399,,,399,116,115',
',399,399,115,115,399,,115,399,116,,115,115,116,116,115,399,116,115,',
',116,116,237,237,116,115,237,116,237,,,,118,118,,116,118,118,118,,,',
'228,228,237,,228,,228,,,,,,118,237,,,,237,237,,,237,228,118,,237,237',
'118,118,237,,118,237,228,,118,118,228,228,118,237,228,118,,,228,228',
'117,117,228,118,117,228,117,330,330,330,330,330,330,228,330,330,,,373',
'373,,330,117,330,,,,373,373,373,373,,,117,,,,117,117,,,117,,,,117,117',
',,117,373,373,117,,373,373,373,373,373,373,117,373,373,395,395,,,,373',
',373,,395,395,395,395,,,,,391,391,,,,,,,,391,391,391,391,,,395,395,',
',395,395,395,395,395,395,,395,395,,,,,,395,,395,391,391,391,391,391',
'391,,391,391,221,221,,,,391,,391,,221,221,221,221,,,,,336,336,,,,,,',
',336,336,336,336,,,221,221,,,221,221,221,221,221,221,,221,221,,,,,,221',
',221,336,336,336,336,336,336,,336,336,337,337,,,,336,,336,,337,337,337',
'337,331,331,331,331,331,331,,331,331,,,,,,331,,331,,,,337,,,337,337',
'337,337,337,337,,337,337,245,245,,,,337,,337,245,245,245,245,245,,,',
',392,392,,,,,,,,392,392,392,392,,,245,245,,,245,245,245,245,245,245',
',245,245,,,,,,245,,245,392,392,392,392,392,392,,392,392,366,366,,,,392',
',392,,366,366,366,366,,,,,,,,,,,332,,,,,,,,332,366,366,,,366,366,366',
'366,366,366,,366,366,218,218,,,,366,,366,,218,218,218,218,332,332,332',
'332,332,332,,332,332,,,,,,332,,332,,,218,218,,,218,218,218,218,218,218',
',218,218,219,219,,,,218,,218,,219,219,219,219,,,,,,,,,,,,,,,,,,,,219',
'219,,,219,219,219,219,219,219,,219,219,367,367,,,,219,,219,,367,367',
'367,367,,,,,,,,,,,,,,,,,,,,367,367,,,367,367,367,367,367,367,,367,367',
'370,370,,,,367,,367,,370,370,370,370,,,,,,,,,,,,,,,,,,,,370,370,,,370',
'370,370,370,370,370,,370,370,420,420,,,,370,,370,,420,420,420,420,,',
',,,,,,,,,,,,,,,,,420,420,,,420,420,420,420,420,420,,420,420,423,423',
',,,420,,420,,423,423,423,423,,,,,,,,,,,,,,,,,,,,423,423,,,423,423,423',
'423,423,423,,423,423,176,176,,,,423,,423,,176,176,176,176,,,,,,,,,,',
',,,,,,,,,176,176,,,176,176,176,176,176,176,,176,176,,,,,,176,,176,91',
'91,91,91,91,,91,91,91,91,91,,91,91,,,,,,91,91,91,275,275,275,275,275',
',275,275,275,275,275,,275,275,,91,91,,,275,275,275,205,205,205,205,205',
',205,205,205,205,205,,205,205,,275,275,,,205,205,205,306,306,306,306',
'306,,306,306,306,306,306,,306,306,,205,205,,,306,306,306,305,305,305',
'305,305,,305,305,305,305,305,,305,305,,306,306,,,305,305,305,65,65,65',
'65,65,,65,65,65,65,65,,65,65,,305,305,,,65,65,65,,,,,,,,,,,,,,,,65,65' ]
        racc_action_check = arr = ::Array.new(2777, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   413,   592,    69,   nil,   nil,   445,   nil,   489,   nil,   566,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   600,
   560,   590,   555,   173,   363,   540,   160,    -2,   485,   523,
   524,   500,   498,    -3,   -20,   460,   nil,   nil,   155,   154,
   nil,   887,   nil,   912,   937,   962,   474,   nil,   nil,   nil,
   nil,   nil,   485,   314,   382,   294,   nil,   484,   nil,   345,
   nil,   nil,   nil,   nil,   388,  2708,   787,  1087,   471,   410,
   nil,   nil,   456,   446,     1,   445,   nil,   440,   nil,   456,
   nil,   421,   419,    44,  1307,   418,   434,   nil,  1381,   397,
   499,  2598,   428,    40,   125,  1562,   421,   nil,   nil,   nil,
   nil,  1582,  1629,  1639,  1649,    12,   122,   407,   216,   249,
   406,   nil,   590,   nil,   nil,  1840,  1850,  1964,  1907,     8,
   698,   nil,   752,   644,  1716,   nil,   nil,   408,   395,   387,
     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   381,   378,   nil,   nil,   393,    28,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   381,   331,   nil,   nil,   366,
   nil,   nil,   nil,    69,    81,   305,  2558,  1317,   542,   326,
  1428,  1438,   300,   nil,    78,   nil,   nil,   326,   309,   284,
   296,   269,   nil,   165,   259,   247,   203,   nil,   145,   nil,
   111,   nil,    87,    70,   nil,  2642,   348,   nil,   nil,   nil,
   229,   149,   nil,   nil,   nil,   nil,   -20,    72,  2288,  2333,
   155,  2074,   nil,   nil,  1505,  1515,    -5,   -15,  1917,  1364,
   837,   862,  1012,  1037,  1112,  1137,  1162,  1897,  1773,  1763,
  1706,  1696,  1212,   nil,   nil,  2181,   293,   134,   nil,   nil,
   456,   nil,   nil,    23,   198,   216,   437,   nil,   nil,   259,
   580,   nil,   nil,   nil,   nil,   588,   580,   nil,   552,   533,
   550,    11,   nil,    38,   513,  2620,  1572,  1287,   nil,    17,
    69,  1297,   nil,   nil,   356,   nil,   370,   194,   nil,   199,
  1495,   176,   240,   nil,   250,   128,   204,   331,    69,   288,
   nil,   nil,   292,  1783,   304,  2686,  2664,   324,   329,   nil,
   -12,   nil,   nil,    -6,  1062,   987,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  1325,   284,   160,   230,   187,   731,   567,
  1920,  2113,  2265,   459,   623,   677,  2091,  2136,   nil,   nil,
   nil,     6,  1240,   438,   nil,   445,   284,  1230,   nil,   166,
   nil,   246,   nil,   562,   nil,   456,   447,   461,   468,   nil,
   189,   327,   nil,   nil,   nil,   nil,  2243,  2378,   345,   419,
  2423,   nil,   812,  1967,   nil,   451,   -14,  1187,   454,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   515,   nil,   531,   nil,
   nil,  2029,  2198,   nil,   nil,  2012,   nil,   324,   nil,  1830,
   552,   nil,   nil,   554,  1448,   560,   431,   562,   nil,   564,
   nil,   nil,   551,   284,   nil,   nil,   nil,   574,   nil,   nil,
  2468,   nil,   nil,  2513,   nil,   nil,   nil,   nil,   nil,   155,
   112,   nil,   nil,   nil,   nil,   nil,   241,   nil,   nil,   587,
   nil,   589,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -230,  -265,    -1,    -2,    -3,    -6,    -7,    -8,    -9,   -10,
   -11,   -12,   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,
   -21,  -265,   -40,   -42,   -43,   -44,   -46,  -120,   -57,   -61,
  -265,   -67,  -265,  -202,  -265,   -97,  -119,  -121,  -245,  -263,
  -147,  -265,  -152,  -265,  -265,  -265,  -265,  -201,  -206,  -207,
  -209,  -210,  -265,  -265,  -222,  -265,  -253,  -265,    -4,  -265,
   -47,   -48,   -49,   -50,  -265,  -142,  -265,  -265,   -56,  -265,
   -76,   -77,   -81,   -82,   -83,   -84,   -85,   -86,   -87,   -88,
   -89,   -90,   -91,  -120,  -265,  -263,  -245,   -58,  -265,  -265,
  -132,  -132,  -100,  -230,  -230,  -265,  -265,   -96,  -221,  -222,
   -98,  -265,  -265,  -265,  -265,   -86,   -88,   -85,   -81,   -90,
  -187,  -148,  -265,  -164,  -165,  -265,  -265,  -265,  -265,  -265,
  -265,  -157,  -265,  -265,  -265,  -211,  -212,  -214,  -230,  -230,
  -230,  -223,  -225,  -226,  -227,  -228,  -229,   446,   -38,   -39,
   -40,   -41,   -42,   -43,   -44,   -45,   -46,  -120,  -205,   -37,
   -22,   -23,   -24,   -25,   -26,   -27,   -28,   -29,   -30,   -31,
   -32,   -33,   -34,   -35,   -36,  -251,  -135,  -136,  -137,  -265,
  -140,  -141,  -143,  -265,  -265,   -51,   -79,  -265,  -265,  -231,
  -265,  -265,  -265,  -248,  -265,   -60,   -62,   -25,   -35,  -117,
  -251,  -265,  -115,  -120,  -122,  -123,  -124,  -125,  -126,  -127,
  -128,  -133,  -137,  -251,  -135,  -142,  -265,  -103,  -104,  -106,
  -230,  -265,  -112,  -113,  -120,  -245,  -265,  -265,  -129,  -131,
  -265,  -130,  -149,  -150,  -265,  -265,  -265,  -265,  -265,  -265,
  -265,  -265,  -265,  -265,  -265,  -265,  -265,  -265,  -265,  -265,
  -265,  -265,  -265,  -176,  -183,  -265,  -265,  -265,  -256,  -257,
  -265,  -260,  -261,  -265,  -265,  -265,  -120,  -195,  -196,  -265,
  -265,  -202,  -203,  -204,  -208,  -265,  -265,  -232,  -231,  -230,
  -265,  -265,  -239,  -265,  -265,  -252,  -265,  -265,  -264,   -51,
  -250,  -265,  -249,   -52,   -55,   -78,    -5,  -265,   -70,   -71,
  -265,  -265,  -251,  -235,  -238,  -265,   -51,  -265,  -246,  -250,
   -59,  -250,  -265,  -118,  -265,  -252,  -132,  -265,  -251,  -101,
  -265,  -108,  -109,  -265,  -265,  -265,  -102,  -154,  -262,  -151,
  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,
  -177,  -178,  -179,  -180,  -181,  -182,  -184,  -185,  -186,  -246,
  -254,  -265,  -265,  -265,  -156,  -265,  -160,  -265,  -189,  -265,
  -193,  -251,  -198,  -265,  -213,  -265,  -265,  -251,  -265,  -241,
  -265,  -265,  -224,  -240,   -95,  -144,  -139,  -138,   -53,   -51,
   -80,   -69,  -265,   -73,   -74,  -265,  -252,  -265,   -51,  -146,
  -153,  -247,   -92,  -116,   -93,  -134,  -251,   -94,  -265,  -105,
  -107,  -110,  -111,  -255,  -258,  -259,  -155,  -160,  -159,  -265,
  -265,  -188,  -190,  -265,  -265,  -265,  -265,  -250,  -200,  -265,
  -216,  -233,  -265,  -265,  -242,  -243,  -244,  -265,  -220,   -54,
   -72,   -75,  -236,  -237,  -145,  -114,   -99,  -158,  -161,  -265,
  -265,  -194,  -197,  -199,  -215,  -234,  -265,  -218,  -219,  -265,
  -163,  -265,  -192,  -217,  -162,  -191 ]

racc_goto_table = [
    25,    58,    25,    24,    70,    24,   258,   121,   249,     2,
   128,   129,   289,    39,     3,    39,   136,   131,   126,   190,
   203,   111,   201,   201,   284,   165,   192,    76,   348,   199,
    72,   398,   260,   206,   216,   174,   292,   291,   145,    22,
    97,    22,    23,   145,    23,   138,   141,    59,   222,    64,
   149,   141,   182,   266,   269,   365,   184,   389,   274,   144,
    71,    87,   143,   217,   144,   139,    92,   143,   347,    77,
   139,   302,   189,    20,   257,    20,   406,   351,   287,   127,
   178,   358,   427,   304,   130,   270,   246,   343,   345,    68,
   197,   363,   422,   194,   414,   247,   307,     1,   140,   nil,
   nil,   142,   nil,   140,   nil,   nil,   142,   nil,   nil,   nil,
   nil,   nil,    49,   nil,    49,   nil,   nil,   nil,   nil,   nil,
   402,   nil,   252,   nil,   nil,   357,   356,   262,   368,   nil,
   nil,   nil,   198,   nil,   nil,   212,   212,   264,   nil,   nil,
   nil,   352,   267,   267,   272,   379,   nil,   nil,   295,   297,
   313,    48,   nil,    48,   285,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   350,   nil,   308,   263,   260,   nil,   nil,
   nil,    49,   nil,   nil,   nil,   nil,    49,    76,    25,   nil,
    72,    24,   nil,   nil,   nil,   375,   nil,   321,   322,   409,
   nil,    39,   nil,   nil,   nil,   417,   nil,   nil,   nil,   nil,
   nil,   388,    49,   nil,   319,   nil,   nil,   nil,   nil,   nil,
    48,   nil,   nil,   nil,   nil,    48,   nil,    22,   419,    77,
    23,   nil,   nil,   nil,   nil,   nil,   nil,   424,   nil,   nil,
   394,   354,   136,   362,   136,   386,    49,   385,   201,   383,
   nil,    48,   199,    26,   405,    26,    33,   nil,    33,   nil,
   412,    20,   212,    25,    25,   350,    24,    24,   262,   nil,
   nil,   nil,   262,   439,   441,   nil,    39,    39,   264,   nil,
    79,   nil,   264,   nil,   nil,    48,   nil,   nil,   nil,   425,
    96,   nil,   nil,   359,   nil,    58,    25,   nil,   433,    24,
    49,   nil,    22,    22,   nil,    23,    23,   263,   nil,    39,
   nil,   263,   146,   197,   nil,    33,   194,   146,   nil,   nil,
    33,   nil,   431,   nil,   260,   nil,   nil,   415,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    22,    20,    20,    23,    48,
   408,   nil,   nil,   200,   nil,   nil,   196,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   252,   198,   nil,   nil,   nil,   nil,
   262,   nil,   212,    76,   nil,    25,    72,   nil,    24,    20,
   264,    25,   428,   nil,    24,    49,    49,    49,    39,   nil,
   261,    49,   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   263,
   nil,   nil,   nil,   nil,    22,    77,   nil,    23,    49,   nil,
    22,   nil,   nil,    23,    48,    48,    48,   262,   nil,   262,
    48,   nil,   nil,    25,   nil,    49,    24,   264,   nil,   264,
    79,    26,   436,   nil,    33,   nil,    39,   nil,    20,    25,
    25,   nil,    24,    24,    20,    58,    25,    48,   nil,    24,
   nil,   nil,    39,    39,   nil,   nil,   263,   nil,   263,    39,
   nil,   nil,    22,   nil,    48,    23,   nil,   nil,   nil,    49,
    31,   nil,    31,   nil,   nil,   nil,   nil,    49,    22,    22,
   nil,    23,    23,    49,   nil,    22,   nil,   nil,    23,    47,
   nil,    47,   nil,   nil,   nil,   nil,    20,    81,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    26,    26,    48,    33,
    33,   261,    20,    20,   nil,   261,    48,   nil,   nil,    20,
   nil,   nil,    48,   nil,   nil,   nil,    49,   nil,    49,   148,
   nil,   nil,   nil,   nil,   148,    49,   nil,   nil,   nil,    26,
   nil,   nil,    33,   nil,   nil,   nil,   nil,   nil,    47,   nil,
   nil,    49,    49,    47,   nil,   nil,   200,   nil,    49,   196,
   148,   nil,   nil,   nil,   nil,    48,   nil,    48,   nil,   nil,
   nil,   nil,   nil,   nil,    48,   nil,   nil,   nil,   nil,   195,
   nil,   nil,   213,   213,   nil,   nil,   nil,   nil,   nil,   nil,
    48,    48,   nil,   nil,   148,   nil,   nil,    48,   nil,   nil,
   nil,   nil,   nil,   261,   nil,   nil,    79,   nil,    26,   nil,
   nil,    33,   nil,    47,    26,   nil,   nil,    33,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    81,    31,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   261,   nil,   261,   nil,   nil,   nil,    26,    47,   nil,    33,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    26,    26,   nil,    33,    33,   nil,   nil,    26,
   nil,   nil,    33,   nil,   nil,   nil,   nil,   nil,   nil,   213,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    31,    31,   148,   nil,   nil,   nil,   148,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    47,    47,    47,   nil,   nil,   nil,    47,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    31,   nil,   112,   nil,
   120,   122,   123,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   148,   nil,    47,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   173,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   195,   nil,   nil,   nil,   nil,   nil,   nil,   213,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   148,   218,   219,
   220,   221,   nil,    81,   nil,    31,   nil,   nil,   nil,   nil,
   nil,    31,   243,   244,   245,   nil,    47,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,
    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   148,   nil,   148,   nil,   nil,   nil,
   nil,   nil,   nil,    31,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,   nil,    47,   nil,   nil,   nil,    31,
    31,   nil,    47,   nil,   nil,   nil,    31,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,    47,
   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   112,   320,   nil,   nil,   323,   324,   325,   326,   327,
   328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   366,   367,   nil,   nil,   nil,   370,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   373,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   391,   392,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   395,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   420,
   nil,   nil,   nil,   nil,   423,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   122 ]

racc_goto_check = [
    28,     4,    28,    27,    44,    27,    81,    72,    94,     2,
    51,    51,     5,    65,     3,    65,    75,    89,    83,    54,
    54,    70,    66,    66,    30,    55,    63,    28,    77,    49,
    27,    73,    79,    58,    58,    32,    42,    41,    10,    25,
     6,    25,    26,    10,    26,    23,     8,    24,    71,    24,
    23,     8,    32,    85,    85,    69,    32,    59,    43,    28,
    31,    31,    27,    32,    28,     6,    57,    27,    76,    26,
     6,    53,    52,    21,    80,    21,    45,    82,    39,    84,
    38,    86,    73,    43,    87,    88,    32,     5,     5,    33,
    28,    90,    91,    27,    92,    93,    43,     1,    25,   nil,
   nil,    26,   nil,    25,   nil,   nil,    26,   nil,   nil,   nil,
   nil,   nil,    50,   nil,    50,   nil,   nil,   nil,   nil,   nil,
    77,   nil,    27,   nil,   nil,    42,    41,    27,    30,   nil,
   nil,   nil,    26,   nil,   nil,    26,    26,    65,   nil,   nil,
   nil,    81,     3,     3,     3,    30,   nil,   nil,    32,    32,
    58,    48,   nil,    48,    44,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    79,   nil,    55,    26,    79,   nil,   nil,
   nil,    50,   nil,   nil,   nil,   nil,    50,    28,    28,   nil,
    27,    27,   nil,   nil,   nil,    43,   nil,    75,    75,     5,
   nil,    65,   nil,   nil,   nil,     5,   nil,   nil,   nil,   nil,
   nil,    43,    50,   nil,    70,   nil,   nil,   nil,   nil,   nil,
    48,   nil,   nil,   nil,   nil,    48,   nil,    25,    30,    26,
    26,   nil,   nil,   nil,   nil,   nil,   nil,    30,   nil,   nil,
    94,    83,    75,    89,    75,    54,    50,    66,    66,    63,
   nil,    48,    49,    29,    43,    29,    47,   nil,    47,   nil,
    43,    21,    26,    28,    28,    79,    27,    27,    27,   nil,
   nil,   nil,    27,     5,     5,   nil,    65,    65,    65,   nil,
    29,   nil,    65,   nil,   nil,    48,   nil,   nil,   nil,    43,
    47,   nil,   nil,     3,   nil,     4,    28,   nil,    81,    27,
    50,   nil,    25,    25,   nil,    26,    26,    26,   nil,    65,
   nil,    26,    29,    28,   nil,    47,    27,    29,   nil,   nil,
    47,   nil,    79,   nil,    79,   nil,   nil,    51,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    25,    21,    21,    26,    48,
    44,   nil,   nil,    29,   nil,   nil,    47,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    27,    26,   nil,   nil,   nil,   nil,
    27,   nil,    26,    28,   nil,    28,    27,   nil,    27,    21,
    65,    28,    72,   nil,    27,    50,    50,    50,    65,   nil,
    47,    50,   nil,   nil,    65,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,
   nil,   nil,   nil,   nil,    25,    26,   nil,    26,    50,   nil,
    25,   nil,   nil,    26,    48,    48,    48,    27,   nil,    27,
    48,   nil,   nil,    28,   nil,    50,    27,    65,   nil,    65,
    29,    29,     2,   nil,    47,   nil,    65,   nil,    21,    28,
    28,   nil,    27,    27,    21,     4,    28,    48,   nil,    27,
   nil,   nil,    65,    65,   nil,   nil,    26,   nil,    26,    65,
   nil,   nil,    25,   nil,    48,    26,   nil,   nil,   nil,    50,
    37,   nil,    37,   nil,   nil,   nil,   nil,    50,    25,    25,
   nil,    26,    26,    50,   nil,    25,   nil,   nil,    26,    46,
   nil,    46,   nil,   nil,   nil,   nil,    21,    37,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    29,    29,    48,    47,
    47,    47,    21,    21,   nil,    47,    48,   nil,   nil,    21,
   nil,   nil,    48,   nil,   nil,   nil,    50,   nil,    50,    37,
   nil,   nil,   nil,   nil,    37,    50,   nil,   nil,   nil,    29,
   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,    46,   nil,
   nil,    50,    50,    46,   nil,   nil,    29,   nil,    50,    47,
    37,   nil,   nil,   nil,   nil,    48,   nil,    48,   nil,   nil,
   nil,   nil,   nil,   nil,    48,   nil,   nil,   nil,   nil,    46,
   nil,   nil,    46,    46,   nil,   nil,   nil,   nil,   nil,   nil,
    48,    48,   nil,   nil,    37,   nil,   nil,    48,   nil,   nil,
   nil,   nil,   nil,    47,   nil,   nil,    29,   nil,    29,   nil,
   nil,    47,   nil,    46,    29,   nil,   nil,    47,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    37,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    47,   nil,    47,   nil,   nil,   nil,    29,    46,   nil,    47,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    29,    29,   nil,    47,    47,   nil,   nil,    29,
   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,    46,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    37,    37,    37,   nil,   nil,   nil,    37,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    46,    46,    46,   nil,   nil,   nil,    46,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    37,   nil,    40,   nil,
    40,    40,    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    37,   nil,    46,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    46,   nil,   nil,   nil,   nil,   nil,   nil,    46,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    40,    40,
    40,    40,   nil,    37,   nil,    37,   nil,   nil,   nil,   nil,
   nil,    37,    40,    40,    40,   nil,    46,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,   nil,   nil,
    46,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    37,   nil,    37,   nil,   nil,   nil,
   nil,   nil,   nil,    37,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    46,   nil,    46,   nil,   nil,   nil,    37,
    37,   nil,    46,   nil,   nil,   nil,    37,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    46,    46,
   nil,   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    40,    40,   nil,   nil,    40,    40,    40,    40,    40,
    40,    40,    40,    40,    40,    40,    40,    40,    40,    40,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    40,    40,   nil,   nil,   nil,    40,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    40,    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,
   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    40 ]

racc_goto_pointer = [
   nil,    97,     9,    14,    -1,  -166,     6,   nil,   -13,   nil,
   -21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    73,   nil,   -14,    28,    39,    42,     3,     0,   243,
  -151,    33,   -32,    62,   nil,   nil,   nil,   460,    11,  -100,
   707,  -142,  -143,  -107,   -23,  -275,   479,   246,   151,   -61,
   112,   -43,   -18,  -118,   -71,   -40,   nil,    33,   -60,  -253,
   nil,   nil,   nil,   -64,   nil,    13,   -68,   nil,   nil,  -220,
   -20,   -64,   -37,  -315,   nil,   -39,  -187,  -227,   nil,   -92,
   -50,  -118,  -182,   -34,    27,   -75,  -188,    29,   -45,   -38,
  -182,  -284,  -266,   -24,  -111,   nil ]

racc_goto_default = [
   nil,   nil,   286,   207,     4,   nil,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,   110,   167,    21,   nil,    80,   105,   108,   107,   106,
   nil,   283,   nil,   nil,    28,    29,    30,   109,   nil,   nil,
   176,   nil,   nil,   nil,   113,   281,    73,    74,    75,    78,
    82,    32,   nil,   nil,   nil,   nil,    34,   nil,   nil,   208,
   310,   209,   211,   nil,   191,    85,   170,   169,   171,   172,
   nil,   nil,   nil,   nil,   114,    51,   nil,   nil,   349,    46,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   132,   293,   nil,   nil,   nil,   250 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 74, :_reduce_3,
  2, 74, :_reduce_4,
  1, 77, :_reduce_5,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_21,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  3, 92, :_reduce_37,
  3, 92, :_reduce_38,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  0, 102, :_reduce_none,
  1, 102, :_reduce_none,
  5, 86, :_reduce_53,
  6, 86, :_reduce_54,
  4, 86, :_reduce_55,
  2, 86, :_reduce_56,
  1, 93, :_reduce_57,
  2, 93, :_reduce_58,
  4, 106, :_reduce_59,
  3, 106, :_reduce_60,
  1, 106, :_reduce_61,
  3, 107, :_reduce_62,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  4, 103, :_reduce_69,
  3, 103, :_reduce_70,
  1, 111, :_reduce_none,
  3, 111, :_reduce_72,
  2, 111, :_reduce_73,
  3, 110, :_reduce_74,
  4, 110, :_reduce_75,
  1, 105, :_reduce_76,
  1, 105, :_reduce_77,
  3, 105, :_reduce_78,
  1, 104, :_reduce_79,
  3, 104, :_reduce_80,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  5, 78, :_reduce_92,
  5, 78, :_reduce_93,
  5, 78, :_reduce_94,
  5, 90, :_reduce_95,
  2, 79, :_reduce_96,
  1, 128, :_reduce_97,
  2, 128, :_reduce_98,
  6, 80, :_reduce_99,
  2, 80, :_reduce_100,
  3, 129, :_reduce_101,
  3, 129, :_reduce_102,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  3, 130, :_reduce_105,
  1, 131, :_reduce_none,
  3, 131, :_reduce_107,
  1, 132, :_reduce_108,
  1, 132, :_reduce_109,
  3, 133, :_reduce_110,
  3, 133, :_reduce_111,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  4, 135, :_reduce_114,
  1, 124, :_reduce_115,
  3, 124, :_reduce_116,
  0, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 122, :_reduce_119,
  1, 118, :_reduce_120,
  1, 119, :_reduce_121,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  3, 81, :_reduce_129,
  3, 81, :_reduce_130,
  3, 91, :_reduce_131,
  0, 126, :_reduce_132,
  1, 126, :_reduce_133,
  3, 126, :_reduce_134,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  3, 138, :_reduce_138,
  3, 140, :_reduce_139,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 127, :_reduce_142,
  1, 127, :_reduce_143,
  3, 127, :_reduce_144,
  5, 109, :_reduce_145,
  4, 109, :_reduce_146,
  1, 99, :_reduce_147,
  2, 99, :_reduce_148,
  2, 142, :_reduce_149,
  1, 143, :_reduce_150,
  2, 143, :_reduce_151,
  1, 120, :_reduce_152,
  4, 97, :_reduce_153,
  4, 97, :_reduce_154,
  5, 84, :_reduce_155,
  4, 84, :_reduce_156,
  2, 83, :_reduce_157,
  5, 144, :_reduce_158,
  4, 144, :_reduce_159,
  0, 145, :_reduce_none,
  2, 145, :_reduce_161,
  4, 145, :_reduce_162,
  3, 145, :_reduce_163,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  3, 112, :_reduce_166,
  3, 112, :_reduce_167,
  3, 112, :_reduce_168,
  3, 112, :_reduce_169,
  3, 112, :_reduce_170,
  3, 112, :_reduce_171,
  3, 112, :_reduce_172,
  3, 112, :_reduce_173,
  3, 112, :_reduce_174,
  3, 112, :_reduce_175,
  2, 112, :_reduce_176,
  3, 112, :_reduce_177,
  3, 112, :_reduce_178,
  3, 112, :_reduce_179,
  3, 112, :_reduce_180,
  3, 112, :_reduce_181,
  3, 112, :_reduce_182,
  2, 112, :_reduce_183,
  3, 112, :_reduce_184,
  3, 112, :_reduce_185,
  3, 112, :_reduce_186,
  1, 112, :_reduce_187,
  5, 82, :_reduce_188,
  1, 148, :_reduce_189,
  2, 148, :_reduce_190,
  5, 149, :_reduce_191,
  4, 149, :_reduce_192,
  1, 150, :_reduce_193,
  3, 150, :_reduce_194,
  3, 100, :_reduce_195,
  1, 152, :_reduce_none,
  4, 152, :_reduce_197,
  1, 154, :_reduce_none,
  3, 154, :_reduce_199,
  3, 153, :_reduce_200,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_209,
  1, 151, :_reduce_none,
  1, 155, :_reduce_211,
  1, 156, :_reduce_none,
  3, 156, :_reduce_213,
  2, 85, :_reduce_214,
  6, 87, :_reduce_215,
  5, 87, :_reduce_216,
  7, 88, :_reduce_217,
  6, 88, :_reduce_218,
  6, 89, :_reduce_219,
  5, 89, :_reduce_220,
  1, 123, :_reduce_221,
  1, 123, :_reduce_222,
  1, 159, :_reduce_223,
  3, 159, :_reduce_224,
  1, 161, :_reduce_225,
  1, 162, :_reduce_226,
  1, 162, :_reduce_227,
  1, 162, :_reduce_228,
  1, 162, :_reduce_none,
  0, 75, :_reduce_230,
  0, 113, :_reduce_231,
  1, 157, :_reduce_none,
  3, 157, :_reduce_233,
  4, 157, :_reduce_234,
  1, 114, :_reduce_none,
  3, 114, :_reduce_236,
  3, 163, :_reduce_237,
  1, 163, :_reduce_238,
  1, 160, :_reduce_none,
  2, 160, :_reduce_240,
  1, 158, :_reduce_none,
  2, 158, :_reduce_242,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 98, :_reduce_245,
  3, 121, :_reduce_246,
  4, 121, :_reduce_247,
  2, 121, :_reduce_248,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  0, 115, :_reduce_none,
  1, 115, :_reduce_252,
  1, 147, :_reduce_253,
  3, 146, :_reduce_254,
  4, 146, :_reduce_255,
  2, 146, :_reduce_256,
  1, 165, :_reduce_none,
  3, 165, :_reduce_258,
  3, 166, :_reduce_259,
  1, 167, :_reduce_260,
  1, 167, :_reduce_261,
  4, 137, :_reduce_262,
  1, 101, :_reduce_none,
  4, 101, :_reduce_264 ]

racc_reduce_n = 265

racc_shift_n = 446

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68,
  :MODULO => 69,
  :PIPE => 70,
  :LAMBDA => 71 }

racc_nt_base = 72

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "MODULO",
  "PIPE",
  "LAMBDA",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "unlessstatement",
  "import",
  "function_call_statement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "call_method_with_lambda",
  "keyword",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "optional_lambda",
  "lambda",
  "expressions",
  "funcvalues",
  "call_method",
  "named_access",
  "named_access_lval",
  "function_call_expression",
  "lambda_parameter_list",
  "statements_or_expression",
  "expression",
  "nothing",
  "arguments",
  "endcomma",
  "rvalue",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "param_name",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 36)
  def _reduce_3(val, _values, result)
        result = ast AST::BlockExpression, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 39)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 48)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'grammar.ra', 73)
  def _reduce_21(val, _values, result)
     result = val[0] ; val[0].ignore_rvalue 
    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'grammar.ra', 93)
  def _reduce_37(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 96)
  def _reduce_38(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

module_eval(<<'.,.,', 'grammar.ra', 121)
  def _reduce_53(val, _values, result)
          result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => val[2],
        :ftype => :statement,
        :pblock => val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 129)
  def _reduce_54(val, _values, result)
          result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => val[2],
        :ftype => :statement,
        :pblock => val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 137)
  def _reduce_55(val, _values, result)
          result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => AST::ASTArray.new({}),
        :ftype => :statement,
        :pblock => val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 145)
  def _reduce_56(val, _values, result)
          result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => val[1],
        :ftype => :statement,
        :pblock => val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 155)
  def _reduce_57(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 156)
  def _reduce_58(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 159)
  def _reduce_59(val, _values, result)
     result = ast AST::MethodCall, val[0].merge(:arguments => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 160)
  def _reduce_60(val, _values, result)
     result = ast AST::MethodCall, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 161)
  def _reduce_61(val, _values, result)
     result = ast AST::MethodCall, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 164)
  def _reduce_62(val, _values, result)
     result = {:receiver => val[0], :name => val[2][:value], :line => val[1][:line]} 
    result
  end
.,.,

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

module_eval(<<'.,.,', 'grammar.ra', 180)
  def _reduce_69(val, _values, result)
          result = ast AST::Lambda, 
        :parameters => val[1],
        :expressions => val[2],
        :line => val[0][:line]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 186)
  def _reduce_70(val, _values, result)
          result = ast AST::Lambda, 
        :parameters => val[1],
        :line => val[0][:line]
    
    result
  end
.,.,

# reduce 71 omitted

module_eval(<<'.,.,', 'grammar.ra', 198)
  def _reduce_72(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 199)
  def _reduce_73(val, _values, result)
    result = ast AST::ASTArray, :children => [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 203)
  def _reduce_74(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 204)
  def _reduce_75(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 207)
  def _reduce_76(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 209)
  def _reduce_77(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 211)
  def _reduce_78(val, _values, result)
          val[0].push(val[2])
      result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 215)
  def _reduce_79(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 216)
  def _reduce_80(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

module_eval(<<'.,.,', 'grammar.ra', 231)
  def _reduce_92(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 234)
  def _reduce_93(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 237)
  def _reduce_94(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 244)
  def _reduce_95(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 251)
  def _reduce_96(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 267)
  def _reduce_97(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 268)
  def _reduce_98(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 273)
  def _reduce_99(val, _values, result)
      @lexer.commentpop
  type = val[0].value.downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 291)
  def _reduce_100(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 309)
  def _reduce_101(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 317)
  def _reduce_102(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 103 omitted

# reduce 104 omitted

module_eval(<<'.,.,', 'grammar.ra', 330)
  def _reduce_105(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 106 omitted

module_eval(<<'.,.,', 'grammar.ra', 335)
  def _reduce_107(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 339)
  def _reduce_108(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 340)
  def _reduce_109(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 343)
  def _reduce_110(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 348)
  def _reduce_111(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 112 omitted

# reduce 113 omitted

module_eval(<<'.,.,', 'grammar.ra', 357)
  def _reduce_114(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 360)
  def _reduce_115(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 362)
  def _reduce_116(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

module_eval(<<'.,.,', 'grammar.ra', 370)
  def _reduce_119(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 374)
  def _reduce_120(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 378)
  def _reduce_121(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'grammar.ra', 390)
  def _reduce_129(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 396)
  def _reduce_130(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 400)
  def _reduce_131(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 406)
  def _reduce_132(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 408)
  def _reduce_133(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 410)
  def _reduce_134(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

module_eval(<<'.,.,', 'grammar.ra', 419)
  def _reduce_138(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 423)
  def _reduce_139(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

module_eval(<<'.,.,', 'grammar.ra', 432)
  def _reduce_142(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 434)
  def _reduce_143(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 436)
  def _reduce_144(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 447)
  def _reduce_145(val, _values, result)
          result = ast AST::Function,
        :name => val[0][:value], :line => val[0][:line],
        :arguments => val[2],
        :ftype => :rvalue,
        :pblock => val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 454)
  def _reduce_146(val, _values, result)
          result = ast AST::Function,
        :name => val[0][:value], :line => val[0][:line],
        :arguments => AST::ASTArray.new({}),
        :ftype => :rvalue
    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 460)
  def _reduce_147(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 461)
  def _reduce_148(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 463)
  def _reduce_149(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 465)
  def _reduce_150(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 466)
  def _reduce_151(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 469)
  def _reduce_152(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 473)
  def _reduce_153(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 476)
  def _reduce_154(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 480)
  def _reduce_155(val, _values, result)
      @lexer.commentpop
  args = {
    :test => ast(AST::Not, :value => val[1]),
    :statements => val[3]
  }

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 489)
  def _reduce_156(val, _values, result)
        @lexer.commentpop
    args = {
      :test => ast(AST::Not, :value => val[1]), 
      :statements => ast(AST::Nop)
    }
    result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 498)
  def _reduce_157(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 502)
  def _reduce_158(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 513)
  def _reduce_159(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 160 omitted

module_eval(<<'.,.,', 'grammar.ra', 526)
  def _reduce_161(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 529)
  def _reduce_162(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 533)
  def _reduce_163(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 164 omitted

# reduce 165 omitted

module_eval(<<'.,.,', 'grammar.ra', 552)
  def _reduce_166(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 555)
  def _reduce_167(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 558)
  def _reduce_168(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 561)
  def _reduce_169(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 564)
  def _reduce_170(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 567)
  def _reduce_171(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 570)
  def _reduce_172(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 573)
  def _reduce_173(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 576)
  def _reduce_174(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 579)
  def _reduce_175(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 582)
  def _reduce_176(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 585)
  def _reduce_177(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 588)
  def _reduce_178(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 591)
  def _reduce_179(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 594)
  def _reduce_180(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 597)
  def _reduce_181(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 600)
  def _reduce_182(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 603)
  def _reduce_183(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 606)
  def _reduce_184(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 609)
  def _reduce_185(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 612)
  def _reduce_186(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 614)
  def _reduce_187(val, _values, result)
        result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 619)
  def _reduce_188(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 623)
  def _reduce_189(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 625)
  def _reduce_190(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 630)
  def _reduce_191(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 633)
  def _reduce_192(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::BlockExpression)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 643)
  def _reduce_193(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 645)
  def _reduce_194(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 650)
  def _reduce_195(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 196 omitted

module_eval(<<'.,.,', 'grammar.ra', 655)
  def _reduce_197(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 198 omitted

module_eval(<<'.,.,', 'grammar.ra', 661)
  def _reduce_199(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 670)
  def _reduce_200(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

module_eval(<<'.,.,', 'grammar.ra', 682)
  def _reduce_209(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 210 omitted

module_eval(<<'.,.,', 'grammar.ra', 687)
  def _reduce_211(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 212 omitted

module_eval(<<'.,.,', 'grammar.ra', 689)
  def _reduce_213(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 692)
  def _reduce_214(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 702)
  def _reduce_215(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 710)
  def _reduce_216(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 718)
  def _reduce_217(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 725)
  def _reduce_218(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 734)
  def _reduce_219(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 739)
  def _reduce_220(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 743)
  def _reduce_221(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 744)
  def _reduce_222(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 749)
  def _reduce_223(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 752)
  def _reduce_224(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 757)
  def _reduce_225(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 760)
  def _reduce_226(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 761)
  def _reduce_227(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 762)
  def _reduce_228(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 229 omitted

module_eval(<<'.,.,', 'grammar.ra', 766)
  def _reduce_230(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 770)
  def _reduce_231(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 232 omitted

module_eval(<<'.,.,', 'grammar.ra', 775)
  def _reduce_233(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 778)
  def _reduce_234(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 235 omitted

module_eval(<<'.,.,', 'grammar.ra', 784)
  def _reduce_236(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 790)
  def _reduce_237(val, _values, result)
     result = [val[0][:value], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 791)
  def _reduce_238(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 239 omitted

module_eval(<<'.,.,', 'grammar.ra', 795)
  def _reduce_240(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 241 omitted

module_eval(<<'.,.,', 'grammar.ra', 800)
  def _reduce_242(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 243 omitted

# reduce 244 omitted

module_eval(<<'.,.,', 'grammar.ra', 806)
  def _reduce_245(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 809)
  def _reduce_246(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 810)
  def _reduce_247(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 811)
  def _reduce_248(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 249 omitted

# reduce 250 omitted

# reduce 251 omitted

module_eval(<<'.,.,', 'grammar.ra', 817)
  def _reduce_252(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 820)
  def _reduce_253(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 824)
  def _reduce_254(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 831)
  def _reduce_255(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 837)
  def _reduce_256(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 257 omitted

module_eval(<<'.,.,', 'grammar.ra', 842)
  def _reduce_258(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 851)
  def _reduce_259(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 854)
  def _reduce_260(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 855)
  def _reduce_261(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 858)
  def _reduce_262(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 263 omitted

module_eval(<<'.,.,', 'grammar.ra', 863)
  def _reduce_264(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
