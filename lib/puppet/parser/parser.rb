#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.7
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 783)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'9,16,169,170,203,284,97,254,292,284,278,355,84,310,155,141,145,155,277',
'-178,-165,293,154,-159,136,138,142,144,42,205,49,1,154,11,14,154,25',
'30,37,309,45,50,3,9,16,17,288,137,140,36,378,147,148,131,132,134,135',
'308,139,143,34,9,16,9,16,133,8,180,285,347,159,42,346,49,1,195,11,14',
'53,25,30,37,54,45,50,3,9,16,17,17,139,143,36,376,64,274,275,133,30,179',
'191,158,50,34,9,16,17,351,331,8,36,254,280,227,42,352,49,1,230,11,14',
'34,25,30,37,318,45,50,3,9,16,17,274,275,119,36,374,64,87,104,182,30',
'179,98,104,50,34,85,86,17,122,181,8,36,9,16,187,42,116,49,1,321,11,14',
'34,25,30,37,306,45,50,3,9,16,17,182,227,107,36,297,108,230,107,-164',
'53,108,181,104,54,34,53,187,158,315,54,8,97,326,98,34,42,116,49,1,34',
'11,14,182,25,30,37,99,45,50,3,9,16,17,181,-160,264,36,314,187,316,107',
'139,143,108,-162,141,145,34,133,263,95,-161,262,8,136,138,142,144,42',
'-159,49,1,34,11,14,53,25,30,37,54,45,50,3,9,16,17,-158,137,140,36,363',
'147,148,131,132,134,135,-160,139,143,34,9,16,323,347,133,8,346,350,254',
'328,42,282,49,1,-163,11,14,303,25,30,37,201,45,50,3,9,16,17,202,-161',
'210,36,286,64,195,182,273,30,179,274,275,50,34,9,16,17,181,73,8,36,337',
'187,-158,42,201,49,1,340,11,14,34,25,30,37,-165,45,50,3,9,16,17,87,344',
'-104,36,343,64,131,132,122,30,179,139,143,50,34,9,16,17,133,294,8,36',
'345,254,255,42,-105,49,1,119,11,14,34,25,30,37,226,45,50,3,9,16,17,195',
'354,312,36,-112,64,53,290,118,30,129,257,45,50,34,254,255,17,281,232',
'8,36,254,280,359,42,116,49,1,361,11,14,34,25,30,37,-160,45,50,3,9,16',
'17,131,132,-161,36,250,139,143,9,16,101,-211,73,133,79,34,100,-112,-112',
'-112,-112,8,-23,-23,-23,-23,42,365,49,1,66,11,14,286,25,30,37,92,45',
'50,3,64,366,17,284,30,76,36,282,50,367,201,154,17,68,9,16,36,34,73,82',
'79,370,269,8,9,16,372,34,73,282,79,34,266,34,9,16,66,319,73,56,79,254',
'280,261,379,380,66,64,,,,30,76,,,50,66,64,,17,68,30,76,36,,50,82,64',
',17,68,30,76,36,34,50,82,,,17,68,9,16,36,34,73,82,79,,,,9,16,,34,112',
',-178,,,,9,16,66,,73,,79,-29,-29,-29,-29,,111,64,,,,30,76,,,50,66,64',
',17,68,30,76,36,,50,82,64,,17,,30,76,36,34,50,,,,17,68,9,16,36,34,73',
'82,79,,,,9,16,,34,73,,79,,,,9,16,66,,73,,79,-25,-25,-25,-25,,66,64,',
',,30,76,,,50,66,64,,17,68,30,76,36,,50,82,64,,17,68,30,76,36,34,50,82',
',,17,68,9,16,36,34,73,82,79,,,,9,16,,34,73,,79,,,,9,16,66,,73,,79,59',
'60,61,57,,66,64,,,,30,76,,,50,66,64,,17,68,30,76,36,,50,82,64,,17,68',
'30,76,36,34,50,82,,,17,68,9,16,36,34,73,82,79,,,,9,16,,34,73,,79,,,',
'9,16,66,,73,,79,59,60,61,57,,66,64,,,,30,76,,,50,66,64,,17,68,30,76',
'36,,50,82,64,,17,68,30,76,36,34,50,82,,,17,68,9,16,36,34,73,82,79,,',
',9,16,,34,73,,79,,,,9,16,66,,73,,,,147,148,131,132,66,64,,139,143,30',
'76,,,50,133,64,,17,68,30,76,36,,50,82,64,,17,68,30,76,36,34,50,82,,',
'17,,9,16,36,34,73,152,79,,,,9,16,,34,73,,79,,,,9,16,66,,73,,79,,,,,',
'66,64,,,,30,76,,,50,66,64,,17,68,30,76,36,,50,82,64,,17,68,30,76,36',
'34,50,82,,,17,68,9,16,36,34,73,82,79,,,,9,16,,34,73,,79,,,,9,16,66,',
',,,,147,148,131,132,66,64,,139,143,30,76,,,50,133,64,,17,68,30,76,36',
',50,82,64,,17,68,30,179,36,34,50,82,,,17,,9,16,36,34,73,,79,,,,9,16',
',34,73,,79,,,,9,16,66,,73,,79,,,,,,66,64,,,,30,76,,,50,66,64,,17,68',
'30,76,36,,50,82,64,,17,68,30,76,36,34,50,82,,,17,68,9,16,36,34,73,82',
'79,,,,9,16,,34,73,,79,,,,9,16,66,,73,,79,,,,,,66,64,,,,30,76,,,50,66',
'64,,17,68,30,76,36,,50,82,64,,17,68,30,76,36,34,50,82,9,16,17,68,,,36',
'34,,82,9,16,,,73,,79,34,,,,147,148,131,132,134,135,,139,143,,,66,64',
'53,133,,30,129,,45,50,,64,,17,,30,76,36,,50,,,,17,68,9,16,36,34,73,82',
'79,,,,9,16,,34,73,,79,,,,9,16,66,258,73,,79,,,,,,66,64,,,,30,76,,,50',
'66,64,,17,68,30,76,36,,50,82,64,,17,68,30,76,36,34,50,82,,,17,68,9,16',
'36,34,73,82,79,,,,9,16,,34,73,,79,,,,9,16,66,,73,,79,,,,,,66,64,,,,30',
'76,,,50,66,64,,17,68,30,76,36,,50,82,64,,17,68,30,76,36,34,50,82,,,17',
'68,9,16,36,34,73,82,79,,,,9,16,,34,73,,79,,,,9,16,66,,,,,,,,,,66,64',
',,,30,76,,,50,,64,,17,68,30,76,36,,50,82,64,,17,68,30,179,36,34,50,82',
'298,,17,,,,36,34,,,141,145,,,,,,34,,136,138,142,144,,,,,,,,9,16,,,73',
',79,,,,,,137,140,,,147,148,131,132,134,135,66,139,143,9,16,,,73,133',
'79,,64,,,,30,76,,,50,,,,17,68,66,207,36,9,16,82,,73,152,79,,64,,34,',
'30,76,,,50,,,,17,68,66,,36,9,16,82,,73,,,,64,,34,,30,76,,,50,,,,17,68',
',,36,9,16,82,,73,,79,,64,,34,,30,76,,,50,9,16,,17,73,66,79,36,,,,,,',
',,64,,34,,30,76,66,,50,9,16,,17,68,,,36,64,,82,,30,76,,,50,,34,,17,68',
',,36,9,16,82,,73,,,,64,,34,,30,179,,,50,9,16,,17,73,,79,36,,,,,,,,,64',
',34,,30,223,66,,50,,,,17,,,,36,64,,,,30,76,,,50,,34,213,17,68,,,36,',
',82,141,145,,,,,146,34,,136,138,142,144,,,141,145,,,,,,,,136,138,142',
'144,,,,,137,140,,,147,148,131,132,134,135,,139,143,,,137,140,,133,147',
'148,131,132,134,135,211,139,143,,,,,,133,141,145,,,,,,,,136,138,142',
'144,,,141,145,,,,,,,253,136,138,142,144,,,,,137,140,,,147,148,131,132',
'134,135,,139,143,,,137,140,,133,147,148,131,132,134,135,,139,143,141',
'145,,,,133,,,,136,138,142,144,,,141,145,,,,,,,,136,138,142,144,,,,,',
',,,147,148,131,132,134,135,,139,143,,,137,140,,133,147,148,131,132,134',
'135,,139,143,141,145,,,,133,,,,136,138,142,144,,,141,145,,,,,,,,136',
'138,142,144,,,,,137,140,,,147,148,131,132,134,135,,139,143,,,137,140',
',133,147,148,131,132,134,135,,139,143,141,145,,,,133,,,,136,138,142',
'144,,,141,145,,,,,,,,136,138,142,144,,,,,137,140,,,147,148,131,132,134',
'135,,139,143,,,137,140,,133,147,148,131,132,134,135,,139,143,141,145',
',,,133,,,,136,138,142,144,,,141,145,,,,,,,,136,138,142,144,,,,,,140',
',,147,148,131,132,134,135,,139,143,,,137,140,,133,147,148,131,132,134',
'135,,139,143,141,145,,,,133,,,,136,138,142,144,,,141,145,,,,,,,,136',
'138,142,144,,,,,137,140,,,147,148,131,132,134,135,,139,143,,,137,140',
',133,147,148,131,132,134,135,,139,143,141,145,,,,133,,,,136,138,142',
'144,,,141,145,,,,,,,,136,138,142,144,,,,,137,140,,,147,148,131,132,134',
'135,,139,143,,,,,,133,147,148,131,132,134,135,,139,143,141,145,,,,133',
',,,136,138,142,144,,,141,145,,,,,,,,136,138,142,144,,,,,,,145,,147,148',
'131,132,134,135,136,139,143,,,137,140,145,133,147,148,131,132,134,135',
'136,139,143,,,,,,133,,145,,147,148,131,132,134,135,136,139,143,,,,,145',
'133,147,148,131,132,134,135,136,139,143,,,,,,133,,,,147,148,131,132',
'134,135,,139,143,,,,,,133,147,148,131,132,134,135,,139,143,,,,,,133',
'147,148,131,132,134,135,,139,143,,,,,,133' ]
        racc_action_table = arr = Array.new(2307, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,90,90,103,201,70,208,208,223,190,305,10,229,76,90,90,129,190,129',
'10,208,223,70,90,90,90,90,0,103,0,0,76,0,0,129,0,0,0,228,0,0,0,372,372',
'0,201,90,90,0,372,90,90,90,90,90,90,227,90,90,0,92,92,79,79,90,0,92',
'196,297,79,372,297,372,372,98,372,372,20,372,372,372,20,372,372,372',
'370,370,372,20,234,234,372,370,92,196,196,234,92,92,96,79,92,372,329',
'329,92,301,272,372,92,259,259,122,370,301,370,370,122,370,370,92,370',
'370,370,259,370,370,370,362,362,370,272,272,226,370,362,329,11,25,95',
'329,329,93,203,329,370,11,11,329,89,95,370,329,262,262,95,362,81,362',
'362,262,362,362,329,362,362,362,225,362,362,362,211,211,362,276,310',
'25,362,211,25,310,203,80,14,203,276,205,14,362,266,276,262,249,266,362',
'21,266,21,25,211,224,211,211,203,211,211,182,211,211,211,21,211,211',
'211,232,232,211,182,221,166,211,232,182,255,205,233,233,205,77,166,166',
'211,233,160,21,219,160,211,166,166,166,166,232,218,232,232,205,232,232',
'1,232,232,232,1,232,232,232,323,323,232,217,166,166,232,323,166,166',
'166,166,166,166,75,166,166,232,299,299,265,345,166,232,345,299,271,271',
'323,216,323,323,72,323,323,215,323,323,323,100,323,323,323,248,248,323',
'101,71,113,323,279,299,282,99,186,299,299,186,186,299,323,306,306,299',
'99,306,323,299,283,99,67,248,286,248,248,287,248,248,299,248,248,248',
'65,248,248,248,290,290,248,64,292,293,248,290,306,252,252,55,306,306',
'252,252,306,248,58,58,306,252,209,248,306,296,209,209,290,207,290,290',
'49,290,290,306,290,290,290,121,290,290,290,29,29,290,303,304,230,290',
'294,58,58,204,46,58,58,153,58,58,290,153,153,58,192,124,290,58,192,192',
'311,29,43,29,29,313,29,29,58,29,29,29,31,29,29,29,146,146,29,251,251',
'27,29,146,251,251,145,145,24,328,145,251,145,29,22,294,294,294,294,29',
'48,48,48,48,146,330,146,146,145,146,146,198,146,146,146,19,146,146,146',
'145,335,146,195,145,145,146,193,145,342,191,179,145,145,144,144,145',
'146,144,145,144,347,174,146,147,147,352,145,147,353,147,139,168,143',
'148,148,144,260,148,3,148,260,260,156,375,377,147,144,,,,144,144,,,144',
'148,147,,144,144,147,147,144,,147,144,148,,147,147,148,148,147,144,148',
'147,,,148,148,142,142,148,147,142,148,142,,,,37,37,,148,37,,37,,,,42',
'42,142,,42,,42,13,13,13,13,,37,142,,,,142,142,,,142,42,37,,142,142,37',
'37,142,,37,142,42,,37,,42,42,37,142,42,,,,42,42,312,312,42,37,312,42',
'312,,,,308,308,,42,308,,308,,,,141,141,312,,141,,141,5,5,5,5,,308,312',
',,,312,312,,,312,141,308,,312,312,308,308,312,,308,312,141,,308,308',
'141,141,308,312,141,308,,,141,141,140,140,141,308,140,141,140,,,,346',
'346,,141,346,,346,,,,288,288,140,,288,,288,6,6,6,6,,346,140,,,,140,140',
',,140,288,346,,140,140,346,346,140,,346,140,288,,346,346,288,288,346',
'140,288,346,,,288,288,66,66,288,346,66,288,66,,,,284,284,,288,284,,284',
',,,68,68,66,,68,,68,12,12,12,12,,284,66,,,,66,66,,,66,68,284,,66,66',
'284,284,66,,284,66,68,,284,284,68,68,284,66,68,284,,,68,68,278,278,68',
'284,278,68,278,,,,277,277,,68,277,,277,,,,269,269,278,,269,,,,237,237',
'237,237,277,278,,237,237,278,278,,,278,237,277,,278,278,277,277,278',
',277,278,269,,277,277,269,269,277,278,269,277,,,269,,73,73,269,277,73',
'73,73,,,,169,169,,269,169,,169,,,,261,261,73,,261,,261,,,,,,169,73,',
',,73,73,,,73,261,169,,73,73,169,169,73,,169,73,261,,169,169,261,261',
'169,73,261,169,,,261,261,256,256,261,169,256,261,256,,,,138,138,,261',
'138,,138,,,,351,351,256,,,,,,236,236,236,236,138,256,,236,236,256,256',
',,256,236,138,,256,256,138,138,256,,138,256,351,,138,138,351,351,138',
'256,351,138,,,351,,137,137,351,138,137,,137,,,,82,82,,351,82,,82,,,',
'84,84,137,,84,,84,,,,,,82,137,,,,137,137,,,137,84,82,,137,137,82,82',
'137,,82,137,84,,82,82,84,84,82,137,84,82,,,84,84,85,85,84,82,85,84,85',
',,,86,86,,84,86,,86,,,,87,87,85,,87,,87,,,,,,86,85,,,,85,85,,,85,87',
'86,,85,85,86,86,85,,86,85,87,,86,86,87,87,86,85,87,86,88,88,87,87,,',
'87,86,,87,136,136,,,136,,136,87,,,,238,238,238,238,238,238,,238,238',
',,136,88,88,238,,88,88,,88,88,,136,,88,,136,136,88,,136,,,,136,136,154',
'154,136,88,154,136,154,,,,16,16,,136,16,,16,,,,135,135,154,154,135,',
'135,,,,,,16,154,,,,154,154,,,154,135,16,,154,154,16,16,154,,16,154,135',
',16,16,135,135,16,154,135,16,,,135,135,134,134,135,16,134,135,134,,',
',133,133,,135,133,,133,,,,97,97,134,,97,,97,,,,,,133,134,,,,134,134',
',,134,97,133,,134,134,133,133,134,,133,134,97,,133,133,97,97,133,134',
'97,133,,,97,97,132,132,97,133,132,97,132,,,,8,8,,97,8,,8,,,,213,213',
'132,,,,,,,,,,8,132,,,,132,132,,,132,,8,,132,132,8,8,132,,8,132,213,',
'8,8,213,213,8,132,213,8,212,,213,,,,213,8,,,212,212,,,,,,213,,212,212',
'212,212,,,,,,,,155,155,,,155,,155,,,,,,212,212,,,212,212,212,212,212',
'212,155,212,212,111,111,,,111,212,111,,155,,,,155,155,,,155,,,,155,155',
'111,111,155,112,112,155,,112,112,112,,111,,155,,111,111,,,111,,,,111',
'111,112,,111,210,210,111,,210,,,,112,,111,,112,112,,,112,,,,112,112',
',,112,131,131,112,,131,,131,,210,,112,,210,210,,,210,116,116,,210,116',
'131,116,210,,,,,,,,,131,,210,,131,131,116,,131,180,180,,131,131,,,131',
'116,,131,,116,116,,,116,,131,,116,116,,,116,118,118,116,,118,,,,180',
',116,,180,180,,,180,45,45,,180,45,,45,180,,,,,,,,,118,,180,,118,118',
'45,,118,,,,118,,,,118,45,,,,45,45,,,45,,118,117,45,45,,,45,,,45,117',
'117,,,,,63,45,,117,117,117,117,,,63,63,,,,,,,,63,63,63,63,,,,,117,117',
',,117,117,117,117,117,117,,117,117,,,63,63,,117,63,63,63,63,63,63,114',
'63,63,,,,,,63,114,114,,,,,,,,114,114,114,114,,,149,149,,,,,,,149,149',
'149,149,149,,,,,114,114,,,114,114,114,114,114,114,,114,114,,,149,149',
',114,149,149,149,149,149,149,,149,149,242,242,,,,149,,,,242,242,242',
'242,,,357,357,,,,,,,,357,357,357,357,,,,,,,,,242,242,242,242,242,242',
',242,242,,,357,357,,242,357,357,357,357,357,357,,357,357,165,165,,,',
'357,,,,165,165,165,165,,,151,151,,,,,,,,151,151,151,151,,,,,165,165',
',,165,165,165,165,165,165,,165,165,,,151,151,,165,151,151,151,151,151',
'151,,151,151,360,360,,,,151,,,,360,360,360,360,,,163,163,,,,,,,,163',
'163,163,163,,,,,360,360,,,360,360,360,360,360,360,,360,360,,,163,163',
',360,163,163,163,163,163,163,,163,163,239,239,,,,163,,,,239,239,239',
'239,,,164,164,,,,,,,,164,164,164,164,,,,,,239,,,239,239,239,239,239',
'239,,239,239,,,164,164,,239,164,164,164,164,164,164,,164,164,338,338',
',,,164,,,,338,338,338,338,,,320,320,,,,,,,,320,320,320,320,,,,,338,338',
',,338,338,338,338,338,338,,338,338,,,320,320,,338,320,320,320,320,320',
'320,,320,320,341,341,,,,320,,,,341,341,341,341,,,333,333,,,,,,,,333',
'333,333,333,,,,,341,341,,,341,341,341,341,341,341,,341,341,,,,,,341',
'333,333,333,333,333,333,,333,333,334,334,,,,333,,,,334,334,334,334,',
',317,317,,,,,,,,317,317,317,317,,,,,,,244,,334,334,334,334,334,334,244',
'334,334,,,317,317,240,334,317,317,317,317,317,317,240,317,317,,,,,,317',
',246,,244,244,244,244,244,244,246,244,244,,,,,243,244,240,240,240,240',
'240,240,243,240,240,,,,,,240,,,,246,246,246,246,246,246,,246,246,,,',
',,246,243,243,243,243,243,243,,243,243,,,,,,243,247,247,247,247,247',
'247,,247,247,,,,,,247' ]
        racc_action_check = arr = Array.new(2307, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   214,   nil,   468,   nil,   585,   652,   nil,  1352,   nil,
    -3,   132,   719,   518,   148,   nil,  1218,   nil,   nil,   446,
    42,   190,   440,   nil,   442,   137,   nil,   412,   nil,   385,
   nil,   403,   nil,   nil,   nil,   nil,   nil,   562,   nil,   nil,
   nil,   nil,   572,   410,   nil,  1619,   390,   nil,   391,   374,
   nil,   nil,   nil,   nil,   nil,   331,   nil,   nil,   360,   nil,
   nil,   nil,   nil,  1672,   341,   317,   753,   305,   773,   nil,
     0,   282,   267,   887,   nil,   249,     8,   206,   nil,    61,
   160,   152,  1031,   nil,  1041,  1088,  1098,  1108,  1151,   126,
    -2,   nil,    59,   135,   nil,   116,    92,  1295,    35,   287,
   257,   304,   nil,    -8,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1460,  1485,   294,  1723,   nil,  1552,  1657,  1602,   nil,
   nil,   371,    78,   nil,   401,   nil,   nil,   nil,   nil,    11,
   nil,  1535,  1342,  1285,  1275,  1228,  1161,  1021,   964,   442,
   686,   639,   552,   444,   485,   438,   428,   495,   505,  1738,
   nil,  1858,   nil,   394,  1208,  1435,   505,   nil,   nil,   nil,
   225,   nil,   nil,  1918,  1978,  1843,   213,   nil,   468,   897,
   nil,   nil,   nil,   nil,   484,   nil,   nil,   nil,   nil,   460,
  1577,   nil,   183,   nil,   nil,   nil,   266,   nil,   nil,   nil,
    -8,   443,   401,   468,   nil,   465,    46,   nil,   453,   nil,
   nil,    -6,   nil,   142,   389,   185,   nil,   350,    -4,   359,
  1510,   170,  1400,  1362,   nil,   273,   275,   238,   221,   213,
   nil,   196,   nil,    -2,   195,   127,   132,    42,    14,     1,
   377,   nil,   213,   166,    30,   nil,   931,   797,  1121,  1963,
  2191,   nil,  1783,  2224,  2176,   nil,  2209,  2239,   299,   184,
   nil,   378,   298,   nil,   nil,   217,   954,   nil,   nil,   100,
   503,   907,   152,   nil,   nil,   270,   154,   nil,   nil,   840,
   nil,   273,    83,   nil,   nil,   nil,   151,   830,   820,   296,
   nil,   nil,   270,   317,   763,   nil,   290,   324,   706,   nil,
   342,   nil,   323,   326,   386,   nil,   360,    38,   nil,   274,
   nil,    95,   nil,   350,   382,     2,   317,   nil,   629,   nil,
   141,   389,   619,   410,   nil,   nil,   nil,  2158,   nil,   nil,
  2038,   nil,   nil,   256,   nil,   nil,   nil,   nil,   434,   102,
   450,   nil,   nil,  2098,  2143,   465,   nil,   nil,  2023,   nil,
   nil,  2083,   473,   nil,   nil,   248,   696,   486,   nil,   nil,
   nil,   974,   491,   490,   nil,   nil,   nil,  1798,   nil,   nil,
  1903,   nil,   127,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    84,   nil,    41,   nil,   nil,   508,   nil,   509,   nil,   nil,
   nil ]

racc_action_default = [
  -187,  -224,  -167,   -59,   -19,    -8,   -20,    -9,  -224,  -106,
  -222,  -204,  -224,   -10,  -179,  -158,  -224,   -83,   -11,  -224,
  -224,  -159,   -24,   -12,  -224,  -224,  -163,   -26,   -13,    -1,
  -111,   -27,   -14,    -2,  -212,  -162,   -81,   -82,   -28,   -15,
    -3,  -164,  -224,   -30,   -16,  -224,  -224,   -17,    -6,  -224,
  -166,   -18,    -7,  -179,  -178,  -187,   -60,   -34,  -224,   -31,
   -32,   -33,  -123,  -224,  -204,  -222,  -224,   -44,  -224,   -51,
   -45,   -48,   -46,  -224,   -49,   -43,   -82,   -52,   -47,  -224,
   -53,   -50,  -224,  -124,  -224,  -224,  -224,  -224,  -224,  -187,
  -224,  -107,  -224,  -224,   -58,  -187,   -62,  -224,   -94,  -187,
  -101,  -224,  -186,  -187,  -184,  -180,  -182,  -183,  -185,    -4,
   -39,  -224,  -224,   -38,  -224,  -116,  -224,  -224,   -94,  -168,
  -169,  -171,  -188,  -189,  -224,   -25,   -29,   -22,   -24,   -82,
   -23,  -224,  -224,  -224,  -224,  -224,  -224,  -224,  -224,  -224,
  -224,  -224,  -224,  -224,  -224,  -224,  -224,  -224,  -224,  -224,
  -141,   -41,  -207,  -224,  -224,  -224,  -224,  -220,  -219,  -215,
  -224,  -216,  -134,   -92,   -91,   -93,  -224,   -21,  -187,  -224,
  -109,  -108,  -165,  -159,  -224,  -161,  -152,  -160,  -153,   -82,
  -224,  -204,  -187,   -75,   -74,   -65,  -224,   -82,   -66,   -68,
  -224,  -101,  -224,  -210,   -95,  -224,  -224,   -99,  -210,  -100,
  -102,  -224,   381,  -224,  -224,  -224,  -198,   -37,  -224,  -224,
  -224,  -224,  -224,  -224,   -77,  -224,  -210,   -85,   -86,   -88,
   -89,   -84,   -87,   -82,   -90,   -79,  -224,  -197,  -224,  -210,
  -195,  -192,  -224,  -131,  -130,  -125,  -132,  -133,  -136,  -143,
  -138,  -126,  -142,  -140,  -137,  -127,  -139,  -135,    -5,  -224,
  -115,  -128,  -129,  -144,  -208,  -209,  -224,  -205,  -105,  -224,
  -224,  -224,  -224,  -213,  -221,  -224,  -224,  -200,  -110,  -224,
  -155,  -210,  -224,   -63,   -71,   -70,  -224,  -224,  -224,  -210,
  -209,  -113,  -211,  -224,  -224,   -64,  -211,  -224,  -224,  -181,
  -224,  -199,  -209,   -35,  -205,   -40,  -224,  -119,  -223,  -224,
  -146,  -224,  -150,   -94,  -224,  -224,   -80,  -170,  -224,  -190,
  -211,  -224,  -224,  -224,  -173,  -114,  -206,   -42,  -104,  -112,
  -218,  -214,  -217,  -224,  -201,  -202,  -203,  -157,  -209,  -224,
  -224,   -69,   -67,   -72,   -73,  -224,   -96,   -56,   -97,  -103,
   -57,   -98,  -224,  -177,   -36,  -119,  -224,  -224,  -118,  -147,
  -145,  -224,  -224,  -210,   -55,   -54,   -78,  -196,  -193,  -191,
  -194,  -172,  -224,  -175,  -156,  -154,   -61,  -176,  -117,  -120,
  -224,  -151,  -224,   -76,  -174,  -224,  -122,  -224,  -149,  -121,
  -148 ]

racc_goto_table = [
    21,    35,    29,   178,   115,    55,   110,   220,   214,   231,
   102,   109,   193,    26,    41,   120,   197,    91,    89,   198,
    93,   161,   300,   105,   126,   348,    43,   124,   174,    21,
    35,   249,   216,   186,   125,    96,   127,   196,   299,   339,
    33,   153,    26,    41,    94,    22,    58,   332,   176,   171,
   271,   305,    88,   121,   126,    43,   225,   265,    21,    35,
   103,   168,   283,   204,   125,   192,   167,   287,   329,   291,
    10,    26,    41,   368,    22,   228,   229,   113,   324,   208,
   209,   160,   130,    24,    43,   304,   nil,   nil,    21,    35,
   nil,   270,   173,    35,   nil,   123,   296,   nil,   311,    10,
   nil,    26,    41,   128,   nil,    26,    41,   197,   349,   nil,
   279,   nil,   130,   nil,    43,   nil,   174,   313,   218,    35,
   272,   nil,   259,   260,   241,   nil,   nil,   nil,   245,   123,
   nil,    26,    41,   128,   nil,   nil,   nil,   nil,   nil,   nil,
   330,   nil,   nil,   206,   224,   nil,    21,    35,   335,   302,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,
    41,   nil,   172,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   268,    38,    43,   nil,   nil,   342,    15,   nil,   nil,   295,
   173,    35,   nil,   nil,   nil,   nil,   nil,   nil,   102,   nil,
   102,    22,   307,    26,    41,   220,   356,   358,   336,   nil,
    38,   289,   197,   nil,   322,    15,   nil,   nil,   267,   nil,
   nil,    21,    35,   173,    35,   nil,    10,   353,   nil,   nil,
   nil,   nil,   373,   nil,    26,    41,    26,    41,   nil,    38,
   109,   nil,    21,    35,    15,   302,   nil,    43,   327,   nil,
   364,   nil,   nil,   nil,   nil,    26,    41,   nil,    21,    35,
   172,   nil,   nil,   nil,   nil,   375,    22,   377,    43,    38,
   nil,    26,    41,   nil,    15,   174,   nil,   nil,    15,   nil,
   325,   183,   nil,   nil,    43,   183,   nil,    22,   nil,   nil,
   nil,    10,   nil,   172,   nil,   nil,   nil,   371,   nil,   222,
    21,    35,   nil,    22,   217,   nil,   nil,   nil,   nil,   173,
    35,   nil,    10,    26,    41,   nil,   218,    35,   369,   nil,
   nil,   nil,    26,    41,   nil,   nil,    43,    38,    10,    26,
    41,    27,    15,    21,    35,   362,   nil,   nil,   nil,   173,
    35,   nil,   224,   nil,   nil,    22,    26,    41,   nil,   nil,
   nil,   nil,    26,    41,   109,   nil,   nil,   nil,   nil,    43,
    27,   173,    35,   nil,   nil,   nil,    15,   nil,   183,   nil,
    10,   nil,    21,    35,    26,    41,   nil,   nil,    22,   172,
    21,    35,    21,    35,   nil,    26,    41,   nil,   nil,    27,
   nil,   nil,    38,    26,    41,    26,    41,    15,    43,    15,
   nil,   nil,   nil,    10,   nil,   nil,    43,   nil,    43,   172,
   nil,   nil,   nil,    38,    31,   nil,   nil,    22,    15,    27,
   nil,   nil,   nil,   175,   nil,    22,   184,    22,   nil,    38,
   184,   172,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,    31,   nil,   nil,   nil,   nil,   nil,   219,
    10,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   183,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    38,    31,   nil,   nil,   nil,    15,    27,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    15,   nil,   222,   nil,   nil,
   nil,   nil,   217,   157,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    31,   nil,    38,   nil,   177,   nil,   nil,    15,
   nil,   175,   nil,   184,   nil,    15,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   221,   nil,   nil,   nil,   nil,    15,   nil,   nil,
   nil,    63,    27,    38,   175,   nil,   nil,   nil,    15,    90,
   nil,    38,   nil,    38,   nil,   nil,    15,   nil,    15,   nil,
    31,   nil,   nil,    27,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   114,   nil,   nil,   117,    27,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   177,   nil,   nil,   nil,   nil,   149,
   nil,   150,   nil,   nil,   nil,   nil,   nil,   184,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   162,   nil,   163,   164,   165,
   166,    27,   nil,   nil,   nil,    31,   nil,   177,   nil,   nil,
   175,   nil,   nil,   nil,   nil,   nil,   nil,   219,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    31,   nil,   nil,   212,
   nil,   nil,   nil,   nil,    27,   nil,   nil,   nil,   nil,   nil,
   175,   nil,    31,   nil,   233,   234,   235,   236,   237,   238,
   239,   240,   nil,   242,   243,   244,   157,   246,   247,   nil,
   251,   252,   175,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    27,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    27,    90,    27,    31,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   177,   nil,   nil,   nil,   nil,   nil,   nil,
   221,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    31,   nil,   nil,
   nil,   nil,   nil,   177,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   177,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    31,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    31,   nil,    31,   nil,   nil,   317,
   nil,   nil,   nil,   nil,   320,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   333,   334,   nil,   nil,   nil,   nil,   nil,   338,   nil,   nil,
   nil,   341,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   357,   nil,   nil,   nil,   360,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   114 ]

racc_goto_check = [
    34,    37,     2,    69,    60,    39,    30,    36,    52,    81,
    63,     4,    42,    35,    38,    71,    55,    58,    39,    44,
    34,    84,    65,    77,    10,    61,    27,    73,    67,    34,
    37,     5,    42,    47,     8,    46,    21,    47,    64,    57,
     3,    28,    35,    38,     6,    23,    22,    48,    68,    59,
    70,    41,    22,    72,    10,    27,    40,    74,    34,    37,
    75,    73,    43,    76,     8,    28,    21,    43,    32,    78,
    54,    35,    38,    61,    23,    79,    80,    29,    82,    28,
    28,    83,     6,     1,    27,    43,   nil,   nil,    34,    37,
   nil,    69,    34,    37,   nil,     3,     5,   nil,    43,    54,
   nil,    35,    38,    23,   nil,    35,    38,    55,    65,   nil,
    44,   nil,     6,   nil,    27,   nil,    67,     5,    34,    37,
    47,   nil,    28,    28,    63,   nil,   nil,   nil,    63,     3,
   nil,    35,    38,    23,   nil,   nil,   nil,   nil,   nil,   nil,
    43,   nil,   nil,     3,    27,   nil,    34,    37,    43,    67,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    35,
    38,   nil,    54,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    58,    26,    27,   nil,   nil,     5,    33,   nil,   nil,    30,
    34,    37,   nil,   nil,   nil,   nil,   nil,   nil,    63,   nil,
    63,    23,    71,    35,    38,    36,    52,    81,    55,   nil,
    26,    77,    55,   nil,    84,    33,   nil,   nil,     3,   nil,
   nil,    34,    37,    34,    37,   nil,    54,    42,   nil,   nil,
   nil,   nil,    43,   nil,    35,    38,    35,    38,   nil,    26,
     4,   nil,    34,    37,    33,    67,   nil,    27,    30,   nil,
    69,   nil,   nil,   nil,   nil,    35,    38,   nil,    34,    37,
    54,   nil,   nil,   nil,   nil,     5,    23,     5,    27,    26,
   nil,    35,    38,   nil,    33,    67,   nil,   nil,    33,   nil,
    39,    33,   nil,   nil,    27,    33,   nil,    23,   nil,   nil,
   nil,    54,   nil,    54,   nil,   nil,   nil,    67,   nil,    26,
    34,    37,   nil,    23,    33,   nil,   nil,   nil,   nil,    34,
    37,   nil,    54,    35,    38,   nil,    34,    37,    60,   nil,
   nil,   nil,    35,    38,   nil,   nil,    27,    26,    54,    35,
    38,    24,    33,    34,    37,     2,   nil,   nil,   nil,    34,
    37,   nil,    27,   nil,   nil,    23,    35,    38,   nil,   nil,
   nil,   nil,    35,    38,     4,   nil,   nil,   nil,   nil,    27,
    24,    34,    37,   nil,   nil,   nil,    33,   nil,    33,   nil,
    54,   nil,    34,    37,    35,    38,   nil,   nil,    23,    54,
    34,    37,    34,    37,   nil,    35,    38,   nil,   nil,    24,
   nil,   nil,    26,    35,    38,    35,    38,    33,    27,    33,
   nil,   nil,   nil,    54,   nil,   nil,    27,   nil,    27,    54,
   nil,   nil,   nil,    26,    25,   nil,   nil,    23,    33,    24,
   nil,   nil,   nil,    24,   nil,    23,    24,    23,   nil,    26,
    24,    54,   nil,   nil,    33,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    54,    25,   nil,   nil,   nil,   nil,   nil,    24,
    54,   nil,    54,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    33,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    26,    25,   nil,   nil,   nil,    33,    24,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    33,   nil,    26,   nil,   nil,
   nil,   nil,    33,    25,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    25,   nil,    26,   nil,    25,   nil,   nil,    33,
   nil,    24,   nil,    24,   nil,    33,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    25,   nil,   nil,   nil,   nil,    33,   nil,   nil,
   nil,    31,    24,    26,    24,   nil,   nil,   nil,    33,    31,
   nil,    26,   nil,    26,   nil,   nil,    33,   nil,    33,   nil,
    25,   nil,   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    31,   nil,   nil,    31,    24,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,    31,
   nil,    31,   nil,   nil,   nil,   nil,   nil,    24,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    31,   nil,    31,    31,    31,
    31,    24,   nil,   nil,   nil,    25,   nil,    25,   nil,   nil,
    24,   nil,   nil,   nil,   nil,   nil,   nil,    24,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,    31,
   nil,   nil,   nil,   nil,    24,   nil,   nil,   nil,   nil,   nil,
    24,   nil,    25,   nil,    31,    31,    31,    31,    31,    31,
    31,    31,   nil,    31,    31,    31,    25,    31,    31,   nil,
    31,    31,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    24,    31,    24,    25,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,
    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,
   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    25,   nil,    25,   nil,   nil,    31,
   nil,   nil,   nil,   nil,    31,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    31,    31,   nil,   nil,   nil,   nil,   nil,    31,   nil,   nil,
   nil,    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    31,   nil,   nil,   nil,    31,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    31 ]

racc_goto_pointer = [
   nil,    83,     2,    40,   -18,  -115,    24,   nil,   -24,   nil,
   -34,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -22,    40,    45,   321,   404,   171,    26,   -32,    40,
   -31,   523,  -203,   176,     0,    13,  -111,     1,    14,     4,
   -62,  -174,   -86,  -131,   -81,   nil,    14,   -62,  -229,   nil,
   nil,   nil,  -110,   nil,    70,   -84,   nil,  -247,     1,   -41,
   -38,  -272,   nil,   -15,  -175,  -191,   nil,   -64,   -44,   -89,
  -130,   -34,     4,   -28,  -111,    35,   -40,    -2,  -136,   -47,
   -46,  -113,  -188,     2,   -58,   nil ]

racc_goto_default = [
   nil,   nil,   248,   185,    40,   nil,    48,    52,     5,     7,
    13,    18,    23,    28,    32,    39,    44,    47,    51,     4,
     6,    12,   nil,    69,    71,    75,    78,    81,   nil,   nil,
    62,   151,   256,    67,    70,    72,    74,    77,    80,    46,
   nil,   nil,   nil,   nil,   nil,    20,   nil,   nil,   188,   276,
   189,   190,   nil,   215,    65,   194,   199,   200,   nil,   nil,
   nil,   nil,    83,     2,   nil,   nil,   301,    19,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   106,   nil,
   nil,   nil,   nil,   nil,   nil,   156 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 71, :_reduce_3,
  2, 71, :_reduce_4,
  1, 74, :_reduce_5,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  3, 89, :_reduce_21,
  3, 89, :_reduce_22,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  4, 83, :_reduce_35,
  5, 83, :_reduce_36,
  3, 83, :_reduce_37,
  2, 83, :_reduce_38,
  1, 98, :_reduce_39,
  3, 98, :_reduce_40,
  1, 97, :_reduce_41,
  3, 97, :_reduce_42,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  5, 75, :_reduce_54,
  5, 75, :_reduce_55,
  5, 75, :_reduce_56,
  5, 87, :_reduce_57,
  2, 76, :_reduce_58,
  1, 114, :_reduce_59,
  2, 114, :_reduce_60,
  6, 77, :_reduce_61,
  2, 77, :_reduce_62,
  3, 115, :_reduce_63,
  3, 115, :_reduce_64,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  3, 116, :_reduce_67,
  1, 117, :_reduce_none,
  3, 117, :_reduce_69,
  1, 118, :_reduce_70,
  1, 118, :_reduce_71,
  3, 119, :_reduce_72,
  3, 119, :_reduce_73,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  4, 121, :_reduce_76,
  1, 109, :_reduce_77,
  3, 109, :_reduce_78,
  0, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 107, :_reduce_81,
  1, 102, :_reduce_82,
  1, 103, :_reduce_83,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  3, 78, :_reduce_91,
  3, 78, :_reduce_92,
  3, 88, :_reduce_93,
  0, 111, :_reduce_94,
  1, 111, :_reduce_95,
  3, 111, :_reduce_96,
  3, 124, :_reduce_97,
  3, 125, :_reduce_98,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  0, 113, :_reduce_101,
  1, 113, :_reduce_102,
  3, 113, :_reduce_103,
  4, 106, :_reduce_104,
  3, 106, :_reduce_105,
  1, 94, :_reduce_106,
  2, 94, :_reduce_107,
  2, 127, :_reduce_108,
  1, 128, :_reduce_109,
  2, 128, :_reduce_110,
  1, 104, :_reduce_111,
  4, 92, :_reduce_112,
  4, 92, :_reduce_113,
  5, 81, :_reduce_114,
  4, 81, :_reduce_115,
  2, 80, :_reduce_116,
  5, 129, :_reduce_117,
  4, 129, :_reduce_118,
  0, 130, :_reduce_none,
  2, 130, :_reduce_120,
  4, 130, :_reduce_121,
  3, 130, :_reduce_122,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  3, 100, :_reduce_125,
  3, 100, :_reduce_126,
  3, 100, :_reduce_127,
  3, 100, :_reduce_128,
  3, 100, :_reduce_129,
  3, 100, :_reduce_130,
  3, 100, :_reduce_131,
  3, 100, :_reduce_132,
  3, 100, :_reduce_133,
  2, 100, :_reduce_134,
  3, 100, :_reduce_135,
  3, 100, :_reduce_136,
  3, 100, :_reduce_137,
  3, 100, :_reduce_138,
  3, 100, :_reduce_139,
  3, 100, :_reduce_140,
  2, 100, :_reduce_141,
  3, 100, :_reduce_142,
  3, 100, :_reduce_143,
  3, 100, :_reduce_144,
  5, 79, :_reduce_145,
  1, 133, :_reduce_146,
  2, 133, :_reduce_147,
  5, 134, :_reduce_148,
  4, 134, :_reduce_149,
  1, 135, :_reduce_150,
  3, 135, :_reduce_151,
  3, 95, :_reduce_152,
  1, 137, :_reduce_none,
  4, 137, :_reduce_154,
  1, 139, :_reduce_none,
  3, 139, :_reduce_156,
  3, 138, :_reduce_157,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_166,
  1, 136, :_reduce_none,
  1, 140, :_reduce_168,
  1, 141, :_reduce_none,
  3, 141, :_reduce_170,
  2, 82, :_reduce_171,
  6, 84, :_reduce_172,
  5, 84, :_reduce_173,
  7, 85, :_reduce_174,
  6, 85, :_reduce_175,
  6, 86, :_reduce_176,
  5, 86, :_reduce_177,
  1, 108, :_reduce_178,
  1, 108, :_reduce_179,
  1, 144, :_reduce_180,
  3, 144, :_reduce_181,
  1, 146, :_reduce_182,
  1, 147, :_reduce_183,
  1, 147, :_reduce_184,
  1, 147, :_reduce_185,
  1, 147, :_reduce_none,
  0, 72, :_reduce_187,
  0, 148, :_reduce_188,
  1, 142, :_reduce_none,
  3, 142, :_reduce_190,
  4, 142, :_reduce_191,
  1, 149, :_reduce_none,
  3, 149, :_reduce_193,
  3, 150, :_reduce_194,
  1, 150, :_reduce_195,
  3, 150, :_reduce_196,
  1, 150, :_reduce_197,
  1, 145, :_reduce_none,
  2, 145, :_reduce_199,
  1, 143, :_reduce_none,
  2, 143, :_reduce_201,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 93, :_reduce_204,
  3, 105, :_reduce_205,
  4, 105, :_reduce_206,
  2, 105, :_reduce_207,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  0, 112, :_reduce_none,
  1, 112, :_reduce_211,
  1, 132, :_reduce_212,
  3, 131, :_reduce_213,
  4, 131, :_reduce_214,
  2, 131, :_reduce_215,
  1, 152, :_reduce_none,
  3, 152, :_reduce_217,
  3, 153, :_reduce_218,
  1, 154, :_reduce_219,
  1, 154, :_reduce_220,
  4, 123, :_reduce_221,
  1, 96, :_reduce_none,
  4, 96, :_reduce_223 ]

racc_reduce_n = 224

racc_shift_n = 381

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68 }

racc_nt_base = 69

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "unlessstatement",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "expressions",
  "funcvalues",
  "rvalue",
  "expression",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "funcrvalue",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 34)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 37)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 46)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'grammar.ra', 73)
  def _reduce_21(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 76)
  def _reduce_22(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'grammar.ra', 91)
  def _reduce_35(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 98)
  def _reduce_36(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 104)
  def _reduce_37(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 111)
  def _reduce_38(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 118)
  def _reduce_39(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 121)
  def _reduce_40(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 125)
  def _reduce_41(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 126)
  def _reduce_42(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

module_eval(<<'.,.,', 'grammar.ra', 141)
  def _reduce_54(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 144)
  def _reduce_55(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 147)
  def _reduce_56(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 154)
  def _reduce_57(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 161)
  def _reduce_58(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 177)
  def _reduce_59(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 178)
  def _reduce_60(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 183)
  def _reduce_61(val, _values, result)
      @lexer.commentpop
  type = val[0].value.downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 201)
  def _reduce_62(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 219)
  def _reduce_63(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 227)
  def _reduce_64(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'grammar.ra', 240)
  def _reduce_67(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 68 omitted

module_eval(<<'.,.,', 'grammar.ra', 245)
  def _reduce_69(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 249)
  def _reduce_70(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 250)
  def _reduce_71(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 253)
  def _reduce_72(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 258)
  def _reduce_73(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 74 omitted

# reduce 75 omitted

module_eval(<<'.,.,', 'grammar.ra', 267)
  def _reduce_76(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 270)
  def _reduce_77(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 272)
  def _reduce_78(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 79 omitted

# reduce 80 omitted

module_eval(<<'.,.,', 'grammar.ra', 280)
  def _reduce_81(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 284)
  def _reduce_82(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 288)
  def _reduce_83(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

module_eval(<<'.,.,', 'grammar.ra', 300)
  def _reduce_91(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 306)
  def _reduce_92(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 310)
  def _reduce_93(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 316)
  def _reduce_94(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 318)
  def _reduce_95(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 320)
  def _reduce_96(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 325)
  def _reduce_97(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 329)
  def _reduce_98(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 99 omitted

# reduce 100 omitted

module_eval(<<'.,.,', 'grammar.ra', 338)
  def _reduce_101(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 340)
  def _reduce_102(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 342)
  def _reduce_103(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 348)
  def _reduce_104(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 353)
  def _reduce_105(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 359)
  def _reduce_106(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 360)
  def _reduce_107(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 362)
  def _reduce_108(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 364)
  def _reduce_109(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 365)
  def _reduce_110(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 368)
  def _reduce_111(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 372)
  def _reduce_112(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 375)
  def _reduce_113(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 379)
  def _reduce_114(val, _values, result)
      @lexer.commentpop
  args = {
    :test => ast(AST::Not, :value => val[1]),
    :statements => val[3]
  }

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 388)
  def _reduce_115(val, _values, result)
        @lexer.commentpop
    args = {
      :test => ast(AST::Not, :value => val[1]), 
      :statements => ast(AST::Nop)
    }
    result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 397)
  def _reduce_116(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 401)
  def _reduce_117(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 412)
  def _reduce_118(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 119 omitted

module_eval(<<'.,.,', 'grammar.ra', 425)
  def _reduce_120(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 428)
  def _reduce_121(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 432)
  def _reduce_122(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 123 omitted

# reduce 124 omitted

module_eval(<<'.,.,', 'grammar.ra', 451)
  def _reduce_125(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 454)
  def _reduce_126(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 457)
  def _reduce_127(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 460)
  def _reduce_128(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 463)
  def _reduce_129(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 466)
  def _reduce_130(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 469)
  def _reduce_131(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 472)
  def _reduce_132(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 475)
  def _reduce_133(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 478)
  def _reduce_134(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 481)
  def _reduce_135(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 484)
  def _reduce_136(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 487)
  def _reduce_137(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 490)
  def _reduce_138(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 493)
  def _reduce_139(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 496)
  def _reduce_140(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 499)
  def _reduce_141(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 502)
  def _reduce_142(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 505)
  def _reduce_143(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 508)
  def _reduce_144(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 512)
  def _reduce_145(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 516)
  def _reduce_146(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 518)
  def _reduce_147(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 523)
  def _reduce_148(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 526)
  def _reduce_149(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 536)
  def _reduce_150(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 538)
  def _reduce_151(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 543)
  def _reduce_152(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 153 omitted

module_eval(<<'.,.,', 'grammar.ra', 548)
  def _reduce_154(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 155 omitted

module_eval(<<'.,.,', 'grammar.ra', 554)
  def _reduce_156(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 563)
  def _reduce_157(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

module_eval(<<'.,.,', 'grammar.ra', 575)
  def _reduce_166(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 167 omitted

module_eval(<<'.,.,', 'grammar.ra', 580)
  def _reduce_168(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 169 omitted

module_eval(<<'.,.,', 'grammar.ra', 582)
  def _reduce_170(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 585)
  def _reduce_171(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 595)
  def _reduce_172(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 603)
  def _reduce_173(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 611)
  def _reduce_174(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 618)
  def _reduce_175(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 627)
  def _reduce_176(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 632)
  def _reduce_177(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 636)
  def _reduce_178(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 637)
  def _reduce_179(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 642)
  def _reduce_180(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 645)
  def _reduce_181(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 650)
  def _reduce_182(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 653)
  def _reduce_183(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 654)
  def _reduce_184(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 655)
  def _reduce_185(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 186 omitted

module_eval(<<'.,.,', 'grammar.ra', 659)
  def _reduce_187(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 663)
  def _reduce_188(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 189 omitted

module_eval(<<'.,.,', 'grammar.ra', 668)
  def _reduce_190(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 671)
  def _reduce_191(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 192 omitted

module_eval(<<'.,.,', 'grammar.ra', 677)
  def _reduce_193(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 683)
  def _reduce_194(val, _values, result)
      Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
  result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 687)
  def _reduce_195(val, _values, result)
        Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 690)
  def _reduce_196(val, _values, result)
      result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 692)
  def _reduce_197(val, _values, result)
      result = [val[0][:value]]

    result
  end
.,.,

# reduce 198 omitted

module_eval(<<'.,.,', 'grammar.ra', 697)
  def _reduce_199(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 200 omitted

module_eval(<<'.,.,', 'grammar.ra', 702)
  def _reduce_201(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 202 omitted

# reduce 203 omitted

module_eval(<<'.,.,', 'grammar.ra', 708)
  def _reduce_204(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 711)
  def _reduce_205(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 712)
  def _reduce_206(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 713)
  def _reduce_207(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

module_eval(<<'.,.,', 'grammar.ra', 719)
  def _reduce_211(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 722)
  def _reduce_212(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 726)
  def _reduce_213(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 733)
  def _reduce_214(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 739)
  def _reduce_215(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 216 omitted

module_eval(<<'.,.,', 'grammar.ra', 744)
  def _reduce_217(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 753)
  def _reduce_218(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 756)
  def _reduce_219(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 757)
  def _reduce_220(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 760)
  def _reduce_221(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 222 omitted

module_eval(<<'.,.,', 'grammar.ra', 765)
  def _reduce_223(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
