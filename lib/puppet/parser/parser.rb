#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 798)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'9,15,359,104,66,106,-131,182,213,85,86,87,83,9,15,93,9,15,107,212,349',
'205,104,188,215,181,305,306,150,152,155,125,128,58,135,136,140,142,146',
'-179,153,156,103,9,15,16,206,139,144,147,355,186,373,97,186,371,99,292',
'93,-113,31,-131,-131,-131,-131,127,130,134,283,320,312,39,181,47,1,31',
'10,13,213,21,25,35,321,44,48,2,9,15,16,212,333,293,34,398,215,82,97',
'305,306,99,332,169,173,31,80,81,341,283,308,8,164,166,170,172,39,331',
'47,1,31,10,13,346,21,25,35,120,44,48,2,9,15,16,213,165,168,34,396,175',
'176,158,159,161,163,212,167,171,31,-124,215,158,159,160,8,162,167,171',
'181,39,316,47,1,160,10,13,213,21,25,35,302,44,48,2,9,15,16,212,301,330',
'34,315,215,313,54,182,377,-198,55,169,173,31,54,258,378,16,55,8,164',
'166,170,172,39,181,47,1,300,10,13,54,21,25,35,55,44,48,2,9,15,16,295',
'165,168,34,335,175,176,158,159,161,163,337,167,171,31,9,15,158,159,160',
'8,162,167,171,91,39,31,47,1,160,10,13,-185,21,25,35,31,44,48,2,9,15',
'16,167,171,-186,34,385,58,121,160,343,25,237,167,171,48,31,9,15,16,160',
'54,8,34,-180,55,-97,39,354,47,1,344,10,13,31,21,25,35,-181,44,48,2,9',
'15,16,283,367,309,34,279,58,283,308,304,25,237,305,306,48,31,9,15,16',
'322,-179,8,34,283,284,-130,39,291,47,1,290,10,13,31,21,25,35,260,44',
'48,2,9,15,16,-178,351,258,34,323,58,93,286,257,25,237,283,284,48,31',
'9,15,16,256,347,8,34,376,283,308,39,373,47,1,371,10,13,31,21,25,35,254',
'44,48,2,9,15,16,250,97,248,34,99,58,313,362,242,25,237,364,221,48,31',
'9,15,16,106,209,8,34,370,31,-123,39,122,47,1,121,10,13,31,21,25,35,374',
'44,48,2,9,15,16,-184,-182,-180,34,395,58,54,250,381,25,197,382,44,48',
'31,9,15,16,258,-183,8,34,-181,-178,-185,39,386,47,1,82,10,13,31,21,25',
'35,122,44,48,2,9,15,16,387,121,-229,34,120,58,54,389,-180,25,197,391',
'44,48,31,-181,110,16,394,108,8,34,100,57,56,39,400,47,1,401,10,13,31',
'21,25,35,,44,48,2,169,173,16,,,,34,200,201,164,166,170,172,-39,-39,-39',
'-39,31,,,169,173,,8,-41,-41,-41,-41,,164,166,170,172,,,,175,176,158',
'159,161,163,,167,171,85,86,87,83,,160,,165,168,173,,175,176,158,159',
'161,163,164,167,171,246,-45,-45,-45,-45,160,,162,,169,173,,,,,,,,164',
'166,170,172,,,175,176,158,159,161,163,,167,171,,,,,,160,,,165,168,173',
',175,176,158,159,161,163,164,167,171,247,,,,,160,,162,,169,173,,,,,',
',,164,166,170,172,,,175,176,158,159,161,163,,167,171,,,,,,160,,,165',
'168,,,175,176,158,159,161,163,,167,171,174,,,,,160,,162,,169,173,,,',
',,,,164,166,170,172,,,175,176,158,159,,9,15,167,171,66,,72,,,160,,,165',
'168,,,175,176,158,159,161,163,59,167,171,9,15,,,114,160,-198,162,58',
',,,25,69,,,48,,,,16,64,113,,34,9,15,77,,66,,72,,58,,31,,25,69,,,48,9',
'15,,16,66,59,72,34,,,,,,,,,58,,31,,25,69,59,,48,,,,16,64,,,34,58,,77',
',25,69,,,48,,31,,16,64,9,15,34,,66,77,72,,,,9,15,,31,66,,72,175,176',
'158,159,,59,,167,171,,,,,,160,59,58,,,,25,69,,,48,,58,,16,64,25,69,34',
',48,77,,,16,64,9,15,34,31,66,77,72,,,,9,15,,31,66,,72,,,,9,15,59,288',
'66,,72,,,,,,59,58,,,,25,69,,,48,59,58,,16,64,25,69,34,,48,77,58,,16',
'64,25,69,34,31,48,77,,,16,64,9,15,34,31,66,77,72,,,,9,15,,31,66,,72',
',,,9,15,59,,66,,72,,,,,,59,58,,,,25,69,,,48,59,58,,16,64,25,69,34,,48',
'77,58,,16,64,25,69,34,31,48,77,,,16,64,9,15,34,31,66,77,72,,,,9,15,',
'31,66,,72,,,,9,15,59,,66,180,72,,,,,,59,58,,,,25,69,,,48,59,58,,16,64',
'25,69,34,,48,77,58,,16,64,25,69,34,31,48,77,,,16,64,9,15,34,31,66,77',
'72,,,,9,15,,31,66,,72,,,,9,15,59,,66,,72,,,,,,59,58,,,,25,69,,,48,59',
'58,,16,64,25,69,34,,48,77,58,,16,64,25,69,34,31,48,77,,,16,64,9,15,34',
'31,66,77,72,,,,9,15,,31,66,,72,,,,9,15,59,,66,,72,,,,,,59,58,,,,25,69',
',,48,59,58,,16,64,25,69,34,,48,77,58,,16,64,25,69,34,31,48,77,,,16,64',
'9,15,34,31,66,77,72,,,,9,15,,31,66,,72,,,,9,15,59,,66,,72,,,,,,59,58',
',,,25,69,,,48,59,58,,16,64,25,69,34,,48,77,58,,16,64,25,69,34,31,48',
'77,,,16,64,9,15,34,31,66,77,72,,,,9,15,,31,66,,72,,,,9,15,59,,66,,72',
',,,,,59,58,,,,25,69,,,48,59,58,,16,64,25,69,34,,48,77,58,,16,64,25,69',
'34,31,48,77,,,16,64,9,15,34,31,66,77,72,,,,9,15,,31,66,,72,,,,9,15,59',
',66,,72,,,,,,59,58,,,,25,69,,,48,59,58,,16,64,25,69,34,,48,77,58,,16',
'64,25,69,34,31,48,77,,,16,64,9,15,34,31,66,77,72,,,,9,15,,31,66,,,,',
',9,15,59,,66,,,,,,,,,58,,,,25,69,,,48,,58,,16,64,25,69,34,,48,77,58',
',16,,25,69,34,31,48,9,15,,16,66,,72,34,31,,9,15,,,66,,72,,31,,9,15,59',
',66,,72,,,,,,59,58,,,,25,69,,,48,59,58,,16,64,25,69,34,,48,77,58,,16',
'64,25,69,34,31,48,77,,,16,64,9,15,34,31,66,77,72,,,,9,15,,31,66,,72',
',,,9,15,59,,,,239,,,,,,59,58,,,,25,69,,,48,,58,,16,64,25,69,34,,48,77',
'58,,16,64,25,237,34,31,48,77,,,16,,9,15,34,31,66,,72,,,,,,,31,,,,9,15',
',,66,59,72,,,,,,,,,,58,,,,25,69,59,244,48,9,15,,16,64,,,34,58,,77,,25',
'69,,,48,,31,,16,64,,,34,9,15,77,,66,180,72,,58,,31,,25,237,,,48,9,15',
',16,66,59,72,34,,,,,,,,,58,,31,,25,69,59,,48,,,,16,64,,,34,58,,77,,25',
'69,,,48,,31,,16,64,9,15,34,,66,77,72,,,,9,15,,31,66,,72,,,,9,15,59,',
'66,,72,,,,,,59,58,,,,25,69,,,48,59,58,,16,64,25,69,34,,48,77,58,,16',
'64,25,69,34,31,48,77,,,16,64,9,15,34,31,66,77,72,,,,9,15,,31,66,,175',
'176,158,159,161,163,59,167,171,,,,,,160,,,58,,,,25,69,,,48,,58,,16,64',
'25,237,34,,48,77,169,173,16,,,,34,31,,164,166,170,172,,,,,31,,,,,,173',
',,,,,,,164,165,168,,,175,176,158,159,161,163,,167,171,169,173,,,,160',
',162,,164,166,170,172,175,176,158,159,161,163,,167,171,,,,,,160,,,,',
'165,168,,,175,176,158,159,161,163,,167,171,169,173,,,,160,,162,,164',
'166,170,172,,,,,169,173,,,,,,,,164,166,170,172,,,165,168,,,175,176,158',
'159,161,163,,167,171,,,,,,160,,162,175,176,158,159,161,163,,167,171',
'169,173,,,,160,,162,,164,166,170,172,,,,,169,173,,,,,,,,164,166,170',
'172,,,165,168,,,175,176,158,159,161,163,,167,171,,,,,,160,,162,175,176',
'158,159,161,163,,167,171,169,173,,,,160,,162,,164,166,170,172,175,176',
'158,159,161,163,,167,171,,173,,,,160,,,,164,165,168,,,175,176,158,159',
'161,163,,167,171,169,173,,,,160,,162,,164,166,170,172,175,176,158,159',
'161,163,,167,171,,,,,,160,,,,,165,168,,,175,176,158,159,161,163,,167',
'171,169,173,,,,160,,162,,164,166,170,172,,,,,,,,,,,,,,,,,,,,165,168',
',,175,176,158,159,161,163,,167,171,169,173,,,,160,,162,,164,166,170',
'172,,,,,,,,,,,,,,,,,,,,165,168,,,175,176,158,159,161,163,,167,171,169',
'173,,,,160,,162,261,164,166,170,172,,,,,,,,,,,,,,,,,,,,165,168,,,175',
'176,158,159,161,163,,167,171,169,173,,,,160,,162,,164,166,170,172,,',
',,,169,173,,,,,,,,164,166,170,172,,165,168,,,175,176,158,159,161,163',
',167,171,,,,,,160,168,162,,175,176,158,159,161,163,,167,171,169,173',
',,,160,,,,164,166,170,172,,,,,,,,,,,,,,,,,,,,,168,,,175,176,158,159',
'161,163,,167,171,150,152,155,125,128,160,135,136,140,223,231,,153,226',
',,,,,139,144,225,150,152,155,125,128,,135,136,140,223,224,,153,226,',
'127,130,134,,139,144,225,150,152,155,125,128,,135,136,140,223,224,,153',
'226,,127,130,134,,139,144,225,150,152,155,125,128,,135,136,140,223,231',
',153,226,,127,130,134,,139,144,225,150,152,155,125,128,,135,136,140',
'223,224,,153,226,,127,130,134,,139,144,225,150,152,155,125,128,,135',
'136,140,223,231,,153,226,,127,130,134,,139,144,225,,,,,,,,,,,,,,,,127',
'130,134' ]
        racc_action_table = arr = ::Array.new(2569, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'57,57,303,27,57,27,322,69,213,11,11,11,11,290,290,206,72,72,27,213,290',
'95,68,72,213,69,303,303,57,57,57,57,57,57,57,57,57,57,57,68,57,57,27',
'300,300,57,95,57,57,57,300,290,323,206,72,323,206,185,205,146,57,322',
'322,322,322,57,57,57,243,243,227,300,146,300,300,206,300,300,107,300',
'300,300,243,300,300,300,394,394,300,107,252,192,300,394,107,10,205,227',
'227,205,251,192,192,300,10,10,259,287,287,300,192,192,192,192,394,250',
'394,394,205,394,394,287,394,394,394,248,394,394,394,391,391,394,103',
'192,192,394,391,192,192,192,192,192,192,103,192,192,394,244,103,281',
'281,192,394,192,281,281,237,391,236,391,391,281,391,391,307,391,391',
'391,211,391,391,391,278,278,391,307,211,249,391,231,307,229,26,197,327',
'197,26,249,249,391,1,222,327,26,1,391,249,249,249,249,278,197,278,278',
'207,278,278,13,278,278,278,13,278,278,278,254,254,278,199,249,249,278',
'254,249,249,249,249,249,249,255,249,249,278,377,377,282,282,249,278',
'249,282,282,18,254,171,254,254,282,254,254,18,254,254,254,167,254,254',
'254,351,351,254,263,263,156,254,351,377,154,263,280,377,377,262,262',
'377,254,368,368,377,262,295,254,377,149,295,147,351,295,351,351,284',
'351,351,377,351,351,351,145,351,351,351,174,174,351,318,318,220,351',
'174,368,220,220,218,368,368,218,218,368,351,247,247,368,245,143,351',
'368,245,245,142,174,183,174,174,183,174,174,368,174,174,174,141,174',
'174,174,246,246,174,138,294,133,174,246,247,21,178,132,247,247,178,178',
'247,174,325,325,247,126,289,174,247,325,289,289,246,374,246,246,374',
'246,246,247,246,246,246,123,246,246,246,0,0,246,122,21,119,246,21,325',
'310,311,111,325,325,314,105,325,246,84,84,325,101,100,246,325,320,21',
'321,0,88,0,0,79,0,0,325,0,0,0,324,0,0,0,384,384,0,78,75,74,0,384,84',
'84,333,334,84,84,336,84,84,0,92,92,84,339,71,0,84,70,65,63,384,356,384',
'384,58,384,384,84,384,384,384,53,384,384,384,30,30,384,361,50,367,384',
'47,92,92,369,40,92,92,373,92,92,384,36,33,92,378,28,384,92,24,3,2,30',
'397,30,30,399,30,30,92,30,30,30,,30,30,30,272,272,30,,,,30,89,89,272',
'272,272,272,52,52,52,52,30,,,89,89,,30,7,7,7,7,,89,89,89,89,,,,272,272',
'272,272,272,272,,272,272,19,19,19,19,,272,,89,89,270,,89,89,89,89,89',
'89,270,89,89,116,17,17,17,17,89,,89,,116,116,,,,,,,,116,116,116,116',
',,270,270,270,270,270,270,,270,270,,,,,,270,,,116,116,276,,116,116,116',
'116,116,116,276,116,116,117,,,,,116,,116,,117,117,,,,,,,,117,117,117',
'117,,,276,276,276,276,276,276,,276,276,,,,,,276,,,117,117,,,117,117',
'117,117,117,117,,117,117,62,,,,,117,,117,,62,62,,,,,,,,62,62,62,62,',
',265,265,265,265,,161,161,265,265,161,,161,,,265,,,62,62,,,62,62,62',
'62,62,62,161,62,62,35,35,,,35,62,35,62,161,,,,161,161,,,161,,,,161,161',
'35,,161,182,182,161,,182,,182,,35,,161,,35,35,,,35,39,39,,35,39,182',
'39,35,,,,,,,,,182,,35,,182,182,39,,182,,,,182,182,,,182,39,,182,,39',
'39,,,39,,182,,39,39,371,371,39,,371,39,371,,,,44,44,,39,44,,44,267,267',
'267,267,,371,,267,267,,,,,,267,44,371,,,,371,371,,,371,,44,,371,371',
'44,44,371,,44,371,,,44,44,181,181,44,371,181,44,181,,,,176,176,,44,176',
',176,,,,175,175,181,181,175,,175,,,,,,176,181,,,,181,181,,,181,175,176',
',181,181,176,176,181,,176,181,175,,176,176,175,175,176,181,175,176,',
',175,175,15,15,175,176,15,175,15,,,,59,59,,175,59,,59,,,,200,200,15',
',200,,200,,,,,,59,15,,,,15,15,,,15,200,59,,15,15,59,59,15,,59,15,200',
',59,59,200,200,59,15,200,59,,,200,200,64,64,200,59,64,200,64,,,,173',
'173,,200,173,,173,,,,66,66,64,,66,66,66,,,,,,173,64,,,,64,64,,,64,66',
'173,,64,64,173,173,64,,173,64,66,,173,173,66,66,173,64,66,173,,,66,66',
'8,8,66,173,8,66,8,,,,172,172,,66,172,,172,,,,170,170,8,,170,,170,,,',
',,172,8,,,,8,8,,,8,170,172,,8,8,172,172,8,,172,8,170,,172,172,170,170',
'172,8,170,172,,,170,170,169,169,170,172,169,170,169,,,,168,168,,170',
'168,,168,,,,331,331,169,,331,,331,,,,,,168,169,,,,169,169,,,169,331',
'168,,169,169,168,168,169,,168,169,331,,168,168,331,331,168,169,331,168',
',,331,331,166,166,331,168,166,331,166,,,,77,77,,331,77,,77,,,,165,165',
'166,,165,,165,,,,,,77,166,,,,166,166,,,166,165,77,,166,166,77,77,166',
',77,166,165,,77,77,165,165,77,166,165,77,,,165,165,80,80,165,77,80,165',
'80,,,,81,81,,165,81,,81,,,,82,82,80,,82,,82,,,,,,81,80,,,,80,80,,,80',
'82,81,,80,80,81,81,80,,81,80,82,,81,81,82,82,81,80,82,81,,,82,82,164',
'164,82,81,164,82,164,,,,91,91,,82,91,,91,,,,163,163,164,,163,,163,,',
',,,91,164,,,,164,164,,,164,163,91,,164,164,91,91,164,,91,164,163,,91',
'91,163,163,91,164,163,91,,,163,163,162,162,163,91,162,163,162,,,,316',
'316,,163,316,,,,,,242,242,162,,242,,,,,,,,,162,,,,162,162,,,162,,316',
',162,162,316,316,162,,316,162,242,,316,,242,242,316,162,242,104,104',
',242,104,,104,242,316,,315,315,,,315,,315,,242,,160,160,104,,160,,160',
',,,,,315,104,,,,104,104,,,104,160,315,,104,104,315,315,104,,315,104',
'160,,315,315,160,160,315,104,160,315,,,160,160,159,159,160,315,159,160',
'159,,,,158,158,,160,158,,158,,,,110,110,159,,,,110,,,,,,158,159,,,,159',
'159,,,159,,158,,159,159,158,158,159,,158,159,110,,158,158,110,110,158',
'159,110,158,,,110,,260,260,110,158,260,,260,,,,,,,110,,,,113,113,,,113',
'260,113,,,,,,,,,,260,,,,260,260,113,113,260,239,239,,260,260,,,260,113',
',260,,113,113,,,113,,260,,113,113,,,113,114,114,113,,114,114,114,,239',
',113,,239,239,,,239,285,285,,239,285,114,285,239,,,,,,,,,114,,239,,114',
'114,285,,114,,,,114,114,,,114,285,,114,,285,285,,,285,,114,,285,285',
'121,121,285,,121,285,121,,,,292,292,,285,292,,292,,,,302,302,121,,302',
',302,,,,,,292,121,,,,121,121,,,121,302,292,,121,121,292,292,121,,292',
'121,302,,292,292,302,302,292,121,302,292,,,302,302,301,301,302,292,301',
'302,301,,,,256,256,,302,256,,268,268,268,268,268,268,301,268,268,,,',
',,268,,,301,,,,301,301,,,301,,256,,301,301,256,256,301,,256,301,179',
'179,256,,,,256,301,,179,179,179,179,,,,,256,,,,,,274,,,,,,,,274,179',
'179,,,179,179,179,179,179,179,,179,179,190,190,,,,179,,179,,190,190',
'190,190,274,274,274,274,274,274,,274,274,,,,,,274,,,,,190,190,,,190',
'190,190,190,190,190,,190,190,191,191,,,,190,,190,,191,191,191,191,,',
',,358,358,,,,,,,,358,358,358,358,,,191,191,,,191,191,191,191,191,191',
',191,191,,,,,,191,,191,358,358,358,358,358,358,,358,358,379,379,,,,358',
',358,,379,379,379,379,,,,,357,357,,,,,,,,357,357,357,357,,,379,379,',
',379,379,379,379,379,379,,379,379,,,,,,379,,379,357,357,357,357,357',
'357,,357,357,342,342,,,,357,,357,,342,342,342,342,277,277,277,277,277',
'277,,277,277,,273,,,,277,,,,273,342,342,,,342,342,342,342,342,342,,342',
'342,350,350,,,,342,,342,,350,350,350,350,273,273,273,273,273,273,,273',
'273,,,,,,273,,,,,350,350,,,350,350,350,350,350,350,,350,350,345,345',
',,,350,,350,,345,345,345,345,,,,,,,,,,,,,,,,,,,,345,345,,,345,345,345',
'345,345,345,,345,345,203,203,,,,345,,345,,203,203,203,203,,,,,,,,,,',
',,,,,,,,,203,203,,,203,203,203,203,203,203,,203,203,157,157,,,,203,',
'203,157,157,157,157,157,,,,,,,,,,,,,,,,,,,,157,157,,,157,157,157,157',
'157,157,,157,157,365,365,,,,157,,157,,365,365,365,365,,,,,,269,269,',
',,,,,,269,269,269,269,,365,365,,,365,365,365,365,365,365,,365,365,,',
',,,365,269,365,,269,269,269,269,269,269,,269,269,266,266,,,,269,,,,266',
'266,266,266,,,,,,,,,,,,,,,,,,,,,266,,,266,266,266,266,266,266,,266,266',
'221,221,221,221,221,266,221,221,221,221,221,,221,221,,,,,,221,221,221',
'257,257,257,257,257,,257,257,257,257,257,,257,257,,221,221,221,,257',
'257,257,106,106,106,106,106,,106,106,106,106,106,,106,106,,257,257,257',
',106,106,106,108,108,108,108,108,,108,108,108,108,108,,108,108,,106',
'106,106,,108,108,108,258,258,258,258,258,,258,258,258,258,258,,258,258',
',108,108,108,,258,258,258,313,313,313,313,313,,313,313,313,313,313,',
'313,313,,258,258,258,,313,313,313,,,,,,,,,,,,,,,,313,313,313' ]
        racc_action_check = arr = ::Array.new(2569, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   385,   154,   456,   491,   nil,   nil,   nil,   477,  1088,   nil,
    89,   -54,   nil,   171,   nil,   954,   nil,   519,   227,   498,
   nil,   351,   nil,   nil,   498,   nil,   146,    -3,   487,   nil,
   471,   nil,   nil,   469,   nil,   741,   468,   nil,   nil,   783,
   461,   nil,   nil,   nil,   840,   nil,   nil,   478,   nil,   nil,
   471,   nil,   466,   445,   nil,   nil,   nil,    -2,   456,   964,
   nil,   nil,   681,   434,  1021,   433,  1041,   nil,    16,     1,
   432,   429,    14,   nil,   412,   411,   nil,  1232,   410,   413,
  1289,  1299,  1309,   nil,   403,   nil,   nil,   nil,   392,   519,
   nil,  1366,   446,   nil,   nil,     9,   nil,   nil,   nil,   nil,
   409,   400,   nil,   108,  1485,   394,  2433,    54,  2455,   nil,
  1572,   386,   nil,  1636,  1686,   nil,   573,   627,   nil,   380,
   nil,  1750,   355,   375,   nil,   nil,   324,   nil,   nil,   nil,
   nil,   nil,   335,   337,   nil,   nil,   nil,   nil,   324,   nil,
   nil,   329,   305,   300,   nil,   274,    48,   262,   nil,   260,
   nil,   nil,   nil,   nil,   261,   nil,   240,  2249,  1562,  1552,
  1505,   716,  1423,  1376,  1356,  1242,  1222,   192,  1165,  1155,
  1108,   182,  1098,  1031,   299,   907,   897,   nil,   347,  1855,
   nil,   887,   766,   321,   nil,    46,   nil,   nil,   nil,   nil,
  1900,  1945,    84,   nil,   nil,   nil,   nil,   177,   nil,   181,
   974,   nil,   nil,  2204,   nil,    56,    13,   196,   nil,   nil,
   nil,   150,   nil,   -16,   nil,   nil,   nil,   nil,   266,   nil,
   299,  2389,   179,   nil,   nil,   nil,   nil,    48,   nil,   169,
   nil,   127,   nil,   nil,   nil,   nil,   147,   132,   nil,  1661,
   nil,   nil,  1443,    57,   124,   315,   342,   317,   123,   170,
   100,    75,    78,   nil,   213,   220,  1827,  2411,  2477,    97,
  1619,   nil,   212,   201,   nil,   660,  2357,   796,  1782,  2312,
   552,   nil,   499,  2091,  1877,   nil,   606,  2046,   170,   nil,
   260,    94,   180,   nil,   283,  1703,   nil,    96,   nil,   359,
    11,   nil,  1760,   nil,   340,   244,   nil,   nil,   nil,   nil,
    41,  1817,  1770,   -23,   nil,   nil,   nil,   140,   nil,   nil,
   384,   388,   nil,  2499,   392,  1495,  1433,   nil,   293,   nil,
   387,   391,    -2,    21,   417,   360,   nil,   172,   nil,   nil,
   nil,  1175,   nil,   405,   416,   nil,   435,   nil,   nil,   439,
   nil,   nil,  2069,   nil,   nil,  2159,   nil,   nil,   nil,   nil,
  2114,   256,   nil,   nil,   nil,   nil,   450,  2024,  1962,   nil,
   nil,   467,   nil,   nil,   nil,  2294,   nil,   469,   274,   474,
   nil,   830,   nil,   479,   342,   nil,   nil,   231,   486,  2007,
   nil,   nil,   nil,   nil,   428,   nil,   nil,   nil,   nil,   nil,
   nil,   127,   nil,   nil,    84,   nil,   nil,   493,   nil,   496,
   nil,   nil ]

racc_action_default = [
  -207,  -242,   -75,  -242,   -18,    -7,   -19,    -8,  -242,  -125,
  -222,   -20,    -9,  -199,  -187,  -242,   -99,   -10,  -240,  -242,
   -11,  -242,  -178,   -12,  -242,  -130,  -242,  -179,   -40,   -13,
    -1,  -230,  -183,  -242,   -97,   -98,   -42,   -14,    -2,  -242,
   -43,   -15,    -3,  -182,  -242,   -44,   -16,  -242,  -186,  -184,
   -46,   -17,    -6,  -207,  -199,  -198,   -76,  -110,  -222,  -242,
  -143,  -142,  -242,  -240,  -242,   -60,  -242,   -67,   -61,   -98,
   -64,   -62,  -242,   -65,   -59,   -68,   -63,  -242,   -69,   -66,
  -242,  -242,  -242,   -50,  -242,   -47,   -48,   -49,  -207,  -242,
  -126,  -242,  -242,  -204,  -206,  -207,  -200,  -203,  -202,  -205,
  -242,  -242,   -74,  -207,  -242,   -78,  -110,  -207,  -120,    -4,
  -242,   -54,   -55,  -242,  -242,  -135,  -242,  -242,  -189,  -191,
  -188,  -242,  -208,  -242,  -209,   -25,   -95,   -29,   -27,   -93,
   -36,  -114,  -242,  -228,   -34,   -23,   -31,  -111,  -101,   -33,
   -32,  -242,  -115,  -102,   -21,  -104,   -98,   -35,  -105,  -100,
   -28,  -103,   -26,   -22,  -106,   -30,   -24,  -242,  -242,  -242,
  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -242,
  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -160,  -242,   -57,
  -225,  -242,  -242,  -242,  -234,  -242,  -237,  -238,  -233,  -153,
  -107,  -109,  -242,   -41,   -45,   -38,   -40,   -98,   -39,  -207,
  -242,  -128,  -127,  -108,   -37,  -242,  -242,  -242,  -216,   402,
   -84,  -242,  -222,  -207,   -91,   -98,   -90,   -81,  -242,   -82,
  -242,  -120,  -228,  -115,  -113,   -35,   -24,  -242,  -118,  -228,
  -119,  -113,  -121,  -185,  -179,  -181,  -242,   -98,  -180,  -242,
  -172,  -173,  -242,  -242,   -53,  -242,  -242,  -242,  -242,  -242,
  -215,  -242,  -228,  -212,  -242,  -242,   -96,  -110,  -229,  -242,
  -242,  -164,  -150,  -149,  -144,  -151,  -163,  -152,  -155,  -162,
  -157,  -145,  -161,  -159,  -156,  -146,  -158,  -154,    -5,  -134,
  -242,  -147,  -148,  -226,  -227,  -242,  -223,  -242,  -124,  -242,
  -242,  -231,  -242,  -239,  -242,  -242,  -218,  -129,  -201,  -217,
  -242,  -242,  -242,  -242,   -79,   -87,   -86,  -242,  -227,  -132,
  -228,  -242,   -80,  -229,  -242,  -242,  -242,  -175,  -228,   -56,
  -227,   -51,  -223,  -138,  -242,  -242,  -166,  -242,  -170,  -190,
  -241,  -242,  -210,  -229,  -242,  -193,  -242,   -70,   -94,  -228,
  -112,   -71,  -116,  -133,  -224,   -58,  -123,  -131,  -235,  -232,
  -236,  -242,  -220,  -219,  -221,  -197,  -242,   -88,   -89,   -85,
   -83,  -242,   -72,  -122,   -73,  -117,  -177,  -227,  -242,  -242,
   -52,  -242,  -137,  -242,  -138,  -167,  -165,  -242,  -242,  -214,
  -213,  -211,  -192,   -92,  -242,  -195,  -196,   -77,  -176,  -174,
  -139,  -242,  -136,  -171,  -242,  -194,  -141,  -242,  -169,  -242,
  -140,  -168 ]

racc_goto_table = [
    27,    30,   184,   115,    22,   109,   236,    53,   241,   118,
   280,   253,   112,    50,   133,    96,   148,    90,   228,    88,
    94,   123,   326,   259,   372,    38,   101,   129,   229,   178,
    27,   195,   105,   193,    22,   102,   218,    84,    32,   204,
   227,   193,    43,    50,   194,    92,   325,   363,   360,   240,
   202,   318,   194,   255,   119,   126,   199,   143,   294,    95,
   207,   138,   368,   222,   299,   251,   252,   220,    32,   111,
   154,   353,    43,   183,    24,   392,   243,   245,   124,   nil,
   nil,   nil,   324,   nil,    27,   nil,   nil,    18,    22,   nil,
   336,   nil,    27,   198,   nil,    32,    22,    50,   nil,    43,
   375,   198,    45,   nil,   nil,    50,   nil,   214,   nil,   nil,
   234,   214,   311,   124,    22,   nil,   nil,    18,   nil,   314,
   208,   nil,    32,   nil,   nil,   nil,    43,   nil,   nil,   nil,
    32,   228,    45,   nil,    43,   236,   356,   317,   nil,   nil,
   nil,   310,   334,   328,   287,   289,   303,   nil,    32,   nil,
   nil,   nil,    43,   nil,   nil,   nil,   nil,   nil,   nil,   151,
   nil,   nil,   nil,   nil,   nil,   nil,   271,   nil,   340,   nil,
   275,   nil,   nil,   nil,    27,   nil,   nil,   nil,    22,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    45,    50,   nil,   nil,
   nil,   nil,   nil,   nil,    45,   nil,   nil,   233,   nil,   298,
   361,   nil,   297,   nil,    94,    94,   nil,   nil,   369,   nil,
   329,    40,    32,   nil,   339,   148,    43,   214,   nil,   319,
   348,   328,   380,   228,   296,   nil,   338,   397,   nil,   383,
   399,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   234,
   nil,    40,   nil,    22,   nil,   nil,    27,   234,   nil,   nil,
    22,    22,   nil,   109,    27,   nil,   143,   nil,    22,    50,
   138,    18,   nil,   nil,   236,   nil,   388,    50,   149,   154,
   nil,   nil,   nil,   393,   nil,   nil,    45,    32,    27,   nil,
   nil,    43,    22,   187,    32,    32,   nil,    28,    43,    43,
   nil,    50,    32,   366,    32,    40,    43,   nil,    43,   nil,
    27,   352,   nil,    40,    22,   nil,   nil,   nil,   nil,   nil,
   nil,   214,   nil,    50,   nil,   nil,    32,    28,   nil,   nil,
    43,   238,   nil,   nil,   nil,   234,   233,   nil,   nil,    22,
   nil,   nil,   nil,    18,   233,   390,   nil,   nil,    32,   nil,
   nil,    18,    43,   nil,   nil,   nil,   nil,   nil,    45,   nil,
   nil,    27,   384,   nil,   nil,    22,    45,   nil,   151,   109,
   nil,   nil,   nil,    32,    50,    18,   nil,    43,   234,   nil,
    36,   196,    22,   nil,   nil,   nil,   nil,   234,   nil,   196,
    45,    22,   nil,   nil,    27,    40,   nil,    18,    22,    32,
    49,    27,   nil,    43,    27,    22,   nil,    50,    22,   nil,
    36,   nil,    45,   nil,    50,   nil,    32,    50,   nil,   nil,
    43,   nil,   233,   nil,   nil,    32,   nil,   nil,   nil,    43,
    49,   nil,    32,   nil,   nil,   nil,    43,   145,   nil,    32,
   nil,   nil,    32,    43,   nil,   nil,    43,   nil,    18,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    49,   nil,   nil,
   238,   nil,   nil,    45,    36,   233,   nil,    40,   238,   nil,
   nil,    28,    36,   nil,   233,    40,   nil,   149,   nil,   nil,
   nil,    18,   nil,   216,    49,   nil,   nil,   216,    18,   nil,
   235,    18,    49,   nil,   nil,   nil,    45,   nil,   nil,    40,
   nil,   nil,   nil,    45,   nil,   nil,    45,   nil,   nil,    62,
    49,   187,   nil,   nil,   nil,   nil,    89,   nil,   nil,   nil,
   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   116,   nil,   nil,    28,   nil,   117,   238,   nil,   nil,   nil,
   nil,    28,   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,
   157,   nil,   nil,   nil,   nil,   177,   nil,   nil,   nil,   nil,
   nil,   nil,    40,   nil,    49,    28,   nil,   nil,   189,   nil,
   nil,   190,   191,   192,   nil,   nil,   nil,   nil,   nil,   238,
   nil,   nil,   203,   216,   nil,   nil,   nil,    28,   238,   nil,
   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,
   nil,   nil,    40,   nil,   nil,    40,   nil,   nil,   nil,   235,
   nil,   nil,   249,   nil,   nil,   nil,    36,   235,   nil,   nil,
   nil,   nil,   nil,   nil,    36,   nil,   145,   nil,   nil,    49,
   nil,   nil,   nil,   nil,   nil,   nil,    49,    49,    28,   nil,
   nil,   nil,   nil,   nil,    49,   nil,    49,   nil,    36,   262,
   263,   264,   265,   266,   267,   268,   269,   270,   nil,   272,
   273,   274,   nil,   276,   277,   nil,   281,   282,    49,   nil,
    36,    28,   nil,   nil,   nil,   nil,   nil,   216,    28,   nil,
   nil,    28,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    49,    89,   nil,   nil,   nil,   235,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,   nil,
   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   235,   nil,
   nil,    49,   nil,   nil,   nil,   nil,   nil,   235,   nil,   nil,
   nil,   342,   nil,   nil,    36,   nil,   nil,   nil,    49,   nil,
   nil,    36,   nil,   nil,    36,   nil,   nil,    49,   nil,   nil,
   nil,   nil,   nil,   nil,    49,   nil,   345,   nil,   nil,   nil,
   nil,    49,   nil,   350,    49,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   357,   358,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   365,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   379,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   116 ]

racc_goto_check = [
    35,     2,    86,    62,    34,     4,    69,    40,    71,    73,
     5,    83,    31,    28,    43,    79,    37,    60,    56,    40,
    65,    75,    67,    44,    63,     3,    35,    53,    45,    29,
    35,    22,    47,     8,    34,     6,    48,    23,    36,    22,
    48,     8,    38,    28,    10,    23,    66,    59,    49,    70,
    61,    72,    10,    42,    74,    41,    75,    35,    76,    77,
    78,    34,    33,    43,    80,    81,    82,    29,    36,    30,
    28,    84,    38,    85,     1,    63,    29,    29,     3,   nil,
   nil,   nil,     5,   nil,    35,   nil,   nil,    55,    34,   nil,
     5,   nil,    35,     6,   nil,    36,    34,    28,   nil,    38,
    67,     6,    27,   nil,   nil,    28,   nil,    34,   nil,   nil,
    35,    34,    44,     3,    34,   nil,   nil,    55,   nil,    44,
     3,   nil,    36,   nil,   nil,   nil,    38,   nil,   nil,   nil,
    36,    56,    27,   nil,    38,    69,     5,    71,   nil,   nil,
   nil,    45,    44,    69,    29,    29,    48,   nil,    36,   nil,
   nil,   nil,    38,   nil,   nil,   nil,   nil,   nil,   nil,    27,
   nil,   nil,   nil,   nil,   nil,   nil,    65,   nil,    56,   nil,
    65,   nil,   nil,   nil,    35,   nil,   nil,   nil,    34,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    27,    28,   nil,   nil,
   nil,   nil,   nil,   nil,    27,   nil,   nil,    55,   nil,    79,
    44,   nil,    60,   nil,    65,    65,   nil,   nil,    44,   nil,
    73,    26,    36,   nil,    43,    37,    38,    34,   nil,    31,
    86,    69,    83,    56,     3,   nil,    53,     5,   nil,    44,
     5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    35,
   nil,    26,   nil,    34,   nil,   nil,    35,    35,   nil,   nil,
    34,    34,   nil,     4,    35,   nil,    35,   nil,    34,    28,
    34,    55,   nil,   nil,    69,   nil,    71,    28,    26,    28,
   nil,   nil,   nil,    69,   nil,   nil,    27,    36,    35,   nil,
   nil,    38,    34,    26,    36,    36,   nil,    24,    38,    38,
   nil,    28,    36,    31,    36,    26,    38,   nil,    38,   nil,
    35,    40,   nil,    26,    34,   nil,   nil,   nil,   nil,   nil,
   nil,    34,   nil,    28,   nil,   nil,    36,    24,   nil,   nil,
    38,    26,   nil,   nil,   nil,    35,    55,   nil,   nil,    34,
   nil,   nil,   nil,    55,    55,    62,   nil,   nil,    36,   nil,
   nil,    55,    38,   nil,   nil,   nil,   nil,   nil,    27,   nil,
   nil,    35,     2,   nil,   nil,    34,    27,   nil,    27,     4,
   nil,   nil,   nil,    36,    28,    55,   nil,    38,    35,   nil,
    25,    24,    34,   nil,   nil,   nil,   nil,    35,   nil,    24,
    27,    34,   nil,   nil,    35,    26,   nil,    55,    34,    36,
    39,    35,   nil,    38,    35,    34,   nil,    28,    34,   nil,
    25,   nil,    27,   nil,    28,   nil,    36,    28,   nil,   nil,
    38,   nil,    55,   nil,   nil,    36,   nil,   nil,   nil,    38,
    39,   nil,    36,   nil,   nil,   nil,    38,    25,   nil,    36,
   nil,   nil,    36,    38,   nil,   nil,    38,   nil,    55,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,
    26,   nil,   nil,    27,    25,    55,   nil,    26,    26,   nil,
   nil,    24,    25,   nil,    55,    26,   nil,    26,   nil,   nil,
   nil,    55,   nil,    25,    39,   nil,   nil,    25,    55,   nil,
    25,    55,    39,   nil,   nil,   nil,    27,   nil,   nil,    26,
   nil,   nil,   nil,    27,   nil,   nil,    27,   nil,   nil,    32,
    39,    26,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,
   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    32,   nil,   nil,    24,   nil,    32,    26,   nil,   nil,   nil,
   nil,    24,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,
    32,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,
   nil,   nil,    26,   nil,    39,    24,   nil,   nil,    32,   nil,
   nil,    32,    32,    32,   nil,   nil,   nil,   nil,   nil,    26,
   nil,   nil,    32,    25,   nil,   nil,   nil,    24,    26,   nil,
   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,
   nil,   nil,    26,   nil,   nil,    26,   nil,   nil,   nil,    25,
   nil,   nil,    32,   nil,   nil,   nil,    25,    25,   nil,   nil,
   nil,   nil,   nil,   nil,    25,   nil,    25,   nil,   nil,    39,
   nil,   nil,   nil,   nil,   nil,   nil,    39,    39,    24,   nil,
   nil,   nil,   nil,   nil,    39,   nil,    39,   nil,    25,    32,
    32,    32,    32,    32,    32,    32,    32,    32,   nil,    32,
    32,    32,   nil,    32,    32,   nil,    32,    32,    39,   nil,
    25,    24,   nil,   nil,   nil,   nil,   nil,    25,    24,   nil,
   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    39,    32,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil,
   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,
   nil,    39,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,
   nil,    32,   nil,   nil,    25,   nil,   nil,   nil,    39,   nil,
   nil,    25,   nil,   nil,    25,   nil,   nil,    39,   nil,   nil,
   nil,   nil,   nil,   nil,    39,   nil,    32,   nil,   nil,   nil,
   nil,    39,   nil,    32,    39,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    32,    32,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    32 ]

racc_goto_pointer = [
   nil,    74,     1,    25,   -25,  -164,     9,   nil,   -51,   nil,
   -40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -53,    26,   287,   370,   211,   102,    13,   -37,
    34,   -23,   491,  -256,     4,     0,    38,   -41,    42,   390,
     6,    -2,   -73,   -43,  -110,   -80,   nil,     5,   -67,  -259,
   nil,   nil,   nil,   -30,   nil,    87,   -90,   nil,   nil,  -266,
     2,   -39,   -36,  -299,   nil,    -1,  -201,  -225,   nil,  -104,
   -61,  -102,  -188,   -38,     7,   -32,  -141,    38,   -35,    -6,
  -142,   -57,   -56,  -111,  -224,     1,   -70,   nil ]

racc_goto_default = [
   nil,   nil,   278,   217,    42,   nil,    52,     5,     7,    12,
    17,    20,    23,    29,    37,    41,    46,    51,     4,     6,
    11,   131,    19,   nil,    67,    70,    74,    76,    79,   nil,
   nil,    61,   179,   285,    65,    68,    71,    73,    75,    78,
     3,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   219,
   307,   210,   211,   nil,   132,    63,   137,   141,   230,   232,
   nil,   nil,   nil,   nil,    60,    14,   nil,   nil,   327,    33,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    98,   nil,   nil,   nil,   nil,   nil,   nil,   185 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 72, :_reduce_3,
  2, 72, :_reduce_4,
  1, 75, :_reduce_5,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  3, 90, :_reduce_37,
  3, 90, :_reduce_38,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  4, 84, :_reduce_51,
  5, 84, :_reduce_52,
  3, 84, :_reduce_53,
  2, 84, :_reduce_54,
  1, 100, :_reduce_55,
  3, 100, :_reduce_56,
  1, 99, :_reduce_57,
  3, 99, :_reduce_58,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  5, 76, :_reduce_70,
  5, 76, :_reduce_71,
  5, 76, :_reduce_72,
  5, 88, :_reduce_73,
  2, 77, :_reduce_74,
  1, 116, :_reduce_75,
  2, 116, :_reduce_76,
  6, 78, :_reduce_77,
  2, 78, :_reduce_78,
  3, 117, :_reduce_79,
  3, 117, :_reduce_80,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  3, 118, :_reduce_83,
  1, 119, :_reduce_none,
  3, 119, :_reduce_85,
  1, 120, :_reduce_86,
  1, 120, :_reduce_87,
  3, 121, :_reduce_88,
  3, 121, :_reduce_89,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  4, 123, :_reduce_92,
  1, 111, :_reduce_93,
  3, 111, :_reduce_94,
  0, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 109, :_reduce_97,
  1, 104, :_reduce_98,
  1, 105, :_reduce_99,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  3, 79, :_reduce_107,
  3, 79, :_reduce_108,
  3, 89, :_reduce_109,
  0, 113, :_reduce_110,
  1, 113, :_reduce_111,
  3, 113, :_reduce_112,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  3, 126, :_reduce_116,
  3, 128, :_reduce_117,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  0, 115, :_reduce_120,
  1, 115, :_reduce_121,
  3, 115, :_reduce_122,
  4, 108, :_reduce_123,
  3, 108, :_reduce_124,
  1, 96, :_reduce_125,
  2, 96, :_reduce_126,
  2, 130, :_reduce_127,
  1, 131, :_reduce_128,
  2, 131, :_reduce_129,
  1, 106, :_reduce_130,
  4, 94, :_reduce_131,
  4, 94, :_reduce_132,
  5, 82, :_reduce_133,
  4, 82, :_reduce_134,
  2, 81, :_reduce_135,
  5, 132, :_reduce_136,
  4, 132, :_reduce_137,
  0, 133, :_reduce_none,
  2, 133, :_reduce_139,
  4, 133, :_reduce_140,
  3, 133, :_reduce_141,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  3, 102, :_reduce_144,
  3, 102, :_reduce_145,
  3, 102, :_reduce_146,
  3, 102, :_reduce_147,
  3, 102, :_reduce_148,
  3, 102, :_reduce_149,
  3, 102, :_reduce_150,
  3, 102, :_reduce_151,
  3, 102, :_reduce_152,
  2, 102, :_reduce_153,
  3, 102, :_reduce_154,
  3, 102, :_reduce_155,
  3, 102, :_reduce_156,
  3, 102, :_reduce_157,
  3, 102, :_reduce_158,
  3, 102, :_reduce_159,
  2, 102, :_reduce_160,
  3, 102, :_reduce_161,
  3, 102, :_reduce_162,
  3, 102, :_reduce_163,
  3, 102, :_reduce_164,
  5, 80, :_reduce_165,
  1, 136, :_reduce_166,
  2, 136, :_reduce_167,
  5, 137, :_reduce_168,
  4, 137, :_reduce_169,
  1, 138, :_reduce_170,
  3, 138, :_reduce_171,
  3, 97, :_reduce_172,
  1, 140, :_reduce_none,
  4, 140, :_reduce_174,
  1, 142, :_reduce_none,
  3, 142, :_reduce_176,
  3, 141, :_reduce_177,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_186,
  1, 139, :_reduce_none,
  1, 143, :_reduce_188,
  1, 144, :_reduce_none,
  3, 144, :_reduce_190,
  2, 83, :_reduce_191,
  6, 85, :_reduce_192,
  5, 85, :_reduce_193,
  7, 86, :_reduce_194,
  6, 86, :_reduce_195,
  6, 87, :_reduce_196,
  5, 87, :_reduce_197,
  1, 110, :_reduce_198,
  1, 110, :_reduce_199,
  1, 147, :_reduce_200,
  3, 147, :_reduce_201,
  1, 149, :_reduce_202,
  1, 150, :_reduce_203,
  1, 150, :_reduce_204,
  1, 150, :_reduce_205,
  1, 150, :_reduce_none,
  0, 73, :_reduce_207,
  0, 151, :_reduce_208,
  1, 145, :_reduce_none,
  3, 145, :_reduce_210,
  4, 145, :_reduce_211,
  1, 152, :_reduce_none,
  3, 152, :_reduce_213,
  3, 153, :_reduce_214,
  1, 153, :_reduce_215,
  1, 148, :_reduce_none,
  2, 148, :_reduce_217,
  1, 146, :_reduce_none,
  2, 146, :_reduce_219,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 95, :_reduce_222,
  3, 107, :_reduce_223,
  4, 107, :_reduce_224,
  2, 107, :_reduce_225,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  0, 114, :_reduce_none,
  1, 114, :_reduce_229,
  1, 135, :_reduce_230,
  3, 134, :_reduce_231,
  4, 134, :_reduce_232,
  2, 134, :_reduce_233,
  1, 155, :_reduce_none,
  3, 155, :_reduce_235,
  3, 156, :_reduce_236,
  1, 157, :_reduce_237,
  1, 157, :_reduce_238,
  4, 125, :_reduce_239,
  1, 98, :_reduce_none,
  4, 98, :_reduce_241 ]

racc_reduce_n = 242

racc_shift_n = 402

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68,
  :XOR => 69 }

racc_nt_base = 70

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "XOR",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "unlessstatement",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "keyword",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "expressions",
  "funcvalues",
  "rvalue",
  "expression",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "funcrvalue",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "param_name",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 34)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 37)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 46)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'grammar.ra', 90)
  def _reduce_37(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 93)
  def _reduce_38(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

module_eval(<<'.,.,', 'grammar.ra', 108)
  def _reduce_51(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 115)
  def _reduce_52(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 121)
  def _reduce_53(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 128)
  def _reduce_54(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 135)
  def _reduce_55(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 138)
  def _reduce_56(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 142)
  def _reduce_57(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 143)
  def _reduce_58(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'grammar.ra', 158)
  def _reduce_70(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 161)
  def _reduce_71(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 164)
  def _reduce_72(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 171)
  def _reduce_73(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 178)
  def _reduce_74(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 194)
  def _reduce_75(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 195)
  def _reduce_76(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 200)
  def _reduce_77(val, _values, result)
      @lexer.commentpop
  type = val[0].value.downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 218)
  def _reduce_78(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 236)
  def _reduce_79(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 244)
  def _reduce_80(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 81 omitted

# reduce 82 omitted

module_eval(<<'.,.,', 'grammar.ra', 257)
  def _reduce_83(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 84 omitted

module_eval(<<'.,.,', 'grammar.ra', 262)
  def _reduce_85(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 266)
  def _reduce_86(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 267)
  def _reduce_87(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 270)
  def _reduce_88(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 275)
  def _reduce_89(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 90 omitted

# reduce 91 omitted

module_eval(<<'.,.,', 'grammar.ra', 284)
  def _reduce_92(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 287)
  def _reduce_93(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 289)
  def _reduce_94(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'grammar.ra', 297)
  def _reduce_97(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 301)
  def _reduce_98(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 305)
  def _reduce_99(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

module_eval(<<'.,.,', 'grammar.ra', 317)
  def _reduce_107(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 323)
  def _reduce_108(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 327)
  def _reduce_109(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 333)
  def _reduce_110(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 335)
  def _reduce_111(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 337)
  def _reduce_112(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

module_eval(<<'.,.,', 'grammar.ra', 346)
  def _reduce_116(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 350)
  def _reduce_117(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 118 omitted

# reduce 119 omitted

module_eval(<<'.,.,', 'grammar.ra', 359)
  def _reduce_120(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 361)
  def _reduce_121(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 363)
  def _reduce_122(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 369)
  def _reduce_123(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 374)
  def _reduce_124(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 380)
  def _reduce_125(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 381)
  def _reduce_126(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 383)
  def _reduce_127(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 385)
  def _reduce_128(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 386)
  def _reduce_129(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 389)
  def _reduce_130(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 393)
  def _reduce_131(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 396)
  def _reduce_132(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 400)
  def _reduce_133(val, _values, result)
      @lexer.commentpop
  args = {
    :test => ast(AST::Not, :value => val[1]),
    :statements => val[3]
  }

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 409)
  def _reduce_134(val, _values, result)
        @lexer.commentpop
    args = {
      :test => ast(AST::Not, :value => val[1]), 
      :statements => ast(AST::Nop)
    }
    result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 418)
  def _reduce_135(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 422)
  def _reduce_136(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 433)
  def _reduce_137(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 138 omitted

module_eval(<<'.,.,', 'grammar.ra', 446)
  def _reduce_139(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 449)
  def _reduce_140(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 453)
  def _reduce_141(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'grammar.ra', 472)
  def _reduce_144(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 475)
  def _reduce_145(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 478)
  def _reduce_146(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 481)
  def _reduce_147(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 484)
  def _reduce_148(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 487)
  def _reduce_149(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 490)
  def _reduce_150(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 493)
  def _reduce_151(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 496)
  def _reduce_152(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 499)
  def _reduce_153(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 502)
  def _reduce_154(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 505)
  def _reduce_155(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 508)
  def _reduce_156(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 511)
  def _reduce_157(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 514)
  def _reduce_158(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 517)
  def _reduce_159(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 520)
  def _reduce_160(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 523)
  def _reduce_161(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 526)
  def _reduce_162(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 529)
  def _reduce_163(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 532)
  def _reduce_164(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 536)
  def _reduce_165(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 540)
  def _reduce_166(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 542)
  def _reduce_167(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 547)
  def _reduce_168(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 550)
  def _reduce_169(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 560)
  def _reduce_170(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 562)
  def _reduce_171(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 567)
  def _reduce_172(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 173 omitted

module_eval(<<'.,.,', 'grammar.ra', 572)
  def _reduce_174(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 175 omitted

module_eval(<<'.,.,', 'grammar.ra', 578)
  def _reduce_176(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 587)
  def _reduce_177(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

module_eval(<<'.,.,', 'grammar.ra', 599)
  def _reduce_186(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 187 omitted

module_eval(<<'.,.,', 'grammar.ra', 604)
  def _reduce_188(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 189 omitted

module_eval(<<'.,.,', 'grammar.ra', 606)
  def _reduce_190(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 609)
  def _reduce_191(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 619)
  def _reduce_192(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 627)
  def _reduce_193(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 635)
  def _reduce_194(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 642)
  def _reduce_195(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 651)
  def _reduce_196(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 656)
  def _reduce_197(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 660)
  def _reduce_198(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 661)
  def _reduce_199(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 666)
  def _reduce_200(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 669)
  def _reduce_201(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 674)
  def _reduce_202(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 677)
  def _reduce_203(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 678)
  def _reduce_204(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 679)
  def _reduce_205(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 206 omitted

module_eval(<<'.,.,', 'grammar.ra', 683)
  def _reduce_207(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 687)
  def _reduce_208(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 209 omitted

module_eval(<<'.,.,', 'grammar.ra', 692)
  def _reduce_210(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 695)
  def _reduce_211(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 212 omitted

module_eval(<<'.,.,', 'grammar.ra', 701)
  def _reduce_213(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 707)
  def _reduce_214(val, _values, result)
     result = [val[0][:value], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 708)
  def _reduce_215(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 216 omitted

module_eval(<<'.,.,', 'grammar.ra', 712)
  def _reduce_217(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 218 omitted

module_eval(<<'.,.,', 'grammar.ra', 717)
  def _reduce_219(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 220 omitted

# reduce 221 omitted

module_eval(<<'.,.,', 'grammar.ra', 723)
  def _reduce_222(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 726)
  def _reduce_223(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 727)
  def _reduce_224(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 728)
  def _reduce_225(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

module_eval(<<'.,.,', 'grammar.ra', 734)
  def _reduce_229(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 737)
  def _reduce_230(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 741)
  def _reduce_231(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 748)
  def _reduce_232(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 754)
  def _reduce_233(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 234 omitted

module_eval(<<'.,.,', 'grammar.ra', 759)
  def _reduce_235(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 768)
  def _reduce_236(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 771)
  def _reduce_237(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 772)
  def _reduce_238(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 775)
  def _reduce_239(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 240 omitted

module_eval(<<'.,.,', 'grammar.ra', 780)
  def _reduce_241(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
