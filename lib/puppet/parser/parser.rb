#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 855)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'40,41,223,222,94,178,311,94,393,90,269,392,103,-64,310,238,233,-199',
'280,278,-204,-198,93,177,234,236,235,237,44,133,52,53,277,38,54,271',
'55,42,27,-201,45,50,35,40,41,37,92,240,239,36,434,227,228,230,229,231',
'232,359,225,226,56,40,41,312,-116,224,43,132,280,297,134,44,383,52,53',
'393,38,54,392,55,42,27,365,45,50,35,40,41,37,56,308,307,36,-205,84,98',
'308,307,42,146,66,45,50,56,40,41,37,397,117,43,36,280,297,-62,44,396',
'52,53,295,38,54,56,55,42,27,296,45,50,35,40,41,37,178,301,-217,36,433',
'84,102,-142,209,42,81,-142,133,50,56,100,101,37,177,214,43,36,40,41',
'213,44,363,52,53,386,38,54,56,55,42,27,-132,45,50,35,40,41,37,209,356',
'314,36,431,66,177,132,225,226,134,214,238,233,56,224,213,249,-62,355',
'43,234,236,235,237,44,133,52,53,56,38,54,98,55,42,27,97,45,50,35,40',
'41,37,37,240,239,36,339,227,228,230,229,231,232,295,225,226,56,40,41',
'230,229,224,43,132,225,226,134,44,275,52,53,224,38,54,-143,55,42,27',
'-143,45,50,35,40,41,37,56,280,400,36,341,84,98,209,209,42,146,367,45',
'50,56,40,41,37,214,214,43,36,394,213,213,44,335,52,53,336,38,54,56,55',
'42,27,-150,45,50,35,40,41,37,274,225,226,36,403,84,230,229,224,42,254',
'225,226,50,56,-61,368,37,224,-200,43,36,40,41,369,44,273,52,53,246,38',
'54,56,55,42,27,371,45,50,35,40,41,37,373,374,375,36,289,-150,-150,-150',
'-150,305,291,66,308,307,56,40,41,249,-65,98,43,377,-201,97,-199,44,409',
'52,53,-200,38,54,-64,55,42,27,-199,45,50,35,40,41,37,-61,380,313,36',
'-200,84,280,297,98,42,254,273,97,50,56,40,41,37,285,266,43,36,280,286',
'266,44,263,52,53,-66,38,54,56,55,42,27,350,45,50,35,40,41,37,124,-63',
'366,36,411,84,280,297,98,42,254,348,97,50,56,90,233,37,334,204,43,36',
'280,286,234,44,185,52,53,182,38,54,56,55,42,27,102,45,50,35,40,41,37',
'-204,117,-203,36,-39,-39,-39,-39,227,228,230,229,231,232,56,225,226',
'-201,66,-200,43,-202,224,-197,389,156,154,158,153,155,84,151,159,160',
'201,192,390,150,186,302,40,41,37,-199,161,149,187,428,176,177,40,41',
'136,-199,117,404,118,56,-45,-45,-45,-45,157,163,-41,-41,-41,-41,44,373',
'52,53,116,38,54,406,55,42,27,-197,45,50,35,84,124,37,123,42,81,36,99',
'50,89,299,88,37,115,40,41,36,56,117,114,118,413,295,43,40,41,87,56,117',
'301,118,417,86,-63,40,41,116,-198,117,337,118,60,61,62,63,-200,116,84',
'420,421,65,42,81,423,66,50,116,84,-248,37,115,42,81,36,425,50,114,84',
'426,37,115,42,81,36,56,50,114,-66,429,37,115,40,41,36,56,117,114,118',
'-149,301,56,40,41,56,56,117,57,118,435,436,,40,41,116,,117,,118,60,61',
'62,63,,116,84,,,,42,81,,,50,116,84,,37,115,42,81,36,,50,114,84,,37,115',
'42,81,36,56,50,114,,,37,115,40,41,36,56,117,114,118,,,,40,41,,56,117',
',118,,,,40,41,116,,117,,118,,,,,,116,84,,,,42,81,,,50,116,84,,37,115',
'42,81,36,,50,114,84,,37,115,42,81,36,56,50,114,,,37,115,40,41,36,56',
'117,114,118,,,,40,41,,56,117,,118,,,,40,41,116,,117,,118,,,,,,116,84',
',,,42,81,,,50,116,84,,37,115,42,81,36,,50,114,84,,37,115,42,81,36,56',
'50,114,,,37,115,40,41,36,56,117,114,118,,,,40,41,,56,117,,118,,,,40',
'41,116,,117,,118,,,,,,116,84,,,,42,81,,,50,116,84,,37,115,42,81,36,',
'50,114,84,,37,115,42,81,36,56,50,114,,,37,115,40,41,36,56,117,114,118',
',,,40,41,,56,82,,-217,,,,40,41,116,,117,,118,,,,,,67,84,,,,42,81,,,50',
'116,84,,37,115,42,81,36,,50,114,84,,37,,42,81,36,56,50,,,,37,115,40',
'41,36,56,117,114,118,,,,,,,56,,,,40,41,,,117,116,118,,,,,227,228,230',
'229,,84,,225,226,42,81,116,174,50,224,,,37,115,,,36,84,,114,,42,81,',
',50,,56,,37,115,40,41,36,,117,114,118,,,,40,41,,56,117,,118,,,,40,41',
'116,,117,,118,,,,,,116,84,,,,42,81,,,50,116,84,,37,115,42,81,36,,50',
'114,84,,37,115,42,81,36,56,50,114,,,37,115,40,41,36,56,117,114,118,',
',,40,41,,56,117,,118,,,,40,41,116,,117,180,118,,,,,,116,84,,,,42,81',
',,50,116,84,,37,115,42,81,36,,50,114,84,,37,115,42,81,36,56,50,114,',
',37,115,40,41,36,56,117,114,118,,,,40,41,,56,117,,118,,,,40,41,116,',
',,,,227,228,230,229,116,84,,225,226,42,81,,,50,224,84,,37,115,42,81',
'36,,50,114,84,,37,115,42,254,36,56,50,114,,,37,,40,41,36,56,117,,118',
',,,40,41,,56,117,,118,,,,40,41,116,184,117,,118,,,,,,116,84,,,,42,81',
',,50,116,84,,37,115,42,81,36,,50,114,84,,37,115,42,81,36,56,50,114,',
',37,115,40,41,36,56,117,114,118,,,,40,41,,56,117,,,,,,,,116,283,,,,',
',,,,,84,,,,42,81,,,50,,84,,37,115,42,81,36,,50,114,276,,37,,,,36,56',
',,238,233,,,,,,56,,234,236,235,237,,,,,,,,40,41,,,117,180,118,,,,,,240',
'239,,,227,228,230,229,231,232,116,225,226,40,41,,,117,224,118,,84,,40',
'41,42,81,,,50,,,,37,115,116,,36,,,114,40,41,,,117,84,118,56,,42,81,',
',50,,84,,37,115,42,254,36,116,50,114,,,37,,,,36,56,84,,,,42,81,,,50',
'56,,,37,115,40,41,36,,117,114,118,,,,40,41,,56,117,,118,,,,40,41,116',
',117,,118,,,,,,116,84,,,,42,81,,,50,116,84,,37,115,42,81,36,,50,114',
'84,,37,115,42,81,36,56,50,114,,,37,115,40,41,36,56,117,114,118,,,,40',
'41,,56,117,,,,,,40,41,116,,117,,118,,,,40,41,,84,,,257,42,81,,,50,116',
'84,,37,115,42,254,36,,50,114,84,,37,,42,81,36,56,50,,84,,37,115,42,254',
'36,56,50,114,,,37,,40,41,36,56,117,,118,,,,40,41,,56,117,,118,,,,40',
'41,116,,117,,118,,,,,,116,84,,,,42,81,,,50,116,84,,37,115,42,81,36,',
'50,114,84,,37,115,42,81,36,56,50,114,,,37,115,40,41,36,56,117,114,118',
',,,40,41,,56,117,,118,,,,,,116,,,,,,,,,,116,84,,,,42,81,,,50,,84,,37',
'115,42,81,36,,50,114,,253,37,115,,,36,56,,114,238,233,,,,,251,56,,234',
'236,235,237,,,238,233,,,,,,,,234,236,235,237,,,,,240,239,,,227,228,230',
'229,231,232,,225,226,,,240,239,,224,227,228,230,229,231,232,252,225',
'226,,,,,,224,238,233,,,,,,,,234,236,235,237,,,238,233,,,,,,,,234,236',
'235,237,,,,,240,239,,,227,228,230,229,231,232,,225,226,,,,239,,224,227',
'228,230,229,231,232,,225,226,238,233,,,,224,,,,234,236,235,237,,,238',
'233,,,,,,,,234,236,235,237,,,,,,,,,227,228,230,229,231,232,,225,226',
',,240,239,,224,227,228,230,229,231,232,,225,226,238,233,,,,224,,,,234',
'236,235,237,,,238,233,,,,,,,,234,236,235,237,,,,,240,239,,,227,228,230',
'229,231,232,,225,226,,,240,239,,224,227,228,230,229,231,232,,225,226',
'238,233,,,,224,,,,234,236,235,237,,,238,233,,,,,,,,234,236,235,237,',
',,,240,239,,,227,228,230,229,231,232,,225,226,,,240,239,,224,227,228',
'230,229,231,232,,225,226,238,233,,,,224,,,,234,236,235,237,,,238,233',
',,,,,,,234,236,235,237,,,,,,,,,227,228,230,229,231,232,,225,226,,,240',
'239,,224,227,228,230,229,231,232,,225,226,238,233,,,,224,,,,234,236',
'235,237,,,238,233,,,,,,,,234,236,235,237,,,,,240,239,,,227,228,230,229',
'231,232,,225,226,,,240,239,,224,227,228,230,229,231,232,,225,226,238',
'233,,,,224,,,,234,236,235,237,,,238,233,,,,,,,,234,236,235,237,,,,,240',
'239,,,227,228,230,229,231,232,,225,226,,,240,239,,224,227,228,230,229',
'231,232,,225,226,238,233,,,,224,,,,234,236,235,237,,,238,233,,,,,,,',
'234,236,235,237,,,,,,,,,227,228,230,229,231,232,,225,226,,,240,239,',
'224,227,228,230,229,231,232,,225,226,238,233,,,,224,,,333,234,236,235',
'237,,,,233,,,,,,,,234,,,,,,,,240,239,233,,227,228,230,229,231,232,234',
'225,226,,,,,233,224,227,228,230,229,231,232,234,225,226,,,,,,224,,,',
'227,228,230,229,231,232,,225,226,,,,,,224,227,228,230,229,231,232,,225',
'226,156,154,158,153,155,224,151,159,160,167,203,,150,152,,,,,,161,149',
'162,156,154,158,153,155,,151,159,160,167,203,,150,152,,157,163,,,161',
'149,162,156,154,158,153,155,,151,159,160,167,165,,150,152,,157,163,',
',161,149,162,156,154,158,153,155,,151,159,160,167,203,,150,152,,157',
'163,,,161,149,162,156,154,158,153,155,,151,159,160,167,165,,150,152',
',157,163,,,161,149,162,156,154,158,153,155,,151,159,160,167,165,,150',
'152,,157,163,,,161,149,162,227,228,230,229,231,232,,225,226,,,,,,224',
'157,163,227,228,230,229,231,232,,225,226,,,,,,224' ]
        racc_action_table = arr = ::Array.new(2567, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,111,111,72,81,210,33,341,33,129,341,39,24,210,111,111,24,173,173',
'39,72,33,81,111,111,111,111,0,55,0,0,173,0,0,129,0,0,0,31,0,0,0,427',
'427,0,33,111,111,0,427,111,111,111,111,111,111,272,111,111,0,59,59,215',
'187,111,0,55,282,282,55,427,309,427,427,390,427,427,390,427,427,427',
'282,427,427,427,2,2,427,55,215,215,427,186,59,59,309,309,59,59,105,59',
'59,427,348,348,59,344,348,427,59,183,183,105,2,344,2,2,182,2,2,59,2',
'2,2,183,2,2,2,421,421,2,146,189,146,2,421,348,38,277,92,348,348,277',
'269,348,2,38,38,348,146,92,2,348,336,336,92,421,278,421,421,336,421',
'421,348,421,421,421,192,421,421,421,420,420,421,306,268,219,421,420',
'26,192,269,321,321,269,306,219,219,421,321,306,336,26,267,421,219,219',
'219,219,420,271,420,420,269,420,420,34,420,420,420,34,420,420,420,251',
'251,420,34,219,219,420,251,219,219,219,219,219,219,266,219,219,420,64',
'64,320,320,219,420,271,320,320,271,251,168,251,251,320,251,251,174,251',
'251,251,174,251,251,251,252,252,251,271,346,346,251,252,64,64,93,209',
'64,64,286,64,64,251,342,342,64,93,209,251,64,342,93,209,252,245,252',
'252,245,252,252,64,252,252,252,285,252,252,252,350,350,252,165,322,322',
'252,350,342,319,319,322,342,342,319,319,342,252,23,288,342,319,23,252',
'342,118,118,290,350,164,350,350,118,350,350,342,350,350,350,292,350',
'350,350,181,181,350,293,295,298,350,181,285,285,285,285,205,181,145',
'205,205,350,253,253,118,108,355,350,300,108,355,142,181,355,181,181',
'141,181,181,107,181,181,181,107,181,181,181,287,287,181,104,303,216',
'181,104,253,216,216,53,253,253,304,53,253,181,257,257,253,179,128,181',
'253,179,179,127,287,126,287,287,109,287,287,253,287,287,287,264,287',
'287,287,356,356,287,263,106,284,287,356,257,284,284,54,257,257,258,54',
'257,287,95,328,257,244,91,287,257,244,244,328,356,88,356,356,86,356',
'356,257,356,356,356,84,356,356,356,89,89,356,83,89,80,356,5,5,5,5,328',
'328,328,328,328,328,356,328,328,79,77,75,356,73,328,71,338,89,89,89',
'89,89,89,89,89,89,89,89,340,89,89,190,406,406,89,70,89,89,89,406,68',
'254,232,232,57,193,232,351,232,89,9,9,9,9,89,89,7,7,7,7,406,352,406',
'406,232,406,406,353,406,406,406,194,406,406,406,232,52,406,46,232,232',
'406,35,232,32,188,30,232,232,374,374,232,406,374,232,374,372,373,406',
'231,231,29,232,231,379,231,381,28,25,369,369,374,195,369,248,369,21',
'21,21,21,197,231,374,393,396,22,374,374,398,199,374,369,231,400,374',
'374,231,231,374,402,231,374,369,405,231,231,369,369,231,374,369,231',
'20,410,369,369,230,230,369,231,230,369,230,201,202,226,229,229,225,369',
'229,1,229,430,432,,228,228,230,,228,,228,19,19,19,19,,229,230,,,,230',
'230,,,230,228,229,,230,230,229,229,230,,229,230,228,,229,229,228,228',
'229,230,228,229,,,228,228,227,227,228,229,227,228,227,,,,234,234,,228',
'234,,234,,,,235,235,227,,235,,235,,,,,,234,227,,,,227,227,,,227,235',
'234,,227,227,234,234,227,,234,227,235,,234,234,235,235,234,227,235,234',
',,235,235,41,41,235,234,41,235,41,,,,43,43,,235,43,,43,,,,44,44,41,',
'44,,44,,,,,,43,41,,,,41,41,,,41,44,43,,41,41,43,43,41,,43,41,44,,43',
'43,44,44,43,41,44,43,,,44,44,45,45,44,43,45,44,45,,,,224,224,,44,224',
',224,,,,223,223,45,,223,,223,,,,,,224,45,,,,45,45,,,45,223,224,,45,45',
'224,224,45,,224,45,223,,224,224,223,223,224,45,223,224,,,223,223,233',
'233,223,224,233,223,233,,,,27,27,,223,27,,27,,,,236,236,233,,236,,236',
',,,,,27,233,,,,233,233,,,233,236,27,,233,233,27,27,233,,27,233,236,',
'27,,236,236,27,233,236,,,,236,236,66,66,236,27,66,236,66,,,,,,,236,',
',,67,67,,,67,66,67,,,,,323,323,323,323,,66,,323,323,66,66,67,67,66,323',
',,66,66,,,66,67,,66,,67,67,,,67,,66,,67,67,237,237,67,,237,67,237,,',
',337,337,,67,337,,337,,,,238,238,237,,238,,238,,,,,,337,237,,,,237,237',
',,237,238,337,,237,237,337,337,237,,337,237,238,,337,337,238,238,337',
'237,238,337,,,238,238,239,239,238,337,239,238,239,,,,240,240,,238,240',
',240,,,,82,82,239,,82,82,82,,,,,,240,239,,,,239,239,,,239,82,240,,239',
'239,240,240,239,,240,239,82,,240,240,82,82,240,239,82,240,,,82,82,274',
'274,82,240,274,82,274,,,,275,275,,82,275,,275,,,,399,399,274,,,,,,324',
'324,324,324,275,274,,324,324,274,274,,,274,324,275,,274,274,275,275',
'274,,275,274,399,,275,275,399,399,275,274,399,275,,,399,,87,87,399,275',
'87,,87,,,,279,279,,399,279,,279,,,,178,178,87,87,178,,178,,,,,,279,87',
',,,87,87,,,87,178,279,,87,87,279,279,87,,279,87,178,,279,279,178,178',
'279,87,178,279,,,178,178,177,177,178,279,177,178,177,,,,176,176,,178',
'176,,,,,,,,177,177,,,,,,,,,,177,,,,177,177,,,177,,176,,177,177,176,176',
'177,,176,177,172,,176,,,,176,177,,,172,172,,,,,,176,,172,172,172,172',
',,,,,,,117,117,,,117,117,117,,,,,,172,172,,,172,172,172,172,172,172',
'117,172,172,94,94,,,94,172,94,,117,,397,397,117,117,,,117,,,,117,117',
'94,,117,,,117,115,115,,,115,94,115,117,,94,94,,,94,,397,,94,94,397,397',
'94,115,397,94,,,397,,,,397,94,115,,,,115,115,,,115,397,,,115,115,101',
'101,115,,101,115,101,,,,102,102,,115,102,,102,,,,103,103,101,,103,,103',
',,,,,102,101,,,,101,101,,,101,103,102,,101,101,102,102,101,,102,101',
'103,,102,102,103,103,102,101,103,102,,,103,103,291,291,103,102,291,103',
'291,,,,299,299,,103,299,,,,,,310,310,291,,310,,310,,,,123,123,,291,',
',123,291,291,,,291,310,299,,291,291,299,299,291,,299,291,310,,299,,310',
'310,299,291,310,,123,,310,310,123,123,310,299,123,310,,,123,,116,116',
'123,310,116,,116,,,,311,311,,123,311,,311,,,,392,392,116,,392,,392,',
',,,,311,116,,,,116,116,,,116,392,311,,116,116,311,311,116,,311,116,392',
',311,311,392,392,311,116,392,311,,,392,392,114,114,392,311,114,392,114',
',,,100,100,,392,100,,100,,,,,,114,,,,,,,,,,100,114,,,,114,114,,,114',
',100,,114,114,100,100,114,,100,114,,122,100,100,,,100,114,,100,122,122',
',,,,119,100,,122,122,122,122,,,119,119,,,,,,,,119,119,119,119,,,,,122',
'122,,,122,122,122,122,122,122,,122,122,,,119,119,,122,119,119,119,119',
'119,119,121,119,119,,,,,,119,121,121,,,,,,,,121,121,121,121,,,332,332',
',,,,,,,332,332,332,332,,,,,121,121,,,121,121,121,121,121,121,,121,121',
',,,332,,121,332,332,332,332,332,332,,332,332,384,384,,,,332,,,,384,384',
'384,384,,,370,370,,,,,,,,370,370,370,370,,,,,,,,,384,384,384,384,384',
'384,,384,384,,,370,370,,384,370,370,370,370,370,370,,370,370,364,364',
',,,370,,,,364,364,364,364,,,362,362,,,,,,,,362,362,362,362,,,,,364,364',
',,364,364,364,364,364,364,,364,364,,,362,362,,364,362,362,362,362,362',
'362,,362,362,361,361,,,,362,,,,361,361,361,361,,,220,220,,,,,,,,220',
'220,220,220,,,,,361,361,,,361,361,361,361,361,361,,361,361,,,220,220',
',361,220,220,220,220,220,220,,220,220,385,385,,,,220,,,,385,385,385',
'385,,,218,218,,,,,,,,218,218,218,218,,,,,,,,,385,385,385,385,385,385',
',385,385,,,218,218,,385,218,218,218,218,218,218,,218,218,217,217,,,',
'218,,,,217,217,217,217,,,175,175,,,,,,,,175,175,175,175,,,,,217,217',
',,217,217,217,217,217,217,,217,217,,,175,175,,217,175,175,175,175,175',
'175,,175,175,415,415,,,,175,,,,415,415,415,415,,,412,412,,,,,,,,412',
'412,412,412,,,,,415,415,,,415,415,415,415,415,415,,415,415,,,412,412',
',415,412,412,412,412,412,412,,412,412,331,331,,,,412,,,,331,331,331',
'331,,,388,388,,,,,,,,388,388,388,388,,,,,,,,,331,331,331,331,331,331',
',331,331,,,388,388,,331,388,388,388,388,388,388,,388,388,243,243,,,',
'388,,,243,243,243,243,243,,,,329,,,,,,,,329,,,,,,,,243,243,327,,243',
'243,243,243,243,243,327,243,243,,,,,330,243,329,329,329,329,329,329',
'330,329,329,,,,,,329,,,,327,327,327,327,327,327,,327,327,,,,,,327,330',
'330,330,330,330,330,,330,330,90,90,90,90,90,330,90,90,90,90,90,,90,90',
',,,,,90,90,90,301,301,301,301,301,,301,301,301,301,301,,301,301,,90',
'90,,,301,301,301,65,65,65,65,65,,65,65,65,65,65,,65,65,,301,301,,,65',
'65,65,302,302,302,302,302,,302,302,302,302,302,,302,302,,65,65,,,302',
'302,302,204,204,204,204,204,,204,204,204,204,204,,204,204,,302,302,',
',204,204,204,273,273,273,273,273,,273,273,273,273,273,,273,273,,204',
'204,,,273,273,273,326,326,326,326,326,326,,326,326,,,,,,326,273,273',
'325,325,325,325,325,325,,325,325,,,,,,325' ]
        racc_action_check = arr = ::Array.new(2567, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   655,    84,   nil,   nil,   417,   nil,   477,   nil,   471,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   604,
   617,   537,   601,   300,    -6,   573,   174,   916,   521,   561,
   551,    16,   560,     1,   171,   522,   nil,   nil,   132,    -3,
   nil,   772,   nil,   782,   792,   839,   539,   nil,   nil,   nil,
   nil,   nil,   558,   362,   405,    27,   nil,   528,   nil,    59,
   nil,   nil,   nil,   nil,   231,  2417,   973,   990,   512,   nil,
   496,   476,    -2,   474,   nil,   472,   nil,   488,   nil,   470,
   455,    -1,  1124,   453,   463,   nil,   393,  1238,   419,   471,
  2373,   444,   116,   244,  1413,   440,   nil,   nil,   nil,   nil,
  1709,  1488,  1498,  1508,   371,    94,   415,   360,   346,   400,
   nil,    -2,   nil,   nil,  1699,  1441,  1632,  1388,   324,  1762,
   nil,  1813,  1747,  1585,   nil,   nil,   404,   390,   385,    -2,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   353,   348,   nil,   nil,   352,   126,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   318,   252,   nil,   nil,   233,   nil,
   nil,   nil,  1353,     7,   231,  2128,  1315,  1305,  1258,   401,
   nil,   342,    83,   100,   nil,   nil,    70,    41,   528,   121,
   495,   nil,   157,   506,   532,   573,   nil,   581,   nil,   607,
   nil,   624,   636,   nil,  2461,   310,   nil,   nil,   nil,   245,
   -12,   nil,   nil,   nil,   nil,    41,   385,  2113,  2068,   170,
  2008,   nil,   nil,   859,   849,   590,   587,   705,   658,   648,
   638,   581,   524,   906,   715,   725,   926,  1037,  1057,  1104,
  1114,   nil,   nil,  2293,   444,   278,   nil,   nil,   587,   nil,
   nil,   213,   256,   360,   501,   nil,   nil,   403,   433,   nil,
   nil,   nil,   nil,   431,   418,   nil,   194,   157,   168,   142,
   nil,   199,    48,  2483,  1171,  1181,   nil,   120,   133,  1248,
   nil,   nil,    57,   nil,   428,   289,   265,   385,   311,   nil,
   313,  1555,   271,   335,   nil,   333,   nil,   nil,   340,  1565,
   359,  2395,  2439,   382,   389,   nil,   151,   nil,   nil,    47,
  1575,  1642,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   255,
   180,   123,   245,   950,  1148,  2499,  2482,  2326,   431,  2308,
  2341,  2233,  1828,   nil,   nil,   nil,   152,  1047,   491,   nil,
   503,   -23,   274,   nil,    95,   nil,   251,   nil,   102,   nil,
   299,   506,   533,   543,   nil,   330,   428,   nil,   nil,   nil,
   nil,  1993,  1948,   nil,  1933,   nil,   nil,   nil,   nil,   591,
  1888,   nil,   511,   546,   571,   nil,   nil,   nil,   nil,   576,
   nil,   581,   nil,   nil,  1873,  2053,   nil,   nil,  2248,   nil,
    44,   nil,  1652,   599,   nil,   nil,   600,  1423,   603,  1191,
   608,   nil,   614,   nil,   nil,   602,   514,   nil,   nil,   nil,
   628,   nil,  2188,   nil,   nil,  2173,   nil,   nil,   nil,   nil,
   170,   127,   nil,   nil,   nil,   nil,   nil,    41,   nil,   nil,
   648,   nil,   649,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -226,  -261,    -1,    -2,    -3,    -6,    -7,    -8,    -9,   -10,
   -11,   -12,   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,
   -21,  -261,   -40,   -42,   -43,   -44,   -46,  -117,   -55,   -59,
  -261,   -65,  -261,  -198,  -261,   -94,  -116,  -118,  -241,  -259,
  -144,  -261,  -149,  -261,  -261,  -261,  -261,  -197,  -202,  -203,
  -205,  -206,  -261,  -261,  -218,  -261,  -249,  -261,    -4,  -261,
   -47,   -48,   -49,   -50,  -261,  -139,  -261,  -261,   -54,   -74,
   -78,   -79,   -80,   -81,   -82,   -83,   -84,   -85,   -86,   -87,
   -88,  -117,  -261,  -259,  -241,   -56,  -261,  -261,  -261,  -129,
  -129,   -97,  -226,  -226,  -261,  -261,   -93,  -217,  -218,   -95,
  -261,  -261,  -261,  -261,   -83,   -85,   -82,   -78,   -87,  -183,
  -145,  -261,  -161,  -162,  -261,  -261,  -261,  -261,  -261,  -261,
  -154,  -261,  -261,  -261,  -207,  -208,  -210,  -226,  -226,  -226,
  -219,  -221,  -222,  -223,  -224,  -225,   437,   -38,   -39,   -40,
   -41,   -42,   -43,   -44,   -45,   -46,  -117,  -201,   -37,   -22,
   -23,   -24,   -25,   -26,   -27,   -28,   -29,   -30,   -31,   -32,
   -33,   -34,   -35,   -36,  -247,  -132,  -133,  -134,  -261,  -137,
  -138,  -140,  -261,  -261,   -53,   -76,  -261,  -261,  -261,  -261,
  -244,  -261,  -227,  -261,   -58,   -60,   -25,   -35,  -114,  -247,
  -261,  -112,  -117,  -119,  -120,  -121,  -122,  -123,  -124,  -125,
  -130,  -134,  -247,  -132,  -139,  -261,  -100,  -101,  -103,  -226,
  -261,  -109,  -110,  -117,  -241,  -261,  -261,  -126,  -128,  -261,
  -127,  -146,  -147,  -261,  -261,  -261,  -261,  -261,  -261,  -261,
  -261,  -261,  -261,  -261,  -261,  -261,  -261,  -261,  -261,  -261,
  -261,  -172,  -179,  -261,  -261,  -261,  -252,  -253,  -261,  -256,
  -257,  -261,  -261,  -261,  -117,  -191,  -192,  -261,  -261,  -198,
  -199,  -200,  -204,  -261,  -261,  -228,  -227,  -226,  -261,  -261,
  -235,  -261,  -261,  -248,  -261,  -261,  -260,   -51,  -246,  -261,
  -245,   -75,  -261,  -143,  -261,  -242,  -246,    -5,  -261,   -68,
   -69,  -261,  -261,  -247,  -231,  -234,   -57,  -246,  -261,  -115,
  -261,  -248,  -129,  -261,  -247,   -98,  -261,  -105,  -106,  -261,
  -261,  -261,   -99,  -151,  -258,  -148,  -163,  -164,  -165,  -166,
  -167,  -168,  -169,  -170,  -171,  -173,  -174,  -175,  -176,  -177,
  -178,  -180,  -181,  -182,  -242,  -250,  -261,  -261,  -261,  -153,
  -261,  -157,  -261,  -185,  -261,  -189,  -247,  -194,  -261,  -209,
  -261,  -261,  -247,  -261,  -237,  -261,  -261,  -220,  -236,   -92,
  -141,  -136,  -135,   -52,   -77,  -142,  -150,  -243,   -67,  -261,
   -71,   -72,  -261,  -248,  -261,   -89,  -113,   -90,  -131,  -247,
   -91,  -261,  -102,  -104,  -107,  -108,  -251,  -254,  -255,  -152,
  -157,  -156,  -261,  -261,  -184,  -186,  -261,  -261,  -261,  -261,
  -246,  -196,  -261,  -212,  -229,  -261,  -261,  -238,  -239,  -240,
  -261,  -216,   -70,   -73,  -232,  -233,  -111,   -96,  -155,  -158,
  -261,  -261,  -190,  -193,  -195,  -211,  -230,  -261,  -214,  -215,
  -261,  -160,  -261,  -188,  -213,  -159,  -187 ]

racc_goto_table = [
    22,     2,    22,    24,   120,    24,   256,    58,    69,   127,
   128,   247,   125,    31,   130,    31,    23,   258,    23,   200,
   200,   189,   202,   272,   110,   198,   164,   343,   292,   293,
    70,     3,    39,   391,    39,   191,   205,   215,   173,   140,
    79,    96,   144,    75,   140,   135,   137,   144,   300,   188,
    59,   148,    64,   179,   264,   267,   221,   382,   183,   139,
    91,   303,   142,   298,   139,   216,   138,   142,   342,   360,
   399,   138,   147,   255,   290,   141,   288,   147,   346,   181,
   141,   126,   418,    85,   353,   129,   268,    68,   244,   358,
   414,    20,   193,    20,   407,   245,     1,   nil,   nil,   nil,
   nil,   nil,   147,   nil,   nil,   197,   nil,   nil,   211,   211,
   nil,   nil,   351,   352,   nil,   nil,   395,   nil,   nil,   nil,
   nil,   250,   nil,   nil,   nil,   nil,   260,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   147,   nil,   nil,   261,
   347,   nil,   nil,   nil,   338,   340,   nil,   345,   282,   284,
   nil,   258,   372,   309,   nil,   262,   nil,   281,   265,   265,
   270,   nil,   nil,   381,   nil,   304,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    70,
   nil,    22,   nil,   nil,    24,   nil,   nil,   nil,   nil,    79,
   nil,   nil,    75,   nil,    31,   nil,   nil,    23,   nil,    25,
   nil,    25,   nil,   nil,   nil,   398,   315,   nil,   nil,   nil,
   nil,   405,   nil,    39,   nil,   317,   318,    47,   nil,    47,
   nil,   nil,   nil,   349,   nil,   211,    74,   nil,   357,   387,
   nil,   378,   200,   nil,   379,   198,   345,    33,   416,    33,
   nil,   nil,   nil,   402,   nil,   376,   nil,   nil,   nil,   410,
   nil,    22,    22,   nil,    24,    24,   260,   nil,   143,   135,
   260,   135,   nil,   143,    31,    31,   147,    23,    23,   261,
   147,    95,    20,   261,   nil,   nil,    47,   nil,   nil,   nil,
   nil,    47,   424,    39,    39,   262,   nil,    22,   196,   262,
    24,   422,    58,   258,   nil,   nil,    33,   nil,   354,   nil,
    31,    33,   193,    23,   nil,   nil,   194,   nil,   nil,   212,
   212,   408,   147,   430,   432,   197,   nil,   nil,   nil,    39,
   nil,   nil,   211,   nil,   nil,    49,   195,    49,   nil,   401,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   250,
    47,   nil,    20,    20,   nil,   260,   nil,   nil,   nil,   nil,
    22,    70,   419,    24,   nil,   147,    22,   nil,   261,    24,
   259,    79,   nil,    31,    75,   nil,    23,   nil,   nil,    31,
   nil,   nil,    23,   nil,   262,    74,   nil,   nil,    20,   nil,
    25,   nil,    39,   nil,    49,   nil,   nil,   nil,    39,    49,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,
   260,   nil,   260,   nil,   nil,   nil,    22,   427,   nil,    24,
   147,   nil,   147,   261,    49,   261,   nil,   nil,    33,    31,
    22,    22,    23,    24,    24,   nil,   212,    22,   nil,   262,
    24,   262,    58,    31,    31,   nil,    23,    23,    39,   nil,
    31,    20,   nil,    23,   nil,   nil,   nil,    20,    49,   nil,
    25,    25,    39,    39,   nil,   nil,   nil,   nil,   nil,    39,
   nil,    48,   nil,    48,   nil,   nil,   nil,   nil,    47,    47,
    47,   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,    33,    33,
   259,   nil,   nil,   nil,   259,   nil,   nil,    20,   196,   nil,
   nil,   nil,   nil,   nil,    47,   nil,    49,    26,   nil,    26,
   nil,    20,    20,   nil,   nil,   nil,   194,   nil,    20,   nil,
    48,   nil,   nil,   212,    33,    48,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    77,   nil,   195,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    74,   nil,    25,
    48,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,    47,
   nil,   nil,   nil,   nil,   nil,   nil,   145,    47,   nil,   nil,
   nil,   145,   nil,    47,   nil,   nil,    49,    49,    49,   259,
   nil,   nil,    49,   nil,    48,   nil,   nil,    33,   nil,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   199,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,
   nil,   nil,    49,   nil,    47,   nil,    47,   nil,   nil,    25,
    25,   nil,   nil,    47,    49,   nil,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   259,   nil,   259,    47,    47,   nil,
   nil,   nil,    48,    33,    47,   nil,   111,   nil,   119,   121,
   122,   nil,   nil,   nil,   nil,   nil,   nil,    33,    33,   nil,
   nil,   nil,   nil,   nil,    33,   nil,   nil,    49,   nil,   nil,
   nil,   172,   nil,   nil,   nil,    49,   nil,   nil,   nil,   nil,
   nil,    49,   nil,    77,   nil,   nil,   nil,   nil,    26,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   217,   218,   219,   220,   nil,
   nil,   nil,    48,    48,    48,   nil,   nil,   nil,    48,   241,
   242,   243,    49,   nil,    49,   nil,   nil,   nil,   nil,   nil,
   nil,    49,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    49,    49,   nil,    48,   nil,
   nil,   nil,    49,   nil,   nil,   nil,   nil,   nil,    26,    26,
    48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    48,   nil,   nil,   199,   nil,   nil,   nil,
   nil,    48,   nil,   nil,   nil,   nil,   nil,    48,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   111,   316,
   nil,   nil,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,   332,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    77,   nil,    26,    48,   nil,
    48,   nil,   nil,    26,   nil,   nil,   nil,    48,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   361,
   362,    48,    48,   nil,   364,   nil,   nil,   nil,    48,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   370,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    26,   nil,   384,   385,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,    26,   nil,
   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   388,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   412,   nil,   nil,   nil,   nil,   415,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   121 ]

racc_goto_check = [
    25,     2,    25,    27,    71,    27,    80,     4,    43,    50,
    50,    93,    82,    36,    88,    36,    26,    78,    26,    65,
    65,    53,    53,    42,    69,    48,    54,    76,    40,    41,
    27,     3,    64,    72,    64,    62,    57,    57,    30,     8,
    36,     6,    10,    26,     8,    74,    23,    10,    42,    51,
    24,    23,    24,    30,    84,    84,    70,    58,    30,    25,
    56,    42,    27,    52,    25,    30,     6,    27,    75,    68,
    44,     6,    36,    79,     5,    26,    38,    36,    81,    37,
    26,    83,    72,    33,    85,    86,    87,    31,    30,    89,
    90,    21,    27,    21,    91,    92,     1,   nil,   nil,   nil,
   nil,   nil,    36,   nil,   nil,    26,   nil,   nil,    26,    26,
   nil,   nil,    40,    41,   nil,   nil,    76,   nil,   nil,   nil,
   nil,    27,   nil,   nil,   nil,   nil,    27,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,   nil,    26,
    80,   nil,   nil,   nil,     5,     5,   nil,    78,    30,    30,
   nil,    78,    42,    57,   nil,    64,   nil,    43,     3,     3,
     3,   nil,   nil,    42,   nil,    54,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,
   nil,    25,   nil,   nil,    27,   nil,   nil,   nil,   nil,    36,
   nil,   nil,    26,   nil,    36,   nil,   nil,    26,   nil,    28,
   nil,    28,   nil,   nil,   nil,    42,    69,   nil,   nil,   nil,
   nil,    42,   nil,    64,   nil,    74,    74,    45,   nil,    45,
   nil,   nil,   nil,    82,   nil,    26,    28,   nil,    88,    93,
   nil,    65,    65,   nil,    53,    48,    78,    46,    42,    46,
   nil,   nil,   nil,     5,   nil,    62,   nil,   nil,   nil,     5,
   nil,    25,    25,   nil,    27,    27,    27,   nil,    28,    74,
    27,    74,   nil,    28,    36,    36,    36,    26,    26,    26,
    36,    46,    21,    26,   nil,   nil,    45,   nil,   nil,   nil,
   nil,    45,    80,    64,    64,    64,   nil,    25,    28,    64,
    27,    78,     4,    78,   nil,   nil,    46,   nil,     3,   nil,
    36,    46,    27,    26,   nil,   nil,    45,   nil,   nil,    45,
    45,    50,    36,     5,     5,    26,   nil,   nil,   nil,    64,
   nil,   nil,    26,   nil,   nil,    49,    46,    49,   nil,    43,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,
    45,   nil,    21,    21,   nil,    27,   nil,   nil,   nil,   nil,
    25,    27,    71,    27,   nil,    36,    25,   nil,    26,    27,
    46,    36,   nil,    36,    26,   nil,    26,   nil,   nil,    36,
   nil,   nil,    26,   nil,    64,    28,   nil,   nil,    21,   nil,
    28,   nil,    64,   nil,    49,   nil,   nil,   nil,    64,    49,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,   nil,
    27,   nil,    27,   nil,   nil,   nil,    25,     2,   nil,    27,
    36,   nil,    36,    26,    49,    26,   nil,   nil,    46,    36,
    25,    25,    26,    27,    27,   nil,    45,    25,   nil,    64,
    27,    64,     4,    36,    36,   nil,    26,    26,    64,   nil,
    36,    21,   nil,    26,   nil,   nil,   nil,    21,    49,   nil,
    28,    28,    64,    64,   nil,   nil,   nil,   nil,   nil,    64,
   nil,    47,   nil,    47,   nil,   nil,   nil,   nil,    45,    45,
    45,   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    28,   nil,    46,    46,
    46,   nil,   nil,   nil,    46,   nil,   nil,    21,    28,   nil,
   nil,   nil,   nil,   nil,    45,   nil,    49,    29,   nil,    29,
   nil,    21,    21,   nil,   nil,   nil,    45,   nil,    21,   nil,
    47,   nil,   nil,    45,    46,    47,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    29,   nil,    46,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    28,   nil,    28,
    47,   nil,   nil,   nil,   nil,    28,   nil,   nil,   nil,    45,
   nil,   nil,   nil,   nil,   nil,   nil,    29,    45,   nil,   nil,
   nil,    29,   nil,    45,   nil,   nil,    49,    49,    49,    46,
   nil,   nil,    49,   nil,    47,   nil,   nil,    46,   nil,   nil,
   nil,   nil,   nil,    46,   nil,   nil,    29,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,   nil,   nil,
   nil,   nil,    49,   nil,    45,   nil,    45,   nil,   nil,    28,
    28,   nil,   nil,    45,    49,   nil,    28,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    46,   nil,    46,    45,    45,   nil,
   nil,   nil,    47,    46,    45,   nil,    39,   nil,    39,    39,
    39,   nil,   nil,   nil,   nil,   nil,   nil,    46,    46,   nil,
   nil,   nil,   nil,   nil,    46,   nil,   nil,    49,   nil,   nil,
   nil,    39,   nil,   nil,   nil,    49,   nil,   nil,   nil,   nil,
   nil,    49,   nil,    29,   nil,   nil,   nil,   nil,    29,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    39,    39,    39,    39,   nil,
   nil,   nil,    47,    47,    47,   nil,   nil,   nil,    47,    39,
    39,    39,    49,   nil,    49,   nil,   nil,   nil,   nil,   nil,
   nil,    49,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    49,    49,   nil,    47,   nil,
   nil,   nil,    49,   nil,   nil,   nil,   nil,   nil,    29,    29,
    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    29,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,   nil,   nil,    29,   nil,   nil,   nil,
   nil,    47,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,    39,
   nil,   nil,    39,    39,    39,    39,    39,    39,    39,    39,
    39,    39,    39,    39,    39,    39,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    29,   nil,    29,    47,   nil,
    47,   nil,   nil,    29,   nil,   nil,   nil,    47,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,
    39,    47,    47,   nil,    39,   nil,   nil,   nil,    47,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    29,   nil,    39,    39,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29,    29,   nil,
   nil,   nil,   nil,   nil,    29,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil,    39,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39 ]

racc_goto_pointer = [
   nil,    96,     1,    31,     5,  -107,     7,   nil,   -20,   nil,
   -17,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    91,   nil,   -13,    31,     0,    16,     3,   199,   507,
   -29,    60,   nil,    55,   nil,   nil,    13,    -7,  -105,   605,
  -154,  -153,  -141,   -19,  -276,   217,   237,   461,   -64,   325,
   -44,   -40,  -125,   -68,   -39,   nil,    27,   -56,  -249,   nil,
   nil,   nil,   -54,   nil,    32,   -70,   nil,   nil,  -204,   -17,
   -55,   -40,  -308,   nil,   -10,  -185,  -226,   nil,  -106,   -50,
  -117,  -179,   -40,    29,   -73,  -183,    30,   -43,   -41,  -182,
  -283,  -261,   -23,  -107,   nil ]

racc_goto_default = [
   nil,   nil,   287,   206,     4,   nil,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,   109,   166,    21,   nil,    78,   104,   107,   106,   105,
   nil,   nil,    28,   nil,    29,    30,   108,   nil,   nil,   175,
   nil,   nil,   nil,   112,   279,    71,    72,    73,    76,    80,
    32,   nil,   nil,   nil,   nil,    34,   nil,   nil,   207,   306,
   208,   210,   nil,   190,    83,   169,   168,   170,   171,   nil,
   nil,   nil,   nil,   113,    51,   nil,   nil,   344,    46,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   131,
   294,   nil,   nil,   nil,   248 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 73, :_reduce_3,
  2, 73, :_reduce_4,
  1, 76, :_reduce_5,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_21,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  3, 91, :_reduce_37,
  3, 91, :_reduce_38,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  4, 85, :_reduce_51,
  5, 85, :_reduce_52,
  3, 85, :_reduce_53,
  2, 85, :_reduce_54,
  1, 92, :_reduce_55,
  2, 92, :_reduce_56,
  4, 103, :_reduce_57,
  3, 103, :_reduce_58,
  1, 103, :_reduce_59,
  3, 105, :_reduce_60,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  4, 104, :_reduce_67,
  3, 104, :_reduce_68,
  1, 109, :_reduce_none,
  3, 109, :_reduce_70,
  2, 109, :_reduce_71,
  3, 108, :_reduce_72,
  4, 108, :_reduce_73,
  1, 102, :_reduce_74,
  3, 102, :_reduce_75,
  1, 101, :_reduce_76,
  3, 101, :_reduce_77,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  5, 77, :_reduce_89,
  5, 77, :_reduce_90,
  5, 77, :_reduce_91,
  5, 89, :_reduce_92,
  2, 78, :_reduce_93,
  1, 126, :_reduce_94,
  2, 126, :_reduce_95,
  6, 79, :_reduce_96,
  2, 79, :_reduce_97,
  3, 127, :_reduce_98,
  3, 127, :_reduce_99,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  3, 128, :_reduce_102,
  1, 129, :_reduce_none,
  3, 129, :_reduce_104,
  1, 130, :_reduce_105,
  1, 130, :_reduce_106,
  3, 131, :_reduce_107,
  3, 131, :_reduce_108,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  4, 133, :_reduce_111,
  1, 122, :_reduce_112,
  3, 122, :_reduce_113,
  0, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 120, :_reduce_116,
  1, 116, :_reduce_117,
  1, 117, :_reduce_118,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  3, 80, :_reduce_126,
  3, 80, :_reduce_127,
  3, 90, :_reduce_128,
  0, 124, :_reduce_129,
  1, 124, :_reduce_130,
  3, 124, :_reduce_131,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  3, 136, :_reduce_135,
  3, 138, :_reduce_136,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  0, 125, :_reduce_139,
  1, 125, :_reduce_140,
  3, 125, :_reduce_141,
  4, 107, :_reduce_142,
  3, 107, :_reduce_143,
  1, 98, :_reduce_144,
  2, 98, :_reduce_145,
  2, 140, :_reduce_146,
  1, 141, :_reduce_147,
  2, 141, :_reduce_148,
  1, 118, :_reduce_149,
  4, 96, :_reduce_150,
  4, 96, :_reduce_151,
  5, 83, :_reduce_152,
  4, 83, :_reduce_153,
  2, 82, :_reduce_154,
  5, 142, :_reduce_155,
  4, 142, :_reduce_156,
  0, 143, :_reduce_none,
  2, 143, :_reduce_158,
  4, 143, :_reduce_159,
  3, 143, :_reduce_160,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  3, 110, :_reduce_163,
  3, 110, :_reduce_164,
  3, 110, :_reduce_165,
  3, 110, :_reduce_166,
  3, 110, :_reduce_167,
  3, 110, :_reduce_168,
  3, 110, :_reduce_169,
  3, 110, :_reduce_170,
  3, 110, :_reduce_171,
  2, 110, :_reduce_172,
  3, 110, :_reduce_173,
  3, 110, :_reduce_174,
  3, 110, :_reduce_175,
  3, 110, :_reduce_176,
  3, 110, :_reduce_177,
  3, 110, :_reduce_178,
  2, 110, :_reduce_179,
  3, 110, :_reduce_180,
  3, 110, :_reduce_181,
  3, 110, :_reduce_182,
  1, 110, :_reduce_183,
  5, 81, :_reduce_184,
  1, 146, :_reduce_185,
  2, 146, :_reduce_186,
  5, 147, :_reduce_187,
  4, 147, :_reduce_188,
  1, 148, :_reduce_189,
  3, 148, :_reduce_190,
  3, 99, :_reduce_191,
  1, 150, :_reduce_none,
  4, 150, :_reduce_193,
  1, 152, :_reduce_none,
  3, 152, :_reduce_195,
  3, 151, :_reduce_196,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_205,
  1, 149, :_reduce_none,
  1, 153, :_reduce_207,
  1, 154, :_reduce_none,
  3, 154, :_reduce_209,
  2, 84, :_reduce_210,
  6, 86, :_reduce_211,
  5, 86, :_reduce_212,
  7, 87, :_reduce_213,
  6, 87, :_reduce_214,
  6, 88, :_reduce_215,
  5, 88, :_reduce_216,
  1, 121, :_reduce_217,
  1, 121, :_reduce_218,
  1, 157, :_reduce_219,
  3, 157, :_reduce_220,
  1, 159, :_reduce_221,
  1, 160, :_reduce_222,
  1, 160, :_reduce_223,
  1, 160, :_reduce_224,
  1, 160, :_reduce_none,
  0, 74, :_reduce_226,
  0, 111, :_reduce_227,
  1, 155, :_reduce_none,
  3, 155, :_reduce_229,
  4, 155, :_reduce_230,
  1, 112, :_reduce_none,
  3, 112, :_reduce_232,
  3, 161, :_reduce_233,
  1, 161, :_reduce_234,
  1, 158, :_reduce_none,
  2, 158, :_reduce_236,
  1, 156, :_reduce_none,
  2, 156, :_reduce_238,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 97, :_reduce_241,
  3, 119, :_reduce_242,
  4, 119, :_reduce_243,
  2, 119, :_reduce_244,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  0, 113, :_reduce_none,
  1, 113, :_reduce_248,
  1, 145, :_reduce_249,
  3, 144, :_reduce_250,
  4, 144, :_reduce_251,
  2, 144, :_reduce_252,
  1, 163, :_reduce_none,
  3, 163, :_reduce_254,
  3, 164, :_reduce_255,
  1, 165, :_reduce_256,
  1, 165, :_reduce_257,
  4, 135, :_reduce_258,
  1, 100, :_reduce_none,
  4, 100, :_reduce_260 ]

racc_reduce_n = 261

racc_shift_n = 437

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68,
  :PIPE => 69,
  :LAMBDA => 70 }

racc_nt_base = 71

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "unlessstatement",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "call_method_with_lambda",
  "keyword",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "expressions",
  "funcvalues",
  "call_method",
  "lambda",
  "named_access",
  "named_access_lval",
  "funcrvalue",
  "lambda_parameter_list",
  "statements_or_expression",
  "expression",
  "nothing",
  "arguments",
  "endcomma",
  "rvalue",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "param_name",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 36)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 39)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 48)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'grammar.ra', 73)
  def _reduce_21(val, _values, result)
     result = val[0] ; val[0].ignore_rvalue 
    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'grammar.ra', 93)
  def _reduce_37(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 96)
  def _reduce_38(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

module_eval(<<'.,.,', 'grammar.ra', 111)
  def _reduce_51(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 118)
  def _reduce_52(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 124)
  def _reduce_53(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 131)
  def _reduce_54(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 140)
  def _reduce_55(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 141)
  def _reduce_56(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 144)
  def _reduce_57(val, _values, result)
     result = ast AST::MethodCall, val[0].merge(:arguments => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 145)
  def _reduce_58(val, _values, result)
     result = ast AST::MethodCall, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 146)
  def _reduce_59(val, _values, result)
     result = ast AST::MethodCall, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 149)
  def _reduce_60(val, _values, result)
     result = {:receiver => val[0], :name => val[2][:value], :line => val[1][:line]} 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'grammar.ra', 165)
  def _reduce_67(val, _values, result)
          result = ast AST::Lambda, 
        :parameters => val[1],
        :expressions => val[2],
        :line => val[0][:line]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 171)
  def _reduce_68(val, _values, result)
          result = ast AST::Lambda, 
        :parameters => val[1],
        :line => val[0][:line]
    
    result
  end
.,.,

# reduce 69 omitted

module_eval(<<'.,.,', 'grammar.ra', 183)
  def _reduce_70(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 184)
  def _reduce_71(val, _values, result)
    result = ast AST::ASTArray, :children => [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 188)
  def _reduce_72(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 189)
  def _reduce_73(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 192)
  def _reduce_74(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 195)
  def _reduce_75(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 199)
  def _reduce_76(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 200)
  def _reduce_77(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

module_eval(<<'.,.,', 'grammar.ra', 215)
  def _reduce_89(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 218)
  def _reduce_90(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 221)
  def _reduce_91(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 228)
  def _reduce_92(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 235)
  def _reduce_93(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 251)
  def _reduce_94(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 252)
  def _reduce_95(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 257)
  def _reduce_96(val, _values, result)
      @lexer.commentpop
  type = val[0].value.downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 275)
  def _reduce_97(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 293)
  def _reduce_98(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 301)
  def _reduce_99(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 100 omitted

# reduce 101 omitted

module_eval(<<'.,.,', 'grammar.ra', 314)
  def _reduce_102(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 103 omitted

module_eval(<<'.,.,', 'grammar.ra', 319)
  def _reduce_104(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 323)
  def _reduce_105(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 324)
  def _reduce_106(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 327)
  def _reduce_107(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 332)
  def _reduce_108(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 109 omitted

# reduce 110 omitted

module_eval(<<'.,.,', 'grammar.ra', 341)
  def _reduce_111(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 344)
  def _reduce_112(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 346)
  def _reduce_113(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 114 omitted

# reduce 115 omitted

module_eval(<<'.,.,', 'grammar.ra', 354)
  def _reduce_116(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 358)
  def _reduce_117(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 362)
  def _reduce_118(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'grammar.ra', 374)
  def _reduce_126(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 380)
  def _reduce_127(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 384)
  def _reduce_128(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 390)
  def _reduce_129(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 392)
  def _reduce_130(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 394)
  def _reduce_131(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'grammar.ra', 403)
  def _reduce_135(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 407)
  def _reduce_136(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 137 omitted

# reduce 138 omitted

module_eval(<<'.,.,', 'grammar.ra', 416)
  def _reduce_139(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 418)
  def _reduce_140(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 420)
  def _reduce_141(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 426)
  def _reduce_142(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 431)
  def _reduce_143(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 437)
  def _reduce_144(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 438)
  def _reduce_145(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 440)
  def _reduce_146(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 442)
  def _reduce_147(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 443)
  def _reduce_148(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 446)
  def _reduce_149(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 450)
  def _reduce_150(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 453)
  def _reduce_151(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 457)
  def _reduce_152(val, _values, result)
      @lexer.commentpop
  args = {
    :test => ast(AST::Not, :value => val[1]),
    :statements => val[3]
  }

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 466)
  def _reduce_153(val, _values, result)
        @lexer.commentpop
    args = {
      :test => ast(AST::Not, :value => val[1]), 
      :statements => ast(AST::Nop)
    }
    result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 475)
  def _reduce_154(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 479)
  def _reduce_155(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 490)
  def _reduce_156(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 157 omitted

module_eval(<<'.,.,', 'grammar.ra', 503)
  def _reduce_158(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 506)
  def _reduce_159(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 510)
  def _reduce_160(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 161 omitted

# reduce 162 omitted

module_eval(<<'.,.,', 'grammar.ra', 529)
  def _reduce_163(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 532)
  def _reduce_164(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 535)
  def _reduce_165(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 538)
  def _reduce_166(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 541)
  def _reduce_167(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 544)
  def _reduce_168(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 547)
  def _reduce_169(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 550)
  def _reduce_170(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 553)
  def _reduce_171(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 556)
  def _reduce_172(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 559)
  def _reduce_173(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 562)
  def _reduce_174(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 565)
  def _reduce_175(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 568)
  def _reduce_176(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 571)
  def _reduce_177(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 574)
  def _reduce_178(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 577)
  def _reduce_179(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 580)
  def _reduce_180(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 583)
  def _reduce_181(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 586)
  def _reduce_182(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 588)
  def _reduce_183(val, _values, result)
        result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 593)
  def _reduce_184(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 597)
  def _reduce_185(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 599)
  def _reduce_186(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 604)
  def _reduce_187(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 607)
  def _reduce_188(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 617)
  def _reduce_189(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 619)
  def _reduce_190(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 624)
  def _reduce_191(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 192 omitted

module_eval(<<'.,.,', 'grammar.ra', 629)
  def _reduce_193(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 194 omitted

module_eval(<<'.,.,', 'grammar.ra', 635)
  def _reduce_195(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 644)
  def _reduce_196(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

module_eval(<<'.,.,', 'grammar.ra', 656)
  def _reduce_205(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 206 omitted

module_eval(<<'.,.,', 'grammar.ra', 661)
  def _reduce_207(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 208 omitted

module_eval(<<'.,.,', 'grammar.ra', 663)
  def _reduce_209(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 666)
  def _reduce_210(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 676)
  def _reduce_211(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 684)
  def _reduce_212(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 692)
  def _reduce_213(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 699)
  def _reduce_214(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 708)
  def _reduce_215(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 713)
  def _reduce_216(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 717)
  def _reduce_217(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 718)
  def _reduce_218(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 723)
  def _reduce_219(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 726)
  def _reduce_220(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 731)
  def _reduce_221(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 734)
  def _reduce_222(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 735)
  def _reduce_223(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 736)
  def _reduce_224(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 225 omitted

module_eval(<<'.,.,', 'grammar.ra', 740)
  def _reduce_226(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 744)
  def _reduce_227(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 228 omitted

module_eval(<<'.,.,', 'grammar.ra', 749)
  def _reduce_229(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 752)
  def _reduce_230(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 231 omitted

module_eval(<<'.,.,', 'grammar.ra', 758)
  def _reduce_232(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 764)
  def _reduce_233(val, _values, result)
     result = [val[0][:value], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 765)
  def _reduce_234(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 235 omitted

module_eval(<<'.,.,', 'grammar.ra', 769)
  def _reduce_236(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 237 omitted

module_eval(<<'.,.,', 'grammar.ra', 774)
  def _reduce_238(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 239 omitted

# reduce 240 omitted

module_eval(<<'.,.,', 'grammar.ra', 780)
  def _reduce_241(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 783)
  def _reduce_242(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 784)
  def _reduce_243(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 785)
  def _reduce_244(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

module_eval(<<'.,.,', 'grammar.ra', 791)
  def _reduce_248(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 794)
  def _reduce_249(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 798)
  def _reduce_250(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 805)
  def _reduce_251(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 811)
  def _reduce_252(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 253 omitted

module_eval(<<'.,.,', 'grammar.ra', 816)
  def _reduce_254(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 825)
  def _reduce_255(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 828)
  def _reduce_256(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 829)
  def _reduce_257(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 832)
  def _reduce_258(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 259 omitted

module_eval(<<'.,.,', 'grammar.ra', 837)
  def _reduce_260(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
