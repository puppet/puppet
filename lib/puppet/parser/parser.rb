#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 878)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'40,41,315,388,84,95,-220,91,66,40,41,270,40,41,181,314,391,95,134,247',
'94,-64,67,313,181,134,-220,311,310,311,310,-68,180,86,-201,402,272,42',
'83,40,41,50,180,401,93,37,287,250,134,36,250,-135,289,362,104,125,133',
'40,41,135,56,118,-207,133,180,359,135,44,69,52,53,358,38,54,66,55,42',
'27,56,45,50,35,40,41,37,56,133,-64,36,135,86,231,230,69,42,255,226,227',
'50,56,40,41,37,225,118,43,36,99,56,367,44,98,52,53,414,38,54,56,55,42',
'27,100,45,50,35,40,41,37,281,405,103,36,440,86,293,210,210,42,83,101',
'102,50,56,40,41,37,215,215,43,36,-63,214,214,44,-203,52,53,353,38,54',
'56,55,42,27,369,45,50,35,40,41,37,370,125,-63,36,438,86,-203,210,210',
'42,255,372,374,50,56,40,41,37,215,215,43,36,-146,214,214,44,-146,52',
'53,375,38,54,56,55,42,27,351,45,50,35,40,41,37,69,226,227,36,435,86',
'231,230,225,42,255,226,227,50,56,40,41,37,225,180,43,36,281,300,137',
'44,338,52,53,339,38,54,56,55,42,27,299,45,50,35,40,41,37,99,226,227',
'36,98,86,99,379,225,42,147,37,45,50,56,40,41,37,380,90,43,36,281,279',
'382,44,398,52,53,397,38,54,56,55,42,27,278,45,50,35,40,41,37,340,177',
'385,36,441,86,99,-145,274,42,147,-145,45,50,56,40,41,37,179,337,43,36',
'399,281,298,44,398,52,53,397,38,54,56,55,42,27,-153,45,50,35,40,41,37',
'-66,281,300,36,-202,86,-202,378,-204,42,255,281,300,50,56,376,89,37',
'297,-200,43,36,281,298,-205,44,-203,52,53,66,38,54,56,55,42,27,-204',
'45,50,35,40,41,37,-206,-207,317,36,342,-153,-153,-153,-153,103,186,316',
'239,234,56,281,300,56,56,205,43,235,237,236,238,44,304,52,53,-152,38',
'54,-67,55,42,27,-204,45,50,35,40,41,37,66,241,240,36,344,228,229,231',
'230,232,233,88,226,227,56,40,41,-66,99,225,43,-202,98,394,395,44,124',
'52,53,69,38,54,99,55,42,27,98,45,50,35,40,41,37,-203,-201,-200,36,416',
'86,-65,409,308,42,255,311,310,50,56,40,41,37,374,118,43,36,411,-202',
'305,44,304,52,53,302,38,54,56,55,42,27,-119,45,50,35,40,41,37,69,-208',
'91,36,408,86,293,419,293,42,83,65,69,50,56,304,234,37,424,69,43,36,-65',
'276,235,44,275,52,53,274,38,54,56,55,42,27,427,45,50,35,40,41,37,428',
'118,-68,36,60,61,62,63,228,229,231,230,232,233,56,226,227,430,66,-251',
'43,432,225,433,-202,157,155,159,154,156,86,152,160,161,202,193,436,151',
'187,-203,267,267,37,264,162,150,188,224,223,57,442,228,229,231,230,232',
'233,56,226,227,239,234,158,164,443,225,,,,235,237,236,238,,,228,229',
'231,230,,40,41,226,227,118,,119,,,225,,,241,240,,,228,229,231,230,232',
'233,117,226,227,40,41,,,118,225,119,,86,,,,42,83,,,50,,,,37,116,117',
',36,40,41,115,,118,,119,,86,,56,,42,83,,,50,,,,37,116,117,,36,40,41',
'115,,118,,119,,86,,56,,42,83,,,50,,,,37,116,117,,36,40,41,115,,118,',
'119,,86,,56,,42,83,,,50,,,,37,116,117,,36,40,41,115,,118,,119,,86,,56',
',42,83,,,50,,,,37,116,117,,36,40,41,115,,118,,119,,86,,56,,42,83,,,50',
',,,37,116,117,,36,40,41,115,,118,,119,,86,,56,,42,83,,,50,,,,37,116',
'117,,36,40,41,115,,118,,119,,86,,56,,42,83,,,50,,,,37,116,117,,36,40',
'41,115,,118,,119,,86,,56,,42,83,,,50,,,,37,116,117,,36,40,41,115,,118',
',119,,86,,56,,42,83,,,50,,,,37,116,117,,36,40,41,115,,118,,119,,86,',
'56,,42,83,,,50,,,,37,116,117,,36,40,41,115,,118,,119,,86,,56,,42,83',
',,50,,,,37,116,117,,36,40,41,115,,118,,119,,86,,56,,42,83,,,50,,,,37',
'116,117,,36,40,41,115,,118,,119,,86,,56,,42,83,,,50,,,,37,116,117,,36',
'40,41,115,,118,,119,,86,,56,,42,83,,,50,,,,37,116,117,,36,40,41,115',
',118,,119,,86,,56,,42,83,,,50,,,,37,116,117,175,36,40,41,115,,118,,119',
',86,,56,,42,83,,,50,,,,37,116,117,,36,40,41,115,,118,,119,,86,,56,,42',
'83,,,50,,,,37,116,117,,36,40,41,115,,118,,119,,86,,56,,42,83,,,50,,',
',37,116,117,,36,40,41,115,,118,,119,,86,,56,,42,83,,,50,,,,37,116,117',
',36,40,41,115,,118,,119,,86,,56,,42,83,,,50,,,,37,116,117,,36,40,41',
'115,,118,,119,,86,,56,,42,83,,,50,,,,37,116,117,,36,40,41,115,,118,',
'119,,86,,56,,42,83,,,50,,,,37,116,117,,36,40,41,115,,118,,119,,86,,56',
',42,83,,,50,,,,37,116,117,,36,40,41,115,,118,,119,,86,,56,,42,83,,,50',
',,,37,116,117,,36,40,41,115,,118,,119,,86,,56,,42,83,,,50,,,,37,116',
'117,,36,40,41,115,,118,,119,,86,,56,,42,83,,,50,,,,37,116,117,,36,40',
'41,115,,118,183,119,,86,,56,,42,83,,,50,,,,37,116,117,,36,40,41,115',
',118,,119,,86,,56,,42,83,,,50,,,,37,116,117,,36,40,41,115,,118,,119',
',86,,56,,42,83,,,50,,,,37,116,117,,36,40,41,115,,118,,119,,86,,56,,42',
'83,,,50,,,,37,116,117,185,36,40,41,115,,118,,119,,86,,56,,42,83,,,50',
',,,37,116,117,,36,40,41,115,,118,,119,,86,,56,,42,83,,,50,,,,37,116',
'117,,36,40,41,115,,118,,119,,86,,56,,42,83,,,50,,,,37,116,117,,36,40',
'41,115,,118,,119,,86,,56,,42,83,,,50,,,,37,116,117,,36,40,41,115,,118',
',119,,86,,56,,42,83,,,50,,,,37,116,117,,36,40,41,115,,118,,119,,86,',
'56,,42,83,,,50,,,,37,116,117,295,36,40,41,115,,118,,119,,86,,56,,42',
'83,,,50,,,,37,116,117,,36,40,41,115,,118,,119,,86,,56,,42,83,,,50,,',
',37,116,117,,36,40,41,115,,118,,119,,86,,56,,42,83,,,50,,,,37,116,117',
',36,40,41,115,,118,,119,,86,,56,,42,83,,,50,,,,37,116,117,,36,,,115',
'-41,-41,-41,-41,,86,,56,,42,83,,,50,,277,,37,116,,,36,,,115,239,234',
'-45,-45,-45,-45,,56,,235,237,236,238,,40,41,-39,-39,-39,-39,258,,,40',
'41,,,118,183,119,,,241,240,,,228,229,231,230,232,233,,226,227,117,,86',
'40,41,225,42,255,,,50,86,,,37,42,83,,36,50,,,,37,116,,,36,,56,115,40',
'41,,,118,86,119,56,,42,255,,,50,,,,37,,,,36,117,,,40,41,,,118,,119,56',
'86,,,,42,83,,,50,,,,37,116,117,,36,,,115,60,61,62,63,,86,,56,,42,83',
',,50,,,252,37,116,,,36,,,115,239,234,,,,,253,56,,235,237,236,238,,,239',
'234,,,,,,,,235,237,236,238,,,,,241,240,,,228,229,231,230,232,233,,226',
'227,,,241,240,,225,228,229,231,230,232,233,254,226,227,,,,,,225,239',
'234,,,,,,,,235,237,236,238,,,239,234,,,,,,,,235,237,236,238,,,,,241',
'240,,,228,229,231,230,232,233,,226,227,,,241,240,,225,228,229,231,230',
'232,233,,226,227,239,234,,,,225,,,,235,237,236,238,,,239,234,,,,,,,',
'235,237,236,238,,,,,241,240,,,228,229,231,230,232,233,,226,227,,,,240',
',225,228,229,231,230,232,233,,226,227,239,234,,,,225,,,,235,237,236',
'238,,,239,234,,,,,,,,235,237,236,238,,,,,241,240,,,228,229,231,230,232',
'233,,226,227,,,,,,225,228,229,231,230,232,233,,226,227,239,234,,,,225',
',,,235,237,236,238,,,239,234,,,,,,,,235,237,236,238,,,,,241,240,,,228',
'229,231,230,232,233,,226,227,,,241,240,,225,228,229,231,230,232,233',
',226,227,239,234,,,,225,,,,235,237,236,238,,,239,234,,,,,,,,235,237',
'236,238,,,,,241,240,,,228,229,231,230,232,233,,226,227,,,241,240,,225',
'228,229,231,230,232,233,,226,227,239,234,,,,225,,,336,235,237,236,238',
',,239,234,,,,,,,,235,237,236,238,,,,,241,240,,,228,229,231,230,232,233',
',226,227,,,241,240,,225,228,229,231,230,232,233,,226,227,239,234,,,',
'225,,,,235,237,236,238,,,239,234,,,,,,,,235,237,236,238,,,,,241,240',
',,228,229,231,230,232,233,,226,227,,,,,,225,228,229,231,230,232,233',
',226,227,239,234,,,,225,,,,235,237,236,238,,,239,234,,,,,,,,235,237',
'236,238,,,,,241,240,,,228,229,231,230,232,233,,226,227,,,,,,225,228',
'229,231,230,232,233,,226,227,239,234,,,,225,,,,235,237,236,238,,,,234',
',,,,,,,235,,,,,,,,241,240,234,,228,229,231,230,232,233,235,226,227,',
',,,234,225,228,229,231,230,232,233,235,226,227,,,,,,225,,,,228,229,231',
'230,232,233,,226,227,,,,,,225,228,229,231,230,232,233,,226,227,157,155',
'159,154,156,225,152,160,161,168,166,,151,153,,,,,,162,150,163,157,155',
'159,154,156,,152,160,161,168,166,,151,153,,158,164,,,162,150,163,157',
'155,159,154,156,,152,160,161,168,204,,151,153,,158,164,,,162,150,163',
'157,155,159,154,156,,152,160,161,168,204,,151,153,,158,164,,,162,150',
'163,157,155,159,154,156,,152,160,161,168,166,,151,153,,158,164,,,162',
'150,163,157,155,159,154,156,,152,160,161,168,204,,151,153,,158,164,',
',162,150,163,228,229,231,230,,,,226,227,,,,,,225,158,164,228,229,231',
'230,232,233,,226,227,,,,,,225' ]
        racc_action_table = arr = ::Array.new(2673, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'27,27,216,312,27,33,27,33,106,339,339,130,119,119,83,211,339,74,272',
'119,33,106,27,211,147,55,147,312,312,216,216,110,83,27,74,347,130,27',
'27,178,178,27,147,347,33,27,178,339,270,27,119,193,178,273,39,52,272',
'302,302,272,27,302,39,55,193,269,55,178,27,178,178,268,178,178,26,178',
'178,178,272,178,178,178,2,2,178,55,270,26,178,270,302,322,322,278,302',
'302,322,322,302,178,351,351,302,322,351,178,302,358,270,279,2,358,2',
'2,358,2,2,302,2,2,2,35,2,2,2,428,428,2,349,349,38,2,428,351,267,93,94',
'351,351,38,38,351,2,258,258,351,93,94,2,351,23,93,94,428,23,428,428',
'265,428,428,351,428,428,428,286,428,428,428,427,427,428,288,264,105',
'428,427,258,105,210,309,258,258,290,291,258,428,254,254,258,210,309',
'428,258,283,210,309,427,283,427,427,293,427,427,258,427,427,427,259',
'427,427,427,411,411,427,295,324,324,427,411,254,323,323,324,254,254',
'323,323,254,427,59,59,254,323,255,427,254,184,184,57,411,246,411,411',
'246,411,411,254,411,411,411,184,411,411,411,0,0,411,34,325,325,411,34',
'59,59,298,325,59,59,34,59,59,411,64,64,59,301,32,411,59,174,174,303',
'0,344,0,0,344,0,0,59,0,0,0,174,0,0,0,434,434,0,249,68,306,0,434,64,64',
'366,307,64,64,366,64,64,0,345,345,64,69,245,0,64,345,245,245,434,395',
'434,434,395,434,434,64,434,434,434,297,434,434,434,285,285,434,24,294',
'294,434,24,345,72,296,31,345,345,296,296,345,434,294,30,345,182,73,434',
'345,182,182,75,285,77,285,285,79,285,285,345,285,285,285,81,285,285',
'285,252,252,285,82,85,220,285,252,297,297,297,297,86,89,217,220,220',
'285,217,217,227,226,92,285,220,220,220,220,252,203,252,252,202,252,252',
'109,252,252,252,109,252,252,252,253,253,252,200,220,220,252,253,220',
'220,220,220,220,220,29,220,220,252,402,402,108,53,220,252,108,53,341',
'343,253,46,253,253,28,253,253,54,253,253,253,54,253,253,253,359,359',
'253,198,196,195,253,359,402,25,354,206,402,402,206,206,402,253,177,177',
'402,355,177,253,402,356,194,191,359,190,359,359,189,359,359,402,359',
'359,359,188,359,359,359,353,353,359,367,187,96,359,353,177,179,373,374',
'177,177,22,376,177,359,384,331,177,386,175,359,177,107,169,331,353,166',
'353,353,165,353,353,177,353,353,353,398,353,353,353,90,90,353,401,90',
'20,353,19,19,19,19,331,331,331,331,331,331,353,331,331,403,146,405,353',
'407,331,410,143,90,90,90,90,90,90,90,90,90,90,90,415,90,90,142,129,128',
'90,127,90,90,90,112,112,1,437,329,329,329,329,329,329,90,329,329,112',
'112,90,90,439,329,,,,112,112,112,112,,,326,326,326,326,,228,228,326',
'326,228,,228,,,326,,,112,112,,,112,112,112,112,112,112,228,112,112,340',
'340,,,340,112,340,,228,,,,228,228,,,228,,,,228,228,340,,228,314,314',
'228,,314,,314,,340,,228,,340,340,,,340,,,,340,340,314,,340,313,313,340',
',313,,313,,314,,340,,314,314,,,314,,,,314,314,313,,314,289,289,314,',
'289,,289,,313,,314,,313,313,,,313,,,,313,313,289,,313,280,280,313,,280',
',280,,289,,313,,289,289,,,289,,,,289,289,280,,289,276,276,289,,276,',
'276,,280,,289,,280,280,,,280,,,,280,280,276,,280,275,275,280,,275,,275',
',276,,280,,276,276,,,276,,,,276,276,275,,276,41,41,276,,41,,41,,275',
',276,,275,275,,,275,,,,275,275,41,,275,43,43,275,,43,,43,,41,,275,,41',
'41,,,41,,,,41,41,43,,41,44,44,41,,44,,44,,43,,41,,43,43,,,43,,,,43,43',
'44,,43,45,45,43,,45,,45,,44,,43,,44,44,,,44,,,,44,44,45,,44,116,116',
'44,,116,,116,,45,,44,,45,45,,,45,,,,45,45,116,,45,370,370,45,,370,,370',
',116,,45,,116,116,,,116,,,,116,116,370,,116,375,375,116,,375,,375,,370',
',116,,370,370,,,370,,,,370,370,375,,370,66,66,370,,66,,66,,375,,370',
',375,375,,,375,,,,375,375,66,,375,67,67,375,,67,,67,,66,,375,,66,66',
',,66,,,,66,66,67,67,66,241,241,66,,241,,241,,67,,66,,67,67,,,67,,,,67',
'67,241,,67,240,240,67,,240,,240,,241,,67,,241,241,,,241,,,,241,241,240',
',241,239,239,241,,239,,239,,240,,241,,240,240,,,240,,,,240,240,239,',
'240,238,238,240,,238,,238,,239,,240,,239,239,,,239,,,,239,239,238,,239',
'237,237,239,,237,,237,,238,,239,,238,238,,,238,,,,238,238,237,,238,236',
'236,238,,236,,236,,237,,238,,237,237,,,237,,,,237,237,236,,237,235,235',
'237,,235,,235,,236,,237,,236,236,,,236,,,,236,236,235,,236,234,234,236',
',234,,234,,235,,236,,235,235,,,235,,,,235,235,234,,235,233,233,235,',
'233,,233,,234,,235,,234,234,,,234,,,,234,234,233,,234,232,232,234,,232',
',232,,233,,234,,233,233,,,233,,,,233,233,232,,233,231,231,233,,231,',
'231,,232,,233,,232,232,,,232,,,,232,232,231,,232,84,84,232,,84,84,84',
',231,,232,,231,231,,,231,,,,231,231,84,,231,230,230,231,,230,,230,,84',
',231,,84,84,,,84,,,,84,84,230,,84,229,229,84,,229,,229,,230,,84,,230',
'230,,,230,,,,230,230,229,,230,88,88,230,,88,,88,,229,,230,,229,229,',
',229,,,,229,229,88,88,229,397,397,229,,397,,397,,88,,229,,88,88,,,88',
',,,88,88,397,,88,225,225,88,,225,,225,,397,,88,,397,397,,,397,,,,397',
'397,225,,397,224,224,397,,224,,224,,225,,397,,225,225,,,225,,,,225,225',
'224,,225,181,181,225,,181,,181,,224,,225,,224,224,,,224,,,,224,224,181',
',224,95,95,224,,95,,95,,181,,224,,181,181,,,181,,,,181,181,95,,181,180',
'180,181,,180,,180,,95,,181,,95,95,,,95,,,,95,95,180,180,95,101,101,95',
',101,,101,,180,,95,,180,180,,,180,,,,180,180,101,,180,102,102,180,,102',
',102,,101,,180,,101,101,,,101,,,,101,101,102,,101,103,103,101,,103,',
'103,,102,,101,,102,102,,,102,,,,102,102,103,,102,104,104,102,,104,,104',
',103,,102,,103,103,,,103,,,,103,103,104,,103,,,103,7,7,7,7,,104,,103',
',104,104,,,104,,173,,104,104,,,104,,,104,173,173,9,9,9,9,,104,,173,173',
'173,173,,124,124,5,5,5,5,124,,,118,118,,,118,118,118,,,173,173,,,173',
'173,173,173,173,173,,173,173,118,,124,404,404,173,124,124,,,124,118',
',,124,118,118,,124,118,,,,118,118,,,118,,124,118,117,117,,,117,404,117',
'118,,404,404,,,404,,,,404,,,,404,117,,,115,115,,,115,,115,404,117,,',
',117,117,,,117,,,,117,117,115,,117,,,117,21,21,21,21,,115,,117,,115',
'115,,,115,,,120,115,115,,,115,,,115,120,120,,,,,122,115,,120,120,120',
'120,,,122,122,,,,,,,,122,122,122,122,,,,,120,120,,,120,120,120,120,120',
'120,,120,120,,,122,122,,120,122,122,122,122,122,122,123,122,122,,,,',
',122,123,123,,,,,,,,123,123,123,123,,,421,421,,,,,,,,421,421,421,421',
',,,,123,123,,,123,123,123,123,123,123,,123,123,,,421,421,,123,421,421',
'421,421,421,421,,421,421,364,364,,,,421,,,,364,364,364,364,,,335,335',
',,,,,,,335,335,335,335,,,,,364,364,,,364,364,364,364,364,364,,364,364',
',,,335,,364,335,335,335,335,335,335,,335,335,368,368,,,,335,,,,368,368',
'368,368,,,334,334,,,,,,,,334,334,334,334,,,,,368,368,,,368,368,368,368',
'368,368,,368,368,,,,,,368,334,334,334,334,334,334,,334,334,365,365,',
',,334,,,,365,365,365,365,,,221,221,,,,,,,,221,221,221,221,,,,,365,365',
',,365,365,365,365,365,365,,365,365,,,221,221,,365,221,221,221,221,221',
'221,,221,221,418,418,,,,221,,,,418,418,418,418,,,371,371,,,,,,,,371',
'371,371,371,,,,,418,418,,,418,418,418,418,418,418,,418,418,,,371,371',
',418,371,371,371,371,371,371,,371,371,244,244,,,,371,,,244,244,244,244',
'244,,,219,219,,,,,,,,219,219,219,219,,,,,244,244,,,244,244,244,244,244',
'244,,244,244,,,219,219,,244,219,219,219,219,219,219,,219,219,176,176',
',,,219,,,,176,176,176,176,,,389,389,,,,,,,,389,389,389,389,,,,,176,176',
',,176,176,176,176,176,176,,176,176,,,,,,176,389,389,389,389,389,389',
',389,389,393,393,,,,389,,,,393,393,393,393,,,390,390,,,,,,,,390,390',
'390,390,,,,,393,393,,,393,393,393,393,393,393,,393,393,,,,,,393,390',
'390,390,390,390,390,,390,390,218,218,,,,390,,,,218,218,218,218,,,,332',
',,,,,,,332,,,,,,,,218,218,330,,218,218,218,218,218,218,330,218,218,',
',,,333,218,332,332,332,332,332,332,333,332,332,,,,,,332,,,,330,330,330',
'330,330,330,,330,330,,,,,,330,333,333,333,333,333,333,,333,333,205,205',
'205,205,205,333,205,205,205,205,205,,205,205,,,,,,205,205,205,65,65',
'65,65,65,,65,65,65,65,65,,65,65,,205,205,,,65,65,65,304,304,304,304',
'304,,304,304,304,304,304,,304,304,,65,65,,,304,304,304,305,305,305,305',
'305,,305,305,305,305,305,,305,305,,304,304,,,305,305,305,274,274,274',
'274,274,,274,274,274,274,274,,274,274,,305,305,,,274,274,274,91,91,91',
'91,91,,91,91,91,91,91,,91,91,,274,274,,,91,91,91,327,327,327,327,,,',
'327,327,,,,,,327,91,91,328,328,328,328,328,328,,328,328,,,,,,328' ]
        racc_action_check = arr = ::Array.new(2673, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   252,   607,    80,   nil,   nil,  1669,   nil,  1628,   nil,  1655,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   499,
   541,  1782,   518,   131,   324,   459,    68,    -2,   388,   416,
   340,   328,   268,    -1,   221,    77,   nil,   nil,   124,    39,
   nil,   836,   nil,   861,   886,   911,   432,   nil,   nil,   nil,
   nil,   nil,    53,   411,   425,    23,   nil,   238,   nil,   227,
   nil,   nil,   nil,   nil,   270,  2501,  1011,  1036,   289,   249,
   nil,   nil,   326,   339,    11,   344,   nil,   346,   nil,   366,
   nil,   356,   363,     8,  1336,   364,   389,   nil,  1411,   356,
   553,  2589,   397,   111,   112,  1536,   509,   nil,   nil,   nil,
   nil,  1586,  1611,  1636,  1661,   154,     2,   518,   427,   399,
    12,   nil,   601,   nil,   nil,  1815,   936,  1790,  1737,    10,
  1853,   nil,  1868,  1919,  1728,   nil,   nil,   589,   575,   574,
    -1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   574,   559,   nil,   nil,   570,    18,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   532,   489,   nil,   nil,   527,
   nil,   nil,   nil,  1699,   268,   464,  2279,   485,    37,   486,
  1561,  1511,   354,   nil,   225,   nil,   nil,   493,   485,   460,
   486,   476,   nil,    40,   472,   451,   450,   nil,   449,   nil,
   423,   nil,   392,   400,   nil,  2479,   434,   nil,   nil,   nil,
   154,    -3,   nil,   nil,   nil,   nil,   -20,   390,  2399,  2234,
   381,  2114,   nil,   nil,  1486,  1461,   342,   341,   636,  1386,
  1361,  1311,  1286,  1261,  1236,  1211,  1186,  1161,  1136,  1111,
  1086,  1061,   nil,   nil,  2219,   312,   231,   nil,   nil,   289,
   nil,   nil,   381,   424,   184,   209,   nil,   nil,   141,   196,
   nil,   nil,   nil,   nil,   170,   149,   nil,    99,    34,    57,
    46,   nil,    16,    44,  2567,   811,   786,   nil,    23,    84,
   761,   nil,   nil,   174,   nil,   338,   155,   nil,   156,   736,
   113,   171,   nil,   185,   333,   144,   343,   328,   257,   nil,
   nil,   266,    55,   272,  2523,  2545,   293,   296,   nil,   155,
   nil,   nil,   -22,   711,   686,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    36,   165,   155,   198,   580,  2588,  2605,   556,
  2432,   513,  2414,  2447,  2054,  1994,   nil,   nil,   nil,     7,
   661,   443,   nil,   444,   252,   313,   nil,    23,   nil,   117,
   nil,    98,   nil,   510,   454,   478,   486,   nil,    71,   467,
   nil,   nil,   nil,   nil,  1979,  2099,   288,   445,  2039,   nil,
   961,  2174,   nil,   453,   488,   986,   457,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   518,   nil,   524,   nil,   nil,  2294,
  2354,   nil,   nil,  2339,   nil,   295,   nil,  1436,   543,   nil,
   nil,   550,   442,   566,  1762,   568,   nil,   570,   nil,   nil,
   556,   209,   nil,   nil,   nil,   585,   nil,   nil,  2159,   nil,
   nil,  1934,   nil,   nil,   nil,   nil,   nil,   166,   123,   nil,
   nil,   nil,   nil,   nil,   295,   nil,   nil,   599,   nil,   613,
   nil,   nil,   nil,   nil ]

racc_action_default = [
  -229,  -264,    -1,    -2,    -3,    -6,    -7,    -8,    -9,   -10,
   -11,   -12,   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,
   -21,  -264,   -40,   -42,   -43,   -44,   -46,  -120,   -57,   -61,
  -264,   -67,  -264,  -201,  -264,   -97,  -119,  -121,  -244,  -262,
  -147,  -264,  -152,  -264,  -264,  -264,  -264,  -200,  -205,  -206,
  -208,  -209,  -264,  -264,  -221,  -264,  -252,  -264,    -4,  -264,
   -47,   -48,   -49,   -50,  -264,  -142,  -264,  -264,   -56,  -264,
   -76,   -77,   -81,   -82,   -83,   -84,   -85,   -86,   -87,   -88,
   -89,   -90,   -91,  -120,  -264,  -262,  -244,   -58,  -264,  -264,
  -132,  -132,  -100,  -229,  -229,  -264,  -264,   -96,  -220,  -221,
   -98,  -264,  -264,  -264,  -264,   -86,   -88,   -85,   -81,   -90,
  -186,  -148,  -264,  -164,  -165,  -264,  -264,  -264,  -264,  -264,
  -264,  -157,  -264,  -264,  -264,  -210,  -211,  -213,  -229,  -229,
  -229,  -222,  -224,  -225,  -226,  -227,  -228,   444,   -38,   -39,
   -40,   -41,   -42,   -43,   -44,   -45,   -46,  -120,  -204,   -37,
   -22,   -23,   -24,   -25,   -26,   -27,   -28,   -29,   -30,   -31,
   -32,   -33,   -34,   -35,   -36,  -250,  -135,  -136,  -137,  -264,
  -140,  -141,  -143,  -264,  -264,   -51,   -79,  -264,  -264,  -230,
  -264,  -264,  -264,  -247,  -264,   -60,   -62,   -25,   -35,  -117,
  -250,  -264,  -115,  -120,  -122,  -123,  -124,  -125,  -126,  -127,
  -128,  -133,  -137,  -250,  -135,  -142,  -264,  -103,  -104,  -106,
  -229,  -264,  -112,  -113,  -120,  -244,  -264,  -264,  -129,  -131,
  -264,  -130,  -149,  -150,  -264,  -264,  -264,  -264,  -264,  -264,
  -264,  -264,  -264,  -264,  -264,  -264,  -264,  -264,  -264,  -264,
  -264,  -264,  -175,  -182,  -264,  -264,  -264,  -255,  -256,  -264,
  -259,  -260,  -264,  -264,  -264,  -120,  -194,  -195,  -264,  -264,
  -201,  -202,  -203,  -207,  -264,  -264,  -231,  -230,  -229,  -264,
  -264,  -238,  -264,  -264,  -251,  -264,  -264,  -263,   -51,  -249,
  -264,  -248,   -52,   -55,   -78,    -5,  -264,   -70,   -71,  -264,
  -264,  -250,  -234,  -237,  -264,   -51,  -264,  -245,  -249,   -59,
  -249,  -264,  -118,  -264,  -251,  -132,  -264,  -250,  -101,  -264,
  -108,  -109,  -264,  -264,  -264,  -102,  -154,  -261,  -151,  -166,
  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -176,  -177,
  -178,  -179,  -180,  -181,  -183,  -184,  -185,  -245,  -253,  -264,
  -264,  -264,  -156,  -264,  -160,  -264,  -188,  -264,  -192,  -250,
  -197,  -264,  -212,  -264,  -264,  -250,  -264,  -240,  -264,  -264,
  -223,  -239,   -95,  -144,  -139,  -138,   -53,   -51,   -80,   -69,
  -264,   -73,   -74,  -264,  -251,  -264,   -51,  -146,  -153,  -246,
   -92,  -116,   -93,  -134,  -250,   -94,  -264,  -105,  -107,  -110,
  -111,  -254,  -257,  -258,  -155,  -160,  -159,  -264,  -264,  -187,
  -189,  -264,  -264,  -264,  -264,  -249,  -199,  -264,  -215,  -232,
  -264,  -264,  -241,  -242,  -243,  -264,  -219,   -54,   -72,   -75,
  -235,  -236,  -145,  -114,   -99,  -158,  -161,  -264,  -264,  -193,
  -196,  -198,  -214,  -233,  -264,  -217,  -218,  -264,  -163,  -264,
  -191,  -216,  -162,  -190 ]

racc_goto_table = [
    25,     2,    25,    24,    58,    24,    70,   121,   128,   129,
   248,   257,   259,    39,   288,    39,   126,   201,   201,   131,
   190,   203,   111,   165,   192,   346,   199,    76,   136,     3,
    72,   206,   216,   291,   396,   290,    97,   145,   222,   138,
   141,    23,   145,    23,   149,   141,   363,   283,   174,    59,
   387,    64,   265,   268,    71,    87,   273,    92,   345,   144,
   301,   139,   143,   189,   144,   182,   139,   143,    77,   184,
   256,   404,   349,   286,   127,   178,   217,   356,   130,   269,
    49,   303,    49,    68,   361,   425,   420,   412,   341,   343,
   197,   246,     1,   194,   306,   nil,   nil,   nil,   nil,   245,
   142,   nil,   nil,   nil,   nil,   142,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   400,   nil,   nil,   nil,
   nil,   355,   251,   354,   nil,   nil,   nil,   261,    22,   nil,
    22,   198,   nil,   nil,   212,   212,   nil,   263,   nil,    49,
   nil,   nil,   348,   nil,    49,   350,   259,   nil,   312,   nil,
   366,   nil,   nil,   nil,   nil,   nil,   284,   266,   266,   271,
   nil,   294,   296,   307,   nil,   262,    20,   377,    20,   nil,
    49,   nil,   nil,   nil,   nil,   nil,   nil,    76,    25,   nil,
    72,    24,   373,   nil,   nil,   nil,   nil,   140,   nil,   407,
   nil,    39,   140,   nil,   nil,   415,   nil,   nil,   386,   320,
   321,   nil,   nil,   nil,    49,   318,   nil,   nil,   nil,   nil,
    26,   nil,    26,    48,   nil,    48,   nil,   nil,    77,    23,
   nil,   nil,   nil,   nil,   nil,    33,   nil,    33,   352,   nil,
   392,   383,   201,   348,   360,   384,   381,    79,   199,   417,
   403,   nil,   nil,   136,   nil,   136,   410,   nil,   422,   nil,
   nil,   212,    25,    25,   nil,    24,    24,   261,    49,    96,
   nil,   261,   nil,   437,   439,    39,    39,   263,   nil,   146,
   nil,   263,    48,   nil,   146,   423,   nil,    48,   nil,   nil,
   nil,   nil,   nil,   nil,    33,    25,   nil,    58,    24,    33,
   429,   431,   259,    23,    23,   262,   nil,   357,    39,   262,
   200,   nil,   197,    48,   nil,   194,    22,   nil,   nil,   nil,
   nil,   nil,   nil,   413,   nil,   196,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,
   406,   nil,    49,    49,    49,   nil,   nil,    48,    49,   nil,
   nil,   nil,   251,   198,    20,   nil,   nil,   nil,   261,   260,
   212,    76,   nil,    25,    72,   nil,    24,   nil,   263,    25,
   426,   nil,    24,   nil,   nil,    49,    39,   nil,   nil,   nil,
   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    22,    22,    49,   nil,   nil,   nil,   262,    79,    26,   nil,
   nil,    48,    77,   nil,    23,   nil,    31,   nil,    31,   nil,
    23,   nil,   nil,    33,   nil,   261,   nil,   261,   nil,   nil,
   nil,    25,   434,    22,    24,   263,   nil,   263,    20,    20,
   nil,   nil,   nil,    81,    39,    49,   nil,    25,    25,   nil,
    24,    24,   nil,    49,    25,   nil,    58,    24,   nil,    49,
    39,    39,   nil,   262,   nil,   262,   nil,    39,   nil,   nil,
   nil,    20,    23,   nil,   nil,   148,   nil,    47,   nil,    47,
   148,   nil,    26,    26,   nil,    48,    48,    48,    23,    23,
   nil,    48,   nil,   nil,   nil,    23,   nil,    33,    33,   260,
   nil,    22,    49,   260,    49,   nil,   148,    22,   nil,   nil,
   nil,    49,   nil,   nil,   nil,    26,   nil,   nil,    48,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    49,    49,   nil,
    33,   nil,   200,   nil,    49,    48,    47,   nil,   nil,    20,
   148,    47,   nil,   nil,   nil,    20,   nil,   196,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   195,   nil,   nil,
   213,   213,   nil,   nil,   nil,    22,    22,   nil,    48,   nil,
   nil,    79,    22,    26,   nil,   nil,    48,   nil,   nil,    26,
   260,   nil,    48,    81,    31,   nil,   nil,    20,    33,   nil,
   nil,    47,   nil,   nil,    33,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    20,    20,   nil,   nil,   nil,   nil,   nil,
    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    48,   nil,    48,   nil,   nil,
   nil,    26,   nil,   nil,    48,   nil,   nil,   260,   nil,   260,
   nil,   nil,   nil,   nil,   nil,    47,    33,    26,    26,   nil,
    48,    48,   nil,   nil,    26,   nil,   nil,    48,    31,    31,
   148,   nil,    33,    33,   148,   nil,   nil,   nil,   112,    33,
   120,   122,   123,   nil,   nil,   nil,   nil,   213,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    31,   nil,   173,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   148,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,
    47,    47,   nil,   nil,   nil,    47,   nil,   nil,   218,   219,
   220,   221,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   242,   243,   244,   nil,   nil,   nil,   nil,   nil,
   nil,   148,    47,   nil,   nil,   nil,   nil,    81,   nil,    31,
   nil,   nil,   nil,   nil,   nil,    31,   nil,   nil,   nil,   195,
   nil,   nil,   nil,   nil,   nil,   nil,   213,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   148,   nil,
   148,   nil,    47,   nil,   nil,   nil,   nil,    31,   nil,   nil,
    47,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,
   nil,   nil,   nil,    31,    31,   nil,   nil,   nil,   nil,   nil,
    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   112,   319,   nil,   nil,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,   332,   333,   334,   335,    47,
   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    47,    47,   nil,   nil,   nil,   nil,
   nil,    47,   364,   365,   nil,   nil,   nil,   368,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   371,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   389,   390,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   393,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   418,   nil,   nil,
   nil,   nil,   421,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   122 ]

racc_goto_check = [
    28,     2,    28,    27,     4,    27,    44,    72,    51,    51,
    94,    81,    79,    65,     5,    65,    83,    66,    66,    89,
    54,    54,    70,    55,    63,    77,    49,    28,    75,     3,
    27,    58,    58,    42,    73,    41,     6,    10,    71,    23,
     8,    26,    10,    26,    23,     8,    69,    30,    32,    24,
    59,    24,    85,    85,    31,    31,    43,    57,    76,    28,
    53,     6,    27,    52,    28,    32,     6,    27,    26,    32,
    80,    45,    82,    39,    84,    38,    32,    86,    87,    88,
    50,    43,    50,    33,    90,    73,    91,    92,     5,     5,
    28,    93,     1,    27,    43,   nil,   nil,   nil,   nil,    32,
    26,   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    77,   nil,   nil,   nil,
   nil,    42,    27,    41,   nil,   nil,   nil,    27,    25,   nil,
    25,    26,   nil,   nil,    26,    26,   nil,    65,   nil,    50,
   nil,   nil,    79,   nil,    50,    81,    79,   nil,    58,   nil,
    30,   nil,   nil,   nil,   nil,   nil,    44,     3,     3,     3,
   nil,    32,    32,    55,   nil,    26,    21,    30,    21,   nil,
    50,   nil,   nil,   nil,   nil,   nil,   nil,    28,    28,   nil,
    27,    27,    43,   nil,   nil,   nil,   nil,    25,   nil,     5,
   nil,    65,    25,   nil,   nil,     5,   nil,   nil,    43,    75,
    75,   nil,   nil,   nil,    50,    70,   nil,   nil,   nil,   nil,
    29,   nil,    29,    48,   nil,    48,   nil,   nil,    26,    26,
   nil,   nil,   nil,   nil,   nil,    47,   nil,    47,    83,   nil,
    94,    66,    66,    79,    89,    54,    63,    29,    49,    30,
    43,   nil,   nil,    75,   nil,    75,    43,   nil,    30,   nil,
   nil,    26,    28,    28,   nil,    27,    27,    27,    50,    47,
   nil,    27,   nil,     5,     5,    65,    65,    65,   nil,    29,
   nil,    65,    48,   nil,    29,    43,   nil,    48,   nil,   nil,
   nil,   nil,   nil,   nil,    47,    28,   nil,     4,    27,    47,
    79,    81,    79,    26,    26,    26,   nil,     3,    65,    26,
    29,   nil,    28,    48,   nil,    27,    25,   nil,   nil,   nil,
   nil,   nil,   nil,    51,   nil,    47,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,
    44,   nil,    50,    50,    50,   nil,   nil,    48,    50,   nil,
   nil,   nil,    27,    26,    21,   nil,   nil,   nil,    27,    47,
    26,    28,   nil,    28,    27,   nil,    27,   nil,    65,    28,
    72,   nil,    27,   nil,   nil,    50,    65,   nil,   nil,   nil,
   nil,   nil,    65,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    25,    25,    50,   nil,   nil,   nil,    26,    29,    29,   nil,
   nil,    48,    26,   nil,    26,   nil,    37,   nil,    37,   nil,
    26,   nil,   nil,    47,   nil,    27,   nil,    27,   nil,   nil,
   nil,    28,     2,    25,    27,    65,   nil,    65,    21,    21,
   nil,   nil,   nil,    37,    65,    50,   nil,    28,    28,   nil,
    27,    27,   nil,    50,    28,   nil,     4,    27,   nil,    50,
    65,    65,   nil,    26,   nil,    26,   nil,    65,   nil,   nil,
   nil,    21,    26,   nil,   nil,    37,   nil,    46,   nil,    46,
    37,   nil,    29,    29,   nil,    48,    48,    48,    26,    26,
   nil,    48,   nil,   nil,   nil,    26,   nil,    47,    47,    47,
   nil,    25,    50,    47,    50,   nil,    37,    25,   nil,   nil,
   nil,    50,   nil,   nil,   nil,    29,   nil,   nil,    48,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,    50,   nil,
    47,   nil,    29,   nil,    50,    48,    46,   nil,   nil,    21,
    37,    46,   nil,   nil,   nil,    21,   nil,    47,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    46,   nil,   nil,
    46,    46,   nil,   nil,   nil,    25,    25,   nil,    48,   nil,
   nil,    29,    25,    29,   nil,   nil,    48,   nil,   nil,    29,
    47,   nil,    48,    37,    37,   nil,   nil,    21,    47,   nil,
   nil,    46,   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    21,    21,   nil,   nil,   nil,   nil,   nil,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    48,   nil,    48,   nil,   nil,
   nil,    29,   nil,   nil,    48,   nil,   nil,    47,   nil,    47,
   nil,   nil,   nil,   nil,   nil,    46,    47,    29,    29,   nil,
    48,    48,   nil,   nil,    29,   nil,   nil,    48,    37,    37,
    37,   nil,    47,    47,    37,   nil,   nil,   nil,    40,    47,
    40,    40,    40,   nil,   nil,   nil,   nil,    46,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    37,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    46,
    46,    46,   nil,   nil,   nil,    46,   nil,   nil,    40,    40,
    40,    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    40,    40,    40,   nil,   nil,   nil,   nil,   nil,
   nil,    37,    46,   nil,   nil,   nil,   nil,    37,   nil,    37,
   nil,   nil,   nil,   nil,   nil,    37,   nil,   nil,   nil,    46,
   nil,   nil,   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,   nil,
    37,   nil,    46,   nil,   nil,   nil,   nil,    37,   nil,   nil,
    46,   nil,   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,
   nil,   nil,   nil,    37,    37,   nil,   nil,   nil,   nil,   nil,
    37,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    40,    40,   nil,   nil,    40,    40,    40,    40,    40,
    40,    40,    40,    40,    40,    40,    40,    40,    40,    46,
   nil,    46,   nil,   nil,   nil,   nil,   nil,   nil,    46,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    46,    46,   nil,   nil,   nil,   nil,
   nil,    46,    40,    40,   nil,   nil,   nil,    40,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    40,    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,
   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    40 ]

racc_goto_pointer = [
   nil,    92,     1,    29,     2,  -164,     2,   nil,   -19,   nil,
   -22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   166,   nil,   -20,    30,   128,    41,     3,     0,   210,
  -128,    27,   -19,    56,   nil,   nil,   nil,   396,     6,  -105,
   617,  -144,  -146,  -109,   -21,  -278,   457,   225,   213,   -64,
    80,   -45,   -27,  -129,   -70,   -42,   nil,    24,   -62,  -259,
   nil,   nil,   nil,   -66,   nil,    13,   -73,   nil,   nil,  -228,
   -19,   -74,   -37,  -310,   nil,   -27,  -196,  -229,   nil,  -112,
   -54,  -113,  -186,   -36,    22,   -76,  -191,    23,   -51,   -36,
  -188,  -288,  -271,   -28,  -109,   nil ]

racc_goto_default = [
   nil,   nil,   285,   207,     4,   nil,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,   110,   167,    21,   nil,    80,   105,   108,   107,   106,
   nil,   282,   nil,   nil,    28,    29,    30,   109,   nil,   nil,
   176,   nil,   nil,   nil,   113,   280,    73,    74,    75,    78,
    82,    32,   nil,   nil,   nil,   nil,    34,   nil,   nil,   208,
   309,   209,   211,   nil,   191,    85,   170,   169,   171,   172,
   nil,   nil,   nil,   nil,   114,    51,   nil,   nil,   347,    46,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   132,   292,   nil,   nil,   nil,   249 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 73, :_reduce_3,
  2, 73, :_reduce_4,
  1, 76, :_reduce_5,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_21,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  3, 91, :_reduce_37,
  3, 91, :_reduce_38,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  0, 101, :_reduce_none,
  1, 101, :_reduce_none,
  5, 85, :_reduce_53,
  6, 85, :_reduce_54,
  4, 85, :_reduce_55,
  2, 85, :_reduce_56,
  1, 92, :_reduce_57,
  2, 92, :_reduce_58,
  4, 105, :_reduce_59,
  3, 105, :_reduce_60,
  1, 105, :_reduce_61,
  3, 106, :_reduce_62,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  4, 102, :_reduce_69,
  3, 102, :_reduce_70,
  1, 110, :_reduce_none,
  3, 110, :_reduce_72,
  2, 110, :_reduce_73,
  3, 109, :_reduce_74,
  4, 109, :_reduce_75,
  1, 104, :_reduce_76,
  1, 104, :_reduce_77,
  3, 104, :_reduce_78,
  1, 103, :_reduce_79,
  3, 103, :_reduce_80,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  5, 77, :_reduce_92,
  5, 77, :_reduce_93,
  5, 77, :_reduce_94,
  5, 89, :_reduce_95,
  2, 78, :_reduce_96,
  1, 127, :_reduce_97,
  2, 127, :_reduce_98,
  6, 79, :_reduce_99,
  2, 79, :_reduce_100,
  3, 128, :_reduce_101,
  3, 128, :_reduce_102,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  3, 129, :_reduce_105,
  1, 130, :_reduce_none,
  3, 130, :_reduce_107,
  1, 131, :_reduce_108,
  1, 131, :_reduce_109,
  3, 132, :_reduce_110,
  3, 132, :_reduce_111,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  4, 134, :_reduce_114,
  1, 123, :_reduce_115,
  3, 123, :_reduce_116,
  0, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 121, :_reduce_119,
  1, 117, :_reduce_120,
  1, 118, :_reduce_121,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  3, 80, :_reduce_129,
  3, 80, :_reduce_130,
  3, 90, :_reduce_131,
  0, 125, :_reduce_132,
  1, 125, :_reduce_133,
  3, 125, :_reduce_134,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  3, 137, :_reduce_138,
  3, 139, :_reduce_139,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  0, 126, :_reduce_142,
  1, 126, :_reduce_143,
  3, 126, :_reduce_144,
  5, 108, :_reduce_145,
  4, 108, :_reduce_146,
  1, 98, :_reduce_147,
  2, 98, :_reduce_148,
  2, 141, :_reduce_149,
  1, 142, :_reduce_150,
  2, 142, :_reduce_151,
  1, 119, :_reduce_152,
  4, 96, :_reduce_153,
  4, 96, :_reduce_154,
  5, 83, :_reduce_155,
  4, 83, :_reduce_156,
  2, 82, :_reduce_157,
  5, 143, :_reduce_158,
  4, 143, :_reduce_159,
  0, 144, :_reduce_none,
  2, 144, :_reduce_161,
  4, 144, :_reduce_162,
  3, 144, :_reduce_163,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  3, 111, :_reduce_166,
  3, 111, :_reduce_167,
  3, 111, :_reduce_168,
  3, 111, :_reduce_169,
  3, 111, :_reduce_170,
  3, 111, :_reduce_171,
  3, 111, :_reduce_172,
  3, 111, :_reduce_173,
  3, 111, :_reduce_174,
  2, 111, :_reduce_175,
  3, 111, :_reduce_176,
  3, 111, :_reduce_177,
  3, 111, :_reduce_178,
  3, 111, :_reduce_179,
  3, 111, :_reduce_180,
  3, 111, :_reduce_181,
  2, 111, :_reduce_182,
  3, 111, :_reduce_183,
  3, 111, :_reduce_184,
  3, 111, :_reduce_185,
  1, 111, :_reduce_186,
  5, 81, :_reduce_187,
  1, 147, :_reduce_188,
  2, 147, :_reduce_189,
  5, 148, :_reduce_190,
  4, 148, :_reduce_191,
  1, 149, :_reduce_192,
  3, 149, :_reduce_193,
  3, 99, :_reduce_194,
  1, 151, :_reduce_none,
  4, 151, :_reduce_196,
  1, 153, :_reduce_none,
  3, 153, :_reduce_198,
  3, 152, :_reduce_199,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_208,
  1, 150, :_reduce_none,
  1, 154, :_reduce_210,
  1, 155, :_reduce_none,
  3, 155, :_reduce_212,
  2, 84, :_reduce_213,
  6, 86, :_reduce_214,
  5, 86, :_reduce_215,
  7, 87, :_reduce_216,
  6, 87, :_reduce_217,
  6, 88, :_reduce_218,
  5, 88, :_reduce_219,
  1, 122, :_reduce_220,
  1, 122, :_reduce_221,
  1, 158, :_reduce_222,
  3, 158, :_reduce_223,
  1, 160, :_reduce_224,
  1, 161, :_reduce_225,
  1, 161, :_reduce_226,
  1, 161, :_reduce_227,
  1, 161, :_reduce_none,
  0, 74, :_reduce_229,
  0, 112, :_reduce_230,
  1, 156, :_reduce_none,
  3, 156, :_reduce_232,
  4, 156, :_reduce_233,
  1, 113, :_reduce_none,
  3, 113, :_reduce_235,
  3, 162, :_reduce_236,
  1, 162, :_reduce_237,
  1, 159, :_reduce_none,
  2, 159, :_reduce_239,
  1, 157, :_reduce_none,
  2, 157, :_reduce_241,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 97, :_reduce_244,
  3, 120, :_reduce_245,
  4, 120, :_reduce_246,
  2, 120, :_reduce_247,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  0, 114, :_reduce_none,
  1, 114, :_reduce_251,
  1, 146, :_reduce_252,
  3, 145, :_reduce_253,
  4, 145, :_reduce_254,
  2, 145, :_reduce_255,
  1, 164, :_reduce_none,
  3, 164, :_reduce_257,
  3, 165, :_reduce_258,
  1, 166, :_reduce_259,
  1, 166, :_reduce_260,
  4, 136, :_reduce_261,
  1, 100, :_reduce_none,
  4, 100, :_reduce_263 ]

racc_reduce_n = 264

racc_shift_n = 444

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68,
  :PIPE => 69,
  :LAMBDA => 70 }

racc_nt_base = 71

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "unlessstatement",
  "import",
  "function_call_statement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "call_method_with_lambda",
  "keyword",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "optional_lambda",
  "lambda",
  "expressions",
  "funcvalues",
  "call_method",
  "named_access",
  "named_access_lval",
  "function_call_expression",
  "lambda_parameter_list",
  "statements_or_expression",
  "expression",
  "nothing",
  "arguments",
  "endcomma",
  "rvalue",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "param_name",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 36)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 39)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 48)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'grammar.ra', 73)
  def _reduce_21(val, _values, result)
     result = val[0] ; val[0].ignore_rvalue 
    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'grammar.ra', 93)
  def _reduce_37(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 96)
  def _reduce_38(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

module_eval(<<'.,.,', 'grammar.ra', 121)
  def _reduce_53(val, _values, result)
          result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => val[2],
        :ftype => :statement,
        :pblock => val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 129)
  def _reduce_54(val, _values, result)
          result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => val[2],
        :ftype => :statement,
        :pblock => val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 137)
  def _reduce_55(val, _values, result)
          result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => AST::ASTArray.new({}),
        :ftype => :statement,
        :pblock => val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 145)
  def _reduce_56(val, _values, result)
          result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => val[1],
        :ftype => :statement,
        :pblock => val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 155)
  def _reduce_57(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 156)
  def _reduce_58(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 159)
  def _reduce_59(val, _values, result)
     result = ast AST::MethodCall, val[0].merge(:arguments => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 160)
  def _reduce_60(val, _values, result)
     result = ast AST::MethodCall, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 161)
  def _reduce_61(val, _values, result)
     result = ast AST::MethodCall, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 164)
  def _reduce_62(val, _values, result)
     result = {:receiver => val[0], :name => val[2][:value], :line => val[1][:line]} 
    result
  end
.,.,

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

module_eval(<<'.,.,', 'grammar.ra', 180)
  def _reduce_69(val, _values, result)
          result = ast AST::Lambda, 
        :parameters => val[1],
        :expressions => val[2],
        :line => val[0][:line]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 186)
  def _reduce_70(val, _values, result)
          result = ast AST::Lambda, 
        :parameters => val[1],
        :line => val[0][:line]
    
    result
  end
.,.,

# reduce 71 omitted

module_eval(<<'.,.,', 'grammar.ra', 198)
  def _reduce_72(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 199)
  def _reduce_73(val, _values, result)
    result = ast AST::ASTArray, :children => [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 203)
  def _reduce_74(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 204)
  def _reduce_75(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 207)
  def _reduce_76(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 209)
  def _reduce_77(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 211)
  def _reduce_78(val, _values, result)
          val[0].push(val[2])
      result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 215)
  def _reduce_79(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 216)
  def _reduce_80(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

module_eval(<<'.,.,', 'grammar.ra', 231)
  def _reduce_92(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 234)
  def _reduce_93(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 237)
  def _reduce_94(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 244)
  def _reduce_95(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 251)
  def _reduce_96(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 267)
  def _reduce_97(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 268)
  def _reduce_98(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 273)
  def _reduce_99(val, _values, result)
      @lexer.commentpop
  type = val[0].value.downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 291)
  def _reduce_100(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 309)
  def _reduce_101(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 317)
  def _reduce_102(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 103 omitted

# reduce 104 omitted

module_eval(<<'.,.,', 'grammar.ra', 330)
  def _reduce_105(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 106 omitted

module_eval(<<'.,.,', 'grammar.ra', 335)
  def _reduce_107(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 339)
  def _reduce_108(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 340)
  def _reduce_109(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 343)
  def _reduce_110(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 348)
  def _reduce_111(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 112 omitted

# reduce 113 omitted

module_eval(<<'.,.,', 'grammar.ra', 357)
  def _reduce_114(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 360)
  def _reduce_115(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 362)
  def _reduce_116(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

module_eval(<<'.,.,', 'grammar.ra', 370)
  def _reduce_119(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 374)
  def _reduce_120(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 378)
  def _reduce_121(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'grammar.ra', 390)
  def _reduce_129(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 396)
  def _reduce_130(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 400)
  def _reduce_131(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 406)
  def _reduce_132(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 408)
  def _reduce_133(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 410)
  def _reduce_134(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

module_eval(<<'.,.,', 'grammar.ra', 419)
  def _reduce_138(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 423)
  def _reduce_139(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

module_eval(<<'.,.,', 'grammar.ra', 432)
  def _reduce_142(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 434)
  def _reduce_143(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 436)
  def _reduce_144(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 447)
  def _reduce_145(val, _values, result)
          result = ast AST::Function,
        :name => val[0][:value], :line => val[0][:line],
        :arguments => val[2],
        :ftype => :rvalue,
        :pblock => val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 454)
  def _reduce_146(val, _values, result)
          result = ast AST::Function,
        :name => val[0][:value], :line => val[0][:line],
        :arguments => AST::ASTArray.new({}),
        :ftype => :rvalue
    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 460)
  def _reduce_147(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 461)
  def _reduce_148(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 463)
  def _reduce_149(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 465)
  def _reduce_150(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 466)
  def _reduce_151(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 469)
  def _reduce_152(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 473)
  def _reduce_153(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 476)
  def _reduce_154(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 480)
  def _reduce_155(val, _values, result)
      @lexer.commentpop
  args = {
    :test => ast(AST::Not, :value => val[1]),
    :statements => val[3]
  }

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 489)
  def _reduce_156(val, _values, result)
        @lexer.commentpop
    args = {
      :test => ast(AST::Not, :value => val[1]), 
      :statements => ast(AST::Nop)
    }
    result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 498)
  def _reduce_157(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 502)
  def _reduce_158(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 513)
  def _reduce_159(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 160 omitted

module_eval(<<'.,.,', 'grammar.ra', 526)
  def _reduce_161(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 529)
  def _reduce_162(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 533)
  def _reduce_163(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 164 omitted

# reduce 165 omitted

module_eval(<<'.,.,', 'grammar.ra', 552)
  def _reduce_166(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 555)
  def _reduce_167(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 558)
  def _reduce_168(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 561)
  def _reduce_169(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 564)
  def _reduce_170(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 567)
  def _reduce_171(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 570)
  def _reduce_172(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 573)
  def _reduce_173(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 576)
  def _reduce_174(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 579)
  def _reduce_175(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 582)
  def _reduce_176(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 585)
  def _reduce_177(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 588)
  def _reduce_178(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 591)
  def _reduce_179(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 594)
  def _reduce_180(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 597)
  def _reduce_181(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 600)
  def _reduce_182(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 603)
  def _reduce_183(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 606)
  def _reduce_184(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 609)
  def _reduce_185(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 611)
  def _reduce_186(val, _values, result)
        result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 616)
  def _reduce_187(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 620)
  def _reduce_188(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 622)
  def _reduce_189(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 627)
  def _reduce_190(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 630)
  def _reduce_191(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 640)
  def _reduce_192(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 642)
  def _reduce_193(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 647)
  def _reduce_194(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 195 omitted

module_eval(<<'.,.,', 'grammar.ra', 652)
  def _reduce_196(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 197 omitted

module_eval(<<'.,.,', 'grammar.ra', 658)
  def _reduce_198(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 667)
  def _reduce_199(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

module_eval(<<'.,.,', 'grammar.ra', 679)
  def _reduce_208(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 209 omitted

module_eval(<<'.,.,', 'grammar.ra', 684)
  def _reduce_210(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 211 omitted

module_eval(<<'.,.,', 'grammar.ra', 686)
  def _reduce_212(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 689)
  def _reduce_213(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 699)
  def _reduce_214(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 707)
  def _reduce_215(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 715)
  def _reduce_216(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 722)
  def _reduce_217(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 731)
  def _reduce_218(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 736)
  def _reduce_219(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 740)
  def _reduce_220(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 741)
  def _reduce_221(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 746)
  def _reduce_222(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 749)
  def _reduce_223(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 754)
  def _reduce_224(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 757)
  def _reduce_225(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 758)
  def _reduce_226(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 759)
  def _reduce_227(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 228 omitted

module_eval(<<'.,.,', 'grammar.ra', 763)
  def _reduce_229(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 767)
  def _reduce_230(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 231 omitted

module_eval(<<'.,.,', 'grammar.ra', 772)
  def _reduce_232(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 775)
  def _reduce_233(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 234 omitted

module_eval(<<'.,.,', 'grammar.ra', 781)
  def _reduce_235(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 787)
  def _reduce_236(val, _values, result)
     result = [val[0][:value], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 788)
  def _reduce_237(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 238 omitted

module_eval(<<'.,.,', 'grammar.ra', 792)
  def _reduce_239(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 240 omitted

module_eval(<<'.,.,', 'grammar.ra', 797)
  def _reduce_241(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 242 omitted

# reduce 243 omitted

module_eval(<<'.,.,', 'grammar.ra', 803)
  def _reduce_244(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 806)
  def _reduce_245(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 807)
  def _reduce_246(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 808)
  def _reduce_247(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 248 omitted

# reduce 249 omitted

# reduce 250 omitted

module_eval(<<'.,.,', 'grammar.ra', 814)
  def _reduce_251(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 817)
  def _reduce_252(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 821)
  def _reduce_253(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 828)
  def _reduce_254(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 834)
  def _reduce_255(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 256 omitted

module_eval(<<'.,.,', 'grammar.ra', 839)
  def _reduce_257(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 848)
  def _reduce_258(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 851)
  def _reduce_259(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 852)
  def _reduce_260(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 855)
  def _reduce_261(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 262 omitted

module_eval(<<'.,.,', 'grammar.ra', 860)
  def _reduce_263(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
