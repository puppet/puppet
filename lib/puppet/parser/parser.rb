#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 858)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'40,41,223,222,270,178,-149,94,66,90,398,337,312,407,338,239,234,178',
'397,-217,311,-62,93,177,235,237,236,238,44,272,52,53,357,38,54,177,55',
'42,27,361,45,50,35,40,41,37,92,241,240,36,434,227,228,230,229,232,233',
'296,225,226,56,-149,-149,-149,-149,224,43,231,40,41,313,44,94,52,53',
'387,38,54,352,55,42,27,-131,45,50,35,40,41,37,-198,102,315,36,281,298',
'177,124,309,308,100,101,239,234,56,281,298,250,297,66,43,235,237,236',
'238,44,350,52,53,367,38,54,-62,55,42,27,384,45,50,35,40,41,37,365,241',
'240,36,412,227,228,230,229,232,233,177,225,226,56,40,41,309,308,224',
'43,231,247,394,339,44,393,52,53,56,38,54,209,55,42,27,103,45,50,35,40',
'41,37,214,-204,277,36,404,213,394,98,56,393,250,97,239,234,56,281,279',
'369,37,302,43,235,237,236,238,44,370,52,53,278,38,54,-61,55,42,27,-200',
'45,50,35,40,41,37,209,241,240,36,428,227,228,230,229,232,233,214,225',
'226,56,133,213,225,226,224,43,231,225,226,224,44,133,52,53,224,38,54',
'209,55,42,27,209,45,50,35,40,41,37,214,225,226,36,214,213,-148,368,224',
'213,132,281,298,134,56,40,41,372,-142,98,43,132,-142,97,134,44,410,52',
'53,374,38,54,56,55,42,27,375,45,50,35,40,41,37,56,281,401,36,433,84',
'98,133,376,42,146,314,45,50,56,281,298,37,286,66,43,36,281,287,378,44',
'-200,52,53,-198,38,54,56,55,42,27,381,45,50,35,40,41,37,274,-197,132',
'36,290,134,-199,230,229,303,292,302,225,226,56,40,41,300,336,224,43',
'231,281,287,56,44,-115,52,53,-205,38,54,-65,55,42,27,-201,45,50,35,40',
'41,37,296,276,275,36,341,84,98,-141,274,42,146,-141,45,50,56,306,66',
'37,309,308,43,36,98,-199,-200,44,97,52,53,267,38,54,56,55,42,27,267',
'45,50,35,40,41,37,-61,117,264,36,-200,227,228,230,229,232,233,-66,225',
'226,56,40,41,-63,98,224,43,231,97,90,204,156,154,158,153,155,84,151',
'159,160,201,192,390,150,186,-64,40,41,37,-199,161,149,187,343,84,391',
'-64,185,42,255,-199,182,50,56,40,41,37,102,157,163,36,-204,-203,-201',
'44,405,52,53,374,38,54,56,55,42,27,358,45,50,35,40,41,37,66,-200,-202',
'36,431,84,-197,-199,176,42,255,413,296,50,56,136,302,37,417,124,43,36',
'123,99,89,44,-201,52,53,420,38,54,56,55,42,27,421,45,50,35,253,88,37',
'423,87,-248,36,425,426,239,234,60,61,62,63,86,429,56,235,237,236,238',
'-63,43,227,228,230,229,65,-66,57,225,226,60,61,62,63,435,224,436,231',
'241,240,234,,227,228,230,229,232,233,235,225,226,254,-39,-39,-39,-39',
'224,,231,,239,234,-41,-41,-41,-41,,,,235,237,236,238,,,227,228,230,229',
'232,233,,225,226,-45,-45,-45,-45,,224,,231,241,240,,,227,228,230,229',
'232,233,,225,226,252,,,,,224,,231,,239,234,,,,,,,,235,237,236,238,,',
'227,228,230,229,,40,41,225,226,117,,118,,,224,,231,241,240,,,227,228',
'230,229,232,233,116,225,226,40,41,,,117,224,118,231,84,,,,42,81,,,50',
',,,37,115,116,,36,40,41,114,,117,,118,,84,,56,,42,81,,,50,,,,37,115',
'116,,36,40,41,114,,117,,118,,84,,56,,42,81,,,50,,,,37,115,116,,36,40',
'41,114,,117,,118,,84,,56,,42,81,,,50,,,,37,115,116,,36,40,41,114,,117',
',118,,84,,56,,42,81,,,50,,,,37,115,116,,36,40,41,114,,117,,118,,84,',
'56,,42,81,,,50,,,,37,115,116,,36,40,41,114,,117,,118,,84,,56,,42,81',
',,50,,,,37,115,116,,36,40,41,114,,117,,118,,84,,56,,42,81,,,50,,,,37',
'115,116,,36,40,41,114,,117,,118,,84,,56,,42,81,,,50,,,,37,115,116,,36',
'40,41,114,,117,,118,,84,,56,,42,81,,,50,,,,37,115,116,,36,40,41,114',
',117,,118,,84,,56,,42,81,,,50,,,,37,115,116,,36,40,41,114,,117,,118',
',84,,56,,42,81,,,50,,,,37,115,116,,36,40,41,114,,117,,118,,84,,56,,42',
'81,,,50,,,,37,115,116,,36,40,41,114,,117,,118,,84,,56,,42,81,,,50,,',
',37,115,116,,36,40,41,114,,117,,118,,84,,56,,42,81,,,50,,,,37,115,116',
',36,40,41,114,,117,,118,,84,,56,,42,81,,,50,,,,37,115,116,,36,40,41',
'114,,117,,118,,84,,56,,42,81,,,50,,,,37,115,116,174,36,40,41,114,,117',
',118,,84,,56,,42,81,,,50,,,,37,115,116,,36,40,41,114,,117,,118,,84,',
'56,,42,81,,,50,,,,37,115,116,,36,40,41,114,,117,,118,,84,,56,,42,81',
',,50,,,,37,115,116,,36,40,41,114,,117,,118,,84,,56,,42,81,,,50,,,,37',
'115,116,,36,40,41,114,,117,,118,,84,,56,,42,81,,,50,,,,37,115,116,,36',
'40,41,114,,117,,118,,84,,56,,42,81,,,50,,,,37,115,116,,36,40,41,114',
',117,,,,84,,56,,42,81,,,50,,,,37,115,,,36,40,41,114,,82,,-217,,84,,56',
',42,81,,,50,,,,37,,67,,36,40,41,,,117,180,118,,84,,56,,42,81,,,50,40',
'41,,37,117,116,118,36,,,,,,,,,84,,56,,42,81,116,,50,,,,37,115,,,36,84',
',114,,42,81,,,50,,56,,37,115,40,41,36,,117,114,118,,,,40,41,,56,230',
'229,,395,,225,226,,116,,,,224,,231,,,,,84,,,,42,81,,,50,,84,,37,115',
'42,255,36,,50,114,,,37,,40,41,36,56,117,,118,,,,40,41,,56,117,,,,,,40',
'41,116,184,,,,,,,,,,84,,,,42,81,,,50,,84,,37,115,42,255,36,,50,114,84',
',37,,42,255,36,56,50,40,41,,37,117,,118,36,56,,40,41,,,117,,118,,56',
',40,41,116,,117,,118,,,,,,116,84,,,,42,81,,,50,116,84,,37,115,42,81',
'36,,50,114,84,,37,115,42,81,36,56,50,114,,,37,115,40,41,36,56,117,114',
'118,,,,40,41,,56,117,,118,,,,40,41,116,,117,,118,,,,,,116,84,,,,42,81',
',,50,116,84,,37,115,42,81,36,,50,114,84,,37,115,42,81,36,56,50,114,',
',37,115,40,41,36,56,117,114,118,,,,40,41,,56,117,,118,,,,40,41,116,',
'117,,118,,,,,,116,84,,,,42,81,,,50,116,84,,37,115,42,81,36,,50,114,84',
',37,115,42,81,36,56,50,114,,,37,115,40,41,36,56,117,114,118,,,,,,,56',
',,,40,41,,,117,116,118,,,,,,,,,,84,40,41,,42,81,116,284,50,,40,41,37',
'115,117,,36,84,,114,,42,81,,,50,,56,,37,115,40,41,36,84,,114,258,42',
'255,,,50,84,56,,37,42,81,,36,50,40,41,,37,117,,118,36,,56,,,84,,,,42',
'255,56,,50,,116,,37,40,41,,36,117,,118,,84,,,,42,81,56,,50,,,,37,115',
'116,,36,40,41,114,,117,,118,,84,,56,,42,81,,,50,,,,37,115,116,,36,40',
'41,114,,117,,118,,84,,56,,42,81,,,50,,,,37,115,116,,36,40,41,114,,117',
',118,,84,,56,,42,81,,,50,,,,37,115,116,,36,40,41,114,,117,180,118,,84',
',56,,42,81,,,50,,,,37,115,116,,36,,234,114,,,,,,84,235,56,,42,81,,,50',
',,,37,115,239,234,36,,,114,,,335,235,237,236,238,56,227,228,230,229',
'232,233,,225,226,234,,,,,224,,231,235,241,240,,,227,228,230,229,232',
'233,,225,226,239,234,,,,224,,231,,235,237,236,238,227,228,230,229,232',
'233,,225,226,,234,,,,224,,231,,235,241,240,,,227,228,230,229,232,233',
',225,226,239,234,,,,224,,231,,235,237,236,238,227,228,230,229,232,233',
',225,226,,,,,,224,,231,,,241,240,,,227,228,230,229,232,233,,225,226',
'239,234,,,,224,,231,,235,237,236,238,227,228,230,229,232,233,,225,226',
',,,,,224,,231,,,241,240,,,227,228,230,229,232,233,,225,226,239,234,',
',,224,,231,,235,237,236,238,,,,,,,,,,,,,,,,,,,,241,240,,,227,228,230',
'229,232,233,,225,226,239,234,,,,224,,231,,235,237,236,238,,,,,239,234',
',,,,,,,235,237,236,238,,,241,240,,,227,228,230,229,232,233,,225,226',
',,,,,224,,231,227,228,230,229,232,233,,225,226,239,234,,,,224,,231,',
'235,237,236,238,,,,,,,,,,,,,,,,,,,,241,240,,,227,228,230,229,232,233',
',225,226,239,234,,,,224,,231,,235,237,236,238,,,,,,239,234,,,,,,,,235',
'237,236,238,,241,240,,,227,228,230,229,232,233,,225,226,,,,,,224,240',
'231,,227,228,230,229,232,233,,225,226,239,234,,,,224,,231,,235,237,236',
'238,,,,,239,234,,,,,,,,235,237,236,238,,,241,240,,,227,228,230,229,232',
'233,,225,226,,,,,,224,,231,227,228,230,229,232,233,,225,226,239,234',
',,,224,,231,,235,237,236,238,,,,,,,,,239,234,,,,,,,,235,237,236,238',
',,227,228,230,229,232,233,,225,226,,,,,,224,,231,241,240,,,227,228,230',
'229,232,233,,225,226,239,234,,,,224,,231,,235,237,236,238,,,,,,,,,,',
',,,,,,,,,241,240,,,227,228,230,229,232,233,,225,226,,,,,,224,,231,156',
'154,158,153,155,,151,159,160,167,165,,150,152,,,,,,161,149,162,156,154',
'158,153,155,,151,159,160,167,203,,150,152,,157,163,,,161,149,162,156',
'154,158,153,155,,151,159,160,167,165,,150,152,,157,163,,,161,149,162',
'156,154,158,153,155,,151,159,160,167,165,,150,152,,157,163,,,161,149',
'162,156,154,158,153,155,,151,159,160,167,203,,150,152,,157,163,,,161',
'149,162,156,154,158,153,155,,151,159,160,167,203,,150,152,,157,163,',
',161,149,162,,,,,,,,,,,,,,,,157,163' ]
        racc_action_table = arr = ::Array.new(2712, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,111,111,129,81,286,33,105,33,346,246,210,355,246,111,111,146,346',
'146,210,105,33,81,111,111,111,111,0,129,0,0,268,0,0,146,0,0,0,273,0',
'0,0,427,427,0,33,111,111,0,427,111,111,111,111,111,111,267,111,111,0',
'286,286,286,286,111,0,111,338,338,215,427,72,427,427,338,427,427,265',
'427,427,427,192,427,427,427,2,2,427,72,38,219,427,183,183,192,264,215',
'215,38,38,219,219,427,283,283,338,183,26,427,219,219,219,219,2,259,2',
'2,283,2,2,26,2,2,2,310,2,2,2,358,358,2,279,219,219,2,358,219,219,219',
'219,219,219,255,219,219,2,118,118,310,310,219,2,219,118,343,249,358',
'343,358,358,226,358,358,92,358,358,358,39,358,358,358,352,352,358,92',
'39,172,358,352,92,391,34,225,391,118,34,172,172,358,173,173,287,34,202',
'358,172,172,172,172,352,289,352,352,173,352,352,104,352,352,352,104',
'352,352,352,407,407,352,307,172,172,352,407,172,172,172,172,172,172',
'307,172,172,352,55,307,324,324,172,352,172,322,322,324,407,272,407,407',
'322,407,407,93,407,407,407,209,407,407,407,288,288,407,93,323,323,407',
'209,93,201,285,323,209,55,285,285,55,407,59,59,293,174,357,407,272,174',
'357,272,288,357,288,288,294,288,288,55,288,288,288,296,288,288,288,421',
'421,288,272,348,348,288,421,59,59,270,299,59,59,216,59,59,288,216,216',
'59,179,199,288,59,179,179,301,421,197,421,421,195,421,421,59,421,421',
'421,304,421,421,421,181,181,421,305,194,270,421,181,270,193,321,321',
'190,181,189,321,321,421,64,64,188,245,321,421,321,245,245,270,181,187',
'181,181,186,181,181,108,181,181,181,108,181,181,181,252,252,181,182',
'168,165,181,252,64,64,278,164,64,64,278,64,64,181,205,145,64,205,205',
'181,64,53,142,141,252,53,252,252,128,252,252,64,252,252,252,127,252',
'252,252,89,89,252,23,89,126,252,23,327,327,327,327,327,327,109,327,327',
'252,398,398,106,54,327,252,327,54,95,91,89,89,89,89,89,89,89,89,89,89',
'89,340,89,89,107,253,253,89,107,89,89,89,253,398,342,24,88,398,398,24',
'86,398,89,400,400,398,84,89,89,398,83,80,79,253,353,253,253,354,253',
'253,398,253,253,253,269,253,253,253,420,420,253,77,75,73,253,420,400',
'71,70,68,400,400,373,374,400,253,57,380,400,382,52,253,400,46,35,32',
'420,31,420,420,394,420,420,400,420,420,420,397,420,420,420,121,30,420',
'399,29,401,420,403,406,121,121,21,21,21,21,28,411,420,121,121,121,121',
'25,420,325,325,325,325,22,20,1,325,325,19,19,19,19,430,325,432,325,121',
'121,332,,121,121,121,121,121,121,332,121,121,122,5,5,5,5,121,,121,,122',
'122,7,7,7,7,,,,122,122,122,122,,,332,332,332,332,332,332,,332,332,9',
'9,9,9,,332,,332,122,122,,,122,122,122,122,122,122,,122,122,119,,,,,122',
',122,,119,119,,,,,,,,119,119,119,119,,,326,326,326,326,,339,339,326',
'326,339,,339,,,326,,326,119,119,,,119,119,119,119,119,119,339,119,119',
'239,239,,,239,119,239,119,339,,,,339,339,,,339,,,,339,339,239,,339,238',
'238,339,,238,,238,,239,,339,,239,239,,,239,,,,239,239,238,,239,237,237',
'239,,237,,237,,238,,239,,238,238,,,238,,,,238,238,237,,238,236,236,238',
',236,,236,,237,,238,,237,237,,,237,,,,237,237,236,,237,235,235,237,',
'235,,235,,236,,237,,236,236,,,236,,,,236,236,235,,236,41,41,236,,41',
',41,,235,,236,,235,235,,,235,,,,235,235,41,,235,43,43,235,,43,,43,,41',
',235,,41,41,,,41,,,,41,41,43,,41,44,44,41,,44,,44,,43,,41,,43,43,,,43',
',,,43,43,44,,43,45,45,43,,45,,45,,44,,43,,44,44,,,44,,,,44,44,45,,44',
'234,234,44,,234,,234,,45,,44,,45,45,,,45,,,,45,45,234,,45,233,233,45',
',233,,233,,234,,45,,234,234,,,234,,,,234,234,233,,234,232,232,234,,232',
',232,,233,,234,,233,233,,,233,,,,233,233,232,,233,231,231,233,,231,',
'231,,232,,233,,232,232,,,232,,,,232,232,231,,232,375,375,232,,375,,375',
',231,,232,,231,231,,,231,,,,231,231,375,,231,230,230,231,,230,,230,',
'375,,231,,375,375,,,375,,,,375,375,230,,375,66,66,375,,66,,66,,230,',
'375,,230,230,,,230,,,,230,230,66,,230,67,67,230,,67,,67,,66,,230,,66',
'66,,,66,,,,66,66,67,67,66,393,393,66,,393,,393,,67,,66,,67,67,,,67,',
',,67,67,393,,67,229,229,67,,229,,229,,393,,67,,393,393,,,393,,,,393',
'393,229,,393,228,228,393,,228,,228,,229,,393,,229,229,,,229,,,,229,229',
'228,,229,227,227,229,,227,,227,,228,,229,,228,228,,,228,,,,228,228,227',
',228,224,224,228,,224,,224,,227,,228,,227,227,,,227,,,,227,227,224,',
'227,223,223,227,,223,,223,,224,,227,,224,224,,,224,,,,224,224,223,,224',
'350,350,224,,350,,,,223,,224,,223,223,,,223,,,,223,223,,,223,27,27,223',
',27,,27,,350,,223,,350,350,,,350,,,,350,,27,,350,82,82,,,82,82,82,,27',
',350,,27,27,,,27,241,241,,27,241,82,241,27,,,,,,,,,82,,27,,82,82,241',
',82,,,,82,82,,,82,241,,82,,241,241,,,241,,82,,241,241,292,292,241,,292',
'241,292,,,,344,344,,241,320,320,,344,,320,320,,292,,,,320,,320,,,,,292',
',,,292,292,,,292,,344,,292,292,344,344,292,,344,292,,,344,,87,87,344',
'292,87,,87,,,,300,300,,344,300,,,,,,254,254,87,87,,,,,,,,,,87,,,,87',
'87,,,87,,300,,87,87,300,300,87,,300,87,254,,300,,254,254,300,87,254',
'311,311,,254,311,,311,254,300,,240,240,,,240,,240,,254,,312,312,311',
',312,,312,,,,,,240,311,,,,311,311,,,311,312,240,,311,311,240,240,311',
',240,311,312,,240,240,312,312,240,311,312,240,,,312,312,280,280,312',
'240,280,312,280,,,,94,94,,312,94,,94,,,,178,178,280,,178,,178,,,,,,94',
'280,,,,280,280,,,280,178,94,,280,280,94,94,280,,94,280,178,,94,94,178',
'178,94,280,178,94,,,178,178,100,100,178,94,100,178,100,,,,101,101,,178',
'101,,101,,,,102,102,100,,102,,102,,,,,,101,100,,,,100,100,,,100,102',
'101,,100,100,101,101,100,,101,100,102,,101,101,102,102,101,100,102,101',
',,102,102,103,103,102,101,103,102,103,,,,,,,102,,,,177,177,,,177,103',
'177,,,,,,,,,,103,258,258,,103,103,177,177,103,,176,176,103,103,176,',
'103,177,,103,,177,177,,,177,,103,,177,177,123,123,177,258,,177,123,258',
'258,,,258,176,177,,258,176,176,,258,176,276,276,,176,276,,276,176,,258',
',,123,,,,123,123,176,,123,,276,,123,275,275,,123,275,,275,,276,,,,276',
'276,123,,276,,,,276,276,275,,276,114,114,276,,114,,114,,275,,276,,275',
'275,,,275,,,,275,275,114,,275,115,115,275,,115,,115,,114,,275,,114,114',
',,114,,,,114,114,115,,114,116,116,114,,116,,116,,115,,114,,115,115,',
',115,,,,115,115,116,,115,117,117,115,,117,117,117,,116,,115,,116,116',
',,116,,,,116,116,117,,116,,329,116,,,,,,117,329,116,,117,117,,,117,',
',,117,117,244,244,117,,,117,,,244,244,244,244,244,117,329,329,329,329',
'329,329,,329,329,331,,,,,329,,329,331,244,244,,,244,244,244,244,244',
'244,,244,244,217,217,,,,244,,244,,217,217,217,217,331,331,331,331,331',
'331,,331,331,,330,,,,331,,331,,330,217,217,,,217,217,217,217,217,217',
',217,217,415,415,,,,217,,217,,415,415,415,415,330,330,330,330,330,330',
',330,330,,,,,,330,,330,,,415,415,,,415,415,415,415,415,415,,415,415',
'363,363,,,,415,,415,,363,363,363,363,328,328,328,328,328,328,,328,328',
',,,,,328,,328,,,363,363,,,363,363,363,363,363,363,,363,363,371,371,',
',,363,,363,,371,371,371,371,,,,,,,,,,,,,,,,,,,,371,371,,,371,371,371',
'371,371,371,,371,371,175,175,,,,371,,371,,175,175,175,175,,,,,333,333',
',,,,,,,333,333,333,333,,,175,175,,,175,175,175,175,175,175,,175,175',
',,,,,175,,175,333,333,333,333,333,333,,333,333,364,364,,,,333,,333,',
'364,364,364,364,,,,,,,,,,,,,,,,,,,,364,364,,,364,364,364,364,364,364',
',364,364,366,366,,,,364,,364,,366,366,366,366,,,,,,334,334,,,,,,,,334',
'334,334,334,,366,366,,,366,366,366,366,366,366,,366,366,,,,,,366,334',
'366,,334,334,334,334,334,334,,334,334,218,218,,,,334,,334,,218,218,218',
'218,,,,,386,386,,,,,,,,386,386,386,386,,,218,218,,,218,218,218,218,218',
'218,,218,218,,,,,,218,,218,386,386,386,386,386,386,,386,386,385,385',
',,,386,,386,,385,385,385,385,,,,,,,,,220,220,,,,,,,,220,220,220,220',
',,385,385,385,385,385,385,,385,385,,,,,,385,,385,220,220,,,220,220,220',
'220,220,220,,220,220,389,389,,,,220,,220,,389,389,389,389,,,,,,,,,,',
',,,,,,,,,389,389,,,389,389,389,389,389,389,,389,389,,,,,,389,,389,65',
'65,65,65,65,,65,65,65,65,65,,65,65,,,,,,65,65,65,90,90,90,90,90,,90',
'90,90,90,90,,90,90,,65,65,,,90,90,90,274,274,274,274,274,,274,274,274',
'274,274,,274,274,,90,90,,,274,274,274,204,204,204,204,204,,204,204,204',
'204,204,,204,204,,274,274,,,204,204,204,302,302,302,302,302,,302,302',
'302,302,302,,302,302,,204,204,,,302,302,302,303,303,303,303,303,,303',
'303,303,303,303,,303,303,,302,302,,,303,303,303,,,,,,,,,,,,,,,,303,303' ]
        racc_action_check = arr = ::Array.new(2712, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   589,    84,   nil,   nil,   551,   nil,   561,   nil,   583,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   529,
   569,   507,   579,   414,   464,   562,   102,  1319,   503,   539,
   541,   522,   535,     1,   146,   498,   nil,   nil,    84,   153,
   nil,   844,   nil,   869,   894,   919,   518,   nil,   nil,   nil,
   nil,   nil,   536,   376,   415,   231,   nil,   534,   nil,   274,
   nil,   nil,   nil,   nil,   360,  2533,  1094,  1119,   515,   nil,
   503,   502,    66,   498,   nil,   497,   nil,   513,   nil,   477,
   476,    -1,  1344,   475,   488,   nil,   418,  1465,   444,   428,
  2555,   449,   140,   226,  1604,   448,   nil,   nil,   nil,   nil,
  1661,  1671,  1681,  1728,   188,     2,   431,   453,   360,   425,
   nil,    -2,   nil,   nil,  1863,  1888,  1913,  1938,   145,   659,
   nil,   551,   605,  1792,   nil,   nil,   423,   402,   395,    -8,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   391,   390,   nil,   nil,   400,    11,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   386,   340,   nil,   nil,   380,   nil,
   nil,   nil,   170,   179,   260,  2195,  1771,  1745,  1614,   315,
   nil,   342,   355,    82,   nil,   nil,   353,   350,   323,   346,
   336,   nil,    71,   330,   325,   310,   nil,   307,   nil,   317,
   nil,   244,   182,   nil,  2599,   359,   nil,   nil,   nil,   230,
    -6,   nil,   nil,   nil,   nil,    48,   308,  2015,  2365,    84,
  2448,   nil,   nil,  1269,  1244,   121,    99,  1219,  1194,  1169,
  1069,  1019,   994,   969,   944,   819,   794,   769,   744,   719,
  1537,  1361,   nil,   nil,  1970,   358,     2,   nil,   nil,   145,
   nil,   nil,   385,   471,  1485,   119,   nil,   nil,  1762,   104,
   nil,   nil,   nil,   nil,    94,    70,   nil,    22,    -5,   504,
   309,   nil,   242,    30,  2577,  1838,  1813,   nil,   378,   107,
  1594,   nil,   nil,    93,   nil,   261,    -2,   185,   256,   192,
   nil,   nil,  1408,   208,   278,   nil,   282,   nil,   nil,   303,
  1475,   319,  2621,  2643,   331,   335,   nil,   194,   nil,   nil,
   100,  1527,  1547,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1369,   299,   180,   202,   175,   530,   638,   385,  2082,  1948,
  2037,  1992,   584,  2212,  2320,   nil,   nil,   nil,    66,   694,
   460,   nil,   473,   124,  1418,   nil,    -2,   nil,   294,   nil,
  1294,   nil,   170,   477,   493,     5,   nil,   244,   127,   nil,
   nil,   nil,   nil,  2105,  2257,   nil,  2302,   nil,   nil,   nil,
   nil,  2150,   nil,   460,   496,  1044,   nil,   nil,   nil,   nil,
   523,   nil,   528,   nil,   nil,  2427,  2382,   nil,   nil,  2493,
   nil,   150,   nil,  1144,   540,   nil,   nil,   547,   446,   553,
   489,   555,   nil,   557,   nil,   nil,   542,   213,   nil,   nil,
   nil,   566,   nil,   nil,   nil,  2060,   nil,   nil,   nil,   nil,
   514,   299,   nil,   nil,   nil,   nil,   nil,    41,   nil,   nil,
   587,   nil,   589,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -226,  -261,    -1,    -2,    -3,    -6,    -7,    -8,    -9,   -10,
   -11,   -12,   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,
   -21,  -261,   -40,   -42,   -43,   -44,   -46,  -116,   -55,   -59,
  -261,   -65,  -261,  -198,  -261,   -93,  -115,  -117,  -241,  -259,
  -143,  -261,  -148,  -261,  -261,  -261,  -261,  -197,  -202,  -203,
  -205,  -206,  -261,  -261,  -218,  -261,  -249,  -261,    -4,  -261,
   -47,   -48,   -49,   -50,  -261,  -138,  -261,  -261,   -54,   -73,
   -77,   -78,   -79,   -80,   -81,   -82,   -83,   -84,   -85,   -86,
   -87,  -116,  -261,  -259,  -241,   -56,  -261,  -261,  -261,  -128,
  -128,   -96,  -226,  -226,  -261,  -261,   -92,  -217,  -218,   -94,
  -261,  -261,  -261,  -261,   -82,   -84,   -81,   -77,   -86,  -183,
  -144,  -261,  -160,  -161,  -261,  -261,  -261,  -261,  -261,  -261,
  -153,  -261,  -261,  -261,  -207,  -208,  -210,  -226,  -226,  -226,
  -219,  -221,  -222,  -223,  -224,  -225,   437,   -38,   -39,   -40,
   -41,   -42,   -43,   -44,   -45,   -46,  -116,  -201,   -37,   -22,
   -23,   -24,   -25,   -26,   -27,   -28,   -29,   -30,   -31,   -32,
   -33,   -34,   -35,   -36,  -247,  -131,  -132,  -133,  -261,  -136,
  -137,  -139,  -261,  -261,   -53,   -75,  -261,  -261,  -261,  -261,
  -244,  -261,  -227,  -261,   -58,   -60,   -25,   -35,  -113,  -247,
  -261,  -111,  -116,  -118,  -119,  -120,  -121,  -122,  -123,  -124,
  -129,  -133,  -247,  -131,  -138,  -261,   -99,  -100,  -102,  -226,
  -261,  -108,  -109,  -116,  -241,  -261,  -261,  -125,  -127,  -261,
  -126,  -145,  -146,  -261,  -261,  -261,  -261,  -261,  -261,  -261,
  -261,  -261,  -261,  -261,  -261,  -261,  -261,  -261,  -261,  -261,
  -261,  -261,  -172,  -179,  -261,  -261,  -261,  -252,  -253,  -261,
  -256,  -257,  -261,  -261,  -261,  -116,  -191,  -192,  -261,  -261,
  -198,  -199,  -200,  -204,  -261,  -261,  -228,  -227,  -226,  -261,
  -261,  -235,  -261,  -261,  -248,  -261,  -261,  -260,   -51,  -246,
  -261,  -245,   -74,  -261,  -142,  -261,  -242,  -246,    -5,  -261,
   -68,   -69,  -261,  -261,  -247,  -231,  -234,   -57,  -246,  -261,
  -114,  -261,  -248,  -128,  -261,  -247,   -97,  -261,  -104,  -105,
  -261,  -261,  -261,   -98,  -150,  -258,  -147,  -162,  -163,  -164,
  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -173,  -174,  -175,
  -176,  -177,  -178,  -180,  -181,  -182,  -242,  -250,  -261,  -261,
  -261,  -152,  -261,  -156,  -261,  -185,  -261,  -189,  -247,  -194,
  -261,  -209,  -261,  -261,  -247,  -261,  -237,  -261,  -261,  -220,
  -236,   -91,  -140,  -135,  -134,   -52,   -76,  -141,  -149,  -243,
   -67,   -70,   -71,  -261,  -248,  -261,   -88,  -112,   -89,  -130,
  -247,   -90,  -261,  -101,  -103,  -106,  -107,  -251,  -254,  -255,
  -151,  -156,  -155,  -261,  -261,  -184,  -186,  -261,  -261,  -261,
  -261,  -246,  -196,  -261,  -212,  -229,  -261,  -261,  -238,  -239,
  -240,  -261,  -216,   -72,  -232,  -233,  -110,   -95,  -154,  -157,
  -261,  -261,  -190,  -193,  -195,  -211,  -230,  -261,  -214,  -215,
  -261,  -159,  -261,  -188,  -213,  -158,  -187 ]

racc_goto_table = [
    22,    58,    22,    24,     2,    24,   248,   120,    69,   127,
   128,     3,   130,   257,   273,   110,   135,   125,    31,   293,
    31,   200,   200,   189,   202,   198,   173,   259,   191,   164,
    70,   294,   205,   215,   345,   392,    96,   188,   291,   301,
   221,   179,    23,   140,    23,    79,   183,   383,   140,   144,
   137,    91,   304,   216,   144,   148,    59,   299,    64,   139,
   344,   138,   142,   362,   139,   400,   138,   142,   256,    75,
   265,   268,   289,   348,   181,   126,   245,   147,    85,   355,
   129,   269,   147,   418,    68,    39,   360,    39,   414,   408,
   246,     1,   193,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   141,   nil,   nil,   353,   nil,   141,   147,   nil,   340,
   342,   nil,   nil,   nil,   nil,   nil,   354,   nil,   nil,   nil,
   nil,   251,   nil,   nil,   396,   nil,   261,   nil,   nil,   nil,
   nil,   197,   nil,   nil,   211,   211,   283,   285,   266,   266,
   271,   147,   nil,   nil,   373,   nil,   nil,   nil,   349,   310,
   nil,   nil,   nil,   nil,   nil,   382,   nil,   282,   347,   nil,
   nil,   nil,   259,   nil,   nil,   262,   nil,   nil,   305,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    70,
   nil,    22,   nil,    20,    24,    20,   318,   319,   nil,   nil,
   nil,   nil,   nil,   nil,    79,   nil,   nil,   316,   399,    31,
    47,   nil,    47,   nil,   406,   nil,   nil,   nil,   263,   403,
   nil,   nil,   nil,   nil,   nil,   411,   nil,   nil,    75,   nil,
   nil,   nil,   nil,    23,   nil,   nil,   388,   359,   nil,   351,
   416,   135,   nil,   135,   379,   200,   198,   380,   nil,   377,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   347,   nil,
   nil,   211,    22,    22,   nil,    24,    24,   261,   nil,    47,
   nil,   261,   nil,   nil,    47,    33,    39,    33,   nil,   nil,
    31,    31,   147,   nil,   nil,   nil,   147,   430,   432,   356,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    58,    22,   194,
   424,    24,   212,   212,    23,    23,   262,   nil,   nil,    95,
   262,   nil,   422,   193,   259,   nil,    31,   nil,    25,   nil,
    25,   nil,   nil,   409,   nil,   nil,   nil,   nil,   147,   nil,
   nil,   nil,   nil,    47,    33,   nil,   nil,   nil,   nil,    33,
    23,   402,   nil,   nil,   nil,    74,   nil,    39,    39,   263,
   nil,   251,   197,   263,   nil,   nil,   nil,   261,   nil,   211,
   nil,   nil,    22,    70,   195,    24,   419,   nil,    22,   nil,
   nil,    24,   147,   nil,    20,   nil,   nil,   143,    79,   nil,
    31,   nil,   143,    39,   nil,   nil,    31,   nil,   nil,   nil,
   nil,    47,   nil,   nil,   nil,   nil,   262,   nil,   260,   nil,
   nil,   nil,    75,   nil,    23,   nil,   nil,   196,   nil,   nil,
    23,   261,   nil,   261,   nil,   nil,   nil,    22,   nil,   212,
    24,   427,   nil,   nil,   nil,   nil,   147,   nil,   147,   nil,
    22,    22,   nil,    24,    24,    31,    58,    22,   nil,   263,
    24,   nil,   nil,   nil,   nil,    20,    20,    39,    31,    31,
   262,   nil,   262,    39,   nil,    31,    33,   nil,   nil,    23,
   nil,   nil,    47,    47,    47,   nil,   nil,   nil,    47,   nil,
   nil,   nil,    23,    23,   nil,    49,   nil,    49,    48,    23,
    48,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   263,    74,   263,   nil,   nil,    47,    25,
   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   194,   nil,   nil,   nil,   nil,    39,    39,   212,   nil,   nil,
   nil,   nil,    39,   nil,   nil,   nil,   nil,    33,    33,   260,
   nil,   nil,   nil,   260,    49,   nil,   nil,    48,   nil,    49,
   nil,   nil,    48,   nil,   nil,    20,   nil,   nil,   nil,   nil,
   nil,    20,   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    47,    33,    49,   nil,   nil,    48,    47,   nil,
    25,    25,   nil,   nil,   nil,   195,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,
   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,    49,   nil,
    20,    48,   nil,   nil,   nil,   nil,    25,   nil,    47,   nil,
    47,   nil,   nil,    20,    20,   nil,    77,    47,   196,   260,
    20,   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,
    47,    47,   nil,    33,   nil,   nil,   nil,    47,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   145,   nil,
   nil,   nil,   nil,   145,   nil,   nil,    49,   nil,   nil,    48,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    74,   nil,
    25,   nil,   nil,   260,   nil,   260,    25,   nil,   199,   nil,
   nil,   nil,    33,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    33,    33,   nil,   nil,   nil,
   nil,   nil,    33,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    25,   nil,    49,    49,    49,
    48,    48,    48,    49,   nil,   nil,    48,   nil,    25,    25,
   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    49,   nil,    77,    48,   nil,   nil,   nil,
    26,   nil,   nil,   nil,   nil,    49,   nil,   nil,    48,   nil,
   nil,   nil,   nil,   nil,   111,   nil,   119,   121,   122,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   172,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    49,
   nil,   nil,    48,   nil,   nil,   nil,   nil,    49,   nil,   nil,
    48,   nil,   nil,    49,   nil,   nil,    48,   nil,   nil,   nil,
   nil,    26,    26,   217,   218,   219,   220,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   242,   243,   244,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    49,   nil,    49,    48,    26,    48,   nil,
   nil,   nil,    49,   nil,   nil,    48,   nil,   nil,   nil,   199,
   nil,   nil,   nil,   nil,   nil,    49,    49,   nil,    48,    48,
   nil,   nil,    49,   nil,   nil,    48,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    77,
   nil,    26,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   111,   317,   nil,   nil,
   320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,   331,   332,   333,   334,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,
    26,   nil,   nil,   nil,   nil,   nil,    26,   nil,   363,   364,
   nil,   nil,   nil,   366,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   371,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   385,   386,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   389,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   415,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   121 ]

racc_goto_check = [
    25,     4,    25,    27,     2,    27,    93,    71,    43,    50,
    50,     3,    88,    80,    42,    69,    74,    82,    36,    40,
    36,    65,    65,    53,    53,    48,    30,    78,    62,    54,
    27,    41,    57,    57,    76,    72,     6,    51,     5,    42,
    70,    30,    26,     8,    26,    36,    30,    58,     8,    10,
    23,    56,    42,    30,    10,    23,    24,    52,    24,    25,
    75,     6,    27,    68,    25,    44,     6,    27,    79,    26,
    84,    84,    38,    81,    37,    83,    30,    36,    33,    85,
    86,    87,    36,    72,    31,    64,    89,    64,    90,    91,
    92,     1,    27,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    26,   nil,   nil,    40,   nil,    26,    36,   nil,     5,
     5,   nil,   nil,   nil,   nil,   nil,    41,   nil,   nil,   nil,
   nil,    27,   nil,   nil,    76,   nil,    27,   nil,   nil,   nil,
   nil,    26,   nil,   nil,    26,    26,    30,    30,     3,     3,
     3,    36,   nil,   nil,    42,   nil,   nil,   nil,    80,    57,
   nil,   nil,   nil,   nil,   nil,    42,   nil,    43,    78,   nil,
   nil,   nil,    78,   nil,   nil,    26,   nil,   nil,    54,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,
   nil,    25,   nil,    21,    27,    21,    74,    74,   nil,   nil,
   nil,   nil,   nil,   nil,    36,   nil,   nil,    69,    42,    36,
    45,   nil,    45,   nil,    42,   nil,   nil,   nil,    64,     5,
   nil,   nil,   nil,   nil,   nil,     5,   nil,   nil,    26,   nil,
   nil,   nil,   nil,    26,   nil,   nil,    93,    88,   nil,    82,
    42,    74,   nil,    74,    65,    65,    48,    53,   nil,    62,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    78,   nil,
   nil,    26,    25,    25,   nil,    27,    27,    27,   nil,    45,
   nil,    27,   nil,   nil,    45,    46,    64,    46,   nil,   nil,
    36,    36,    36,   nil,   nil,   nil,    36,     5,     5,     3,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,    25,    45,
    80,    27,    45,    45,    26,    26,    26,   nil,   nil,    46,
    26,   nil,    78,    27,    78,   nil,    36,   nil,    28,   nil,
    28,   nil,   nil,    50,   nil,   nil,   nil,   nil,    36,   nil,
   nil,   nil,   nil,    45,    46,   nil,   nil,   nil,   nil,    46,
    26,    43,   nil,   nil,   nil,    28,   nil,    64,    64,    64,
   nil,    27,    26,    64,   nil,   nil,   nil,    27,   nil,    26,
   nil,   nil,    25,    27,    46,    27,    71,   nil,    25,   nil,
   nil,    27,    36,   nil,    21,   nil,   nil,    28,    36,   nil,
    36,   nil,    28,    64,   nil,   nil,    36,   nil,   nil,   nil,
   nil,    45,   nil,   nil,   nil,   nil,    26,   nil,    46,   nil,
   nil,   nil,    26,   nil,    26,   nil,   nil,    28,   nil,   nil,
    26,    27,   nil,    27,   nil,   nil,   nil,    25,   nil,    45,
    27,     2,   nil,   nil,   nil,   nil,    36,   nil,    36,   nil,
    25,    25,   nil,    27,    27,    36,     4,    25,   nil,    64,
    27,   nil,   nil,   nil,   nil,    21,    21,    64,    36,    36,
    26,   nil,    26,    64,   nil,    36,    46,   nil,   nil,    26,
   nil,   nil,    45,    45,    45,   nil,   nil,   nil,    45,   nil,
   nil,   nil,    26,    26,   nil,    49,   nil,    49,    47,    26,
    47,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    64,    28,    64,   nil,   nil,    45,    28,
   nil,   nil,    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    45,   nil,   nil,   nil,   nil,    64,    64,    45,   nil,   nil,
   nil,   nil,    64,   nil,   nil,   nil,   nil,    46,    46,    46,
   nil,   nil,   nil,    46,    49,   nil,   nil,    47,   nil,    49,
   nil,   nil,    47,   nil,   nil,    21,   nil,   nil,   nil,   nil,
   nil,    21,   nil,   nil,    45,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    45,    46,    49,   nil,   nil,    47,    45,   nil,
    28,    28,   nil,   nil,   nil,    46,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29,
   nil,    29,   nil,   nil,   nil,   nil,   nil,   nil,    49,   nil,
    21,    47,   nil,   nil,   nil,   nil,    28,   nil,    45,   nil,
    45,   nil,   nil,    21,    21,   nil,    29,    45,    28,    46,
    21,   nil,   nil,   nil,   nil,   nil,   nil,    46,   nil,   nil,
    45,    45,   nil,    46,   nil,   nil,   nil,    45,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29,   nil,
   nil,   nil,   nil,    29,   nil,   nil,    49,   nil,   nil,    47,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    28,   nil,
    28,   nil,   nil,    46,   nil,    46,    28,   nil,    29,   nil,
   nil,   nil,    46,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    46,    46,   nil,   nil,   nil,
   nil,   nil,    46,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    28,   nil,    49,    49,    49,
    47,    47,    47,    49,   nil,   nil,    47,   nil,    28,    28,
   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    49,   nil,    29,    47,   nil,   nil,   nil,
    29,   nil,   nil,   nil,   nil,    49,   nil,   nil,    47,   nil,
   nil,   nil,   nil,   nil,    39,   nil,    39,    39,    39,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    49,
   nil,   nil,    47,   nil,   nil,   nil,   nil,    49,   nil,   nil,
    47,   nil,   nil,    49,   nil,   nil,    47,   nil,   nil,   nil,
   nil,    29,    29,    39,    39,    39,    39,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,    39,    39,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    49,   nil,    49,    47,    29,    47,   nil,
   nil,   nil,    49,   nil,   nil,    47,   nil,   nil,   nil,    29,
   nil,   nil,   nil,   nil,   nil,    49,    49,   nil,    47,    47,
   nil,   nil,    49,   nil,   nil,    47,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29,
   nil,    29,   nil,   nil,   nil,   nil,   nil,    29,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    39,    39,   nil,   nil,
    39,    39,    39,    39,    39,    39,    39,    39,    39,    39,
    39,    39,    39,    39,    39,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    29,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29,
    29,   nil,   nil,   nil,   nil,   nil,    29,   nil,    39,    39,
   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    39,    39,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    39 ]

racc_goto_pointer = [
   nil,    91,     4,    11,    -1,  -143,     2,   nil,   -16,   nil,
   -10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   183,   nil,    -9,    37,     0,    42,     3,   308,   579,
   -41,    57,   nil,    50,   nil,   nil,    18,   -12,  -109,   733,
  -163,  -151,  -150,   -19,  -283,   200,   265,   468,   -64,   465,
   -44,   -52,  -131,   -66,   -36,   nil,    18,   -60,  -260,   nil,
   nil,   nil,   -61,   nil,    85,   -68,   nil,   nil,  -211,   -26,
   -71,   -37,  -308,   nil,   -39,  -194,  -220,   nil,   -96,   -55,
  -110,  -185,   -35,    23,   -57,  -189,    25,   -48,   -43,  -186,
  -286,  -268,   -28,  -112,   nil ]

racc_goto_default = [
   nil,   nil,   288,   206,     4,   nil,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,   109,   166,    21,   nil,    78,   104,   107,   106,   105,
   nil,   nil,    28,   nil,    29,    30,   108,   nil,   nil,   175,
   nil,   nil,   nil,   112,   280,    71,    72,    73,    76,    80,
    32,   nil,   nil,   nil,   nil,    34,   nil,   nil,   207,   307,
   208,   210,   nil,   190,    83,   169,   168,   170,   171,   nil,
   nil,   nil,   nil,   113,    51,   nil,   nil,   346,    46,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   131,
   295,   nil,   nil,   nil,   249 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 74, :_reduce_3,
  2, 74, :_reduce_4,
  1, 77, :_reduce_5,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_21,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  3, 92, :_reduce_37,
  3, 92, :_reduce_38,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  4, 86, :_reduce_51,
  5, 86, :_reduce_52,
  3, 86, :_reduce_53,
  2, 86, :_reduce_54,
  1, 93, :_reduce_55,
  2, 93, :_reduce_56,
  4, 104, :_reduce_57,
  3, 104, :_reduce_58,
  1, 104, :_reduce_59,
  3, 106, :_reduce_60,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  4, 105, :_reduce_67,
  3, 105, :_reduce_68,
  1, 110, :_reduce_none,
  2, 110, :_reduce_70,
  3, 109, :_reduce_71,
  4, 109, :_reduce_72,
  1, 103, :_reduce_73,
  3, 103, :_reduce_74,
  1, 102, :_reduce_75,
  3, 102, :_reduce_76,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  5, 78, :_reduce_88,
  5, 78, :_reduce_89,
  5, 78, :_reduce_90,
  5, 90, :_reduce_91,
  2, 79, :_reduce_92,
  1, 127, :_reduce_93,
  2, 127, :_reduce_94,
  6, 80, :_reduce_95,
  2, 80, :_reduce_96,
  3, 128, :_reduce_97,
  3, 128, :_reduce_98,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  3, 129, :_reduce_101,
  1, 130, :_reduce_none,
  3, 130, :_reduce_103,
  1, 131, :_reduce_104,
  1, 131, :_reduce_105,
  3, 132, :_reduce_106,
  3, 132, :_reduce_107,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  4, 134, :_reduce_110,
  1, 123, :_reduce_111,
  3, 123, :_reduce_112,
  0, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 121, :_reduce_115,
  1, 117, :_reduce_116,
  1, 118, :_reduce_117,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  3, 81, :_reduce_125,
  3, 81, :_reduce_126,
  3, 91, :_reduce_127,
  0, 125, :_reduce_128,
  1, 125, :_reduce_129,
  3, 125, :_reduce_130,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  3, 137, :_reduce_134,
  3, 139, :_reduce_135,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  0, 126, :_reduce_138,
  1, 126, :_reduce_139,
  3, 126, :_reduce_140,
  4, 108, :_reduce_141,
  3, 108, :_reduce_142,
  1, 99, :_reduce_143,
  2, 99, :_reduce_144,
  2, 141, :_reduce_145,
  1, 142, :_reduce_146,
  2, 142, :_reduce_147,
  1, 119, :_reduce_148,
  4, 97, :_reduce_149,
  4, 97, :_reduce_150,
  5, 84, :_reduce_151,
  4, 84, :_reduce_152,
  2, 83, :_reduce_153,
  5, 143, :_reduce_154,
  4, 143, :_reduce_155,
  0, 144, :_reduce_none,
  2, 144, :_reduce_157,
  4, 144, :_reduce_158,
  3, 144, :_reduce_159,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  3, 111, :_reduce_162,
  3, 111, :_reduce_163,
  3, 111, :_reduce_164,
  3, 111, :_reduce_165,
  3, 111, :_reduce_166,
  3, 111, :_reduce_167,
  3, 111, :_reduce_168,
  3, 111, :_reduce_169,
  3, 111, :_reduce_170,
  3, 111, :_reduce_171,
  2, 111, :_reduce_172,
  3, 111, :_reduce_173,
  3, 111, :_reduce_174,
  3, 111, :_reduce_175,
  3, 111, :_reduce_176,
  3, 111, :_reduce_177,
  3, 111, :_reduce_178,
  2, 111, :_reduce_179,
  3, 111, :_reduce_180,
  3, 111, :_reduce_181,
  3, 111, :_reduce_182,
  1, 111, :_reduce_183,
  5, 82, :_reduce_184,
  1, 147, :_reduce_185,
  2, 147, :_reduce_186,
  5, 148, :_reduce_187,
  4, 148, :_reduce_188,
  1, 149, :_reduce_189,
  3, 149, :_reduce_190,
  3, 100, :_reduce_191,
  1, 151, :_reduce_none,
  4, 151, :_reduce_193,
  1, 153, :_reduce_none,
  3, 153, :_reduce_195,
  3, 152, :_reduce_196,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_205,
  1, 150, :_reduce_none,
  1, 154, :_reduce_207,
  1, 155, :_reduce_none,
  3, 155, :_reduce_209,
  2, 85, :_reduce_210,
  6, 87, :_reduce_211,
  5, 87, :_reduce_212,
  7, 88, :_reduce_213,
  6, 88, :_reduce_214,
  6, 89, :_reduce_215,
  5, 89, :_reduce_216,
  1, 122, :_reduce_217,
  1, 122, :_reduce_218,
  1, 158, :_reduce_219,
  3, 158, :_reduce_220,
  1, 160, :_reduce_221,
  1, 161, :_reduce_222,
  1, 161, :_reduce_223,
  1, 161, :_reduce_224,
  1, 161, :_reduce_none,
  0, 75, :_reduce_226,
  0, 112, :_reduce_227,
  1, 156, :_reduce_none,
  3, 156, :_reduce_229,
  4, 156, :_reduce_230,
  1, 113, :_reduce_none,
  3, 113, :_reduce_232,
  3, 162, :_reduce_233,
  1, 162, :_reduce_234,
  1, 159, :_reduce_none,
  2, 159, :_reduce_236,
  1, 157, :_reduce_none,
  2, 157, :_reduce_238,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 98, :_reduce_241,
  3, 120, :_reduce_242,
  4, 120, :_reduce_243,
  2, 120, :_reduce_244,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  0, 114, :_reduce_none,
  1, 114, :_reduce_248,
  1, 146, :_reduce_249,
  3, 145, :_reduce_250,
  4, 145, :_reduce_251,
  2, 145, :_reduce_252,
  1, 164, :_reduce_none,
  3, 164, :_reduce_254,
  3, 165, :_reduce_255,
  1, 166, :_reduce_256,
  1, 166, :_reduce_257,
  4, 136, :_reduce_258,
  1, 101, :_reduce_none,
  4, 101, :_reduce_260 ]

racc_reduce_n = 261

racc_shift_n = 437

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68,
  :MODULO => 69,
  :PIPE => 70,
  :LAMBDA => 71 }

racc_nt_base = 72

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "MODULO",
  "PIPE",
  "LAMBDA",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "unlessstatement",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "call_method_with_lambda",
  "keyword",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "expressions",
  "funcvalues",
  "call_method",
  "lambda",
  "named_access",
  "named_access_lval",
  "funcrvalue",
  "lambda_parameter_list",
  "statements_or_expression",
  "expression",
  "nothing",
  "arguments",
  "endcomma",
  "rvalue",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "param_name",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 37)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 40)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 49)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'grammar.ra', 74)
  def _reduce_21(val, _values, result)
     result = val[0] ; val[0].ignore_rvalue 
    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'grammar.ra', 94)
  def _reduce_37(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 97)
  def _reduce_38(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

module_eval(<<'.,.,', 'grammar.ra', 112)
  def _reduce_51(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 119)
  def _reduce_52(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 125)
  def _reduce_53(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 132)
  def _reduce_54(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 141)
  def _reduce_55(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 142)
  def _reduce_56(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 145)
  def _reduce_57(val, _values, result)
     result = ast AST::MethodCall, val[0].merge(:arguments => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 146)
  def _reduce_58(val, _values, result)
     result = ast AST::MethodCall, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 147)
  def _reduce_59(val, _values, result)
     result = ast AST::MethodCall, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 150)
  def _reduce_60(val, _values, result)
     result = {:receiver => val[0], :name => val[2][:value], :line => val[1][:line]} 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'grammar.ra', 166)
  def _reduce_67(val, _values, result)
          result = ast AST::Lambda, 
        :parameters => val[1],
        :expressions => val[2],
        :line => val[0][:line]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 172)
  def _reduce_68(val, _values, result)
          result = ast AST::Lambda, 
        :parameters => val[1],
        :line => val[0][:line]
    
    result
  end
.,.,

# reduce 69 omitted

module_eval(<<'.,.,', 'grammar.ra', 184)
  def _reduce_70(val, _values, result)
    result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 188)
  def _reduce_71(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 189)
  def _reduce_72(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 192)
  def _reduce_73(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 195)
  def _reduce_74(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 199)
  def _reduce_75(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 200)
  def _reduce_76(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

module_eval(<<'.,.,', 'grammar.ra', 215)
  def _reduce_88(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 218)
  def _reduce_89(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 221)
  def _reduce_90(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 228)
  def _reduce_91(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 235)
  def _reduce_92(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 251)
  def _reduce_93(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 252)
  def _reduce_94(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 257)
  def _reduce_95(val, _values, result)
      @lexer.commentpop
  type = val[0].value.downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 275)
  def _reduce_96(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 293)
  def _reduce_97(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 301)
  def _reduce_98(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 99 omitted

# reduce 100 omitted

module_eval(<<'.,.,', 'grammar.ra', 314)
  def _reduce_101(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 102 omitted

module_eval(<<'.,.,', 'grammar.ra', 319)
  def _reduce_103(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 323)
  def _reduce_104(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 324)
  def _reduce_105(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 327)
  def _reduce_106(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 332)
  def _reduce_107(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 108 omitted

# reduce 109 omitted

module_eval(<<'.,.,', 'grammar.ra', 341)
  def _reduce_110(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 344)
  def _reduce_111(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 346)
  def _reduce_112(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 113 omitted

# reduce 114 omitted

module_eval(<<'.,.,', 'grammar.ra', 354)
  def _reduce_115(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 358)
  def _reduce_116(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 362)
  def _reduce_117(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

module_eval(<<'.,.,', 'grammar.ra', 374)
  def _reduce_125(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 380)
  def _reduce_126(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 384)
  def _reduce_127(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 390)
  def _reduce_128(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 392)
  def _reduce_129(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 394)
  def _reduce_130(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

module_eval(<<'.,.,', 'grammar.ra', 403)
  def _reduce_134(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 407)
  def _reduce_135(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 136 omitted

# reduce 137 omitted

module_eval(<<'.,.,', 'grammar.ra', 416)
  def _reduce_138(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 418)
  def _reduce_139(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 420)
  def _reduce_140(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 426)
  def _reduce_141(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 431)
  def _reduce_142(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 437)
  def _reduce_143(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 438)
  def _reduce_144(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 440)
  def _reduce_145(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 442)
  def _reduce_146(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 443)
  def _reduce_147(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 446)
  def _reduce_148(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 450)
  def _reduce_149(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 453)
  def _reduce_150(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 457)
  def _reduce_151(val, _values, result)
      @lexer.commentpop
  args = {
    :test => ast(AST::Not, :value => val[1]),
    :statements => val[3]
  }

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 466)
  def _reduce_152(val, _values, result)
        @lexer.commentpop
    args = {
      :test => ast(AST::Not, :value => val[1]), 
      :statements => ast(AST::Nop)
    }
    result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 475)
  def _reduce_153(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 479)
  def _reduce_154(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 490)
  def _reduce_155(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 156 omitted

module_eval(<<'.,.,', 'grammar.ra', 503)
  def _reduce_157(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 506)
  def _reduce_158(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 510)
  def _reduce_159(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 160 omitted

# reduce 161 omitted

module_eval(<<'.,.,', 'grammar.ra', 529)
  def _reduce_162(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 532)
  def _reduce_163(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 535)
  def _reduce_164(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 538)
  def _reduce_165(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 541)
  def _reduce_166(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 544)
  def _reduce_167(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 547)
  def _reduce_168(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 550)
  def _reduce_169(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 553)
  def _reduce_170(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 556)
  def _reduce_171(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 559)
  def _reduce_172(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 562)
  def _reduce_173(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 565)
  def _reduce_174(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 568)
  def _reduce_175(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 571)
  def _reduce_176(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 574)
  def _reduce_177(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 577)
  def _reduce_178(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 580)
  def _reduce_179(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 583)
  def _reduce_180(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 586)
  def _reduce_181(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 589)
  def _reduce_182(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 591)
  def _reduce_183(val, _values, result)
        result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 596)
  def _reduce_184(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 600)
  def _reduce_185(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 602)
  def _reduce_186(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 607)
  def _reduce_187(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 610)
  def _reduce_188(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 620)
  def _reduce_189(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 622)
  def _reduce_190(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 627)
  def _reduce_191(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 192 omitted

module_eval(<<'.,.,', 'grammar.ra', 632)
  def _reduce_193(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 194 omitted

module_eval(<<'.,.,', 'grammar.ra', 638)
  def _reduce_195(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 647)
  def _reduce_196(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

module_eval(<<'.,.,', 'grammar.ra', 659)
  def _reduce_205(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 206 omitted

module_eval(<<'.,.,', 'grammar.ra', 664)
  def _reduce_207(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 208 omitted

module_eval(<<'.,.,', 'grammar.ra', 666)
  def _reduce_209(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 669)
  def _reduce_210(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 679)
  def _reduce_211(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 687)
  def _reduce_212(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 695)
  def _reduce_213(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 702)
  def _reduce_214(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 711)
  def _reduce_215(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 716)
  def _reduce_216(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 720)
  def _reduce_217(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 721)
  def _reduce_218(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 726)
  def _reduce_219(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 729)
  def _reduce_220(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 734)
  def _reduce_221(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 737)
  def _reduce_222(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 738)
  def _reduce_223(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 739)
  def _reduce_224(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 225 omitted

module_eval(<<'.,.,', 'grammar.ra', 743)
  def _reduce_226(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 747)
  def _reduce_227(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 228 omitted

module_eval(<<'.,.,', 'grammar.ra', 752)
  def _reduce_229(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 755)
  def _reduce_230(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 231 omitted

module_eval(<<'.,.,', 'grammar.ra', 761)
  def _reduce_232(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 767)
  def _reduce_233(val, _values, result)
     result = [val[0][:value], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 768)
  def _reduce_234(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 235 omitted

module_eval(<<'.,.,', 'grammar.ra', 772)
  def _reduce_236(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 237 omitted

module_eval(<<'.,.,', 'grammar.ra', 777)
  def _reduce_238(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 239 omitted

# reduce 240 omitted

module_eval(<<'.,.,', 'grammar.ra', 783)
  def _reduce_241(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 786)
  def _reduce_242(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 787)
  def _reduce_243(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 788)
  def _reduce_244(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

module_eval(<<'.,.,', 'grammar.ra', 794)
  def _reduce_248(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 797)
  def _reduce_249(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 801)
  def _reduce_250(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 808)
  def _reduce_251(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 814)
  def _reduce_252(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 253 omitted

module_eval(<<'.,.,', 'grammar.ra', 819)
  def _reduce_254(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 828)
  def _reduce_255(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 831)
  def _reduce_256(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 832)
  def _reduce_257(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 835)
  def _reduce_258(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 259 omitted

module_eval(<<'.,.,', 'grammar.ra', 840)
  def _reduce_260(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
