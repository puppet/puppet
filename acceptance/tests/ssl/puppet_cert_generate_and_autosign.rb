test_name "Puppet cert generate does not clash with autosigning (#6112)" do

  def clean_cert(agent, cn)
    on(agent, puppet('cert', 'clean', cn))
    assert_match(/remov.*Certificate.*#{cn}/i, stdout, "Should see a log message that certificate request was removed.")
    on(agent, puppet('cert', 'list', '--all'))
    assert_no_match(/#{cn}/, stdout, "Should not see certificate in list anymore.")
  end

  def generate_and_clean_cert(agent, cn, autosign)
    on(agent, puppet('cert', 'generate', cn, '--autosign', autosign))
    assert_no_match(/Could not find certificate request for.*cert\.test/i, stderr, "Should not see an error message for a missing certificate request.")
    clean_cert(agent, cn)
  end

  # Attempting to generate a cert on an agent which is not also the CA.
  # Talking with Nick Fagerlund, this behavior is unspecified, although it should
  # not result in a certificate.
  #
  # Currently it does fail with the error below about "certificate retrieved
  # from master does not match the agent's private key."  Nick's hypothesized
  # that this is occurs because the agent attempts to set up a CA, generates a
  # public/private key pair for this new CA, but through indirection retrieves
  # the existing CA cert from the master, and then fails to validate it against
  # the agent's new CA key pair (the master's CA cert having been signed by the
  # master's keys...).  Tracing execution this does seem to be precisely what
  # happens.
  #
  # So the end result is that no cert is generated by the agent, which is
  # probably good, but this not being prevented in any clearly explicit way.
  def fail_to_generate_cert_on_agent_that_is_not_ca(host, cn, autosign)
    on(host, puppet('cert', 'generate', cn, '--autosign', autosign), :acceptable_exit_codes => [23])
    assert_match(/Error: The certificate retrieved from the master does not match the agent's private key./, stderr, "Should not be able to generate a certificate on an agent that is not also the CA, with autosign false.")
  end

  def generate_and_clean_cert_with_dns_alt_names(host, cn, autosign)
    on(host, puppet('cert', 'generate', cn, '--autosign', autosign, '--dns_alt_names', 'foo,bar'))
    on(master, puppet('cert', 'list', '--all'))
    assert_match(/cert.test.*DNS:foo/, stdout, "Should find a dns entry for 'foo' in the cert.test listing.")
    assert_match(/cert.test.*DNS:bar/, stdout, "Should find a dns entry for 'bar' in the cert.test listing.")
    clean_cert(host, cn)
  end

  # @return true if the passed host operates in a master role.
  def host_is_master?(host)
    host['roles'].include?('master')
  end

  cn = "cert.test"

  # User story:
  # A root user on the puppet master has a configuration where autosigning is
  # explicitly false.  They run 'puppet cert generate foo.bar' for a new
  # certificate and expect a certificate to be generated and signed because they
  # are the root CA, and autosigning should not effect this.
  step "puppet cert generate with autosign false"

  hosts.each do |host|
    if host_is_master?(host)
      generate_and_clean_cert(host, cn, false)
    else
      fail_to_generate_cert_on_agent_that_is_not_ca(host, cn, false)
    end
  end

  # User story:
  # A root user on the puppet master has a configuration where autosigning is
  # explicitly true.  They run 'puppet cert generate foo.bar' for a new
  # certificate and expect a certificate to be generated and signed without
  # interference from the autosigning setting.  (This succeedes in 3.2.2 and
  # earlier but produces an extraneous error message per #6112 because there are
  # two attempts to sign the CSR, only the first of which succedes due to the CSR
  # already haveing been signed and removed.)
  step "puppet cert generate with autosign true"

  hosts.each do |host|
    if host_is_master?(host)
      generate_and_clean_cert(host, cn, true)
    else
      fail_to_generate_cert_on_agent_that_is_not_ca(host, cn, true)
    end
  end

  # This steps are documenting the current behavior with regard to --dns_alt_names
  # flags submitted on the command line with a puppet cert generate.
  step "puppet cert generate with autosign false and dns_alt_names"

  hosts.each do |host|
    if host_is_master?(host)
      generate_and_clean_cert_with_dns_alt_names(host, cn, false)
    else
      fail_to_generate_cert_on_agent_that_is_not_ca(host, cn, false)
    end
  end

  step "puppet cert generate with autosign true and dns_alt_names"
  hosts.each do |host|
    if host_is_master?(host)
      generate_and_clean_cert_with_dns_alt_names(host, cn, false)
    else
      fail_to_generate_cert_on_agent_that_is_not_ca(host, cn, false)
    end
  end

end
