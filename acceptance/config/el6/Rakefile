require 'rake/clean'
require 'pp'

REPO_CONFIGS_DIR = "repo-configs"
CLEAN.include('*.tar', REPO_CONFIGS_DIR, 'merged_options.rb')

module HarnessOptions

  DEFAULTS = {
    :type => 'git',
    :helper => ['../../lib/helper.rb'],
    :tests  => ['../../tests'],
    :debug => true,
    :color => false,
    :root_keys => true,
    :ssh => {
      :keys => ["id_rsa-acceptance"],
    },
  }

  class Aggregator
    attr_reader :mode

    def initialize(mode)
      @mode = mode
    end

    def get_options(file_path)
      puts file_path
      if File.exists? file_path
        options = eval(File.read(file_path), binding)
      else
        puts "No options file found at #{File.expand_path(file_path)}"
      end
      options || {}
    end

    def get_mode_options
      get_options("./config/#{mode}/options.rb")
    end

    def get_local_options
      get_options("./local_options.rb")
    end

    def final_options(intermediary_options = {})
      mode_options = get_mode_options
      local_overrides = get_local_options
      final_options = DEFAULTS.merge(mode_options)
      final_options.merge!(intermediary_options)
      final_options.merge!(local_overrides)
      return final_options
    end
  end

  def self.options(mode, options)
    final_options = Aggregator.new(mode).final_options(options)
    final_options
  end
end

def beaker_test(mode = :packages, options = {})
  final_options = HarnessOptions.options(mode, options)

  if mode == :git
    puppet_fork = ENV['FORK'] || 'puppetlabs'
    final_options[:install] << "git://github.com/#{puppet_fork}/puppet.git##{sha}"
  end

  options_file = 'merged_options.rb'
  File.open(options_file, 'w') do |merged|
    merged.puts <<-EOS
# Copy this file to local_options.rb and adjust as needed if you wish to run
# with some local overrides.
EOS
    merged.puts(final_options.pretty_inspect)
  end

  overriding_options = (ENV['OPTIONS'])

  tests = ENV['TEST']
  tests = "--tests #{tests}" if tests

  config_opt = "--hosts #{config}" if config

  preserve_config = options.key?(:preserve_hosts) || overriding_options =~ /--preserve-hosts/

  begin
    sh "beaker --options-file #{options_file} #{config_opt} #{tests} #{overriding_options}"
  ensure
    generate_config_for_latest_hosts
    sh "mv #{options_file} log/latest"
  end
end

def generate_config_for_latest_hosts
  nodes = { :master => {}, :agent => {} }
  File.open('log/latest/config.yml', 'r') do |file|
    config_yml = file.read
    config_yml =~ /master:.*?platform: ([\w-]+)\s*$/m
    nodes[:master][:platform] = $1
    config_yml =~ /agent:.*?platform: ([\w-]+)\s*$/m
    nodes[:agent][:platform] = $1
  end
  File.open('log/latest/pre-suite-run.log', 'r') do |log_file|
    while nodes.values.detect { |h| h[:hostname].nil? }
      if log_file.readline =~ /^(\w+) \((master|agent)\)/
        nodes[$2.to_sym][:hostname] = $1
      end
      return if log_file.eof?
    end
  end
  pp nodes
  File.open('log/latest/preserved_config.yaml', 'w') do |config_file|
    config_file.puts <<-EOF
HOSTS:
  #{nodes[:master][:hostname]}.delivery.puppetlabs.net:
    roles:
      - master
      - agent
    platform: #{nodes[:master][:platform]}
  #{nodes[:agent][:hostname]}.delivery.puppetlabs.net:
    roles:
      - agent
    platform: #{nodes[:agent][:platform]}
    EOF
  end
rescue Errno::ENOENT => e
  puts "Couldn't generate log #{e}"
end

def list_preserved_configurations
  require 'yaml'
  preserved = {}
  Dir.glob('log/*_*').each do |dir|
    preserved_config_path = "#{dir}/preserved_config.yaml"
    yesterday = Time.now - 24 * 60 * 60
    if preserved_config = File.exists?(preserved_config_path)
      directory = File.new(dir)
      if directory.ctime > yesterday
        hosts = []
        preserved_config = YAML.load_file(preserved_config_path).to_hash
        preserved_config['HOSTS'].each do |hostname,values|
          hosts << "#{hostname}: #{values['platform']}, #{values['roles']}"
        end
        preserved[hosts] = directory.to_path
      end
    end
  end
  preserved.map { |k,v| [v,k] }.sort { |a,b| a[0] <=> b[0] }.reverse
end

def print_preserved(preserved)
  preserved.each_with_index do |entry,i|
    puts "##{i}: #{entry[0]}"
    entry[1].each { |h| puts "  #{h}" }
  end
end

def beaker_run_type
  type = ENV['TYPE'] || :packages
  type = type.to_sym
end

def sha
  ENV['SHA']
end

def config
  ENV['CONFIG']
end

namespace :ci do

  task :check_env do
    raise(USAGE) unless sha
  end

  namespace :test do

    USAGE = <<-EOS
Requires commit SHA to be put under test as environment variable: SHA='<sha>'.
Also must set CONFIG=config/nodes/foo.yaml or include it in an options.rb for Beaker.
You may set TESTS=path/to/test,and/more/tests.
You may set additional Beaker OPTIONS='--more --options'
If testing from git checkouts, you may optional set the github fork to checkout from using FORK='other-puppet-fork'.
A beaker options hash in ./local_options.rb will be included, with online commandline options set through the above environment variables overriding.
EOS


    desc <<-EOS
Run the acceptance tests through Beaker and install packages on the configuration targets.
#{USAGE}
EOS
    task :packages => 'ci:check_env' do
      beaker_test
    end

    desc <<-EOS
Run the acceptance tests through Beaker and install from git on the configuration targets.
#{USAGE}
EOS
    task :git => 'ci:check_env' do
      beaker_test(:git)
    end
  end

  desc "Capture the master and agent hostname from the latest log and construct a preserved_config.yaml for re-running against preserved hosts without provisioning."
  task :extract_preserved_config do
    generate_config_for_latest_hosts
  end

  desc <<-EOS
Run an acceptance test for a given node configuration and preserve the hosts.
Defaults to a packages run, but you can set it to 'git' with TYPE='git'.
#{USAGE}
  EOS
  task :test_and_preserve_hosts => 'ci:check_env'  do
    beaker_test(beaker_run_type, :preserve_hosts => true)
  end

  desc "List acceptance runs from the past day which had hosts preserved."
  task :list_preserved do
    preserved = list_preserved_configurations
    print_preserved(preserved)
  end

  desc <<-EOS
Rerun an acceptance test using the last captured preserved_config.yaml to skip provisioning.
Or specify a CONFIG_NUMBER from `rake ci:list_preserved`.
Uses the setup/rsync/pre-suite to rsync the local puppet source onto master and agent.
You may specify an RSYNC_FILTER_FILE as well.
You may skip purgeing and reinstalling puppet packages by including SKIP_PACKAGE_REINSTALL.
You may skip rsyncing local puppet files over to the tests hosts by including SKIP_RSYNC.
Defaults to a packages run, but you can set it to 'git' with TYPE='git'.
  EOS
  task :test_against_preserved_hosts do
    config_number = ENV['CONFIG_NUMBER'] || 0
    preserved = list_preserved_configurations
    print_preserved(preserved)
    config_path = preserved[config_number][0]
    puts "Using ##{config_number}: #{config_path}"
    beaker_test(beaker_run_type,
      :hosts_file => "#{config_path}/preserved_config.yaml",
      :no_provision => true,
      :preserve_hosts => true,
      :pre_suite => ['setup/rsync/pre-suite']
    )
  end
end

namespace :standalone do
  desc "Bring up the vagrant environment.  Includes pre-puppet environment packages installation and cross node networking support (/etc/hosts munging)"
  task :up do
    sh "vagrant up"
  end

  desc "Completely destroy the vagrant instances."
  task :clean do
    sh "vagrant destroy -f"
  end

  task :ensure_good_private_key do
    sh "chmod 600 acceptance.priv"
  end

  desc "Bring up vagrant boxes and run the tests through the puppet-acceptance beaker harness.  Specify TEST='../../tests/foo' to customize which tests are to be run, and/or OPTIONS='bar' to pass options to beaker."
  task :test => [:up, :ensure_good_private_key] do
    beaker_test(:git,
      :ssh => {
        :keys => ['acceptance.priv'],
      },
      :install => [
        'git://github.com/puppetlabs/facter.git#stable',
        'git://github.com/puppetlabs/hiera.git#stable',
        'file:///vagrant-puppet',
      ]
    )
  end
end

task :default do
  sh('rake -T')
end
